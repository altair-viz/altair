# This file auto-generated by `generate_schema_interface.py`.
# Do not modify this file directly.

import traitlets as T
from ..baseobject import BaseObject


class ScaleConfig(BaseObject):
    """Wrapper for Vega-Lite ScaleConfig definition.
    
    Attributes
    ----------
    bandSize: CFloat
        Default band size for (1) `y` ordinal scale,

and (2) `x` ordinal scale when the mark is not `text`.
    barSizeRange: List(CFloat)
        Default range for bar size scale.
    fontSizeRange: List(CFloat)
        Default range for font size scale.
    includeRawDomain: Bool
        
    nominalColorRange: Union(Unicode, List(Unicode))
        Default range for nominal color scale.
    padding: CFloat
        Default padding for `x` and `y` ordinal scales.
    pointSizeRange: List(CFloat)
        Default range for bar size scale.
    round: Bool
        If true, rounds numeric output values to integers.
    sequentialColorRange: Union(Unicode, List(Unicode))
        Default range for ordinal / continuous color scale.
    shapeRange: Union(Unicode, List(Unicode))
        Default range for shape.
    textBandWidth: CFloat
        Default band width for `x` ordinal scale when is mark is `text`.
    """
    bandSize = T.CFloat(allow_none=True, default_value=None, min=0, help="""Default band size for (1) `y` ordinal scale,

and (2) `x` ordinal scale when the mark is not `text`.""")
    barSizeRange = T.List(T.CFloat(allow_none=True, default_value=None), allow_none=True, default_value=None, help="""Default range for bar size scale.""")
    fontSizeRange = T.List(T.CFloat(allow_none=True, default_value=None), allow_none=True, default_value=None, help="""Default range for font size scale.""")
    includeRawDomain = T.Bool(allow_none=True, default_value=None)
    nominalColorRange = T.Union([T.Unicode(allow_none=True, default_value=None), T.List(T.Unicode(allow_none=True, default_value=None), allow_none=True, default_value=None)])
    padding = T.CFloat(allow_none=True, default_value=None, help="""Default padding for `x` and `y` ordinal scales.""")
    pointSizeRange = T.List(T.CFloat(allow_none=True, default_value=None), allow_none=True, default_value=None, help="""Default range for bar size scale.""")
    round = T.Bool(allow_none=True, default_value=None, help="""If true, rounds numeric output values to integers.""")
    sequentialColorRange = T.Union([T.Unicode(allow_none=True, default_value=None), T.List(T.Unicode(allow_none=True, default_value=None), allow_none=True, default_value=None)])
    shapeRange = T.Union([T.Unicode(allow_none=True, default_value=None), T.List(T.Unicode(allow_none=True, default_value=None), allow_none=True, default_value=None)])
    textBandWidth = T.CFloat(allow_none=True, default_value=None, min=0, help="""Default band width for `x` ordinal scale when is mark is `text`.""")
    
    def __init__(self, bandSize=None, barSizeRange=None, fontSizeRange=None, includeRawDomain=None, nominalColorRange=None, padding=None, pointSizeRange=None, round=None, sequentialColorRange=None, shapeRange=None, textBandWidth=None, **kwargs):
        kwds = dict(bandSize=bandSize, barSizeRange=barSizeRange, fontSizeRange=fontSizeRange, includeRawDomain=includeRawDomain, nominalColorRange=nominalColorRange, padding=padding, pointSizeRange=pointSizeRange, round=round, sequentialColorRange=sequentialColorRange, shapeRange=shapeRange, textBandWidth=textBandWidth)
        kwargs.update({k:v for k, v in kwds.items() if v is not None})
        super(ScaleConfig, self).__init__(**kwargs)