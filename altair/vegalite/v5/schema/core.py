# The contents of this file are automatically written by
# tools/generate_schema_wrapper.py. Do not modify directly.

from typing import Any, List, Literal, Union, Protocol
from typing import Dict as TypingDict

from altair.utils.schemapi import SchemaBase, Undefined, UndefinedType, _subclasses

import pkgutil
import json


def load_schema():
    """Load the json schema associated with this module's functions"""
    return json.loads(
        pkgutil.get_data(__name__, "vega-lite-schema.json").decode("utf-8")
    )


class _ParameterProtocol(Protocol):
    # This protocol represents a Parameter as defined in api.py
    # It would be better if we could directly use the Parameter class,
    # but that would create a circular import.
    # The protocol does not need to have all the attributes and methods of this
    # class but a Parameter needs to pass a type check as a ParameterProtocol.

    _counter: int

    def _get_name(cls) -> str:
        ...

    def to_dict(self) -> TypingDict[str, Union[str, dict]]:
        ...

    def _to_expr(self) -> str:
        ...


class VegaLiteSchema(SchemaBase):
    _rootschema = load_schema()

    @classmethod
    def _default_wrapper_classes(cls):
        return _subclasses(VegaLiteSchema)


class Root(VegaLiteSchema):
    """Root schema wrapper

    Union[:class:`TopLevelSpec`, Union[:class:`TopLevelConcatSpec`, Dict[required=[concat]]],
    Union[:class:`TopLevelFacetSpec`, Dict[required=[data, facet, spec]]],
    Union[:class:`TopLevelHConcatSpec`, Dict[required=[hconcat]]],
    Union[:class:`TopLevelLayerSpec`, Dict[required=[layer]]],
    Union[:class:`TopLevelRepeatSpec`, Dict[required=[repeat, spec]]],
    Union[:class:`TopLevelUnitSpec`, Dict[required=[data, mark]]],
    Union[:class:`TopLevelVConcatSpec`, Dict[required=[vconcat]]]]
    A Vega-Lite top-level specification. This is the root class for all Vega-Lite
    specifications. (The json schema is generated from this type.)
    """

    _schema = VegaLiteSchema._rootschema

    def __init__(self, *args, **kwds):
        super(Root, self).__init__(*args, **kwds)


class Aggregate(VegaLiteSchema):
    """Aggregate schema wrapper

    Union[:class:`Aggregate`, Union[:class:`ArgmaxDef`, Dict[required=[argmax]]],
    Union[:class:`ArgminDef`, Dict[required=[argmin]]], Union[:class:`NonArgAggregateOp`,
    Literal['average', 'count', 'distinct', 'max', 'mean', 'median', 'min', 'missing',
    'product', 'q1', 'q3', 'ci0', 'ci1', 'stderr', 'stdev', 'stdevp', 'sum', 'valid', 'values',
    'variance', 'variancep']]]
    """

    _schema = {"$ref": "#/definitions/Aggregate"}

    def __init__(self, *args, **kwds):
        super(Aggregate, self).__init__(*args, **kwds)


class AggregateOp(VegaLiteSchema):
    """AggregateOp schema wrapper

    Union[:class:`AggregateOp`, Literal['argmax', 'argmin', 'average', 'count', 'distinct',
    'max', 'mean', 'median', 'min', 'missing', 'product', 'q1', 'q3', 'ci0', 'ci1', 'stderr',
    'stdev', 'stdevp', 'sum', 'valid', 'values', 'variance', 'variancep']]
    """

    _schema = {"$ref": "#/definitions/AggregateOp"}

    def __init__(self, *args):
        super(AggregateOp, self).__init__(*args)


class AggregatedFieldDef(VegaLiteSchema):
    """AggregatedFieldDef schema wrapper

    Union[:class:`AggregatedFieldDef`, Dict[required=[op, as]]]

    Parameters
    ----------

    op : Union[:class:`AggregateOp`, Literal['argmax', 'argmin', 'average', 'count', 'distinct', 'max', 'mean', 'median', 'min', 'missing', 'product', 'q1', 'q3', 'ci0', 'ci1', 'stderr', 'stdev', 'stdevp', 'sum', 'valid', 'values', 'variance', 'variancep']]
        The aggregation operation to apply to the fields (e.g., ``"sum"``, ``"average"``, or
        ``"count"`` ). See the `full list of supported aggregation operations
        <https://vega.github.io/vega-lite/docs/aggregate.html#ops>`__ for more information.
    field : Union[:class:`FieldName`, str]
        The data field for which to compute aggregate function. This is required for all
        aggregation operations except ``"count"``.
    as : Union[:class:`FieldName`, str]
        The output field names to use for each aggregated field.
    """

    _schema = {"$ref": "#/definitions/AggregatedFieldDef"}

    def __init__(
        self,
        op: Union[
            Union[
                "AggregateOp",
                Literal[
                    "argmax",
                    "argmin",
                    "average",
                    "count",
                    "distinct",
                    "max",
                    "mean",
                    "median",
                    "min",
                    "missing",
                    "product",
                    "q1",
                    "q3",
                    "ci0",
                    "ci1",
                    "stderr",
                    "stdev",
                    "stdevp",
                    "sum",
                    "valid",
                    "values",
                    "variance",
                    "variancep",
                ],
            ],
            UndefinedType,
        ] = Undefined,
        field: Union[Union["FieldName", str], UndefinedType] = Undefined,
        **kwds
    ):
        super(AggregatedFieldDef, self).__init__(op=op, field=field, **kwds)


class Align(VegaLiteSchema):
    """Align schema wrapper

    Union[:class:`Align`, Literal['left', 'center', 'right']]
    """

    _schema = {"$ref": "#/definitions/Align"}

    def __init__(self, *args):
        super(Align, self).__init__(*args)


class AnyMark(VegaLiteSchema):
    """AnyMark schema wrapper

    Union[:class:`AnyMark`, Union[:class:`CompositeMarkDef`, Union[:class:`BoxPlotDef`,
    Dict[required=[type]]], Union[:class:`ErrorBandDef`, Dict[required=[type]]],
    Union[:class:`ErrorBarDef`, Dict[required=[type]]]], Union[:class:`CompositeMark`,
    Union[:class:`BoxPlot`, str], Union[:class:`ErrorBand`, str], Union[:class:`ErrorBar`,
    str]], Union[:class:`MarkDef`, Dict[required=[type]]], Union[:class:`Mark`, Literal['arc',
    'area', 'bar', 'image', 'line', 'point', 'rect', 'rule', 'text', 'tick', 'trail', 'circle',
    'square', 'geoshape']]]
    """

    _schema = {"$ref": "#/definitions/AnyMark"}

    def __init__(self, *args, **kwds):
        super(AnyMark, self).__init__(*args, **kwds)


class AnyMarkConfig(VegaLiteSchema):
    """AnyMarkConfig schema wrapper

    Union[:class:`AnyMarkConfig`, Union[:class:`AreaConfig`, Dict[required=[]]],
    Union[:class:`BarConfig`, Dict[required=[]]], Union[:class:`LineConfig`, Dict[required=[]]],
    Union[:class:`MarkConfig`, Dict[required=[]]], Union[:class:`RectConfig`,
    Dict[required=[]]], Union[:class:`TickConfig`, Dict[required=[]]]]
    """

    _schema = {"$ref": "#/definitions/AnyMarkConfig"}

    def __init__(self, *args, **kwds):
        super(AnyMarkConfig, self).__init__(*args, **kwds)


class AreaConfig(AnyMarkConfig):
    """AreaConfig schema wrapper

    Union[:class:`AreaConfig`, Dict[required=[]]]

    Parameters
    ----------

    align : Union[Union[:class:`Align`, Literal['left', 'center', 'right']], Union[:class:`ExprRef`, Dict[required=[expr]]]]
        The horizontal alignment of the text or ranged marks (area, bar, image, rect, rule).
        One of ``"left"``, ``"right"``, ``"center"``.

        **Note:** Expression reference is *not* supported for range marks.
    angle : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], float]
        The rotation angle of the text, in degrees.
    aria : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], bool]
        A boolean flag indicating if `ARIA attributes
        <https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA>`__ should be
        included (SVG output only). If ``false``, the "aria-hidden" attribute will be set on
        the output SVG element, removing the mark item from the ARIA accessibility tree.
    ariaRole : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], str]
        Sets the type of user interface element of the mark item for `ARIA accessibility
        <https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA>`__ (SVG output
        only). If specified, this property determines the "role" attribute. Warning: this
        property is experimental and may be changed in the future.
    ariaRoleDescription : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], str]
        A human-readable, author-localized description for the role of the mark item for
        `ARIA accessibility
        <https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA>`__ (SVG output
        only). If specified, this property determines the "aria-roledescription" attribute.
        Warning: this property is experimental and may be changed in the future.
    aspect : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], bool]
        Whether to keep aspect ratio of image marks.
    baseline : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], Union[:class:`TextBaseline`, Union[:class:`Baseline`, Literal['top', 'middle', 'bottom']], str]]
        For text marks, the vertical text baseline. One of ``"alphabetic"`` (default),
        ``"top"``, ``"middle"``, ``"bottom"``, ``"line-top"``, ``"line-bottom"``, or an
        expression reference that provides one of the valid values. The ``"line-top"`` and
        ``"line-bottom"`` values operate similarly to ``"top"`` and ``"bottom"``, but are
        calculated relative to the ``lineHeight`` rather than ``fontSize`` alone.

        For range marks, the vertical alignment of the marks. One of ``"top"``,
        ``"middle"``, ``"bottom"``.

        **Note:** Expression reference is *not* supported for range marks.
    blend : Union[Union[:class:`Blend`, Literal[None, 'multiply', 'screen', 'overlay', 'darken', 'lighten', 'color-dodge', 'color-burn', 'hard-light', 'soft-light', 'difference', 'exclusion', 'hue', 'saturation', 'color', 'luminosity']], Union[:class:`ExprRef`, Dict[required=[expr]]]]
        The color blend mode for drawing an item on its current background. Any valid `CSS
        mix-blend-mode <https://developer.mozilla.org/en-US/docs/Web/CSS/mix-blend-mode>`__
        value can be used.

        __Default value:__ ``"source-over"``
    color : Union[Union[:class:`Color`, Union[:class:`ColorName`, Literal['black', 'silver', 'gray', 'white', 'maroon', 'red', 'purple', 'fuchsia', 'green', 'lime', 'olive', 'yellow', 'navy', 'blue', 'teal', 'aqua', 'orange', 'aliceblue', 'antiquewhite', 'aquamarine', 'azure', 'beige', 'bisque', 'blanchedalmond', 'blueviolet', 'brown', 'burlywood', 'cadetblue', 'chartreuse', 'chocolate', 'coral', 'cornflowerblue', 'cornsilk', 'crimson', 'cyan', 'darkblue', 'darkcyan', 'darkgoldenrod', 'darkgray', 'darkgreen', 'darkgrey', 'darkkhaki', 'darkmagenta', 'darkolivegreen', 'darkorange', 'darkorchid', 'darkred', 'darksalmon', 'darkseagreen', 'darkslateblue', 'darkslategray', 'darkslategrey', 'darkturquoise', 'darkviolet', 'deeppink', 'deepskyblue', 'dimgray', 'dimgrey', 'dodgerblue', 'firebrick', 'floralwhite', 'forestgreen', 'gainsboro', 'ghostwhite', 'gold', 'goldenrod', 'greenyellow', 'grey', 'honeydew', 'hotpink', 'indianred', 'indigo', 'ivory', 'khaki', 'lavender', 'lavenderblush', 'lawngreen', 'lemonchiffon', 'lightblue', 'lightcoral', 'lightcyan', 'lightgoldenrodyellow', 'lightgray', 'lightgreen', 'lightgrey', 'lightpink', 'lightsalmon', 'lightseagreen', 'lightskyblue', 'lightslategray', 'lightslategrey', 'lightsteelblue', 'lightyellow', 'limegreen', 'linen', 'magenta', 'mediumaquamarine', 'mediumblue', 'mediumorchid', 'mediumpurple', 'mediumseagreen', 'mediumslateblue', 'mediumspringgreen', 'mediumturquoise', 'mediumvioletred', 'midnightblue', 'mintcream', 'mistyrose', 'moccasin', 'navajowhite', 'oldlace', 'olivedrab', 'orangered', 'orchid', 'palegoldenrod', 'palegreen', 'paleturquoise', 'palevioletred', 'papayawhip', 'peachpuff', 'peru', 'pink', 'plum', 'powderblue', 'rosybrown', 'royalblue', 'saddlebrown', 'salmon', 'sandybrown', 'seagreen', 'seashell', 'sienna', 'skyblue', 'slateblue', 'slategray', 'slategrey', 'snow', 'springgreen', 'steelblue', 'tan', 'thistle', 'tomato', 'turquoise', 'violet', 'wheat', 'whitesmoke', 'yellowgreen', 'rebeccapurple']], Union[:class:`HexColor`, str], str], Union[:class:`ExprRef`, Dict[required=[expr]]], Union[:class:`Gradient`, Union[:class:`LinearGradient`, Dict[required=[gradient, stops]]], Union[:class:`RadialGradient`, Dict[required=[gradient, stops]]]]]
        Default color.

        **Default value:** :raw-html:`<span style="color: #4682b4;">&#9632;</span>`
        ``"#4682b4"``

        **Note:**


        * This property cannot be used in a `style config
          <https://vega.github.io/vega-lite/docs/mark.html#style-config>`__.
        * The ``fill`` and ``stroke`` properties have higher precedence than ``color`` and
          will override ``color``.
    cornerRadius : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], float]
        The radius in pixels of rounded rectangles or arcs' corners.

        **Default value:** ``0``
    cornerRadiusBottomLeft : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], float]
        The radius in pixels of rounded rectangles' bottom left corner.

        **Default value:** ``0``
    cornerRadiusBottomRight : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], float]
        The radius in pixels of rounded rectangles' bottom right corner.

        **Default value:** ``0``
    cornerRadiusTopLeft : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], float]
        The radius in pixels of rounded rectangles' top right corner.

        **Default value:** ``0``
    cornerRadiusTopRight : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], float]
        The radius in pixels of rounded rectangles' top left corner.

        **Default value:** ``0``
    cursor : Union[Union[:class:`Cursor`, Literal['auto', 'default', 'none', 'context-menu', 'help', 'pointer', 'progress', 'wait', 'cell', 'crosshair', 'text', 'vertical-text', 'alias', 'copy', 'move', 'no-drop', 'not-allowed', 'e-resize', 'n-resize', 'ne-resize', 'nw-resize', 's-resize', 'se-resize', 'sw-resize', 'w-resize', 'ew-resize', 'ns-resize', 'nesw-resize', 'nwse-resize', 'col-resize', 'row-resize', 'all-scroll', 'zoom-in', 'zoom-out', 'grab', 'grabbing']], Union[:class:`ExprRef`, Dict[required=[expr]]]]
        The mouse cursor used over the mark. Any valid `CSS cursor type
        <https://developer.mozilla.org/en-US/docs/Web/CSS/cursor#Values>`__ can be used.
    description : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], str]
        A text description of the mark item for `ARIA accessibility
        <https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA>`__ (SVG output
        only). If specified, this property determines the `"aria-label" attribute
        <https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/ARIA_Techniques/Using_the_aria-label_attribute>`__.
    dir : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], Union[:class:`TextDirection`, Literal['ltr', 'rtl']]]
        The direction of the text. One of ``"ltr"`` (left-to-right) or ``"rtl"``
        (right-to-left). This property determines on which side is truncated in response to
        the limit parameter.

        **Default value:** ``"ltr"``
    dx : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], float]
        The horizontal offset, in pixels, between the text label and its anchor point. The
        offset is applied after rotation by the *angle* property.
    dy : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], float]
        The vertical offset, in pixels, between the text label and its anchor point. The
        offset is applied after rotation by the *angle* property.
    ellipsis : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], str]
        The ellipsis string for text truncated in response to the limit parameter.

        **Default value:** ``"…"``
    endAngle : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], float]
        The end angle in radians for arc marks. A value of ``0`` indicates up (north),
        increasing values proceed clockwise.
    fill : Union[None, Union[:class:`Color`, Union[:class:`ColorName`, Literal['black', 'silver', 'gray', 'white', 'maroon', 'red', 'purple', 'fuchsia', 'green', 'lime', 'olive', 'yellow', 'navy', 'blue', 'teal', 'aqua', 'orange', 'aliceblue', 'antiquewhite', 'aquamarine', 'azure', 'beige', 'bisque', 'blanchedalmond', 'blueviolet', 'brown', 'burlywood', 'cadetblue', 'chartreuse', 'chocolate', 'coral', 'cornflowerblue', 'cornsilk', 'crimson', 'cyan', 'darkblue', 'darkcyan', 'darkgoldenrod', 'darkgray', 'darkgreen', 'darkgrey', 'darkkhaki', 'darkmagenta', 'darkolivegreen', 'darkorange', 'darkorchid', 'darkred', 'darksalmon', 'darkseagreen', 'darkslateblue', 'darkslategray', 'darkslategrey', 'darkturquoise', 'darkviolet', 'deeppink', 'deepskyblue', 'dimgray', 'dimgrey', 'dodgerblue', 'firebrick', 'floralwhite', 'forestgreen', 'gainsboro', 'ghostwhite', 'gold', 'goldenrod', 'greenyellow', 'grey', 'honeydew', 'hotpink', 'indianred', 'indigo', 'ivory', 'khaki', 'lavender', 'lavenderblush', 'lawngreen', 'lemonchiffon', 'lightblue', 'lightcoral', 'lightcyan', 'lightgoldenrodyellow', 'lightgray', 'lightgreen', 'lightgrey', 'lightpink', 'lightsalmon', 'lightseagreen', 'lightskyblue', 'lightslategray', 'lightslategrey', 'lightsteelblue', 'lightyellow', 'limegreen', 'linen', 'magenta', 'mediumaquamarine', 'mediumblue', 'mediumorchid', 'mediumpurple', 'mediumseagreen', 'mediumslateblue', 'mediumspringgreen', 'mediumturquoise', 'mediumvioletred', 'midnightblue', 'mintcream', 'mistyrose', 'moccasin', 'navajowhite', 'oldlace', 'olivedrab', 'orangered', 'orchid', 'palegoldenrod', 'palegreen', 'paleturquoise', 'palevioletred', 'papayawhip', 'peachpuff', 'peru', 'pink', 'plum', 'powderblue', 'rosybrown', 'royalblue', 'saddlebrown', 'salmon', 'sandybrown', 'seagreen', 'seashell', 'sienna', 'skyblue', 'slateblue', 'slategray', 'slategrey', 'snow', 'springgreen', 'steelblue', 'tan', 'thistle', 'tomato', 'turquoise', 'violet', 'wheat', 'whitesmoke', 'yellowgreen', 'rebeccapurple']], Union[:class:`HexColor`, str], str], Union[:class:`ExprRef`, Dict[required=[expr]]], Union[:class:`Gradient`, Union[:class:`LinearGradient`, Dict[required=[gradient, stops]]], Union[:class:`RadialGradient`, Dict[required=[gradient, stops]]]]]
        Default fill color. This property has higher precedence than ``config.color``. Set
        to ``null`` to remove fill.

        **Default value:** (None)
    fillOpacity : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], float]
        The fill opacity (value between [0,1]).

        **Default value:** ``1``
    filled : bool
        Whether the mark's color should be used as fill color instead of stroke color.

        **Default value:** ``false`` for all ``point``, ``line``, and ``rule`` marks as well
        as ``geoshape`` marks for `graticule
        <https://vega.github.io/vega-lite/docs/data.html#graticule>`__ data sources;
        otherwise, ``true``.

        **Note:** This property cannot be used in a `style config
        <https://vega.github.io/vega-lite/docs/mark.html#style-config>`__.
    font : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], str]
        The typeface to set the text in (e.g., ``"Helvetica Neue"`` ).
    fontSize : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], float]
        The font size, in pixels.

        **Default value:** ``11``
    fontStyle : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], Union[:class:`FontStyle`, str]]
        The font style (e.g., ``"italic"`` ).
    fontWeight : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], Union[:class:`FontWeight`, Literal['normal', 'bold', 'lighter', 'bolder', 100, 200, 300, 400, 500, 600, 700, 800, 900]]]
        The font weight. This can be either a string (e.g ``"bold"``, ``"normal"`` ) or a
        number ( ``100``, ``200``, ``300``, ..., ``900`` where ``"normal"`` = ``400`` and
        ``"bold"`` = ``700`` ).
    height : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], float]
        Height of the marks.
    href : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], Union[:class:`URI`, str]]
        A URL to load upon mouse click. If defined, the mark acts as a hyperlink.
    innerRadius : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], float]
        The inner radius in pixels of arc marks. ``innerRadius`` is an alias for
        ``radius2``.

        **Default value:** ``0``
    interpolate : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], Union[:class:`Interpolate`, Literal['basis', 'basis-open', 'basis-closed', 'bundle', 'cardinal', 'cardinal-open', 'cardinal-closed', 'catmull-rom', 'linear', 'linear-closed', 'monotone', 'natural', 'step', 'step-before', 'step-after']]]
        The line interpolation method to use for line and area marks. One of the following:


        * ``"linear"`` : piecewise linear segments, as in a polyline.
        * ``"linear-closed"`` : close the linear segments to form a polygon.
        * ``"step"`` : alternate between horizontal and vertical segments, as in a step
          function.
        * ``"step-before"`` : alternate between vertical and horizontal segments, as in a
          step function.
        * ``"step-after"`` : alternate between horizontal and vertical segments, as in a
          step function.
        * ``"basis"`` : a B-spline, with control point duplication on the ends.
        * ``"basis-open"`` : an open B-spline; may not intersect the start or end.
        * ``"basis-closed"`` : a closed B-spline, as in a loop.
        * ``"cardinal"`` : a Cardinal spline, with control point duplication on the ends.
        * ``"cardinal-open"`` : an open Cardinal spline; may not intersect the start or end,
          but will intersect other control points.
        * ``"cardinal-closed"`` : a closed Cardinal spline, as in a loop.
        * ``"bundle"`` : equivalent to basis, except the tension parameter is used to
          straighten the spline.
        * ``"monotone"`` : cubic interpolation that preserves monotonicity in y.
    invalid : Literal['filter', None]
        Defines how Vega-Lite should handle marks for invalid values ( ``null`` and ``NaN``
        ).


        * If set to ``"filter"`` (default), all data items with null values will be skipped
          (for line, trail, and area marks) or filtered (for other marks).
        * If ``null``, all data items are included. In this case, invalid values will be
          interpreted as zeroes.
    limit : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], float]
        The maximum length of the text mark in pixels. The text value will be automatically
        truncated if the rendered size exceeds the limit.

        **Default value:** ``0`` -- indicating no limit
    line : Union[Union[:class:`OverlayMarkDef`, Dict[required=[]]], bool]
        A flag for overlaying line on top of area marks, or an object defining the
        properties of the overlayed lines.


        If this value is an empty object ( ``{}`` ) or ``true``, lines with default
        properties will be used.

        If this value is ``false``, no lines would be automatically added to area marks.

        **Default value:** ``false``.
    lineBreak : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], str]
        A delimiter, such as a newline character, upon which to break text strings into
        multiple lines. This property is ignored if the text is array-valued.
    lineHeight : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], float]
        The line height in pixels (the spacing between subsequent lines of text) for
        multi-line text marks.
    opacity : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], float]
        The overall opacity (value between [0,1]).

        **Default value:** ``0.7`` for non-aggregate plots with ``point``, ``tick``,
        ``circle``, or ``square`` marks or layered ``bar`` charts and ``1`` otherwise.
    order : Union[None, bool]
        For line and trail marks, this ``order`` property can be set to ``null`` or
        ``false`` to make the lines use the original order in the data sources.
    orient : Union[:class:`Orientation`, Literal['horizontal', 'vertical']]
        The orientation of a non-stacked bar, tick, area, and line charts. The value is
        either horizontal (default) or vertical.


        * For bar, rule and tick, this determines whether the size of the bar and tick
          should be applied to x or y dimension.
        * For area, this property determines the orient property of the Vega output.
        * For line and trail marks, this property determines the sort order of the points in
          the line if ``config.sortLineBy`` is not specified. For stacked charts, this is
          always determined by the orientation of the stack; therefore explicitly specified
          value will be ignored.
    outerRadius : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], float]
        The outer radius in pixels of arc marks. ``outerRadius`` is an alias for ``radius``.

        **Default value:** ``0``
    padAngle : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], float]
        The angular padding applied to sides of the arc, in radians.
    point : Union[Union[:class:`OverlayMarkDef`, Dict[required=[]]], bool, str]
        A flag for overlaying points on top of line or area marks, or an object defining the
        properties of the overlayed points.


        If this property is ``"transparent"``, transparent points will be used (for
        enhancing tooltips and selections).

        If this property is an empty object ( ``{}`` ) or ``true``, filled points with
        default properties will be used.

        If this property is ``false``, no points would be automatically added to line or
        area marks.

        **Default value:** ``false``.
    radius : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], float]
        For arc mark, the primary (outer) radius in pixels.

        For text marks, polar coordinate radial offset, in pixels, of the text from the
        origin determined by the ``x`` and ``y`` properties.

        **Default value:** ``min(plot_width, plot_height)/2``
    radius2 : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], float]
        The secondary (inner) radius in pixels of arc marks.

        **Default value:** ``0``
    shape : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], Union[Union[:class:`SymbolShape`, str], str]]
        Shape of the point marks. Supported values include:


        * plotting shapes: ``"circle"``, ``"square"``, ``"cross"``, ``"diamond"``,
          ``"triangle-up"``, ``"triangle-down"``, ``"triangle-right"``, or
          ``"triangle-left"``.
        * the line symbol ``"stroke"``
        * centered directional shapes ``"arrow"``, ``"wedge"``, or ``"triangle"``
        * a custom `SVG path string
          <https://developer.mozilla.org/en-US/docs/Web/SVG/Tutorial/Paths>`__ (For correct
          sizing, custom shape paths should be defined within a square bounding box with
          coordinates ranging from -1 to 1 along both the x and y dimensions.)

        **Default value:** ``"circle"``
    size : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], float]
        Default size for marks.


        * For ``point`` / ``circle`` / ``square``, this represents the pixel area of the
          marks. Note that this value sets the area of the symbol; the side lengths will
          increase with the square root of this value.
        * For ``bar``, this represents the band size of the bar, in pixels.
        * For ``text``, this represents the font size, in pixels.

        **Default value:**


        * ``30`` for point, circle, square marks; width/height's ``step``
        * ``2`` for bar marks with discrete dimensions;
        * ``5`` for bar marks with continuous dimensions;
        * ``11`` for text marks.
    smooth : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], bool]
        A boolean flag (default true) indicating if the image should be smoothed when
        resized. If false, individual pixels should be scaled directly rather than
        interpolated with smoothing. For SVG rendering, this option may not work in some
        browsers due to lack of standardization.
    startAngle : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], float]
        The start angle in radians for arc marks. A value of ``0`` indicates up (north),
        increasing values proceed clockwise.
    stroke : Union[None, Union[:class:`Color`, Union[:class:`ColorName`, Literal['black', 'silver', 'gray', 'white', 'maroon', 'red', 'purple', 'fuchsia', 'green', 'lime', 'olive', 'yellow', 'navy', 'blue', 'teal', 'aqua', 'orange', 'aliceblue', 'antiquewhite', 'aquamarine', 'azure', 'beige', 'bisque', 'blanchedalmond', 'blueviolet', 'brown', 'burlywood', 'cadetblue', 'chartreuse', 'chocolate', 'coral', 'cornflowerblue', 'cornsilk', 'crimson', 'cyan', 'darkblue', 'darkcyan', 'darkgoldenrod', 'darkgray', 'darkgreen', 'darkgrey', 'darkkhaki', 'darkmagenta', 'darkolivegreen', 'darkorange', 'darkorchid', 'darkred', 'darksalmon', 'darkseagreen', 'darkslateblue', 'darkslategray', 'darkslategrey', 'darkturquoise', 'darkviolet', 'deeppink', 'deepskyblue', 'dimgray', 'dimgrey', 'dodgerblue', 'firebrick', 'floralwhite', 'forestgreen', 'gainsboro', 'ghostwhite', 'gold', 'goldenrod', 'greenyellow', 'grey', 'honeydew', 'hotpink', 'indianred', 'indigo', 'ivory', 'khaki', 'lavender', 'lavenderblush', 'lawngreen', 'lemonchiffon', 'lightblue', 'lightcoral', 'lightcyan', 'lightgoldenrodyellow', 'lightgray', 'lightgreen', 'lightgrey', 'lightpink', 'lightsalmon', 'lightseagreen', 'lightskyblue', 'lightslategray', 'lightslategrey', 'lightsteelblue', 'lightyellow', 'limegreen', 'linen', 'magenta', 'mediumaquamarine', 'mediumblue', 'mediumorchid', 'mediumpurple', 'mediumseagreen', 'mediumslateblue', 'mediumspringgreen', 'mediumturquoise', 'mediumvioletred', 'midnightblue', 'mintcream', 'mistyrose', 'moccasin', 'navajowhite', 'oldlace', 'olivedrab', 'orangered', 'orchid', 'palegoldenrod', 'palegreen', 'paleturquoise', 'palevioletred', 'papayawhip', 'peachpuff', 'peru', 'pink', 'plum', 'powderblue', 'rosybrown', 'royalblue', 'saddlebrown', 'salmon', 'sandybrown', 'seagreen', 'seashell', 'sienna', 'skyblue', 'slateblue', 'slategray', 'slategrey', 'snow', 'springgreen', 'steelblue', 'tan', 'thistle', 'tomato', 'turquoise', 'violet', 'wheat', 'whitesmoke', 'yellowgreen', 'rebeccapurple']], Union[:class:`HexColor`, str], str], Union[:class:`ExprRef`, Dict[required=[expr]]], Union[:class:`Gradient`, Union[:class:`LinearGradient`, Dict[required=[gradient, stops]]], Union[:class:`RadialGradient`, Dict[required=[gradient, stops]]]]]
        Default stroke color. This property has higher precedence than ``config.color``. Set
        to ``null`` to remove stroke.

        **Default value:** (None)
    strokeCap : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], Union[:class:`StrokeCap`, Literal['butt', 'round', 'square']]]
        The stroke cap for line ending style. One of ``"butt"``, ``"round"``, or
        ``"square"``.

        **Default value:** ``"butt"``
    strokeDash : Union[List[float], Union[:class:`ExprRef`, Dict[required=[expr]]]]
        An array of alternating stroke, space lengths for creating dashed or dotted lines.
    strokeDashOffset : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], float]
        The offset (in pixels) into which to begin drawing with the stroke dash array.
    strokeJoin : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], Union[:class:`StrokeJoin`, Literal['miter', 'round', 'bevel']]]
        The stroke line join method. One of ``"miter"``, ``"round"`` or ``"bevel"``.

        **Default value:** ``"miter"``
    strokeMiterLimit : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], float]
        The miter limit at which to bevel a line join.
    strokeOffset : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], float]
        The offset in pixels at which to draw the group stroke and fill. If unspecified, the
        default behavior is to dynamically offset stroked groups such that 1 pixel stroke
        widths align with the pixel grid.
    strokeOpacity : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], float]
        The stroke opacity (value between [0,1]).

        **Default value:** ``1``
    strokeWidth : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], float]
        The stroke width, in pixels.
    tension : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], float]
        Depending on the interpolation type, sets the tension parameter (for line and area
        marks).
    text : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], Union[:class:`Text`, List[str], str]]
        Placeholder text if the ``text`` channel is not specified
    theta : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], float]
        For arc marks, the arc length in radians if theta2 is not specified, otherwise the
        start arc angle. (A value of 0 indicates up or “north”, increasing values proceed
        clockwise.)

        For text marks, polar coordinate angle in radians.
    theta2 : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], float]
        The end angle of arc marks in radians. A value of 0 indicates up or “north”,
        increasing values proceed clockwise.
    timeUnitBandPosition : float
        Default relative band position for a time unit. If set to ``0``, the marks will be
        positioned at the beginning of the time unit band step. If set to ``0.5``, the marks
        will be positioned in the middle of the time unit band step.
    timeUnitBandSize : float
        Default relative band size for a time unit. If set to ``1``, the bandwidth of the
        marks will be equal to the time unit band step. If set to ``0.5``, bandwidth of the
        marks will be half of the time unit band step.
    tooltip : Union[None, Union[:class:`ExprRef`, Dict[required=[expr]]], Union[:class:`TooltipContent`, Dict[required=[content]]], bool, float, str]
        The tooltip text string to show upon mouse hover or an object defining which fields
        should the tooltip be derived from.


        * If ``tooltip`` is ``true`` or ``{"content": "encoding"}``, then all fields from
          ``encoding`` will be used.
        * If ``tooltip`` is ``{"content": "data"}``, then all fields that appear in the
          highlighted data point will be used.
        * If set to ``null`` or ``false``, then no tooltip will be used.

        See the `tooltip <https://vega.github.io/vega-lite/docs/tooltip.html>`__
        documentation for a detailed discussion about tooltip  in Vega-Lite.

        **Default value:** ``null``
    url : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], Union[:class:`URI`, str]]
        The URL of the image file for image marks.
    width : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], float]
        Width of the marks.
    x : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], float, str]
        X coordinates of the marks, or width of horizontal ``"bar"`` and ``"area"`` without
        specified ``x2`` or ``width``.

        The ``value`` of this channel can be a number or a string ``"width"`` for the width
        of the plot.
    x2 : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], float, str]
        X2 coordinates for ranged ``"area"``, ``"bar"``, ``"rect"``, and  ``"rule"``.

        The ``value`` of this channel can be a number or a string ``"width"`` for the width
        of the plot.
    y : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], float, str]
        Y coordinates of the marks, or height of vertical ``"bar"`` and ``"area"`` without
        specified ``y2`` or ``height``.

        The ``value`` of this channel can be a number or a string ``"height"`` for the
        height of the plot.
    y2 : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], float, str]
        Y2 coordinates for ranged ``"area"``, ``"bar"``, ``"rect"``, and  ``"rule"``.

        The ``value`` of this channel can be a number or a string ``"height"`` for the
        height of the plot.
    """

    _schema = {"$ref": "#/definitions/AreaConfig"}

    def __init__(
        self,
        align: Union[
            Union[
                Union["Align", Literal["left", "center", "right"]],
                Union["ExprRef", "_ParameterProtocol", dict],
            ],
            UndefinedType,
        ] = Undefined,
        angle: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], float], UndefinedType
        ] = Undefined,
        aria: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], bool], UndefinedType
        ] = Undefined,
        ariaRole: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], str], UndefinedType
        ] = Undefined,
        ariaRoleDescription: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], str], UndefinedType
        ] = Undefined,
        aspect: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], bool], UndefinedType
        ] = Undefined,
        baseline: Union[
            Union[
                Union["ExprRef", "_ParameterProtocol", dict],
                Union[
                    "TextBaseline",
                    Union["Baseline", Literal["top", "middle", "bottom"]],
                    str,
                ],
            ],
            UndefinedType,
        ] = Undefined,
        blend: Union[
            Union[
                Union[
                    "Blend",
                    Literal[
                        None,
                        "multiply",
                        "screen",
                        "overlay",
                        "darken",
                        "lighten",
                        "color-dodge",
                        "color-burn",
                        "hard-light",
                        "soft-light",
                        "difference",
                        "exclusion",
                        "hue",
                        "saturation",
                        "color",
                        "luminosity",
                    ],
                ],
                Union["ExprRef", "_ParameterProtocol", dict],
            ],
            UndefinedType,
        ] = Undefined,
        color: Union[
            Union[
                Union[
                    "Color",
                    Union[
                        "ColorName",
                        Literal[
                            "black",
                            "silver",
                            "gray",
                            "white",
                            "maroon",
                            "red",
                            "purple",
                            "fuchsia",
                            "green",
                            "lime",
                            "olive",
                            "yellow",
                            "navy",
                            "blue",
                            "teal",
                            "aqua",
                            "orange",
                            "aliceblue",
                            "antiquewhite",
                            "aquamarine",
                            "azure",
                            "beige",
                            "bisque",
                            "blanchedalmond",
                            "blueviolet",
                            "brown",
                            "burlywood",
                            "cadetblue",
                            "chartreuse",
                            "chocolate",
                            "coral",
                            "cornflowerblue",
                            "cornsilk",
                            "crimson",
                            "cyan",
                            "darkblue",
                            "darkcyan",
                            "darkgoldenrod",
                            "darkgray",
                            "darkgreen",
                            "darkgrey",
                            "darkkhaki",
                            "darkmagenta",
                            "darkolivegreen",
                            "darkorange",
                            "darkorchid",
                            "darkred",
                            "darksalmon",
                            "darkseagreen",
                            "darkslateblue",
                            "darkslategray",
                            "darkslategrey",
                            "darkturquoise",
                            "darkviolet",
                            "deeppink",
                            "deepskyblue",
                            "dimgray",
                            "dimgrey",
                            "dodgerblue",
                            "firebrick",
                            "floralwhite",
                            "forestgreen",
                            "gainsboro",
                            "ghostwhite",
                            "gold",
                            "goldenrod",
                            "greenyellow",
                            "grey",
                            "honeydew",
                            "hotpink",
                            "indianred",
                            "indigo",
                            "ivory",
                            "khaki",
                            "lavender",
                            "lavenderblush",
                            "lawngreen",
                            "lemonchiffon",
                            "lightblue",
                            "lightcoral",
                            "lightcyan",
                            "lightgoldenrodyellow",
                            "lightgray",
                            "lightgreen",
                            "lightgrey",
                            "lightpink",
                            "lightsalmon",
                            "lightseagreen",
                            "lightskyblue",
                            "lightslategray",
                            "lightslategrey",
                            "lightsteelblue",
                            "lightyellow",
                            "limegreen",
                            "linen",
                            "magenta",
                            "mediumaquamarine",
                            "mediumblue",
                            "mediumorchid",
                            "mediumpurple",
                            "mediumseagreen",
                            "mediumslateblue",
                            "mediumspringgreen",
                            "mediumturquoise",
                            "mediumvioletred",
                            "midnightblue",
                            "mintcream",
                            "mistyrose",
                            "moccasin",
                            "navajowhite",
                            "oldlace",
                            "olivedrab",
                            "orangered",
                            "orchid",
                            "palegoldenrod",
                            "palegreen",
                            "paleturquoise",
                            "palevioletred",
                            "papayawhip",
                            "peachpuff",
                            "peru",
                            "pink",
                            "plum",
                            "powderblue",
                            "rosybrown",
                            "royalblue",
                            "saddlebrown",
                            "salmon",
                            "sandybrown",
                            "seagreen",
                            "seashell",
                            "sienna",
                            "skyblue",
                            "slateblue",
                            "slategray",
                            "slategrey",
                            "snow",
                            "springgreen",
                            "steelblue",
                            "tan",
                            "thistle",
                            "tomato",
                            "turquoise",
                            "violet",
                            "wheat",
                            "whitesmoke",
                            "yellowgreen",
                            "rebeccapurple",
                        ],
                    ],
                    Union["HexColor", str],
                    str,
                ],
                Union["ExprRef", "_ParameterProtocol", dict],
                Union[
                    "Gradient",
                    Union["LinearGradient", dict],
                    Union["RadialGradient", dict],
                ],
            ],
            UndefinedType,
        ] = Undefined,
        cornerRadius: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], float], UndefinedType
        ] = Undefined,
        cornerRadiusBottomLeft: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], float], UndefinedType
        ] = Undefined,
        cornerRadiusBottomRight: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], float], UndefinedType
        ] = Undefined,
        cornerRadiusTopLeft: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], float], UndefinedType
        ] = Undefined,
        cornerRadiusTopRight: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], float], UndefinedType
        ] = Undefined,
        cursor: Union[
            Union[
                Union[
                    "Cursor",
                    Literal[
                        "auto",
                        "default",
                        "none",
                        "context-menu",
                        "help",
                        "pointer",
                        "progress",
                        "wait",
                        "cell",
                        "crosshair",
                        "text",
                        "vertical-text",
                        "alias",
                        "copy",
                        "move",
                        "no-drop",
                        "not-allowed",
                        "e-resize",
                        "n-resize",
                        "ne-resize",
                        "nw-resize",
                        "s-resize",
                        "se-resize",
                        "sw-resize",
                        "w-resize",
                        "ew-resize",
                        "ns-resize",
                        "nesw-resize",
                        "nwse-resize",
                        "col-resize",
                        "row-resize",
                        "all-scroll",
                        "zoom-in",
                        "zoom-out",
                        "grab",
                        "grabbing",
                    ],
                ],
                Union["ExprRef", "_ParameterProtocol", dict],
            ],
            UndefinedType,
        ] = Undefined,
        description: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], str], UndefinedType
        ] = Undefined,
        dir: Union[
            Union[
                Union["ExprRef", "_ParameterProtocol", dict],
                Union["TextDirection", Literal["ltr", "rtl"]],
            ],
            UndefinedType,
        ] = Undefined,
        dx: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], float], UndefinedType
        ] = Undefined,
        dy: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], float], UndefinedType
        ] = Undefined,
        ellipsis: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], str], UndefinedType
        ] = Undefined,
        endAngle: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], float], UndefinedType
        ] = Undefined,
        fill: Union[
            Union[
                None,
                Union[
                    "Color",
                    Union[
                        "ColorName",
                        Literal[
                            "black",
                            "silver",
                            "gray",
                            "white",
                            "maroon",
                            "red",
                            "purple",
                            "fuchsia",
                            "green",
                            "lime",
                            "olive",
                            "yellow",
                            "navy",
                            "blue",
                            "teal",
                            "aqua",
                            "orange",
                            "aliceblue",
                            "antiquewhite",
                            "aquamarine",
                            "azure",
                            "beige",
                            "bisque",
                            "blanchedalmond",
                            "blueviolet",
                            "brown",
                            "burlywood",
                            "cadetblue",
                            "chartreuse",
                            "chocolate",
                            "coral",
                            "cornflowerblue",
                            "cornsilk",
                            "crimson",
                            "cyan",
                            "darkblue",
                            "darkcyan",
                            "darkgoldenrod",
                            "darkgray",
                            "darkgreen",
                            "darkgrey",
                            "darkkhaki",
                            "darkmagenta",
                            "darkolivegreen",
                            "darkorange",
                            "darkorchid",
                            "darkred",
                            "darksalmon",
                            "darkseagreen",
                            "darkslateblue",
                            "darkslategray",
                            "darkslategrey",
                            "darkturquoise",
                            "darkviolet",
                            "deeppink",
                            "deepskyblue",
                            "dimgray",
                            "dimgrey",
                            "dodgerblue",
                            "firebrick",
                            "floralwhite",
                            "forestgreen",
                            "gainsboro",
                            "ghostwhite",
                            "gold",
                            "goldenrod",
                            "greenyellow",
                            "grey",
                            "honeydew",
                            "hotpink",
                            "indianred",
                            "indigo",
                            "ivory",
                            "khaki",
                            "lavender",
                            "lavenderblush",
                            "lawngreen",
                            "lemonchiffon",
                            "lightblue",
                            "lightcoral",
                            "lightcyan",
                            "lightgoldenrodyellow",
                            "lightgray",
                            "lightgreen",
                            "lightgrey",
                            "lightpink",
                            "lightsalmon",
                            "lightseagreen",
                            "lightskyblue",
                            "lightslategray",
                            "lightslategrey",
                            "lightsteelblue",
                            "lightyellow",
                            "limegreen",
                            "linen",
                            "magenta",
                            "mediumaquamarine",
                            "mediumblue",
                            "mediumorchid",
                            "mediumpurple",
                            "mediumseagreen",
                            "mediumslateblue",
                            "mediumspringgreen",
                            "mediumturquoise",
                            "mediumvioletred",
                            "midnightblue",
                            "mintcream",
                            "mistyrose",
                            "moccasin",
                            "navajowhite",
                            "oldlace",
                            "olivedrab",
                            "orangered",
                            "orchid",
                            "palegoldenrod",
                            "palegreen",
                            "paleturquoise",
                            "palevioletred",
                            "papayawhip",
                            "peachpuff",
                            "peru",
                            "pink",
                            "plum",
                            "powderblue",
                            "rosybrown",
                            "royalblue",
                            "saddlebrown",
                            "salmon",
                            "sandybrown",
                            "seagreen",
                            "seashell",
                            "sienna",
                            "skyblue",
                            "slateblue",
                            "slategray",
                            "slategrey",
                            "snow",
                            "springgreen",
                            "steelblue",
                            "tan",
                            "thistle",
                            "tomato",
                            "turquoise",
                            "violet",
                            "wheat",
                            "whitesmoke",
                            "yellowgreen",
                            "rebeccapurple",
                        ],
                    ],
                    Union["HexColor", str],
                    str,
                ],
                Union["ExprRef", "_ParameterProtocol", dict],
                Union[
                    "Gradient",
                    Union["LinearGradient", dict],
                    Union["RadialGradient", dict],
                ],
            ],
            UndefinedType,
        ] = Undefined,
        fillOpacity: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], float], UndefinedType
        ] = Undefined,
        filled: Union[bool, UndefinedType] = Undefined,
        font: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], str], UndefinedType
        ] = Undefined,
        fontSize: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], float], UndefinedType
        ] = Undefined,
        fontStyle: Union[
            Union[
                Union["ExprRef", "_ParameterProtocol", dict], Union["FontStyle", str]
            ],
            UndefinedType,
        ] = Undefined,
        fontWeight: Union[
            Union[
                Union["ExprRef", "_ParameterProtocol", dict],
                Union[
                    "FontWeight",
                    Literal[
                        "normal",
                        "bold",
                        "lighter",
                        "bolder",
                        100,
                        200,
                        300,
                        400,
                        500,
                        600,
                        700,
                        800,
                        900,
                    ],
                ],
            ],
            UndefinedType,
        ] = Undefined,
        height: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], float], UndefinedType
        ] = Undefined,
        href: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], Union["URI", str]],
            UndefinedType,
        ] = Undefined,
        innerRadius: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], float], UndefinedType
        ] = Undefined,
        interpolate: Union[
            Union[
                Union["ExprRef", "_ParameterProtocol", dict],
                Union[
                    "Interpolate",
                    Literal[
                        "basis",
                        "basis-open",
                        "basis-closed",
                        "bundle",
                        "cardinal",
                        "cardinal-open",
                        "cardinal-closed",
                        "catmull-rom",
                        "linear",
                        "linear-closed",
                        "monotone",
                        "natural",
                        "step",
                        "step-before",
                        "step-after",
                    ],
                ],
            ],
            UndefinedType,
        ] = Undefined,
        invalid: Union[Literal["filter", None], UndefinedType] = Undefined,
        limit: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], float], UndefinedType
        ] = Undefined,
        line: Union[
            Union[Union["OverlayMarkDef", dict], bool], UndefinedType
        ] = Undefined,
        lineBreak: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], str], UndefinedType
        ] = Undefined,
        lineHeight: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], float], UndefinedType
        ] = Undefined,
        opacity: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], float], UndefinedType
        ] = Undefined,
        order: Union[Union[None, bool], UndefinedType] = Undefined,
        orient: Union[
            Union["Orientation", Literal["horizontal", "vertical"]], UndefinedType
        ] = Undefined,
        outerRadius: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], float], UndefinedType
        ] = Undefined,
        padAngle: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], float], UndefinedType
        ] = Undefined,
        point: Union[
            Union[Union["OverlayMarkDef", dict], bool, str], UndefinedType
        ] = Undefined,
        radius: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], float], UndefinedType
        ] = Undefined,
        radius2: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], float], UndefinedType
        ] = Undefined,
        shape: Union[
            Union[
                Union["ExprRef", "_ParameterProtocol", dict],
                Union[Union["SymbolShape", str], str],
            ],
            UndefinedType,
        ] = Undefined,
        size: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], float], UndefinedType
        ] = Undefined,
        smooth: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], bool], UndefinedType
        ] = Undefined,
        startAngle: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], float], UndefinedType
        ] = Undefined,
        stroke: Union[
            Union[
                None,
                Union[
                    "Color",
                    Union[
                        "ColorName",
                        Literal[
                            "black",
                            "silver",
                            "gray",
                            "white",
                            "maroon",
                            "red",
                            "purple",
                            "fuchsia",
                            "green",
                            "lime",
                            "olive",
                            "yellow",
                            "navy",
                            "blue",
                            "teal",
                            "aqua",
                            "orange",
                            "aliceblue",
                            "antiquewhite",
                            "aquamarine",
                            "azure",
                            "beige",
                            "bisque",
                            "blanchedalmond",
                            "blueviolet",
                            "brown",
                            "burlywood",
                            "cadetblue",
                            "chartreuse",
                            "chocolate",
                            "coral",
                            "cornflowerblue",
                            "cornsilk",
                            "crimson",
                            "cyan",
                            "darkblue",
                            "darkcyan",
                            "darkgoldenrod",
                            "darkgray",
                            "darkgreen",
                            "darkgrey",
                            "darkkhaki",
                            "darkmagenta",
                            "darkolivegreen",
                            "darkorange",
                            "darkorchid",
                            "darkred",
                            "darksalmon",
                            "darkseagreen",
                            "darkslateblue",
                            "darkslategray",
                            "darkslategrey",
                            "darkturquoise",
                            "darkviolet",
                            "deeppink",
                            "deepskyblue",
                            "dimgray",
                            "dimgrey",
                            "dodgerblue",
                            "firebrick",
                            "floralwhite",
                            "forestgreen",
                            "gainsboro",
                            "ghostwhite",
                            "gold",
                            "goldenrod",
                            "greenyellow",
                            "grey",
                            "honeydew",
                            "hotpink",
                            "indianred",
                            "indigo",
                            "ivory",
                            "khaki",
                            "lavender",
                            "lavenderblush",
                            "lawngreen",
                            "lemonchiffon",
                            "lightblue",
                            "lightcoral",
                            "lightcyan",
                            "lightgoldenrodyellow",
                            "lightgray",
                            "lightgreen",
                            "lightgrey",
                            "lightpink",
                            "lightsalmon",
                            "lightseagreen",
                            "lightskyblue",
                            "lightslategray",
                            "lightslategrey",
                            "lightsteelblue",
                            "lightyellow",
                            "limegreen",
                            "linen",
                            "magenta",
                            "mediumaquamarine",
                            "mediumblue",
                            "mediumorchid",
                            "mediumpurple",
                            "mediumseagreen",
                            "mediumslateblue",
                            "mediumspringgreen",
                            "mediumturquoise",
                            "mediumvioletred",
                            "midnightblue",
                            "mintcream",
                            "mistyrose",
                            "moccasin",
                            "navajowhite",
                            "oldlace",
                            "olivedrab",
                            "orangered",
                            "orchid",
                            "palegoldenrod",
                            "palegreen",
                            "paleturquoise",
                            "palevioletred",
                            "papayawhip",
                            "peachpuff",
                            "peru",
                            "pink",
                            "plum",
                            "powderblue",
                            "rosybrown",
                            "royalblue",
                            "saddlebrown",
                            "salmon",
                            "sandybrown",
                            "seagreen",
                            "seashell",
                            "sienna",
                            "skyblue",
                            "slateblue",
                            "slategray",
                            "slategrey",
                            "snow",
                            "springgreen",
                            "steelblue",
                            "tan",
                            "thistle",
                            "tomato",
                            "turquoise",
                            "violet",
                            "wheat",
                            "whitesmoke",
                            "yellowgreen",
                            "rebeccapurple",
                        ],
                    ],
                    Union["HexColor", str],
                    str,
                ],
                Union["ExprRef", "_ParameterProtocol", dict],
                Union[
                    "Gradient",
                    Union["LinearGradient", dict],
                    Union["RadialGradient", dict],
                ],
            ],
            UndefinedType,
        ] = Undefined,
        strokeCap: Union[
            Union[
                Union["ExprRef", "_ParameterProtocol", dict],
                Union["StrokeCap", Literal["butt", "round", "square"]],
            ],
            UndefinedType,
        ] = Undefined,
        strokeDash: Union[
            Union[List[float], Union["ExprRef", "_ParameterProtocol", dict]],
            UndefinedType,
        ] = Undefined,
        strokeDashOffset: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], float], UndefinedType
        ] = Undefined,
        strokeJoin: Union[
            Union[
                Union["ExprRef", "_ParameterProtocol", dict],
                Union["StrokeJoin", Literal["miter", "round", "bevel"]],
            ],
            UndefinedType,
        ] = Undefined,
        strokeMiterLimit: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], float], UndefinedType
        ] = Undefined,
        strokeOffset: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], float], UndefinedType
        ] = Undefined,
        strokeOpacity: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], float], UndefinedType
        ] = Undefined,
        strokeWidth: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], float], UndefinedType
        ] = Undefined,
        tension: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], float], UndefinedType
        ] = Undefined,
        text: Union[
            Union[
                Union["ExprRef", "_ParameterProtocol", dict],
                Union["Text", List[str], str],
            ],
            UndefinedType,
        ] = Undefined,
        theta: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], float], UndefinedType
        ] = Undefined,
        theta2: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], float], UndefinedType
        ] = Undefined,
        timeUnitBandPosition: Union[float, UndefinedType] = Undefined,
        timeUnitBandSize: Union[float, UndefinedType] = Undefined,
        tooltip: Union[
            Union[
                None,
                Union["ExprRef", "_ParameterProtocol", dict],
                Union["TooltipContent", dict],
                bool,
                float,
                str,
            ],
            UndefinedType,
        ] = Undefined,
        url: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], Union["URI", str]],
            UndefinedType,
        ] = Undefined,
        width: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], float], UndefinedType
        ] = Undefined,
        x: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], float, str],
            UndefinedType,
        ] = Undefined,
        x2: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], float, str],
            UndefinedType,
        ] = Undefined,
        y: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], float, str],
            UndefinedType,
        ] = Undefined,
        y2: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], float, str],
            UndefinedType,
        ] = Undefined,
        **kwds
    ):
        super(AreaConfig, self).__init__(
            align=align,
            angle=angle,
            aria=aria,
            ariaRole=ariaRole,
            ariaRoleDescription=ariaRoleDescription,
            aspect=aspect,
            baseline=baseline,
            blend=blend,
            color=color,
            cornerRadius=cornerRadius,
            cornerRadiusBottomLeft=cornerRadiusBottomLeft,
            cornerRadiusBottomRight=cornerRadiusBottomRight,
            cornerRadiusTopLeft=cornerRadiusTopLeft,
            cornerRadiusTopRight=cornerRadiusTopRight,
            cursor=cursor,
            description=description,
            dir=dir,
            dx=dx,
            dy=dy,
            ellipsis=ellipsis,
            endAngle=endAngle,
            fill=fill,
            fillOpacity=fillOpacity,
            filled=filled,
            font=font,
            fontSize=fontSize,
            fontStyle=fontStyle,
            fontWeight=fontWeight,
            height=height,
            href=href,
            innerRadius=innerRadius,
            interpolate=interpolate,
            invalid=invalid,
            limit=limit,
            line=line,
            lineBreak=lineBreak,
            lineHeight=lineHeight,
            opacity=opacity,
            order=order,
            orient=orient,
            outerRadius=outerRadius,
            padAngle=padAngle,
            point=point,
            radius=radius,
            radius2=radius2,
            shape=shape,
            size=size,
            smooth=smooth,
            startAngle=startAngle,
            stroke=stroke,
            strokeCap=strokeCap,
            strokeDash=strokeDash,
            strokeDashOffset=strokeDashOffset,
            strokeJoin=strokeJoin,
            strokeMiterLimit=strokeMiterLimit,
            strokeOffset=strokeOffset,
            strokeOpacity=strokeOpacity,
            strokeWidth=strokeWidth,
            tension=tension,
            text=text,
            theta=theta,
            theta2=theta2,
            timeUnitBandPosition=timeUnitBandPosition,
            timeUnitBandSize=timeUnitBandSize,
            tooltip=tooltip,
            url=url,
            width=width,
            x=x,
            x2=x2,
            y=y,
            y2=y2,
            **kwds
        )


class ArgmaxDef(Aggregate):
    """ArgmaxDef schema wrapper

    Union[:class:`ArgmaxDef`, Dict[required=[argmax]]]

    Parameters
    ----------

    argmax : Union[:class:`FieldName`, str]

    """

    _schema = {"$ref": "#/definitions/ArgmaxDef"}

    def __init__(
        self, argmax: Union[Union["FieldName", str], UndefinedType] = Undefined, **kwds
    ):
        super(ArgmaxDef, self).__init__(argmax=argmax, **kwds)


class ArgminDef(Aggregate):
    """ArgminDef schema wrapper

    Union[:class:`ArgminDef`, Dict[required=[argmin]]]

    Parameters
    ----------

    argmin : Union[:class:`FieldName`, str]

    """

    _schema = {"$ref": "#/definitions/ArgminDef"}

    def __init__(
        self, argmin: Union[Union["FieldName", str], UndefinedType] = Undefined, **kwds
    ):
        super(ArgminDef, self).__init__(argmin=argmin, **kwds)


class AutoSizeParams(VegaLiteSchema):
    """AutoSizeParams schema wrapper

    Union[:class:`AutoSizeParams`, Dict[required=[]]]

    Parameters
    ----------

    contains : Literal['content', 'padding']
        Determines how size calculation should be performed, one of ``"content"`` or
        ``"padding"``. The default setting ( ``"content"`` ) interprets the width and height
        settings as the data rectangle (plotting) dimensions, to which padding is then
        added. In contrast, the ``"padding"`` setting includes the padding within the view
        size calculations, such that the width and height settings indicate the **total**
        intended size of the view.

        **Default value** : ``"content"``
    resize : bool
        A boolean flag indicating if autosize layout should be re-calculated on every view
        update.

        **Default value** : ``false``
    type : Union[:class:`AutosizeType`, Literal['pad', 'none', 'fit', 'fit-x', 'fit-y']]
        The sizing format type. One of ``"pad"``, ``"fit"``, ``"fit-x"``, ``"fit-y"``,  or
        ``"none"``. See the `autosize type
        <https://vega.github.io/vega-lite/docs/size.html#autosize>`__ documentation for
        descriptions of each.

        **Default value** : ``"pad"``
    """

    _schema = {"$ref": "#/definitions/AutoSizeParams"}

    def __init__(
        self,
        contains: Union[Literal["content", "padding"], UndefinedType] = Undefined,
        resize: Union[bool, UndefinedType] = Undefined,
        type: Union[
            Union["AutosizeType", Literal["pad", "none", "fit", "fit-x", "fit-y"]],
            UndefinedType,
        ] = Undefined,
        **kwds
    ):
        super(AutoSizeParams, self).__init__(
            contains=contains, resize=resize, type=type, **kwds
        )


class AutosizeType(VegaLiteSchema):
    """AutosizeType schema wrapper

    Union[:class:`AutosizeType`, Literal['pad', 'none', 'fit', 'fit-x', 'fit-y']]
    """

    _schema = {"$ref": "#/definitions/AutosizeType"}

    def __init__(self, *args):
        super(AutosizeType, self).__init__(*args)


class Axis(VegaLiteSchema):
    """Axis schema wrapper

    Union[:class:`Axis`, Dict[required=[]]]

    Parameters
    ----------

    aria : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], bool]
        A boolean flag indicating if `ARIA attributes
        <https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA>`__ should be
        included (SVG output only). If ``false``, the "aria-hidden" attribute will be set on
        the output SVG group, removing the axis from the ARIA accessibility tree.

        **Default value:** ``true``
    bandPosition : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], float]
        An interpolation fraction indicating where, for ``band`` scales, axis ticks should
        be positioned. A value of ``0`` places ticks at the left edge of their bands. A
        value of ``0.5`` places ticks in the middle of their bands.

        **Default value:** ``0.5``
    description : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], str]
        A text description of this axis for `ARIA accessibility
        <https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA>`__ (SVG output
        only). If the ``aria`` property is true, for SVG output the `"aria-label" attribute
        <https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/ARIA_Techniques/Using_the_aria-label_attribute>`__
        will be set to this description. If the description is unspecified it will be
        automatically generated.
    domain : bool
        A boolean flag indicating if the domain (the axis baseline) should be included as
        part of the axis.

        **Default value:** ``true``
    domainCap : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], Union[:class:`StrokeCap`, Literal['butt', 'round', 'square']]]
        The stroke cap for the domain line's ending style. One of ``"butt"``, ``"round"`` or
        ``"square"``.

        **Default value:** ``"butt"``
    domainColor : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], Union[None, Union[:class:`Color`, Union[:class:`ColorName`, Literal['black', 'silver', 'gray', 'white', 'maroon', 'red', 'purple', 'fuchsia', 'green', 'lime', 'olive', 'yellow', 'navy', 'blue', 'teal', 'aqua', 'orange', 'aliceblue', 'antiquewhite', 'aquamarine', 'azure', 'beige', 'bisque', 'blanchedalmond', 'blueviolet', 'brown', 'burlywood', 'cadetblue', 'chartreuse', 'chocolate', 'coral', 'cornflowerblue', 'cornsilk', 'crimson', 'cyan', 'darkblue', 'darkcyan', 'darkgoldenrod', 'darkgray', 'darkgreen', 'darkgrey', 'darkkhaki', 'darkmagenta', 'darkolivegreen', 'darkorange', 'darkorchid', 'darkred', 'darksalmon', 'darkseagreen', 'darkslateblue', 'darkslategray', 'darkslategrey', 'darkturquoise', 'darkviolet', 'deeppink', 'deepskyblue', 'dimgray', 'dimgrey', 'dodgerblue', 'firebrick', 'floralwhite', 'forestgreen', 'gainsboro', 'ghostwhite', 'gold', 'goldenrod', 'greenyellow', 'grey', 'honeydew', 'hotpink', 'indianred', 'indigo', 'ivory', 'khaki', 'lavender', 'lavenderblush', 'lawngreen', 'lemonchiffon', 'lightblue', 'lightcoral', 'lightcyan', 'lightgoldenrodyellow', 'lightgray', 'lightgreen', 'lightgrey', 'lightpink', 'lightsalmon', 'lightseagreen', 'lightskyblue', 'lightslategray', 'lightslategrey', 'lightsteelblue', 'lightyellow', 'limegreen', 'linen', 'magenta', 'mediumaquamarine', 'mediumblue', 'mediumorchid', 'mediumpurple', 'mediumseagreen', 'mediumslateblue', 'mediumspringgreen', 'mediumturquoise', 'mediumvioletred', 'midnightblue', 'mintcream', 'mistyrose', 'moccasin', 'navajowhite', 'oldlace', 'olivedrab', 'orangered', 'orchid', 'palegoldenrod', 'palegreen', 'paleturquoise', 'palevioletred', 'papayawhip', 'peachpuff', 'peru', 'pink', 'plum', 'powderblue', 'rosybrown', 'royalblue', 'saddlebrown', 'salmon', 'sandybrown', 'seagreen', 'seashell', 'sienna', 'skyblue', 'slateblue', 'slategray', 'slategrey', 'snow', 'springgreen', 'steelblue', 'tan', 'thistle', 'tomato', 'turquoise', 'violet', 'wheat', 'whitesmoke', 'yellowgreen', 'rebeccapurple']], Union[:class:`HexColor`, str], str]]]
        Color of axis domain line.

        **Default value:** ``"gray"``.
    domainDash : Union[List[float], Union[:class:`ExprRef`, Dict[required=[expr]]]]
        An array of alternating [stroke, space] lengths for dashed domain lines.
    domainDashOffset : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], float]
        The pixel offset at which to start drawing with the domain dash array.
    domainOpacity : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], float]
        Opacity of the axis domain line.
    domainWidth : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], float]
        Stroke width of axis domain line

        **Default value:** ``1``
    format : Union[Union[:class:`Dict`, Dict[required=[]]], str]
        When used with the default ``"number"`` and ``"time"`` format type, the text
        formatting pattern for labels of guides (axes, legends, headers) and text marks.


        * If the format type is ``"number"`` (e.g., for quantitative fields), this is D3's
          `number format pattern <https://github.com/d3/d3-format#locale_format>`__.
        * If the format type is ``"time"`` (e.g., for temporal fields), this is D3's `time
          format pattern <https://github.com/d3/d3-time-format#locale_format>`__.

        See the `format documentation <https://vega.github.io/vega-lite/docs/format.html>`__
        for more examples.

        When used with a `custom formatType
        <https://vega.github.io/vega-lite/docs/config.html#custom-format-type>`__, this
        value will be passed as ``format`` alongside ``datum.value`` to the registered
        function.

        **Default value:**  Derived from `numberFormat
        <https://vega.github.io/vega-lite/docs/config.html#format>`__ config for number
        format and from `timeFormat
        <https://vega.github.io/vega-lite/docs/config.html#format>`__ config for time
        format.
    formatType : str
        The format type for labels. One of ``"number"``, ``"time"``, or a `registered custom
        format type
        <https://vega.github.io/vega-lite/docs/config.html#custom-format-type>`__.

        **Default value:**


        * ``"time"`` for temporal fields and ordinal and nominal fields with ``timeUnit``.
        * ``"number"`` for quantitative fields as well as ordinal and nominal fields without
          ``timeUnit``.
    grid : bool
        A boolean flag indicating if grid lines should be included as part of the axis

        **Default value:** ``true`` for `continuous scales
        <https://vega.github.io/vega-lite/docs/scale.html#continuous>`__ that are not
        binned; otherwise, ``false``.
    gridCap : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], Union[:class:`StrokeCap`, Literal['butt', 'round', 'square']]]
        The stroke cap for grid lines' ending style. One of ``"butt"``, ``"round"`` or
        ``"square"``.

        **Default value:** ``"butt"``
    gridColor : Union[Union[:class:`ConditionalAxisColor`, Dict[required=[condition, expr]], Dict[required=[condition, value]]], Union[:class:`ExprRef`, Dict[required=[expr]]], Union[None, Union[:class:`Color`, Union[:class:`ColorName`, Literal['black', 'silver', 'gray', 'white', 'maroon', 'red', 'purple', 'fuchsia', 'green', 'lime', 'olive', 'yellow', 'navy', 'blue', 'teal', 'aqua', 'orange', 'aliceblue', 'antiquewhite', 'aquamarine', 'azure', 'beige', 'bisque', 'blanchedalmond', 'blueviolet', 'brown', 'burlywood', 'cadetblue', 'chartreuse', 'chocolate', 'coral', 'cornflowerblue', 'cornsilk', 'crimson', 'cyan', 'darkblue', 'darkcyan', 'darkgoldenrod', 'darkgray', 'darkgreen', 'darkgrey', 'darkkhaki', 'darkmagenta', 'darkolivegreen', 'darkorange', 'darkorchid', 'darkred', 'darksalmon', 'darkseagreen', 'darkslateblue', 'darkslategray', 'darkslategrey', 'darkturquoise', 'darkviolet', 'deeppink', 'deepskyblue', 'dimgray', 'dimgrey', 'dodgerblue', 'firebrick', 'floralwhite', 'forestgreen', 'gainsboro', 'ghostwhite', 'gold', 'goldenrod', 'greenyellow', 'grey', 'honeydew', 'hotpink', 'indianred', 'indigo', 'ivory', 'khaki', 'lavender', 'lavenderblush', 'lawngreen', 'lemonchiffon', 'lightblue', 'lightcoral', 'lightcyan', 'lightgoldenrodyellow', 'lightgray', 'lightgreen', 'lightgrey', 'lightpink', 'lightsalmon', 'lightseagreen', 'lightskyblue', 'lightslategray', 'lightslategrey', 'lightsteelblue', 'lightyellow', 'limegreen', 'linen', 'magenta', 'mediumaquamarine', 'mediumblue', 'mediumorchid', 'mediumpurple', 'mediumseagreen', 'mediumslateblue', 'mediumspringgreen', 'mediumturquoise', 'mediumvioletred', 'midnightblue', 'mintcream', 'mistyrose', 'moccasin', 'navajowhite', 'oldlace', 'olivedrab', 'orangered', 'orchid', 'palegoldenrod', 'palegreen', 'paleturquoise', 'palevioletred', 'papayawhip', 'peachpuff', 'peru', 'pink', 'plum', 'powderblue', 'rosybrown', 'royalblue', 'saddlebrown', 'salmon', 'sandybrown', 'seagreen', 'seashell', 'sienna', 'skyblue', 'slateblue', 'slategray', 'slategrey', 'snow', 'springgreen', 'steelblue', 'tan', 'thistle', 'tomato', 'turquoise', 'violet', 'wheat', 'whitesmoke', 'yellowgreen', 'rebeccapurple']], Union[:class:`HexColor`, str], str]]]
        Color of gridlines.

        **Default value:** ``"lightGray"``.
    gridDash : Union[List[float], Union[:class:`ConditionalAxisNumberArray`, Dict[required=[condition, expr]], Dict[required=[condition, value]]], Union[:class:`ExprRef`, Dict[required=[expr]]]]
        An array of alternating [stroke, space] lengths for dashed grid lines.
    gridDashOffset : Union[Union[:class:`ConditionalAxisNumber`, Dict[required=[condition, expr]], Dict[required=[condition, value]]], Union[:class:`ExprRef`, Dict[required=[expr]]], float]
        The pixel offset at which to start drawing with the grid dash array.
    gridOpacity : Union[Union[:class:`ConditionalAxisNumber`, Dict[required=[condition, expr]], Dict[required=[condition, value]]], Union[:class:`ExprRef`, Dict[required=[expr]]], float]
        The stroke opacity of grid (value between [0,1])

        **Default value:** ``1``
    gridWidth : Union[Union[:class:`ConditionalAxisNumber`, Dict[required=[condition, expr]], Dict[required=[condition, value]]], Union[:class:`ExprRef`, Dict[required=[expr]]], float]
        The grid width, in pixels.

        **Default value:** ``1``
    labelAlign : Union[Union[:class:`Align`, Literal['left', 'center', 'right']], Union[:class:`ConditionalAxisLabelAlign`, Dict[required=[condition, expr]], Dict[required=[condition, value]]], Union[:class:`ExprRef`, Dict[required=[expr]]]]
        Horizontal text alignment of axis tick labels, overriding the default setting for
        the current axis orientation.
    labelAngle : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], float]
        The rotation angle of the axis labels.

        **Default value:** ``-90`` for nominal and ordinal fields; ``0`` otherwise.
    labelBaseline : Union[Union[:class:`ConditionalAxisLabelBaseline`, Dict[required=[condition, expr]], Dict[required=[condition, value]]], Union[:class:`ExprRef`, Dict[required=[expr]]], Union[:class:`TextBaseline`, Union[:class:`Baseline`, Literal['top', 'middle', 'bottom']], str]]
        Vertical text baseline of axis tick labels, overriding the default setting for the
        current axis orientation. One of ``"alphabetic"`` (default), ``"top"``,
        ``"middle"``, ``"bottom"``, ``"line-top"``, or ``"line-bottom"``. The ``"line-top"``
        and ``"line-bottom"`` values operate similarly to ``"top"`` and ``"bottom"``, but
        are calculated relative to the *lineHeight* rather than *fontSize* alone.
    labelBound : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], Union[bool, float]]
        Indicates if labels should be hidden if they exceed the axis range. If ``false``
        (the default) no bounds overlap analysis is performed. If ``true``, labels will be
        hidden if they exceed the axis range by more than 1 pixel. If this property is a
        number, it specifies the pixel tolerance: the maximum amount by which a label
        bounding box may exceed the axis range.

        **Default value:** ``false``.
    labelColor : Union[Union[:class:`ConditionalAxisColor`, Dict[required=[condition, expr]], Dict[required=[condition, value]]], Union[:class:`ExprRef`, Dict[required=[expr]]], Union[None, Union[:class:`Color`, Union[:class:`ColorName`, Literal['black', 'silver', 'gray', 'white', 'maroon', 'red', 'purple', 'fuchsia', 'green', 'lime', 'olive', 'yellow', 'navy', 'blue', 'teal', 'aqua', 'orange', 'aliceblue', 'antiquewhite', 'aquamarine', 'azure', 'beige', 'bisque', 'blanchedalmond', 'blueviolet', 'brown', 'burlywood', 'cadetblue', 'chartreuse', 'chocolate', 'coral', 'cornflowerblue', 'cornsilk', 'crimson', 'cyan', 'darkblue', 'darkcyan', 'darkgoldenrod', 'darkgray', 'darkgreen', 'darkgrey', 'darkkhaki', 'darkmagenta', 'darkolivegreen', 'darkorange', 'darkorchid', 'darkred', 'darksalmon', 'darkseagreen', 'darkslateblue', 'darkslategray', 'darkslategrey', 'darkturquoise', 'darkviolet', 'deeppink', 'deepskyblue', 'dimgray', 'dimgrey', 'dodgerblue', 'firebrick', 'floralwhite', 'forestgreen', 'gainsboro', 'ghostwhite', 'gold', 'goldenrod', 'greenyellow', 'grey', 'honeydew', 'hotpink', 'indianred', 'indigo', 'ivory', 'khaki', 'lavender', 'lavenderblush', 'lawngreen', 'lemonchiffon', 'lightblue', 'lightcoral', 'lightcyan', 'lightgoldenrodyellow', 'lightgray', 'lightgreen', 'lightgrey', 'lightpink', 'lightsalmon', 'lightseagreen', 'lightskyblue', 'lightslategray', 'lightslategrey', 'lightsteelblue', 'lightyellow', 'limegreen', 'linen', 'magenta', 'mediumaquamarine', 'mediumblue', 'mediumorchid', 'mediumpurple', 'mediumseagreen', 'mediumslateblue', 'mediumspringgreen', 'mediumturquoise', 'mediumvioletred', 'midnightblue', 'mintcream', 'mistyrose', 'moccasin', 'navajowhite', 'oldlace', 'olivedrab', 'orangered', 'orchid', 'palegoldenrod', 'palegreen', 'paleturquoise', 'palevioletred', 'papayawhip', 'peachpuff', 'peru', 'pink', 'plum', 'powderblue', 'rosybrown', 'royalblue', 'saddlebrown', 'salmon', 'sandybrown', 'seagreen', 'seashell', 'sienna', 'skyblue', 'slateblue', 'slategray', 'slategrey', 'snow', 'springgreen', 'steelblue', 'tan', 'thistle', 'tomato', 'turquoise', 'violet', 'wheat', 'whitesmoke', 'yellowgreen', 'rebeccapurple']], Union[:class:`HexColor`, str], str]]]
        The color of the tick label, can be in hex color code or regular color name.
    labelExpr : str
        `Vega expression <https://vega.github.io/vega/docs/expressions/>`__ for customizing
        labels.

        **Note:** The label text and value can be assessed via the ``label`` and ``value``
        properties of the axis's backing ``datum`` object.
    labelFlush : Union[bool, float]
        Indicates if the first and last axis labels should be aligned flush with the scale
        range. Flush alignment for a horizontal axis will left-align the first label and
        right-align the last label. For vertical axes, bottom and top text baselines are
        applied instead. If this property is a number, it also indicates the number of
        pixels by which to offset the first and last labels; for example, a value of 2 will
        flush-align the first and last labels and also push them 2 pixels outward from the
        center of the axis. The additional adjustment can sometimes help the labels better
        visually group with corresponding axis ticks.

        **Default value:** ``true`` for axis of a continuous x-scale. Otherwise, ``false``.
    labelFlushOffset : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], float]
        Indicates the number of pixels by which to offset flush-adjusted labels. For
        example, a value of ``2`` will push flush-adjusted labels 2 pixels outward from the
        center of the axis. Offsets can help the labels better visually group with
        corresponding axis ticks.

        **Default value:** ``0``.
    labelFont : Union[Union[:class:`ConditionalAxisString`, Dict[required=[condition, expr]], Dict[required=[condition, value]]], Union[:class:`ExprRef`, Dict[required=[expr]]], str]
        The font of the tick label.
    labelFontSize : Union[Union[:class:`ConditionalAxisNumber`, Dict[required=[condition, expr]], Dict[required=[condition, value]]], Union[:class:`ExprRef`, Dict[required=[expr]]], float]
        The font size of the label, in pixels.
    labelFontStyle : Union[Union[:class:`ConditionalAxisLabelFontStyle`, Dict[required=[condition, expr]], Dict[required=[condition, value]]], Union[:class:`ExprRef`, Dict[required=[expr]]], Union[:class:`FontStyle`, str]]
        Font style of the title.
    labelFontWeight : Union[Union[:class:`ConditionalAxisLabelFontWeight`, Dict[required=[condition, expr]], Dict[required=[condition, value]]], Union[:class:`ExprRef`, Dict[required=[expr]]], Union[:class:`FontWeight`, Literal['normal', 'bold', 'lighter', 'bolder', 100, 200, 300, 400, 500, 600, 700, 800, 900]]]
        Font weight of axis tick labels.
    labelLimit : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], float]
        Maximum allowed pixel width of axis tick labels.

        **Default value:** ``180``
    labelLineHeight : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], float]
        Line height in pixels for multi-line label text or label text with ``"line-top"`` or
        ``"line-bottom"`` baseline.
    labelOffset : Union[Union[:class:`ConditionalAxisNumber`, Dict[required=[condition, expr]], Dict[required=[condition, value]]], Union[:class:`ExprRef`, Dict[required=[expr]]], float]
        Position offset in pixels to apply to labels, in addition to tickOffset.

        **Default value:** ``0``
    labelOpacity : Union[Union[:class:`ConditionalAxisNumber`, Dict[required=[condition, expr]], Dict[required=[condition, value]]], Union[:class:`ExprRef`, Dict[required=[expr]]], float]
        The opacity of the labels.
    labelOverlap : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], Union[:class:`LabelOverlap`, bool, str]]
        The strategy to use for resolving overlap of axis labels. If ``false`` (the
        default), no overlap reduction is attempted. If set to ``true`` or ``"parity"``, a
        strategy of removing every other label is used (this works well for standard linear
        axes). If set to ``"greedy"``, a linear scan of the labels is performed, removing
        any labels that overlaps with the last visible label (this often works better for
        log-scaled axes).

        **Default value:** ``true`` for non-nominal fields with non-log scales; ``"greedy"``
        for log scales; otherwise ``false``.
    labelPadding : Union[Union[:class:`ConditionalAxisNumber`, Dict[required=[condition, expr]], Dict[required=[condition, value]]], Union[:class:`ExprRef`, Dict[required=[expr]]], float]
        The padding in pixels between labels and ticks.

        **Default value:** ``2``
    labelSeparation : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], float]
        The minimum separation that must be between label bounding boxes for them to be
        considered non-overlapping (default ``0`` ). This property is ignored if
        *labelOverlap* resolution is not enabled.
    labels : bool
        A boolean flag indicating if labels should be included as part of the axis.

        **Default value:** ``true``.
    maxExtent : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], float]
        The maximum extent in pixels that axis ticks and labels should use. This determines
        a maximum offset value for axis titles.

        **Default value:** ``undefined``.
    minExtent : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], float]
        The minimum extent in pixels that axis ticks and labels should use. This determines
        a minimum offset value for axis titles.

        **Default value:** ``30`` for y-axis; ``undefined`` for x-axis.
    offset : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], float]
        The offset, in pixels, by which to displace the axis from the edge of the enclosing
        group or data rectangle.

        **Default value:** derived from the `axis config
        <https://vega.github.io/vega-lite/docs/config.html#facet-scale-config>`__ 's
        ``offset`` ( ``0`` by default)
    orient : Union[Union[:class:`AxisOrient`, Literal['top', 'bottom', 'left', 'right']], Union[:class:`ExprRef`, Dict[required=[expr]]]]
        The orientation of the axis. One of ``"top"``, ``"bottom"``, ``"left"`` or
        ``"right"``. The orientation can be used to further specialize the axis type (e.g.,
        a y-axis oriented towards the right edge of the chart).

        **Default value:** ``"bottom"`` for x-axes and ``"left"`` for y-axes.
    position : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], float]
        The anchor position of the axis in pixels. For x-axes with top or bottom
        orientation, this sets the axis group x coordinate. For y-axes with left or right
        orientation, this sets the axis group y coordinate.

        **Default value** : ``0``
    style : Union[List[str], str]
        A string or array of strings indicating the name of custom styles to apply to the
        axis. A style is a named collection of axis property defined within the `style
        configuration <https://vega.github.io/vega-lite/docs/mark.html#style-config>`__. If
        style is an array, later styles will override earlier styles.

        **Default value:** (none) **Note:** Any specified style will augment the default
        style. For example, an x-axis mark with ``"style": "foo"`` will use ``config.axisX``
        and ``config.style.foo`` (the specified style ``"foo"`` has higher precedence).
    tickBand : Union[Literal['center', 'extent'], Union[:class:`ExprRef`, Dict[required=[expr]]]]
        For band scales, indicates if ticks and grid lines should be placed at the
        ``"center"`` of a band (default) or at the band ``"extent"`` s to indicate intervals
    tickCap : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], Union[:class:`StrokeCap`, Literal['butt', 'round', 'square']]]
        The stroke cap for the tick lines' ending style. One of ``"butt"``, ``"round"`` or
        ``"square"``.

        **Default value:** ``"butt"``
    tickColor : Union[Union[:class:`ConditionalAxisColor`, Dict[required=[condition, expr]], Dict[required=[condition, value]]], Union[:class:`ExprRef`, Dict[required=[expr]]], Union[None, Union[:class:`Color`, Union[:class:`ColorName`, Literal['black', 'silver', 'gray', 'white', 'maroon', 'red', 'purple', 'fuchsia', 'green', 'lime', 'olive', 'yellow', 'navy', 'blue', 'teal', 'aqua', 'orange', 'aliceblue', 'antiquewhite', 'aquamarine', 'azure', 'beige', 'bisque', 'blanchedalmond', 'blueviolet', 'brown', 'burlywood', 'cadetblue', 'chartreuse', 'chocolate', 'coral', 'cornflowerblue', 'cornsilk', 'crimson', 'cyan', 'darkblue', 'darkcyan', 'darkgoldenrod', 'darkgray', 'darkgreen', 'darkgrey', 'darkkhaki', 'darkmagenta', 'darkolivegreen', 'darkorange', 'darkorchid', 'darkred', 'darksalmon', 'darkseagreen', 'darkslateblue', 'darkslategray', 'darkslategrey', 'darkturquoise', 'darkviolet', 'deeppink', 'deepskyblue', 'dimgray', 'dimgrey', 'dodgerblue', 'firebrick', 'floralwhite', 'forestgreen', 'gainsboro', 'ghostwhite', 'gold', 'goldenrod', 'greenyellow', 'grey', 'honeydew', 'hotpink', 'indianred', 'indigo', 'ivory', 'khaki', 'lavender', 'lavenderblush', 'lawngreen', 'lemonchiffon', 'lightblue', 'lightcoral', 'lightcyan', 'lightgoldenrodyellow', 'lightgray', 'lightgreen', 'lightgrey', 'lightpink', 'lightsalmon', 'lightseagreen', 'lightskyblue', 'lightslategray', 'lightslategrey', 'lightsteelblue', 'lightyellow', 'limegreen', 'linen', 'magenta', 'mediumaquamarine', 'mediumblue', 'mediumorchid', 'mediumpurple', 'mediumseagreen', 'mediumslateblue', 'mediumspringgreen', 'mediumturquoise', 'mediumvioletred', 'midnightblue', 'mintcream', 'mistyrose', 'moccasin', 'navajowhite', 'oldlace', 'olivedrab', 'orangered', 'orchid', 'palegoldenrod', 'palegreen', 'paleturquoise', 'palevioletred', 'papayawhip', 'peachpuff', 'peru', 'pink', 'plum', 'powderblue', 'rosybrown', 'royalblue', 'saddlebrown', 'salmon', 'sandybrown', 'seagreen', 'seashell', 'sienna', 'skyblue', 'slateblue', 'slategray', 'slategrey', 'snow', 'springgreen', 'steelblue', 'tan', 'thistle', 'tomato', 'turquoise', 'violet', 'wheat', 'whitesmoke', 'yellowgreen', 'rebeccapurple']], Union[:class:`HexColor`, str], str]]]
        The color of the axis's tick.

        **Default value:** ``"gray"``
    tickCount : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], Union[:class:`TimeIntervalStep`, Dict[required=[interval, step]]], Union[:class:`TimeInterval`, Literal['millisecond', 'second', 'minute', 'hour', 'day', 'week', 'month', 'year']], float]
        A desired number of ticks, for axes visualizing quantitative scales. The resulting
        number may be different so that values are "nice" (multiples of 2, 5, 10) and lie
        within the underlying scale's range.

        For scales of type ``"time"`` or ``"utc"``, the tick count can instead be a time
        interval specifier. Legal string values are ``"millisecond"``, ``"second"``,
        ``"minute"``, ``"hour"``, ``"day"``, ``"week"``, ``"month"``, and ``"year"``.
        Alternatively, an object-valued interval specifier of the form ``{"interval":
        "month", "step": 3}`` includes a desired number of interval steps. Here, ticks are
        generated for each quarter (Jan, Apr, Jul, Oct) boundary.

        **Default value** : Determine using a formula ``ceil(width/40)`` for x and
        ``ceil(height/40)`` for y.
    tickDash : Union[List[float], Union[:class:`ConditionalAxisNumberArray`, Dict[required=[condition, expr]], Dict[required=[condition, value]]], Union[:class:`ExprRef`, Dict[required=[expr]]]]
        An array of alternating [stroke, space] lengths for dashed tick mark lines.
    tickDashOffset : Union[Union[:class:`ConditionalAxisNumber`, Dict[required=[condition, expr]], Dict[required=[condition, value]]], Union[:class:`ExprRef`, Dict[required=[expr]]], float]
        The pixel offset at which to start drawing with the tick mark dash array.
    tickExtra : bool
        Boolean flag indicating if an extra axis tick should be added for the initial
        position of the axis. This flag is useful for styling axes for ``band`` scales such
        that ticks are placed on band boundaries rather in the middle of a band. Use in
        conjunction with ``"bandPosition": 1`` and an axis ``"padding"`` value of ``0``.
    tickMinStep : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], float]
        The minimum desired step between axis ticks, in terms of scale domain values. For
        example, a value of ``1`` indicates that ticks should not be less than 1 unit apart.
        If ``tickMinStep`` is specified, the ``tickCount`` value will be adjusted, if
        necessary, to enforce the minimum step value.
    tickOffset : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], float]
        Position offset in pixels to apply to ticks, labels, and gridlines.
    tickOpacity : Union[Union[:class:`ConditionalAxisNumber`, Dict[required=[condition, expr]], Dict[required=[condition, value]]], Union[:class:`ExprRef`, Dict[required=[expr]]], float]
        Opacity of the ticks.
    tickRound : bool
        Boolean flag indicating if pixel position values should be rounded to the nearest
        integer.

        **Default value:** ``true``
    tickSize : Union[Union[:class:`ConditionalAxisNumber`, Dict[required=[condition, expr]], Dict[required=[condition, value]]], Union[:class:`ExprRef`, Dict[required=[expr]]], float]
        The size in pixels of axis ticks.

        **Default value:** ``5``
    tickWidth : Union[Union[:class:`ConditionalAxisNumber`, Dict[required=[condition, expr]], Dict[required=[condition, value]]], Union[:class:`ExprRef`, Dict[required=[expr]]], float]
        The width, in pixels, of ticks.

        **Default value:** ``1``
    ticks : bool
        Boolean value that determines whether the axis should include ticks.

        **Default value:** ``true``
    title : Union[None, Union[:class:`Text`, List[str], str]]
        A title for the field. If ``null``, the title will be removed.

        **Default value:**  derived from the field's name and transformation function (
        ``aggregate``, ``bin`` and ``timeUnit`` ). If the field has an aggregate function,
        the function is displayed as part of the title (e.g., ``"Sum of Profit"`` ). If the
        field is binned or has a time unit applied, the applied function is shown in
        parentheses (e.g., ``"Profit (binned)"``, ``"Transaction Date (year-month)"`` ).
        Otherwise, the title is simply the field name.

        **Notes** :

        1) You can customize the default field title format by providing the `fieldTitle
        <https://vega.github.io/vega-lite/docs/config.html#top-level-config>`__ property in
        the `config <https://vega.github.io/vega-lite/docs/config.html>`__ or `fieldTitle
        function via the compile function's options
        <https://vega.github.io/vega-lite/usage/compile.html#field-title>`__.

        2) If both field definition's ``title`` and axis, header, or legend ``title`` are
        defined, axis/header/legend title will be used.
    titleAlign : Union[Union[:class:`Align`, Literal['left', 'center', 'right']], Union[:class:`ExprRef`, Dict[required=[expr]]]]
        Horizontal text alignment of axis titles.
    titleAnchor : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], Union[:class:`TitleAnchor`, Literal[None, 'start', 'middle', 'end']]]
        Text anchor position for placing axis titles.
    titleAngle : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], float]
        Angle in degrees of axis titles.
    titleBaseline : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], Union[:class:`TextBaseline`, Union[:class:`Baseline`, Literal['top', 'middle', 'bottom']], str]]
        Vertical text baseline for axis titles. One of ``"alphabetic"`` (default),
        ``"top"``, ``"middle"``, ``"bottom"``, ``"line-top"``, or ``"line-bottom"``. The
        ``"line-top"`` and ``"line-bottom"`` values operate similarly to ``"top"`` and
        ``"bottom"``, but are calculated relative to the *lineHeight* rather than *fontSize*
        alone.
    titleColor : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], Union[None, Union[:class:`Color`, Union[:class:`ColorName`, Literal['black', 'silver', 'gray', 'white', 'maroon', 'red', 'purple', 'fuchsia', 'green', 'lime', 'olive', 'yellow', 'navy', 'blue', 'teal', 'aqua', 'orange', 'aliceblue', 'antiquewhite', 'aquamarine', 'azure', 'beige', 'bisque', 'blanchedalmond', 'blueviolet', 'brown', 'burlywood', 'cadetblue', 'chartreuse', 'chocolate', 'coral', 'cornflowerblue', 'cornsilk', 'crimson', 'cyan', 'darkblue', 'darkcyan', 'darkgoldenrod', 'darkgray', 'darkgreen', 'darkgrey', 'darkkhaki', 'darkmagenta', 'darkolivegreen', 'darkorange', 'darkorchid', 'darkred', 'darksalmon', 'darkseagreen', 'darkslateblue', 'darkslategray', 'darkslategrey', 'darkturquoise', 'darkviolet', 'deeppink', 'deepskyblue', 'dimgray', 'dimgrey', 'dodgerblue', 'firebrick', 'floralwhite', 'forestgreen', 'gainsboro', 'ghostwhite', 'gold', 'goldenrod', 'greenyellow', 'grey', 'honeydew', 'hotpink', 'indianred', 'indigo', 'ivory', 'khaki', 'lavender', 'lavenderblush', 'lawngreen', 'lemonchiffon', 'lightblue', 'lightcoral', 'lightcyan', 'lightgoldenrodyellow', 'lightgray', 'lightgreen', 'lightgrey', 'lightpink', 'lightsalmon', 'lightseagreen', 'lightskyblue', 'lightslategray', 'lightslategrey', 'lightsteelblue', 'lightyellow', 'limegreen', 'linen', 'magenta', 'mediumaquamarine', 'mediumblue', 'mediumorchid', 'mediumpurple', 'mediumseagreen', 'mediumslateblue', 'mediumspringgreen', 'mediumturquoise', 'mediumvioletred', 'midnightblue', 'mintcream', 'mistyrose', 'moccasin', 'navajowhite', 'oldlace', 'olivedrab', 'orangered', 'orchid', 'palegoldenrod', 'palegreen', 'paleturquoise', 'palevioletred', 'papayawhip', 'peachpuff', 'peru', 'pink', 'plum', 'powderblue', 'rosybrown', 'royalblue', 'saddlebrown', 'salmon', 'sandybrown', 'seagreen', 'seashell', 'sienna', 'skyblue', 'slateblue', 'slategray', 'slategrey', 'snow', 'springgreen', 'steelblue', 'tan', 'thistle', 'tomato', 'turquoise', 'violet', 'wheat', 'whitesmoke', 'yellowgreen', 'rebeccapurple']], Union[:class:`HexColor`, str], str]]]
        Color of the title, can be in hex color code or regular color name.
    titleFont : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], str]
        Font of the title. (e.g., ``"Helvetica Neue"`` ).
    titleFontSize : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], float]
        Font size of the title.
    titleFontStyle : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], Union[:class:`FontStyle`, str]]
        Font style of the title.
    titleFontWeight : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], Union[:class:`FontWeight`, Literal['normal', 'bold', 'lighter', 'bolder', 100, 200, 300, 400, 500, 600, 700, 800, 900]]]
        Font weight of the title. This can be either a string (e.g ``"bold"``, ``"normal"``
        ) or a number ( ``100``, ``200``, ``300``, ..., ``900`` where ``"normal"`` = ``400``
        and ``"bold"`` = ``700`` ).
    titleLimit : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], float]
        Maximum allowed pixel width of axis titles.
    titleLineHeight : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], float]
        Line height in pixels for multi-line title text or title text with ``"line-top"`` or
        ``"line-bottom"`` baseline.
    titleOpacity : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], float]
        Opacity of the axis title.
    titlePadding : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], float]
        The padding, in pixels, between title and axis.
    titleX : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], float]
        X-coordinate of the axis title relative to the axis group.
    titleY : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], float]
        Y-coordinate of the axis title relative to the axis group.
    translate : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], float]
        Coordinate space translation offset for axis layout. By default, axes are translated
        by a 0.5 pixel offset for both the x and y coordinates in order to align stroked
        lines with the pixel grid. However, for vector graphics output these pixel-specific
        adjustments may be undesirable, in which case translate can be changed (for example,
        to zero).

        **Default value:** ``0.5``
    values : Union[List[Union[:class:`DateTime`, Dict[required=[]]]], List[bool], List[float], List[str], Union[:class:`ExprRef`, Dict[required=[expr]]]]
        Explicitly set the visible axis tick values.
    zindex : float
        A non-negative integer indicating the z-index of the axis. If zindex is 0, axes
        should be drawn behind all chart elements. To put them in front, set ``zindex`` to
        ``1`` or more.

        **Default value:** ``0`` (behind the marks).
    """

    _schema = {"$ref": "#/definitions/Axis"}

    def __init__(
        self,
        aria: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], bool], UndefinedType
        ] = Undefined,
        bandPosition: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], float], UndefinedType
        ] = Undefined,
        description: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], str], UndefinedType
        ] = Undefined,
        domain: Union[bool, UndefinedType] = Undefined,
        domainCap: Union[
            Union[
                Union["ExprRef", "_ParameterProtocol", dict],
                Union["StrokeCap", Literal["butt", "round", "square"]],
            ],
            UndefinedType,
        ] = Undefined,
        domainColor: Union[
            Union[
                Union["ExprRef", "_ParameterProtocol", dict],
                Union[
                    None,
                    Union[
                        "Color",
                        Union[
                            "ColorName",
                            Literal[
                                "black",
                                "silver",
                                "gray",
                                "white",
                                "maroon",
                                "red",
                                "purple",
                                "fuchsia",
                                "green",
                                "lime",
                                "olive",
                                "yellow",
                                "navy",
                                "blue",
                                "teal",
                                "aqua",
                                "orange",
                                "aliceblue",
                                "antiquewhite",
                                "aquamarine",
                                "azure",
                                "beige",
                                "bisque",
                                "blanchedalmond",
                                "blueviolet",
                                "brown",
                                "burlywood",
                                "cadetblue",
                                "chartreuse",
                                "chocolate",
                                "coral",
                                "cornflowerblue",
                                "cornsilk",
                                "crimson",
                                "cyan",
                                "darkblue",
                                "darkcyan",
                                "darkgoldenrod",
                                "darkgray",
                                "darkgreen",
                                "darkgrey",
                                "darkkhaki",
                                "darkmagenta",
                                "darkolivegreen",
                                "darkorange",
                                "darkorchid",
                                "darkred",
                                "darksalmon",
                                "darkseagreen",
                                "darkslateblue",
                                "darkslategray",
                                "darkslategrey",
                                "darkturquoise",
                                "darkviolet",
                                "deeppink",
                                "deepskyblue",
                                "dimgray",
                                "dimgrey",
                                "dodgerblue",
                                "firebrick",
                                "floralwhite",
                                "forestgreen",
                                "gainsboro",
                                "ghostwhite",
                                "gold",
                                "goldenrod",
                                "greenyellow",
                                "grey",
                                "honeydew",
                                "hotpink",
                                "indianred",
                                "indigo",
                                "ivory",
                                "khaki",
                                "lavender",
                                "lavenderblush",
                                "lawngreen",
                                "lemonchiffon",
                                "lightblue",
                                "lightcoral",
                                "lightcyan",
                                "lightgoldenrodyellow",
                                "lightgray",
                                "lightgreen",
                                "lightgrey",
                                "lightpink",
                                "lightsalmon",
                                "lightseagreen",
                                "lightskyblue",
                                "lightslategray",
                                "lightslategrey",
                                "lightsteelblue",
                                "lightyellow",
                                "limegreen",
                                "linen",
                                "magenta",
                                "mediumaquamarine",
                                "mediumblue",
                                "mediumorchid",
                                "mediumpurple",
                                "mediumseagreen",
                                "mediumslateblue",
                                "mediumspringgreen",
                                "mediumturquoise",
                                "mediumvioletred",
                                "midnightblue",
                                "mintcream",
                                "mistyrose",
                                "moccasin",
                                "navajowhite",
                                "oldlace",
                                "olivedrab",
                                "orangered",
                                "orchid",
                                "palegoldenrod",
                                "palegreen",
                                "paleturquoise",
                                "palevioletred",
                                "papayawhip",
                                "peachpuff",
                                "peru",
                                "pink",
                                "plum",
                                "powderblue",
                                "rosybrown",
                                "royalblue",
                                "saddlebrown",
                                "salmon",
                                "sandybrown",
                                "seagreen",
                                "seashell",
                                "sienna",
                                "skyblue",
                                "slateblue",
                                "slategray",
                                "slategrey",
                                "snow",
                                "springgreen",
                                "steelblue",
                                "tan",
                                "thistle",
                                "tomato",
                                "turquoise",
                                "violet",
                                "wheat",
                                "whitesmoke",
                                "yellowgreen",
                                "rebeccapurple",
                            ],
                        ],
                        Union["HexColor", str],
                        str,
                    ],
                ],
            ],
            UndefinedType,
        ] = Undefined,
        domainDash: Union[
            Union[List[float], Union["ExprRef", "_ParameterProtocol", dict]],
            UndefinedType,
        ] = Undefined,
        domainDashOffset: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], float], UndefinedType
        ] = Undefined,
        domainOpacity: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], float], UndefinedType
        ] = Undefined,
        domainWidth: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], float], UndefinedType
        ] = Undefined,
        format: Union[Union[Union["Dict", dict], str], UndefinedType] = Undefined,
        formatType: Union[str, UndefinedType] = Undefined,
        grid: Union[bool, UndefinedType] = Undefined,
        gridCap: Union[
            Union[
                Union["ExprRef", "_ParameterProtocol", dict],
                Union["StrokeCap", Literal["butt", "round", "square"]],
            ],
            UndefinedType,
        ] = Undefined,
        gridColor: Union[
            Union[
                Union["ConditionalAxisColor", dict],
                Union["ExprRef", "_ParameterProtocol", dict],
                Union[
                    None,
                    Union[
                        "Color",
                        Union[
                            "ColorName",
                            Literal[
                                "black",
                                "silver",
                                "gray",
                                "white",
                                "maroon",
                                "red",
                                "purple",
                                "fuchsia",
                                "green",
                                "lime",
                                "olive",
                                "yellow",
                                "navy",
                                "blue",
                                "teal",
                                "aqua",
                                "orange",
                                "aliceblue",
                                "antiquewhite",
                                "aquamarine",
                                "azure",
                                "beige",
                                "bisque",
                                "blanchedalmond",
                                "blueviolet",
                                "brown",
                                "burlywood",
                                "cadetblue",
                                "chartreuse",
                                "chocolate",
                                "coral",
                                "cornflowerblue",
                                "cornsilk",
                                "crimson",
                                "cyan",
                                "darkblue",
                                "darkcyan",
                                "darkgoldenrod",
                                "darkgray",
                                "darkgreen",
                                "darkgrey",
                                "darkkhaki",
                                "darkmagenta",
                                "darkolivegreen",
                                "darkorange",
                                "darkorchid",
                                "darkred",
                                "darksalmon",
                                "darkseagreen",
                                "darkslateblue",
                                "darkslategray",
                                "darkslategrey",
                                "darkturquoise",
                                "darkviolet",
                                "deeppink",
                                "deepskyblue",
                                "dimgray",
                                "dimgrey",
                                "dodgerblue",
                                "firebrick",
                                "floralwhite",
                                "forestgreen",
                                "gainsboro",
                                "ghostwhite",
                                "gold",
                                "goldenrod",
                                "greenyellow",
                                "grey",
                                "honeydew",
                                "hotpink",
                                "indianred",
                                "indigo",
                                "ivory",
                                "khaki",
                                "lavender",
                                "lavenderblush",
                                "lawngreen",
                                "lemonchiffon",
                                "lightblue",
                                "lightcoral",
                                "lightcyan",
                                "lightgoldenrodyellow",
                                "lightgray",
                                "lightgreen",
                                "lightgrey",
                                "lightpink",
                                "lightsalmon",
                                "lightseagreen",
                                "lightskyblue",
                                "lightslategray",
                                "lightslategrey",
                                "lightsteelblue",
                                "lightyellow",
                                "limegreen",
                                "linen",
                                "magenta",
                                "mediumaquamarine",
                                "mediumblue",
                                "mediumorchid",
                                "mediumpurple",
                                "mediumseagreen",
                                "mediumslateblue",
                                "mediumspringgreen",
                                "mediumturquoise",
                                "mediumvioletred",
                                "midnightblue",
                                "mintcream",
                                "mistyrose",
                                "moccasin",
                                "navajowhite",
                                "oldlace",
                                "olivedrab",
                                "orangered",
                                "orchid",
                                "palegoldenrod",
                                "palegreen",
                                "paleturquoise",
                                "palevioletred",
                                "papayawhip",
                                "peachpuff",
                                "peru",
                                "pink",
                                "plum",
                                "powderblue",
                                "rosybrown",
                                "royalblue",
                                "saddlebrown",
                                "salmon",
                                "sandybrown",
                                "seagreen",
                                "seashell",
                                "sienna",
                                "skyblue",
                                "slateblue",
                                "slategray",
                                "slategrey",
                                "snow",
                                "springgreen",
                                "steelblue",
                                "tan",
                                "thistle",
                                "tomato",
                                "turquoise",
                                "violet",
                                "wheat",
                                "whitesmoke",
                                "yellowgreen",
                                "rebeccapurple",
                            ],
                        ],
                        Union["HexColor", str],
                        str,
                    ],
                ],
            ],
            UndefinedType,
        ] = Undefined,
        gridDash: Union[
            Union[
                List[float],
                Union["ConditionalAxisNumberArray", dict],
                Union["ExprRef", "_ParameterProtocol", dict],
            ],
            UndefinedType,
        ] = Undefined,
        gridDashOffset: Union[
            Union[
                Union["ConditionalAxisNumber", dict],
                Union["ExprRef", "_ParameterProtocol", dict],
                float,
            ],
            UndefinedType,
        ] = Undefined,
        gridOpacity: Union[
            Union[
                Union["ConditionalAxisNumber", dict],
                Union["ExprRef", "_ParameterProtocol", dict],
                float,
            ],
            UndefinedType,
        ] = Undefined,
        gridWidth: Union[
            Union[
                Union["ConditionalAxisNumber", dict],
                Union["ExprRef", "_ParameterProtocol", dict],
                float,
            ],
            UndefinedType,
        ] = Undefined,
        labelAlign: Union[
            Union[
                Union["Align", Literal["left", "center", "right"]],
                Union["ConditionalAxisLabelAlign", dict],
                Union["ExprRef", "_ParameterProtocol", dict],
            ],
            UndefinedType,
        ] = Undefined,
        labelAngle: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], float], UndefinedType
        ] = Undefined,
        labelBaseline: Union[
            Union[
                Union["ConditionalAxisLabelBaseline", dict],
                Union["ExprRef", "_ParameterProtocol", dict],
                Union[
                    "TextBaseline",
                    Union["Baseline", Literal["top", "middle", "bottom"]],
                    str,
                ],
            ],
            UndefinedType,
        ] = Undefined,
        labelBound: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], Union[bool, float]],
            UndefinedType,
        ] = Undefined,
        labelColor: Union[
            Union[
                Union["ConditionalAxisColor", dict],
                Union["ExprRef", "_ParameterProtocol", dict],
                Union[
                    None,
                    Union[
                        "Color",
                        Union[
                            "ColorName",
                            Literal[
                                "black",
                                "silver",
                                "gray",
                                "white",
                                "maroon",
                                "red",
                                "purple",
                                "fuchsia",
                                "green",
                                "lime",
                                "olive",
                                "yellow",
                                "navy",
                                "blue",
                                "teal",
                                "aqua",
                                "orange",
                                "aliceblue",
                                "antiquewhite",
                                "aquamarine",
                                "azure",
                                "beige",
                                "bisque",
                                "blanchedalmond",
                                "blueviolet",
                                "brown",
                                "burlywood",
                                "cadetblue",
                                "chartreuse",
                                "chocolate",
                                "coral",
                                "cornflowerblue",
                                "cornsilk",
                                "crimson",
                                "cyan",
                                "darkblue",
                                "darkcyan",
                                "darkgoldenrod",
                                "darkgray",
                                "darkgreen",
                                "darkgrey",
                                "darkkhaki",
                                "darkmagenta",
                                "darkolivegreen",
                                "darkorange",
                                "darkorchid",
                                "darkred",
                                "darksalmon",
                                "darkseagreen",
                                "darkslateblue",
                                "darkslategray",
                                "darkslategrey",
                                "darkturquoise",
                                "darkviolet",
                                "deeppink",
                                "deepskyblue",
                                "dimgray",
                                "dimgrey",
                                "dodgerblue",
                                "firebrick",
                                "floralwhite",
                                "forestgreen",
                                "gainsboro",
                                "ghostwhite",
                                "gold",
                                "goldenrod",
                                "greenyellow",
                                "grey",
                                "honeydew",
                                "hotpink",
                                "indianred",
                                "indigo",
                                "ivory",
                                "khaki",
                                "lavender",
                                "lavenderblush",
                                "lawngreen",
                                "lemonchiffon",
                                "lightblue",
                                "lightcoral",
                                "lightcyan",
                                "lightgoldenrodyellow",
                                "lightgray",
                                "lightgreen",
                                "lightgrey",
                                "lightpink",
                                "lightsalmon",
                                "lightseagreen",
                                "lightskyblue",
                                "lightslategray",
                                "lightslategrey",
                                "lightsteelblue",
                                "lightyellow",
                                "limegreen",
                                "linen",
                                "magenta",
                                "mediumaquamarine",
                                "mediumblue",
                                "mediumorchid",
                                "mediumpurple",
                                "mediumseagreen",
                                "mediumslateblue",
                                "mediumspringgreen",
                                "mediumturquoise",
                                "mediumvioletred",
                                "midnightblue",
                                "mintcream",
                                "mistyrose",
                                "moccasin",
                                "navajowhite",
                                "oldlace",
                                "olivedrab",
                                "orangered",
                                "orchid",
                                "palegoldenrod",
                                "palegreen",
                                "paleturquoise",
                                "palevioletred",
                                "papayawhip",
                                "peachpuff",
                                "peru",
                                "pink",
                                "plum",
                                "powderblue",
                                "rosybrown",
                                "royalblue",
                                "saddlebrown",
                                "salmon",
                                "sandybrown",
                                "seagreen",
                                "seashell",
                                "sienna",
                                "skyblue",
                                "slateblue",
                                "slategray",
                                "slategrey",
                                "snow",
                                "springgreen",
                                "steelblue",
                                "tan",
                                "thistle",
                                "tomato",
                                "turquoise",
                                "violet",
                                "wheat",
                                "whitesmoke",
                                "yellowgreen",
                                "rebeccapurple",
                            ],
                        ],
                        Union["HexColor", str],
                        str,
                    ],
                ],
            ],
            UndefinedType,
        ] = Undefined,
        labelExpr: Union[str, UndefinedType] = Undefined,
        labelFlush: Union[Union[bool, float], UndefinedType] = Undefined,
        labelFlushOffset: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], float], UndefinedType
        ] = Undefined,
        labelFont: Union[
            Union[
                Union["ConditionalAxisString", dict],
                Union["ExprRef", "_ParameterProtocol", dict],
                str,
            ],
            UndefinedType,
        ] = Undefined,
        labelFontSize: Union[
            Union[
                Union["ConditionalAxisNumber", dict],
                Union["ExprRef", "_ParameterProtocol", dict],
                float,
            ],
            UndefinedType,
        ] = Undefined,
        labelFontStyle: Union[
            Union[
                Union["ConditionalAxisLabelFontStyle", dict],
                Union["ExprRef", "_ParameterProtocol", dict],
                Union["FontStyle", str],
            ],
            UndefinedType,
        ] = Undefined,
        labelFontWeight: Union[
            Union[
                Union["ConditionalAxisLabelFontWeight", dict],
                Union["ExprRef", "_ParameterProtocol", dict],
                Union[
                    "FontWeight",
                    Literal[
                        "normal",
                        "bold",
                        "lighter",
                        "bolder",
                        100,
                        200,
                        300,
                        400,
                        500,
                        600,
                        700,
                        800,
                        900,
                    ],
                ],
            ],
            UndefinedType,
        ] = Undefined,
        labelLimit: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], float], UndefinedType
        ] = Undefined,
        labelLineHeight: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], float], UndefinedType
        ] = Undefined,
        labelOffset: Union[
            Union[
                Union["ConditionalAxisNumber", dict],
                Union["ExprRef", "_ParameterProtocol", dict],
                float,
            ],
            UndefinedType,
        ] = Undefined,
        labelOpacity: Union[
            Union[
                Union["ConditionalAxisNumber", dict],
                Union["ExprRef", "_ParameterProtocol", dict],
                float,
            ],
            UndefinedType,
        ] = Undefined,
        labelOverlap: Union[
            Union[
                Union["ExprRef", "_ParameterProtocol", dict],
                Union["LabelOverlap", bool, str],
            ],
            UndefinedType,
        ] = Undefined,
        labelPadding: Union[
            Union[
                Union["ConditionalAxisNumber", dict],
                Union["ExprRef", "_ParameterProtocol", dict],
                float,
            ],
            UndefinedType,
        ] = Undefined,
        labelSeparation: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], float], UndefinedType
        ] = Undefined,
        labels: Union[bool, UndefinedType] = Undefined,
        maxExtent: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], float], UndefinedType
        ] = Undefined,
        minExtent: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], float], UndefinedType
        ] = Undefined,
        offset: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], float], UndefinedType
        ] = Undefined,
        orient: Union[
            Union[
                Union["AxisOrient", Literal["top", "bottom", "left", "right"]],
                Union["ExprRef", "_ParameterProtocol", dict],
            ],
            UndefinedType,
        ] = Undefined,
        position: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], float], UndefinedType
        ] = Undefined,
        style: Union[Union[List[str], str], UndefinedType] = Undefined,
        tickBand: Union[
            Union[
                Literal["center", "extent"],
                Union["ExprRef", "_ParameterProtocol", dict],
            ],
            UndefinedType,
        ] = Undefined,
        tickCap: Union[
            Union[
                Union["ExprRef", "_ParameterProtocol", dict],
                Union["StrokeCap", Literal["butt", "round", "square"]],
            ],
            UndefinedType,
        ] = Undefined,
        tickColor: Union[
            Union[
                Union["ConditionalAxisColor", dict],
                Union["ExprRef", "_ParameterProtocol", dict],
                Union[
                    None,
                    Union[
                        "Color",
                        Union[
                            "ColorName",
                            Literal[
                                "black",
                                "silver",
                                "gray",
                                "white",
                                "maroon",
                                "red",
                                "purple",
                                "fuchsia",
                                "green",
                                "lime",
                                "olive",
                                "yellow",
                                "navy",
                                "blue",
                                "teal",
                                "aqua",
                                "orange",
                                "aliceblue",
                                "antiquewhite",
                                "aquamarine",
                                "azure",
                                "beige",
                                "bisque",
                                "blanchedalmond",
                                "blueviolet",
                                "brown",
                                "burlywood",
                                "cadetblue",
                                "chartreuse",
                                "chocolate",
                                "coral",
                                "cornflowerblue",
                                "cornsilk",
                                "crimson",
                                "cyan",
                                "darkblue",
                                "darkcyan",
                                "darkgoldenrod",
                                "darkgray",
                                "darkgreen",
                                "darkgrey",
                                "darkkhaki",
                                "darkmagenta",
                                "darkolivegreen",
                                "darkorange",
                                "darkorchid",
                                "darkred",
                                "darksalmon",
                                "darkseagreen",
                                "darkslateblue",
                                "darkslategray",
                                "darkslategrey",
                                "darkturquoise",
                                "darkviolet",
                                "deeppink",
                                "deepskyblue",
                                "dimgray",
                                "dimgrey",
                                "dodgerblue",
                                "firebrick",
                                "floralwhite",
                                "forestgreen",
                                "gainsboro",
                                "ghostwhite",
                                "gold",
                                "goldenrod",
                                "greenyellow",
                                "grey",
                                "honeydew",
                                "hotpink",
                                "indianred",
                                "indigo",
                                "ivory",
                                "khaki",
                                "lavender",
                                "lavenderblush",
                                "lawngreen",
                                "lemonchiffon",
                                "lightblue",
                                "lightcoral",
                                "lightcyan",
                                "lightgoldenrodyellow",
                                "lightgray",
                                "lightgreen",
                                "lightgrey",
                                "lightpink",
                                "lightsalmon",
                                "lightseagreen",
                                "lightskyblue",
                                "lightslategray",
                                "lightslategrey",
                                "lightsteelblue",
                                "lightyellow",
                                "limegreen",
                                "linen",
                                "magenta",
                                "mediumaquamarine",
                                "mediumblue",
                                "mediumorchid",
                                "mediumpurple",
                                "mediumseagreen",
                                "mediumslateblue",
                                "mediumspringgreen",
                                "mediumturquoise",
                                "mediumvioletred",
                                "midnightblue",
                                "mintcream",
                                "mistyrose",
                                "moccasin",
                                "navajowhite",
                                "oldlace",
                                "olivedrab",
                                "orangered",
                                "orchid",
                                "palegoldenrod",
                                "palegreen",
                                "paleturquoise",
                                "palevioletred",
                                "papayawhip",
                                "peachpuff",
                                "peru",
                                "pink",
                                "plum",
                                "powderblue",
                                "rosybrown",
                                "royalblue",
                                "saddlebrown",
                                "salmon",
                                "sandybrown",
                                "seagreen",
                                "seashell",
                                "sienna",
                                "skyblue",
                                "slateblue",
                                "slategray",
                                "slategrey",
                                "snow",
                                "springgreen",
                                "steelblue",
                                "tan",
                                "thistle",
                                "tomato",
                                "turquoise",
                                "violet",
                                "wheat",
                                "whitesmoke",
                                "yellowgreen",
                                "rebeccapurple",
                            ],
                        ],
                        Union["HexColor", str],
                        str,
                    ],
                ],
            ],
            UndefinedType,
        ] = Undefined,
        tickCount: Union[
            Union[
                Union["ExprRef", "_ParameterProtocol", dict],
                Union[
                    "TimeInterval",
                    Literal[
                        "millisecond",
                        "second",
                        "minute",
                        "hour",
                        "day",
                        "week",
                        "month",
                        "year",
                    ],
                ],
                Union["TimeIntervalStep", dict],
                float,
            ],
            UndefinedType,
        ] = Undefined,
        tickDash: Union[
            Union[
                List[float],
                Union["ConditionalAxisNumberArray", dict],
                Union["ExprRef", "_ParameterProtocol", dict],
            ],
            UndefinedType,
        ] = Undefined,
        tickDashOffset: Union[
            Union[
                Union["ConditionalAxisNumber", dict],
                Union["ExprRef", "_ParameterProtocol", dict],
                float,
            ],
            UndefinedType,
        ] = Undefined,
        tickExtra: Union[bool, UndefinedType] = Undefined,
        tickMinStep: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], float], UndefinedType
        ] = Undefined,
        tickOffset: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], float], UndefinedType
        ] = Undefined,
        tickOpacity: Union[
            Union[
                Union["ConditionalAxisNumber", dict],
                Union["ExprRef", "_ParameterProtocol", dict],
                float,
            ],
            UndefinedType,
        ] = Undefined,
        tickRound: Union[bool, UndefinedType] = Undefined,
        tickSize: Union[
            Union[
                Union["ConditionalAxisNumber", dict],
                Union["ExprRef", "_ParameterProtocol", dict],
                float,
            ],
            UndefinedType,
        ] = Undefined,
        tickWidth: Union[
            Union[
                Union["ConditionalAxisNumber", dict],
                Union["ExprRef", "_ParameterProtocol", dict],
                float,
            ],
            UndefinedType,
        ] = Undefined,
        ticks: Union[bool, UndefinedType] = Undefined,
        title: Union[
            Union[None, Union["Text", List[str], str]], UndefinedType
        ] = Undefined,
        titleAlign: Union[
            Union[
                Union["Align", Literal["left", "center", "right"]],
                Union["ExprRef", "_ParameterProtocol", dict],
            ],
            UndefinedType,
        ] = Undefined,
        titleAnchor: Union[
            Union[
                Union["ExprRef", "_ParameterProtocol", dict],
                Union["TitleAnchor", Literal[None, "start", "middle", "end"]],
            ],
            UndefinedType,
        ] = Undefined,
        titleAngle: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], float], UndefinedType
        ] = Undefined,
        titleBaseline: Union[
            Union[
                Union["ExprRef", "_ParameterProtocol", dict],
                Union[
                    "TextBaseline",
                    Union["Baseline", Literal["top", "middle", "bottom"]],
                    str,
                ],
            ],
            UndefinedType,
        ] = Undefined,
        titleColor: Union[
            Union[
                Union["ExprRef", "_ParameterProtocol", dict],
                Union[
                    None,
                    Union[
                        "Color",
                        Union[
                            "ColorName",
                            Literal[
                                "black",
                                "silver",
                                "gray",
                                "white",
                                "maroon",
                                "red",
                                "purple",
                                "fuchsia",
                                "green",
                                "lime",
                                "olive",
                                "yellow",
                                "navy",
                                "blue",
                                "teal",
                                "aqua",
                                "orange",
                                "aliceblue",
                                "antiquewhite",
                                "aquamarine",
                                "azure",
                                "beige",
                                "bisque",
                                "blanchedalmond",
                                "blueviolet",
                                "brown",
                                "burlywood",
                                "cadetblue",
                                "chartreuse",
                                "chocolate",
                                "coral",
                                "cornflowerblue",
                                "cornsilk",
                                "crimson",
                                "cyan",
                                "darkblue",
                                "darkcyan",
                                "darkgoldenrod",
                                "darkgray",
                                "darkgreen",
                                "darkgrey",
                                "darkkhaki",
                                "darkmagenta",
                                "darkolivegreen",
                                "darkorange",
                                "darkorchid",
                                "darkred",
                                "darksalmon",
                                "darkseagreen",
                                "darkslateblue",
                                "darkslategray",
                                "darkslategrey",
                                "darkturquoise",
                                "darkviolet",
                                "deeppink",
                                "deepskyblue",
                                "dimgray",
                                "dimgrey",
                                "dodgerblue",
                                "firebrick",
                                "floralwhite",
                                "forestgreen",
                                "gainsboro",
                                "ghostwhite",
                                "gold",
                                "goldenrod",
                                "greenyellow",
                                "grey",
                                "honeydew",
                                "hotpink",
                                "indianred",
                                "indigo",
                                "ivory",
                                "khaki",
                                "lavender",
                                "lavenderblush",
                                "lawngreen",
                                "lemonchiffon",
                                "lightblue",
                                "lightcoral",
                                "lightcyan",
                                "lightgoldenrodyellow",
                                "lightgray",
                                "lightgreen",
                                "lightgrey",
                                "lightpink",
                                "lightsalmon",
                                "lightseagreen",
                                "lightskyblue",
                                "lightslategray",
                                "lightslategrey",
                                "lightsteelblue",
                                "lightyellow",
                                "limegreen",
                                "linen",
                                "magenta",
                                "mediumaquamarine",
                                "mediumblue",
                                "mediumorchid",
                                "mediumpurple",
                                "mediumseagreen",
                                "mediumslateblue",
                                "mediumspringgreen",
                                "mediumturquoise",
                                "mediumvioletred",
                                "midnightblue",
                                "mintcream",
                                "mistyrose",
                                "moccasin",
                                "navajowhite",
                                "oldlace",
                                "olivedrab",
                                "orangered",
                                "orchid",
                                "palegoldenrod",
                                "palegreen",
                                "paleturquoise",
                                "palevioletred",
                                "papayawhip",
                                "peachpuff",
                                "peru",
                                "pink",
                                "plum",
                                "powderblue",
                                "rosybrown",
                                "royalblue",
                                "saddlebrown",
                                "salmon",
                                "sandybrown",
                                "seagreen",
                                "seashell",
                                "sienna",
                                "skyblue",
                                "slateblue",
                                "slategray",
                                "slategrey",
                                "snow",
                                "springgreen",
                                "steelblue",
                                "tan",
                                "thistle",
                                "tomato",
                                "turquoise",
                                "violet",
                                "wheat",
                                "whitesmoke",
                                "yellowgreen",
                                "rebeccapurple",
                            ],
                        ],
                        Union["HexColor", str],
                        str,
                    ],
                ],
            ],
            UndefinedType,
        ] = Undefined,
        titleFont: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], str], UndefinedType
        ] = Undefined,
        titleFontSize: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], float], UndefinedType
        ] = Undefined,
        titleFontStyle: Union[
            Union[
                Union["ExprRef", "_ParameterProtocol", dict], Union["FontStyle", str]
            ],
            UndefinedType,
        ] = Undefined,
        titleFontWeight: Union[
            Union[
                Union["ExprRef", "_ParameterProtocol", dict],
                Union[
                    "FontWeight",
                    Literal[
                        "normal",
                        "bold",
                        "lighter",
                        "bolder",
                        100,
                        200,
                        300,
                        400,
                        500,
                        600,
                        700,
                        800,
                        900,
                    ],
                ],
            ],
            UndefinedType,
        ] = Undefined,
        titleLimit: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], float], UndefinedType
        ] = Undefined,
        titleLineHeight: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], float], UndefinedType
        ] = Undefined,
        titleOpacity: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], float], UndefinedType
        ] = Undefined,
        titlePadding: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], float], UndefinedType
        ] = Undefined,
        titleX: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], float], UndefinedType
        ] = Undefined,
        titleY: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], float], UndefinedType
        ] = Undefined,
        translate: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], float], UndefinedType
        ] = Undefined,
        values: Union[
            Union[
                List[bool],
                List[float],
                List[str],
                Union["ExprRef", "_ParameterProtocol", dict],
                Union[List["DateTime"], List[dict]],
            ],
            UndefinedType,
        ] = Undefined,
        zindex: Union[float, UndefinedType] = Undefined,
        **kwds
    ):
        super(Axis, self).__init__(
            aria=aria,
            bandPosition=bandPosition,
            description=description,
            domain=domain,
            domainCap=domainCap,
            domainColor=domainColor,
            domainDash=domainDash,
            domainDashOffset=domainDashOffset,
            domainOpacity=domainOpacity,
            domainWidth=domainWidth,
            format=format,
            formatType=formatType,
            grid=grid,
            gridCap=gridCap,
            gridColor=gridColor,
            gridDash=gridDash,
            gridDashOffset=gridDashOffset,
            gridOpacity=gridOpacity,
            gridWidth=gridWidth,
            labelAlign=labelAlign,
            labelAngle=labelAngle,
            labelBaseline=labelBaseline,
            labelBound=labelBound,
            labelColor=labelColor,
            labelExpr=labelExpr,
            labelFlush=labelFlush,
            labelFlushOffset=labelFlushOffset,
            labelFont=labelFont,
            labelFontSize=labelFontSize,
            labelFontStyle=labelFontStyle,
            labelFontWeight=labelFontWeight,
            labelLimit=labelLimit,
            labelLineHeight=labelLineHeight,
            labelOffset=labelOffset,
            labelOpacity=labelOpacity,
            labelOverlap=labelOverlap,
            labelPadding=labelPadding,
            labelSeparation=labelSeparation,
            labels=labels,
            maxExtent=maxExtent,
            minExtent=minExtent,
            offset=offset,
            orient=orient,
            position=position,
            style=style,
            tickBand=tickBand,
            tickCap=tickCap,
            tickColor=tickColor,
            tickCount=tickCount,
            tickDash=tickDash,
            tickDashOffset=tickDashOffset,
            tickExtra=tickExtra,
            tickMinStep=tickMinStep,
            tickOffset=tickOffset,
            tickOpacity=tickOpacity,
            tickRound=tickRound,
            tickSize=tickSize,
            tickWidth=tickWidth,
            ticks=ticks,
            title=title,
            titleAlign=titleAlign,
            titleAnchor=titleAnchor,
            titleAngle=titleAngle,
            titleBaseline=titleBaseline,
            titleColor=titleColor,
            titleFont=titleFont,
            titleFontSize=titleFontSize,
            titleFontStyle=titleFontStyle,
            titleFontWeight=titleFontWeight,
            titleLimit=titleLimit,
            titleLineHeight=titleLineHeight,
            titleOpacity=titleOpacity,
            titlePadding=titlePadding,
            titleX=titleX,
            titleY=titleY,
            translate=translate,
            values=values,
            zindex=zindex,
            **kwds
        )


class AxisConfig(VegaLiteSchema):
    """AxisConfig schema wrapper

    Union[:class:`AxisConfig`, Dict[required=[]]]

    Parameters
    ----------

    aria : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], bool]
        A boolean flag indicating if `ARIA attributes
        <https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA>`__ should be
        included (SVG output only). If ``false``, the "aria-hidden" attribute will be set on
        the output SVG group, removing the axis from the ARIA accessibility tree.

        **Default value:** ``true``
    bandPosition : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], float]
        An interpolation fraction indicating where, for ``band`` scales, axis ticks should
        be positioned. A value of ``0`` places ticks at the left edge of their bands. A
        value of ``0.5`` places ticks in the middle of their bands.

        **Default value:** ``0.5``
    description : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], str]
        A text description of this axis for `ARIA accessibility
        <https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA>`__ (SVG output
        only). If the ``aria`` property is true, for SVG output the `"aria-label" attribute
        <https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/ARIA_Techniques/Using_the_aria-label_attribute>`__
        will be set to this description. If the description is unspecified it will be
        automatically generated.
    disable : bool
        Disable axis by default.
    domain : bool
        A boolean flag indicating if the domain (the axis baseline) should be included as
        part of the axis.

        **Default value:** ``true``
    domainCap : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], Union[:class:`StrokeCap`, Literal['butt', 'round', 'square']]]
        The stroke cap for the domain line's ending style. One of ``"butt"``, ``"round"`` or
        ``"square"``.

        **Default value:** ``"butt"``
    domainColor : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], Union[None, Union[:class:`Color`, Union[:class:`ColorName`, Literal['black', 'silver', 'gray', 'white', 'maroon', 'red', 'purple', 'fuchsia', 'green', 'lime', 'olive', 'yellow', 'navy', 'blue', 'teal', 'aqua', 'orange', 'aliceblue', 'antiquewhite', 'aquamarine', 'azure', 'beige', 'bisque', 'blanchedalmond', 'blueviolet', 'brown', 'burlywood', 'cadetblue', 'chartreuse', 'chocolate', 'coral', 'cornflowerblue', 'cornsilk', 'crimson', 'cyan', 'darkblue', 'darkcyan', 'darkgoldenrod', 'darkgray', 'darkgreen', 'darkgrey', 'darkkhaki', 'darkmagenta', 'darkolivegreen', 'darkorange', 'darkorchid', 'darkred', 'darksalmon', 'darkseagreen', 'darkslateblue', 'darkslategray', 'darkslategrey', 'darkturquoise', 'darkviolet', 'deeppink', 'deepskyblue', 'dimgray', 'dimgrey', 'dodgerblue', 'firebrick', 'floralwhite', 'forestgreen', 'gainsboro', 'ghostwhite', 'gold', 'goldenrod', 'greenyellow', 'grey', 'honeydew', 'hotpink', 'indianred', 'indigo', 'ivory', 'khaki', 'lavender', 'lavenderblush', 'lawngreen', 'lemonchiffon', 'lightblue', 'lightcoral', 'lightcyan', 'lightgoldenrodyellow', 'lightgray', 'lightgreen', 'lightgrey', 'lightpink', 'lightsalmon', 'lightseagreen', 'lightskyblue', 'lightslategray', 'lightslategrey', 'lightsteelblue', 'lightyellow', 'limegreen', 'linen', 'magenta', 'mediumaquamarine', 'mediumblue', 'mediumorchid', 'mediumpurple', 'mediumseagreen', 'mediumslateblue', 'mediumspringgreen', 'mediumturquoise', 'mediumvioletred', 'midnightblue', 'mintcream', 'mistyrose', 'moccasin', 'navajowhite', 'oldlace', 'olivedrab', 'orangered', 'orchid', 'palegoldenrod', 'palegreen', 'paleturquoise', 'palevioletred', 'papayawhip', 'peachpuff', 'peru', 'pink', 'plum', 'powderblue', 'rosybrown', 'royalblue', 'saddlebrown', 'salmon', 'sandybrown', 'seagreen', 'seashell', 'sienna', 'skyblue', 'slateblue', 'slategray', 'slategrey', 'snow', 'springgreen', 'steelblue', 'tan', 'thistle', 'tomato', 'turquoise', 'violet', 'wheat', 'whitesmoke', 'yellowgreen', 'rebeccapurple']], Union[:class:`HexColor`, str], str]]]
        Color of axis domain line.

        **Default value:** ``"gray"``.
    domainDash : Union[List[float], Union[:class:`ExprRef`, Dict[required=[expr]]]]
        An array of alternating [stroke, space] lengths for dashed domain lines.
    domainDashOffset : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], float]
        The pixel offset at which to start drawing with the domain dash array.
    domainOpacity : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], float]
        Opacity of the axis domain line.
    domainWidth : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], float]
        Stroke width of axis domain line

        **Default value:** ``1``
    format : Union[Union[:class:`Dict`, Dict[required=[]]], str]
        When used with the default ``"number"`` and ``"time"`` format type, the text
        formatting pattern for labels of guides (axes, legends, headers) and text marks.


        * If the format type is ``"number"`` (e.g., for quantitative fields), this is D3's
          `number format pattern <https://github.com/d3/d3-format#locale_format>`__.
        * If the format type is ``"time"`` (e.g., for temporal fields), this is D3's `time
          format pattern <https://github.com/d3/d3-time-format#locale_format>`__.

        See the `format documentation <https://vega.github.io/vega-lite/docs/format.html>`__
        for more examples.

        When used with a `custom formatType
        <https://vega.github.io/vega-lite/docs/config.html#custom-format-type>`__, this
        value will be passed as ``format`` alongside ``datum.value`` to the registered
        function.

        **Default value:**  Derived from `numberFormat
        <https://vega.github.io/vega-lite/docs/config.html#format>`__ config for number
        format and from `timeFormat
        <https://vega.github.io/vega-lite/docs/config.html#format>`__ config for time
        format.
    formatType : str
        The format type for labels. One of ``"number"``, ``"time"``, or a `registered custom
        format type
        <https://vega.github.io/vega-lite/docs/config.html#custom-format-type>`__.

        **Default value:**


        * ``"time"`` for temporal fields and ordinal and nominal fields with ``timeUnit``.
        * ``"number"`` for quantitative fields as well as ordinal and nominal fields without
          ``timeUnit``.
    grid : bool
        A boolean flag indicating if grid lines should be included as part of the axis

        **Default value:** ``true`` for `continuous scales
        <https://vega.github.io/vega-lite/docs/scale.html#continuous>`__ that are not
        binned; otherwise, ``false``.
    gridCap : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], Union[:class:`StrokeCap`, Literal['butt', 'round', 'square']]]
        The stroke cap for grid lines' ending style. One of ``"butt"``, ``"round"`` or
        ``"square"``.

        **Default value:** ``"butt"``
    gridColor : Union[Union[:class:`ConditionalAxisColor`, Dict[required=[condition, expr]], Dict[required=[condition, value]]], Union[:class:`ExprRef`, Dict[required=[expr]]], Union[None, Union[:class:`Color`, Union[:class:`ColorName`, Literal['black', 'silver', 'gray', 'white', 'maroon', 'red', 'purple', 'fuchsia', 'green', 'lime', 'olive', 'yellow', 'navy', 'blue', 'teal', 'aqua', 'orange', 'aliceblue', 'antiquewhite', 'aquamarine', 'azure', 'beige', 'bisque', 'blanchedalmond', 'blueviolet', 'brown', 'burlywood', 'cadetblue', 'chartreuse', 'chocolate', 'coral', 'cornflowerblue', 'cornsilk', 'crimson', 'cyan', 'darkblue', 'darkcyan', 'darkgoldenrod', 'darkgray', 'darkgreen', 'darkgrey', 'darkkhaki', 'darkmagenta', 'darkolivegreen', 'darkorange', 'darkorchid', 'darkred', 'darksalmon', 'darkseagreen', 'darkslateblue', 'darkslategray', 'darkslategrey', 'darkturquoise', 'darkviolet', 'deeppink', 'deepskyblue', 'dimgray', 'dimgrey', 'dodgerblue', 'firebrick', 'floralwhite', 'forestgreen', 'gainsboro', 'ghostwhite', 'gold', 'goldenrod', 'greenyellow', 'grey', 'honeydew', 'hotpink', 'indianred', 'indigo', 'ivory', 'khaki', 'lavender', 'lavenderblush', 'lawngreen', 'lemonchiffon', 'lightblue', 'lightcoral', 'lightcyan', 'lightgoldenrodyellow', 'lightgray', 'lightgreen', 'lightgrey', 'lightpink', 'lightsalmon', 'lightseagreen', 'lightskyblue', 'lightslategray', 'lightslategrey', 'lightsteelblue', 'lightyellow', 'limegreen', 'linen', 'magenta', 'mediumaquamarine', 'mediumblue', 'mediumorchid', 'mediumpurple', 'mediumseagreen', 'mediumslateblue', 'mediumspringgreen', 'mediumturquoise', 'mediumvioletred', 'midnightblue', 'mintcream', 'mistyrose', 'moccasin', 'navajowhite', 'oldlace', 'olivedrab', 'orangered', 'orchid', 'palegoldenrod', 'palegreen', 'paleturquoise', 'palevioletred', 'papayawhip', 'peachpuff', 'peru', 'pink', 'plum', 'powderblue', 'rosybrown', 'royalblue', 'saddlebrown', 'salmon', 'sandybrown', 'seagreen', 'seashell', 'sienna', 'skyblue', 'slateblue', 'slategray', 'slategrey', 'snow', 'springgreen', 'steelblue', 'tan', 'thistle', 'tomato', 'turquoise', 'violet', 'wheat', 'whitesmoke', 'yellowgreen', 'rebeccapurple']], Union[:class:`HexColor`, str], str]]]
        Color of gridlines.

        **Default value:** ``"lightGray"``.
    gridDash : Union[List[float], Union[:class:`ConditionalAxisNumberArray`, Dict[required=[condition, expr]], Dict[required=[condition, value]]], Union[:class:`ExprRef`, Dict[required=[expr]]]]
        An array of alternating [stroke, space] lengths for dashed grid lines.
    gridDashOffset : Union[Union[:class:`ConditionalAxisNumber`, Dict[required=[condition, expr]], Dict[required=[condition, value]]], Union[:class:`ExprRef`, Dict[required=[expr]]], float]
        The pixel offset at which to start drawing with the grid dash array.
    gridOpacity : Union[Union[:class:`ConditionalAxisNumber`, Dict[required=[condition, expr]], Dict[required=[condition, value]]], Union[:class:`ExprRef`, Dict[required=[expr]]], float]
        The stroke opacity of grid (value between [0,1])

        **Default value:** ``1``
    gridWidth : Union[Union[:class:`ConditionalAxisNumber`, Dict[required=[condition, expr]], Dict[required=[condition, value]]], Union[:class:`ExprRef`, Dict[required=[expr]]], float]
        The grid width, in pixels.

        **Default value:** ``1``
    labelAlign : Union[Union[:class:`Align`, Literal['left', 'center', 'right']], Union[:class:`ConditionalAxisLabelAlign`, Dict[required=[condition, expr]], Dict[required=[condition, value]]], Union[:class:`ExprRef`, Dict[required=[expr]]]]
        Horizontal text alignment of axis tick labels, overriding the default setting for
        the current axis orientation.
    labelAngle : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], float]
        The rotation angle of the axis labels.

        **Default value:** ``-90`` for nominal and ordinal fields; ``0`` otherwise.
    labelBaseline : Union[Union[:class:`ConditionalAxisLabelBaseline`, Dict[required=[condition, expr]], Dict[required=[condition, value]]], Union[:class:`ExprRef`, Dict[required=[expr]]], Union[:class:`TextBaseline`, Union[:class:`Baseline`, Literal['top', 'middle', 'bottom']], str]]
        Vertical text baseline of axis tick labels, overriding the default setting for the
        current axis orientation. One of ``"alphabetic"`` (default), ``"top"``,
        ``"middle"``, ``"bottom"``, ``"line-top"``, or ``"line-bottom"``. The ``"line-top"``
        and ``"line-bottom"`` values operate similarly to ``"top"`` and ``"bottom"``, but
        are calculated relative to the *lineHeight* rather than *fontSize* alone.
    labelBound : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], Union[bool, float]]
        Indicates if labels should be hidden if they exceed the axis range. If ``false``
        (the default) no bounds overlap analysis is performed. If ``true``, labels will be
        hidden if they exceed the axis range by more than 1 pixel. If this property is a
        number, it specifies the pixel tolerance: the maximum amount by which a label
        bounding box may exceed the axis range.

        **Default value:** ``false``.
    labelColor : Union[Union[:class:`ConditionalAxisColor`, Dict[required=[condition, expr]], Dict[required=[condition, value]]], Union[:class:`ExprRef`, Dict[required=[expr]]], Union[None, Union[:class:`Color`, Union[:class:`ColorName`, Literal['black', 'silver', 'gray', 'white', 'maroon', 'red', 'purple', 'fuchsia', 'green', 'lime', 'olive', 'yellow', 'navy', 'blue', 'teal', 'aqua', 'orange', 'aliceblue', 'antiquewhite', 'aquamarine', 'azure', 'beige', 'bisque', 'blanchedalmond', 'blueviolet', 'brown', 'burlywood', 'cadetblue', 'chartreuse', 'chocolate', 'coral', 'cornflowerblue', 'cornsilk', 'crimson', 'cyan', 'darkblue', 'darkcyan', 'darkgoldenrod', 'darkgray', 'darkgreen', 'darkgrey', 'darkkhaki', 'darkmagenta', 'darkolivegreen', 'darkorange', 'darkorchid', 'darkred', 'darksalmon', 'darkseagreen', 'darkslateblue', 'darkslategray', 'darkslategrey', 'darkturquoise', 'darkviolet', 'deeppink', 'deepskyblue', 'dimgray', 'dimgrey', 'dodgerblue', 'firebrick', 'floralwhite', 'forestgreen', 'gainsboro', 'ghostwhite', 'gold', 'goldenrod', 'greenyellow', 'grey', 'honeydew', 'hotpink', 'indianred', 'indigo', 'ivory', 'khaki', 'lavender', 'lavenderblush', 'lawngreen', 'lemonchiffon', 'lightblue', 'lightcoral', 'lightcyan', 'lightgoldenrodyellow', 'lightgray', 'lightgreen', 'lightgrey', 'lightpink', 'lightsalmon', 'lightseagreen', 'lightskyblue', 'lightslategray', 'lightslategrey', 'lightsteelblue', 'lightyellow', 'limegreen', 'linen', 'magenta', 'mediumaquamarine', 'mediumblue', 'mediumorchid', 'mediumpurple', 'mediumseagreen', 'mediumslateblue', 'mediumspringgreen', 'mediumturquoise', 'mediumvioletred', 'midnightblue', 'mintcream', 'mistyrose', 'moccasin', 'navajowhite', 'oldlace', 'olivedrab', 'orangered', 'orchid', 'palegoldenrod', 'palegreen', 'paleturquoise', 'palevioletred', 'papayawhip', 'peachpuff', 'peru', 'pink', 'plum', 'powderblue', 'rosybrown', 'royalblue', 'saddlebrown', 'salmon', 'sandybrown', 'seagreen', 'seashell', 'sienna', 'skyblue', 'slateblue', 'slategray', 'slategrey', 'snow', 'springgreen', 'steelblue', 'tan', 'thistle', 'tomato', 'turquoise', 'violet', 'wheat', 'whitesmoke', 'yellowgreen', 'rebeccapurple']], Union[:class:`HexColor`, str], str]]]
        The color of the tick label, can be in hex color code or regular color name.
    labelExpr : str
        `Vega expression <https://vega.github.io/vega/docs/expressions/>`__ for customizing
        labels.

        **Note:** The label text and value can be assessed via the ``label`` and ``value``
        properties of the axis's backing ``datum`` object.
    labelFlush : Union[bool, float]
        Indicates if the first and last axis labels should be aligned flush with the scale
        range. Flush alignment for a horizontal axis will left-align the first label and
        right-align the last label. For vertical axes, bottom and top text baselines are
        applied instead. If this property is a number, it also indicates the number of
        pixels by which to offset the first and last labels; for example, a value of 2 will
        flush-align the first and last labels and also push them 2 pixels outward from the
        center of the axis. The additional adjustment can sometimes help the labels better
        visually group with corresponding axis ticks.

        **Default value:** ``true`` for axis of a continuous x-scale. Otherwise, ``false``.
    labelFlushOffset : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], float]
        Indicates the number of pixels by which to offset flush-adjusted labels. For
        example, a value of ``2`` will push flush-adjusted labels 2 pixels outward from the
        center of the axis. Offsets can help the labels better visually group with
        corresponding axis ticks.

        **Default value:** ``0``.
    labelFont : Union[Union[:class:`ConditionalAxisString`, Dict[required=[condition, expr]], Dict[required=[condition, value]]], Union[:class:`ExprRef`, Dict[required=[expr]]], str]
        The font of the tick label.
    labelFontSize : Union[Union[:class:`ConditionalAxisNumber`, Dict[required=[condition, expr]], Dict[required=[condition, value]]], Union[:class:`ExprRef`, Dict[required=[expr]]], float]
        The font size of the label, in pixels.
    labelFontStyle : Union[Union[:class:`ConditionalAxisLabelFontStyle`, Dict[required=[condition, expr]], Dict[required=[condition, value]]], Union[:class:`ExprRef`, Dict[required=[expr]]], Union[:class:`FontStyle`, str]]
        Font style of the title.
    labelFontWeight : Union[Union[:class:`ConditionalAxisLabelFontWeight`, Dict[required=[condition, expr]], Dict[required=[condition, value]]], Union[:class:`ExprRef`, Dict[required=[expr]]], Union[:class:`FontWeight`, Literal['normal', 'bold', 'lighter', 'bolder', 100, 200, 300, 400, 500, 600, 700, 800, 900]]]
        Font weight of axis tick labels.
    labelLimit : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], float]
        Maximum allowed pixel width of axis tick labels.

        **Default value:** ``180``
    labelLineHeight : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], float]
        Line height in pixels for multi-line label text or label text with ``"line-top"`` or
        ``"line-bottom"`` baseline.
    labelOffset : Union[Union[:class:`ConditionalAxisNumber`, Dict[required=[condition, expr]], Dict[required=[condition, value]]], Union[:class:`ExprRef`, Dict[required=[expr]]], float]
        Position offset in pixels to apply to labels, in addition to tickOffset.

        **Default value:** ``0``
    labelOpacity : Union[Union[:class:`ConditionalAxisNumber`, Dict[required=[condition, expr]], Dict[required=[condition, value]]], Union[:class:`ExprRef`, Dict[required=[expr]]], float]
        The opacity of the labels.
    labelOverlap : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], Union[:class:`LabelOverlap`, bool, str]]
        The strategy to use for resolving overlap of axis labels. If ``false`` (the
        default), no overlap reduction is attempted. If set to ``true`` or ``"parity"``, a
        strategy of removing every other label is used (this works well for standard linear
        axes). If set to ``"greedy"``, a linear scan of the labels is performed, removing
        any labels that overlaps with the last visible label (this often works better for
        log-scaled axes).

        **Default value:** ``true`` for non-nominal fields with non-log scales; ``"greedy"``
        for log scales; otherwise ``false``.
    labelPadding : Union[Union[:class:`ConditionalAxisNumber`, Dict[required=[condition, expr]], Dict[required=[condition, value]]], Union[:class:`ExprRef`, Dict[required=[expr]]], float]
        The padding in pixels between labels and ticks.

        **Default value:** ``2``
    labelSeparation : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], float]
        The minimum separation that must be between label bounding boxes for them to be
        considered non-overlapping (default ``0`` ). This property is ignored if
        *labelOverlap* resolution is not enabled.
    labels : bool
        A boolean flag indicating if labels should be included as part of the axis.

        **Default value:** ``true``.
    maxExtent : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], float]
        The maximum extent in pixels that axis ticks and labels should use. This determines
        a maximum offset value for axis titles.

        **Default value:** ``undefined``.
    minExtent : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], float]
        The minimum extent in pixels that axis ticks and labels should use. This determines
        a minimum offset value for axis titles.

        **Default value:** ``30`` for y-axis; ``undefined`` for x-axis.
    offset : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], float]
        The offset, in pixels, by which to displace the axis from the edge of the enclosing
        group or data rectangle.

        **Default value:** derived from the `axis config
        <https://vega.github.io/vega-lite/docs/config.html#facet-scale-config>`__ 's
        ``offset`` ( ``0`` by default)
    orient : Union[Union[:class:`AxisOrient`, Literal['top', 'bottom', 'left', 'right']], Union[:class:`ExprRef`, Dict[required=[expr]]]]
        The orientation of the axis. One of ``"top"``, ``"bottom"``, ``"left"`` or
        ``"right"``. The orientation can be used to further specialize the axis type (e.g.,
        a y-axis oriented towards the right edge of the chart).

        **Default value:** ``"bottom"`` for x-axes and ``"left"`` for y-axes.
    position : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], float]
        The anchor position of the axis in pixels. For x-axes with top or bottom
        orientation, this sets the axis group x coordinate. For y-axes with left or right
        orientation, this sets the axis group y coordinate.

        **Default value** : ``0``
    style : Union[List[str], str]
        A string or array of strings indicating the name of custom styles to apply to the
        axis. A style is a named collection of axis property defined within the `style
        configuration <https://vega.github.io/vega-lite/docs/mark.html#style-config>`__. If
        style is an array, later styles will override earlier styles.

        **Default value:** (none) **Note:** Any specified style will augment the default
        style. For example, an x-axis mark with ``"style": "foo"`` will use ``config.axisX``
        and ``config.style.foo`` (the specified style ``"foo"`` has higher precedence).
    tickBand : Union[Literal['center', 'extent'], Union[:class:`ExprRef`, Dict[required=[expr]]]]
        For band scales, indicates if ticks and grid lines should be placed at the
        ``"center"`` of a band (default) or at the band ``"extent"`` s to indicate intervals
    tickCap : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], Union[:class:`StrokeCap`, Literal['butt', 'round', 'square']]]
        The stroke cap for the tick lines' ending style. One of ``"butt"``, ``"round"`` or
        ``"square"``.

        **Default value:** ``"butt"``
    tickColor : Union[Union[:class:`ConditionalAxisColor`, Dict[required=[condition, expr]], Dict[required=[condition, value]]], Union[:class:`ExprRef`, Dict[required=[expr]]], Union[None, Union[:class:`Color`, Union[:class:`ColorName`, Literal['black', 'silver', 'gray', 'white', 'maroon', 'red', 'purple', 'fuchsia', 'green', 'lime', 'olive', 'yellow', 'navy', 'blue', 'teal', 'aqua', 'orange', 'aliceblue', 'antiquewhite', 'aquamarine', 'azure', 'beige', 'bisque', 'blanchedalmond', 'blueviolet', 'brown', 'burlywood', 'cadetblue', 'chartreuse', 'chocolate', 'coral', 'cornflowerblue', 'cornsilk', 'crimson', 'cyan', 'darkblue', 'darkcyan', 'darkgoldenrod', 'darkgray', 'darkgreen', 'darkgrey', 'darkkhaki', 'darkmagenta', 'darkolivegreen', 'darkorange', 'darkorchid', 'darkred', 'darksalmon', 'darkseagreen', 'darkslateblue', 'darkslategray', 'darkslategrey', 'darkturquoise', 'darkviolet', 'deeppink', 'deepskyblue', 'dimgray', 'dimgrey', 'dodgerblue', 'firebrick', 'floralwhite', 'forestgreen', 'gainsboro', 'ghostwhite', 'gold', 'goldenrod', 'greenyellow', 'grey', 'honeydew', 'hotpink', 'indianred', 'indigo', 'ivory', 'khaki', 'lavender', 'lavenderblush', 'lawngreen', 'lemonchiffon', 'lightblue', 'lightcoral', 'lightcyan', 'lightgoldenrodyellow', 'lightgray', 'lightgreen', 'lightgrey', 'lightpink', 'lightsalmon', 'lightseagreen', 'lightskyblue', 'lightslategray', 'lightslategrey', 'lightsteelblue', 'lightyellow', 'limegreen', 'linen', 'magenta', 'mediumaquamarine', 'mediumblue', 'mediumorchid', 'mediumpurple', 'mediumseagreen', 'mediumslateblue', 'mediumspringgreen', 'mediumturquoise', 'mediumvioletred', 'midnightblue', 'mintcream', 'mistyrose', 'moccasin', 'navajowhite', 'oldlace', 'olivedrab', 'orangered', 'orchid', 'palegoldenrod', 'palegreen', 'paleturquoise', 'palevioletred', 'papayawhip', 'peachpuff', 'peru', 'pink', 'plum', 'powderblue', 'rosybrown', 'royalblue', 'saddlebrown', 'salmon', 'sandybrown', 'seagreen', 'seashell', 'sienna', 'skyblue', 'slateblue', 'slategray', 'slategrey', 'snow', 'springgreen', 'steelblue', 'tan', 'thistle', 'tomato', 'turquoise', 'violet', 'wheat', 'whitesmoke', 'yellowgreen', 'rebeccapurple']], Union[:class:`HexColor`, str], str]]]
        The color of the axis's tick.

        **Default value:** ``"gray"``
    tickCount : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], Union[:class:`TimeIntervalStep`, Dict[required=[interval, step]]], Union[:class:`TimeInterval`, Literal['millisecond', 'second', 'minute', 'hour', 'day', 'week', 'month', 'year']], float]
        A desired number of ticks, for axes visualizing quantitative scales. The resulting
        number may be different so that values are "nice" (multiples of 2, 5, 10) and lie
        within the underlying scale's range.

        For scales of type ``"time"`` or ``"utc"``, the tick count can instead be a time
        interval specifier. Legal string values are ``"millisecond"``, ``"second"``,
        ``"minute"``, ``"hour"``, ``"day"``, ``"week"``, ``"month"``, and ``"year"``.
        Alternatively, an object-valued interval specifier of the form ``{"interval":
        "month", "step": 3}`` includes a desired number of interval steps. Here, ticks are
        generated for each quarter (Jan, Apr, Jul, Oct) boundary.

        **Default value** : Determine using a formula ``ceil(width/40)`` for x and
        ``ceil(height/40)`` for y.
    tickDash : Union[List[float], Union[:class:`ConditionalAxisNumberArray`, Dict[required=[condition, expr]], Dict[required=[condition, value]]], Union[:class:`ExprRef`, Dict[required=[expr]]]]
        An array of alternating [stroke, space] lengths for dashed tick mark lines.
    tickDashOffset : Union[Union[:class:`ConditionalAxisNumber`, Dict[required=[condition, expr]], Dict[required=[condition, value]]], Union[:class:`ExprRef`, Dict[required=[expr]]], float]
        The pixel offset at which to start drawing with the tick mark dash array.
    tickExtra : bool
        Boolean flag indicating if an extra axis tick should be added for the initial
        position of the axis. This flag is useful for styling axes for ``band`` scales such
        that ticks are placed on band boundaries rather in the middle of a band. Use in
        conjunction with ``"bandPosition": 1`` and an axis ``"padding"`` value of ``0``.
    tickMinStep : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], float]
        The minimum desired step between axis ticks, in terms of scale domain values. For
        example, a value of ``1`` indicates that ticks should not be less than 1 unit apart.
        If ``tickMinStep`` is specified, the ``tickCount`` value will be adjusted, if
        necessary, to enforce the minimum step value.
    tickOffset : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], float]
        Position offset in pixels to apply to ticks, labels, and gridlines.
    tickOpacity : Union[Union[:class:`ConditionalAxisNumber`, Dict[required=[condition, expr]], Dict[required=[condition, value]]], Union[:class:`ExprRef`, Dict[required=[expr]]], float]
        Opacity of the ticks.
    tickRound : bool
        Boolean flag indicating if pixel position values should be rounded to the nearest
        integer.

        **Default value:** ``true``
    tickSize : Union[Union[:class:`ConditionalAxisNumber`, Dict[required=[condition, expr]], Dict[required=[condition, value]]], Union[:class:`ExprRef`, Dict[required=[expr]]], float]
        The size in pixels of axis ticks.

        **Default value:** ``5``
    tickWidth : Union[Union[:class:`ConditionalAxisNumber`, Dict[required=[condition, expr]], Dict[required=[condition, value]]], Union[:class:`ExprRef`, Dict[required=[expr]]], float]
        The width, in pixels, of ticks.

        **Default value:** ``1``
    ticks : bool
        Boolean value that determines whether the axis should include ticks.

        **Default value:** ``true``
    title : Union[None, Union[:class:`Text`, List[str], str]]
        A title for the field. If ``null``, the title will be removed.

        **Default value:**  derived from the field's name and transformation function (
        ``aggregate``, ``bin`` and ``timeUnit`` ). If the field has an aggregate function,
        the function is displayed as part of the title (e.g., ``"Sum of Profit"`` ). If the
        field is binned or has a time unit applied, the applied function is shown in
        parentheses (e.g., ``"Profit (binned)"``, ``"Transaction Date (year-month)"`` ).
        Otherwise, the title is simply the field name.

        **Notes** :

        1) You can customize the default field title format by providing the `fieldTitle
        <https://vega.github.io/vega-lite/docs/config.html#top-level-config>`__ property in
        the `config <https://vega.github.io/vega-lite/docs/config.html>`__ or `fieldTitle
        function via the compile function's options
        <https://vega.github.io/vega-lite/usage/compile.html#field-title>`__.

        2) If both field definition's ``title`` and axis, header, or legend ``title`` are
        defined, axis/header/legend title will be used.
    titleAlign : Union[Union[:class:`Align`, Literal['left', 'center', 'right']], Union[:class:`ExprRef`, Dict[required=[expr]]]]
        Horizontal text alignment of axis titles.
    titleAnchor : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], Union[:class:`TitleAnchor`, Literal[None, 'start', 'middle', 'end']]]
        Text anchor position for placing axis titles.
    titleAngle : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], float]
        Angle in degrees of axis titles.
    titleBaseline : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], Union[:class:`TextBaseline`, Union[:class:`Baseline`, Literal['top', 'middle', 'bottom']], str]]
        Vertical text baseline for axis titles. One of ``"alphabetic"`` (default),
        ``"top"``, ``"middle"``, ``"bottom"``, ``"line-top"``, or ``"line-bottom"``. The
        ``"line-top"`` and ``"line-bottom"`` values operate similarly to ``"top"`` and
        ``"bottom"``, but are calculated relative to the *lineHeight* rather than *fontSize*
        alone.
    titleColor : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], Union[None, Union[:class:`Color`, Union[:class:`ColorName`, Literal['black', 'silver', 'gray', 'white', 'maroon', 'red', 'purple', 'fuchsia', 'green', 'lime', 'olive', 'yellow', 'navy', 'blue', 'teal', 'aqua', 'orange', 'aliceblue', 'antiquewhite', 'aquamarine', 'azure', 'beige', 'bisque', 'blanchedalmond', 'blueviolet', 'brown', 'burlywood', 'cadetblue', 'chartreuse', 'chocolate', 'coral', 'cornflowerblue', 'cornsilk', 'crimson', 'cyan', 'darkblue', 'darkcyan', 'darkgoldenrod', 'darkgray', 'darkgreen', 'darkgrey', 'darkkhaki', 'darkmagenta', 'darkolivegreen', 'darkorange', 'darkorchid', 'darkred', 'darksalmon', 'darkseagreen', 'darkslateblue', 'darkslategray', 'darkslategrey', 'darkturquoise', 'darkviolet', 'deeppink', 'deepskyblue', 'dimgray', 'dimgrey', 'dodgerblue', 'firebrick', 'floralwhite', 'forestgreen', 'gainsboro', 'ghostwhite', 'gold', 'goldenrod', 'greenyellow', 'grey', 'honeydew', 'hotpink', 'indianred', 'indigo', 'ivory', 'khaki', 'lavender', 'lavenderblush', 'lawngreen', 'lemonchiffon', 'lightblue', 'lightcoral', 'lightcyan', 'lightgoldenrodyellow', 'lightgray', 'lightgreen', 'lightgrey', 'lightpink', 'lightsalmon', 'lightseagreen', 'lightskyblue', 'lightslategray', 'lightslategrey', 'lightsteelblue', 'lightyellow', 'limegreen', 'linen', 'magenta', 'mediumaquamarine', 'mediumblue', 'mediumorchid', 'mediumpurple', 'mediumseagreen', 'mediumslateblue', 'mediumspringgreen', 'mediumturquoise', 'mediumvioletred', 'midnightblue', 'mintcream', 'mistyrose', 'moccasin', 'navajowhite', 'oldlace', 'olivedrab', 'orangered', 'orchid', 'palegoldenrod', 'palegreen', 'paleturquoise', 'palevioletred', 'papayawhip', 'peachpuff', 'peru', 'pink', 'plum', 'powderblue', 'rosybrown', 'royalblue', 'saddlebrown', 'salmon', 'sandybrown', 'seagreen', 'seashell', 'sienna', 'skyblue', 'slateblue', 'slategray', 'slategrey', 'snow', 'springgreen', 'steelblue', 'tan', 'thistle', 'tomato', 'turquoise', 'violet', 'wheat', 'whitesmoke', 'yellowgreen', 'rebeccapurple']], Union[:class:`HexColor`, str], str]]]
        Color of the title, can be in hex color code or regular color name.
    titleFont : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], str]
        Font of the title. (e.g., ``"Helvetica Neue"`` ).
    titleFontSize : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], float]
        Font size of the title.
    titleFontStyle : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], Union[:class:`FontStyle`, str]]
        Font style of the title.
    titleFontWeight : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], Union[:class:`FontWeight`, Literal['normal', 'bold', 'lighter', 'bolder', 100, 200, 300, 400, 500, 600, 700, 800, 900]]]
        Font weight of the title. This can be either a string (e.g ``"bold"``, ``"normal"``
        ) or a number ( ``100``, ``200``, ``300``, ..., ``900`` where ``"normal"`` = ``400``
        and ``"bold"`` = ``700`` ).
    titleLimit : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], float]
        Maximum allowed pixel width of axis titles.
    titleLineHeight : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], float]
        Line height in pixels for multi-line title text or title text with ``"line-top"`` or
        ``"line-bottom"`` baseline.
    titleOpacity : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], float]
        Opacity of the axis title.
    titlePadding : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], float]
        The padding, in pixels, between title and axis.
    titleX : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], float]
        X-coordinate of the axis title relative to the axis group.
    titleY : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], float]
        Y-coordinate of the axis title relative to the axis group.
    translate : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], float]
        Coordinate space translation offset for axis layout. By default, axes are translated
        by a 0.5 pixel offset for both the x and y coordinates in order to align stroked
        lines with the pixel grid. However, for vector graphics output these pixel-specific
        adjustments may be undesirable, in which case translate can be changed (for example,
        to zero).

        **Default value:** ``0.5``
    values : Union[List[Union[:class:`DateTime`, Dict[required=[]]]], List[bool], List[float], List[str], Union[:class:`ExprRef`, Dict[required=[expr]]]]
        Explicitly set the visible axis tick values.
    zindex : float
        A non-negative integer indicating the z-index of the axis. If zindex is 0, axes
        should be drawn behind all chart elements. To put them in front, set ``zindex`` to
        ``1`` or more.

        **Default value:** ``0`` (behind the marks).
    """

    _schema = {"$ref": "#/definitions/AxisConfig"}

    def __init__(
        self,
        aria: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], bool], UndefinedType
        ] = Undefined,
        bandPosition: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], float], UndefinedType
        ] = Undefined,
        description: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], str], UndefinedType
        ] = Undefined,
        disable: Union[bool, UndefinedType] = Undefined,
        domain: Union[bool, UndefinedType] = Undefined,
        domainCap: Union[
            Union[
                Union["ExprRef", "_ParameterProtocol", dict],
                Union["StrokeCap", Literal["butt", "round", "square"]],
            ],
            UndefinedType,
        ] = Undefined,
        domainColor: Union[
            Union[
                Union["ExprRef", "_ParameterProtocol", dict],
                Union[
                    None,
                    Union[
                        "Color",
                        Union[
                            "ColorName",
                            Literal[
                                "black",
                                "silver",
                                "gray",
                                "white",
                                "maroon",
                                "red",
                                "purple",
                                "fuchsia",
                                "green",
                                "lime",
                                "olive",
                                "yellow",
                                "navy",
                                "blue",
                                "teal",
                                "aqua",
                                "orange",
                                "aliceblue",
                                "antiquewhite",
                                "aquamarine",
                                "azure",
                                "beige",
                                "bisque",
                                "blanchedalmond",
                                "blueviolet",
                                "brown",
                                "burlywood",
                                "cadetblue",
                                "chartreuse",
                                "chocolate",
                                "coral",
                                "cornflowerblue",
                                "cornsilk",
                                "crimson",
                                "cyan",
                                "darkblue",
                                "darkcyan",
                                "darkgoldenrod",
                                "darkgray",
                                "darkgreen",
                                "darkgrey",
                                "darkkhaki",
                                "darkmagenta",
                                "darkolivegreen",
                                "darkorange",
                                "darkorchid",
                                "darkred",
                                "darksalmon",
                                "darkseagreen",
                                "darkslateblue",
                                "darkslategray",
                                "darkslategrey",
                                "darkturquoise",
                                "darkviolet",
                                "deeppink",
                                "deepskyblue",
                                "dimgray",
                                "dimgrey",
                                "dodgerblue",
                                "firebrick",
                                "floralwhite",
                                "forestgreen",
                                "gainsboro",
                                "ghostwhite",
                                "gold",
                                "goldenrod",
                                "greenyellow",
                                "grey",
                                "honeydew",
                                "hotpink",
                                "indianred",
                                "indigo",
                                "ivory",
                                "khaki",
                                "lavender",
                                "lavenderblush",
                                "lawngreen",
                                "lemonchiffon",
                                "lightblue",
                                "lightcoral",
                                "lightcyan",
                                "lightgoldenrodyellow",
                                "lightgray",
                                "lightgreen",
                                "lightgrey",
                                "lightpink",
                                "lightsalmon",
                                "lightseagreen",
                                "lightskyblue",
                                "lightslategray",
                                "lightslategrey",
                                "lightsteelblue",
                                "lightyellow",
                                "limegreen",
                                "linen",
                                "magenta",
                                "mediumaquamarine",
                                "mediumblue",
                                "mediumorchid",
                                "mediumpurple",
                                "mediumseagreen",
                                "mediumslateblue",
                                "mediumspringgreen",
                                "mediumturquoise",
                                "mediumvioletred",
                                "midnightblue",
                                "mintcream",
                                "mistyrose",
                                "moccasin",
                                "navajowhite",
                                "oldlace",
                                "olivedrab",
                                "orangered",
                                "orchid",
                                "palegoldenrod",
                                "palegreen",
                                "paleturquoise",
                                "palevioletred",
                                "papayawhip",
                                "peachpuff",
                                "peru",
                                "pink",
                                "plum",
                                "powderblue",
                                "rosybrown",
                                "royalblue",
                                "saddlebrown",
                                "salmon",
                                "sandybrown",
                                "seagreen",
                                "seashell",
                                "sienna",
                                "skyblue",
                                "slateblue",
                                "slategray",
                                "slategrey",
                                "snow",
                                "springgreen",
                                "steelblue",
                                "tan",
                                "thistle",
                                "tomato",
                                "turquoise",
                                "violet",
                                "wheat",
                                "whitesmoke",
                                "yellowgreen",
                                "rebeccapurple",
                            ],
                        ],
                        Union["HexColor", str],
                        str,
                    ],
                ],
            ],
            UndefinedType,
        ] = Undefined,
        domainDash: Union[
            Union[List[float], Union["ExprRef", "_ParameterProtocol", dict]],
            UndefinedType,
        ] = Undefined,
        domainDashOffset: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], float], UndefinedType
        ] = Undefined,
        domainOpacity: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], float], UndefinedType
        ] = Undefined,
        domainWidth: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], float], UndefinedType
        ] = Undefined,
        format: Union[Union[Union["Dict", dict], str], UndefinedType] = Undefined,
        formatType: Union[str, UndefinedType] = Undefined,
        grid: Union[bool, UndefinedType] = Undefined,
        gridCap: Union[
            Union[
                Union["ExprRef", "_ParameterProtocol", dict],
                Union["StrokeCap", Literal["butt", "round", "square"]],
            ],
            UndefinedType,
        ] = Undefined,
        gridColor: Union[
            Union[
                Union["ConditionalAxisColor", dict],
                Union["ExprRef", "_ParameterProtocol", dict],
                Union[
                    None,
                    Union[
                        "Color",
                        Union[
                            "ColorName",
                            Literal[
                                "black",
                                "silver",
                                "gray",
                                "white",
                                "maroon",
                                "red",
                                "purple",
                                "fuchsia",
                                "green",
                                "lime",
                                "olive",
                                "yellow",
                                "navy",
                                "blue",
                                "teal",
                                "aqua",
                                "orange",
                                "aliceblue",
                                "antiquewhite",
                                "aquamarine",
                                "azure",
                                "beige",
                                "bisque",
                                "blanchedalmond",
                                "blueviolet",
                                "brown",
                                "burlywood",
                                "cadetblue",
                                "chartreuse",
                                "chocolate",
                                "coral",
                                "cornflowerblue",
                                "cornsilk",
                                "crimson",
                                "cyan",
                                "darkblue",
                                "darkcyan",
                                "darkgoldenrod",
                                "darkgray",
                                "darkgreen",
                                "darkgrey",
                                "darkkhaki",
                                "darkmagenta",
                                "darkolivegreen",
                                "darkorange",
                                "darkorchid",
                                "darkred",
                                "darksalmon",
                                "darkseagreen",
                                "darkslateblue",
                                "darkslategray",
                                "darkslategrey",
                                "darkturquoise",
                                "darkviolet",
                                "deeppink",
                                "deepskyblue",
                                "dimgray",
                                "dimgrey",
                                "dodgerblue",
                                "firebrick",
                                "floralwhite",
                                "forestgreen",
                                "gainsboro",
                                "ghostwhite",
                                "gold",
                                "goldenrod",
                                "greenyellow",
                                "grey",
                                "honeydew",
                                "hotpink",
                                "indianred",
                                "indigo",
                                "ivory",
                                "khaki",
                                "lavender",
                                "lavenderblush",
                                "lawngreen",
                                "lemonchiffon",
                                "lightblue",
                                "lightcoral",
                                "lightcyan",
                                "lightgoldenrodyellow",
                                "lightgray",
                                "lightgreen",
                                "lightgrey",
                                "lightpink",
                                "lightsalmon",
                                "lightseagreen",
                                "lightskyblue",
                                "lightslategray",
                                "lightslategrey",
                                "lightsteelblue",
                                "lightyellow",
                                "limegreen",
                                "linen",
                                "magenta",
                                "mediumaquamarine",
                                "mediumblue",
                                "mediumorchid",
                                "mediumpurple",
                                "mediumseagreen",
                                "mediumslateblue",
                                "mediumspringgreen",
                                "mediumturquoise",
                                "mediumvioletred",
                                "midnightblue",
                                "mintcream",
                                "mistyrose",
                                "moccasin",
                                "navajowhite",
                                "oldlace",
                                "olivedrab",
                                "orangered",
                                "orchid",
                                "palegoldenrod",
                                "palegreen",
                                "paleturquoise",
                                "palevioletred",
                                "papayawhip",
                                "peachpuff",
                                "peru",
                                "pink",
                                "plum",
                                "powderblue",
                                "rosybrown",
                                "royalblue",
                                "saddlebrown",
                                "salmon",
                                "sandybrown",
                                "seagreen",
                                "seashell",
                                "sienna",
                                "skyblue",
                                "slateblue",
                                "slategray",
                                "slategrey",
                                "snow",
                                "springgreen",
                                "steelblue",
                                "tan",
                                "thistle",
                                "tomato",
                                "turquoise",
                                "violet",
                                "wheat",
                                "whitesmoke",
                                "yellowgreen",
                                "rebeccapurple",
                            ],
                        ],
                        Union["HexColor", str],
                        str,
                    ],
                ],
            ],
            UndefinedType,
        ] = Undefined,
        gridDash: Union[
            Union[
                List[float],
                Union["ConditionalAxisNumberArray", dict],
                Union["ExprRef", "_ParameterProtocol", dict],
            ],
            UndefinedType,
        ] = Undefined,
        gridDashOffset: Union[
            Union[
                Union["ConditionalAxisNumber", dict],
                Union["ExprRef", "_ParameterProtocol", dict],
                float,
            ],
            UndefinedType,
        ] = Undefined,
        gridOpacity: Union[
            Union[
                Union["ConditionalAxisNumber", dict],
                Union["ExprRef", "_ParameterProtocol", dict],
                float,
            ],
            UndefinedType,
        ] = Undefined,
        gridWidth: Union[
            Union[
                Union["ConditionalAxisNumber", dict],
                Union["ExprRef", "_ParameterProtocol", dict],
                float,
            ],
            UndefinedType,
        ] = Undefined,
        labelAlign: Union[
            Union[
                Union["Align", Literal["left", "center", "right"]],
                Union["ConditionalAxisLabelAlign", dict],
                Union["ExprRef", "_ParameterProtocol", dict],
            ],
            UndefinedType,
        ] = Undefined,
        labelAngle: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], float], UndefinedType
        ] = Undefined,
        labelBaseline: Union[
            Union[
                Union["ConditionalAxisLabelBaseline", dict],
                Union["ExprRef", "_ParameterProtocol", dict],
                Union[
                    "TextBaseline",
                    Union["Baseline", Literal["top", "middle", "bottom"]],
                    str,
                ],
            ],
            UndefinedType,
        ] = Undefined,
        labelBound: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], Union[bool, float]],
            UndefinedType,
        ] = Undefined,
        labelColor: Union[
            Union[
                Union["ConditionalAxisColor", dict],
                Union["ExprRef", "_ParameterProtocol", dict],
                Union[
                    None,
                    Union[
                        "Color",
                        Union[
                            "ColorName",
                            Literal[
                                "black",
                                "silver",
                                "gray",
                                "white",
                                "maroon",
                                "red",
                                "purple",
                                "fuchsia",
                                "green",
                                "lime",
                                "olive",
                                "yellow",
                                "navy",
                                "blue",
                                "teal",
                                "aqua",
                                "orange",
                                "aliceblue",
                                "antiquewhite",
                                "aquamarine",
                                "azure",
                                "beige",
                                "bisque",
                                "blanchedalmond",
                                "blueviolet",
                                "brown",
                                "burlywood",
                                "cadetblue",
                                "chartreuse",
                                "chocolate",
                                "coral",
                                "cornflowerblue",
                                "cornsilk",
                                "crimson",
                                "cyan",
                                "darkblue",
                                "darkcyan",
                                "darkgoldenrod",
                                "darkgray",
                                "darkgreen",
                                "darkgrey",
                                "darkkhaki",
                                "darkmagenta",
                                "darkolivegreen",
                                "darkorange",
                                "darkorchid",
                                "darkred",
                                "darksalmon",
                                "darkseagreen",
                                "darkslateblue",
                                "darkslategray",
                                "darkslategrey",
                                "darkturquoise",
                                "darkviolet",
                                "deeppink",
                                "deepskyblue",
                                "dimgray",
                                "dimgrey",
                                "dodgerblue",
                                "firebrick",
                                "floralwhite",
                                "forestgreen",
                                "gainsboro",
                                "ghostwhite",
                                "gold",
                                "goldenrod",
                                "greenyellow",
                                "grey",
                                "honeydew",
                                "hotpink",
                                "indianred",
                                "indigo",
                                "ivory",
                                "khaki",
                                "lavender",
                                "lavenderblush",
                                "lawngreen",
                                "lemonchiffon",
                                "lightblue",
                                "lightcoral",
                                "lightcyan",
                                "lightgoldenrodyellow",
                                "lightgray",
                                "lightgreen",
                                "lightgrey",
                                "lightpink",
                                "lightsalmon",
                                "lightseagreen",
                                "lightskyblue",
                                "lightslategray",
                                "lightslategrey",
                                "lightsteelblue",
                                "lightyellow",
                                "limegreen",
                                "linen",
                                "magenta",
                                "mediumaquamarine",
                                "mediumblue",
                                "mediumorchid",
                                "mediumpurple",
                                "mediumseagreen",
                                "mediumslateblue",
                                "mediumspringgreen",
                                "mediumturquoise",
                                "mediumvioletred",
                                "midnightblue",
                                "mintcream",
                                "mistyrose",
                                "moccasin",
                                "navajowhite",
                                "oldlace",
                                "olivedrab",
                                "orangered",
                                "orchid",
                                "palegoldenrod",
                                "palegreen",
                                "paleturquoise",
                                "palevioletred",
                                "papayawhip",
                                "peachpuff",
                                "peru",
                                "pink",
                                "plum",
                                "powderblue",
                                "rosybrown",
                                "royalblue",
                                "saddlebrown",
                                "salmon",
                                "sandybrown",
                                "seagreen",
                                "seashell",
                                "sienna",
                                "skyblue",
                                "slateblue",
                                "slategray",
                                "slategrey",
                                "snow",
                                "springgreen",
                                "steelblue",
                                "tan",
                                "thistle",
                                "tomato",
                                "turquoise",
                                "violet",
                                "wheat",
                                "whitesmoke",
                                "yellowgreen",
                                "rebeccapurple",
                            ],
                        ],
                        Union["HexColor", str],
                        str,
                    ],
                ],
            ],
            UndefinedType,
        ] = Undefined,
        labelExpr: Union[str, UndefinedType] = Undefined,
        labelFlush: Union[Union[bool, float], UndefinedType] = Undefined,
        labelFlushOffset: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], float], UndefinedType
        ] = Undefined,
        labelFont: Union[
            Union[
                Union["ConditionalAxisString", dict],
                Union["ExprRef", "_ParameterProtocol", dict],
                str,
            ],
            UndefinedType,
        ] = Undefined,
        labelFontSize: Union[
            Union[
                Union["ConditionalAxisNumber", dict],
                Union["ExprRef", "_ParameterProtocol", dict],
                float,
            ],
            UndefinedType,
        ] = Undefined,
        labelFontStyle: Union[
            Union[
                Union["ConditionalAxisLabelFontStyle", dict],
                Union["ExprRef", "_ParameterProtocol", dict],
                Union["FontStyle", str],
            ],
            UndefinedType,
        ] = Undefined,
        labelFontWeight: Union[
            Union[
                Union["ConditionalAxisLabelFontWeight", dict],
                Union["ExprRef", "_ParameterProtocol", dict],
                Union[
                    "FontWeight",
                    Literal[
                        "normal",
                        "bold",
                        "lighter",
                        "bolder",
                        100,
                        200,
                        300,
                        400,
                        500,
                        600,
                        700,
                        800,
                        900,
                    ],
                ],
            ],
            UndefinedType,
        ] = Undefined,
        labelLimit: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], float], UndefinedType
        ] = Undefined,
        labelLineHeight: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], float], UndefinedType
        ] = Undefined,
        labelOffset: Union[
            Union[
                Union["ConditionalAxisNumber", dict],
                Union["ExprRef", "_ParameterProtocol", dict],
                float,
            ],
            UndefinedType,
        ] = Undefined,
        labelOpacity: Union[
            Union[
                Union["ConditionalAxisNumber", dict],
                Union["ExprRef", "_ParameterProtocol", dict],
                float,
            ],
            UndefinedType,
        ] = Undefined,
        labelOverlap: Union[
            Union[
                Union["ExprRef", "_ParameterProtocol", dict],
                Union["LabelOverlap", bool, str],
            ],
            UndefinedType,
        ] = Undefined,
        labelPadding: Union[
            Union[
                Union["ConditionalAxisNumber", dict],
                Union["ExprRef", "_ParameterProtocol", dict],
                float,
            ],
            UndefinedType,
        ] = Undefined,
        labelSeparation: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], float], UndefinedType
        ] = Undefined,
        labels: Union[bool, UndefinedType] = Undefined,
        maxExtent: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], float], UndefinedType
        ] = Undefined,
        minExtent: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], float], UndefinedType
        ] = Undefined,
        offset: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], float], UndefinedType
        ] = Undefined,
        orient: Union[
            Union[
                Union["AxisOrient", Literal["top", "bottom", "left", "right"]],
                Union["ExprRef", "_ParameterProtocol", dict],
            ],
            UndefinedType,
        ] = Undefined,
        position: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], float], UndefinedType
        ] = Undefined,
        style: Union[Union[List[str], str], UndefinedType] = Undefined,
        tickBand: Union[
            Union[
                Literal["center", "extent"],
                Union["ExprRef", "_ParameterProtocol", dict],
            ],
            UndefinedType,
        ] = Undefined,
        tickCap: Union[
            Union[
                Union["ExprRef", "_ParameterProtocol", dict],
                Union["StrokeCap", Literal["butt", "round", "square"]],
            ],
            UndefinedType,
        ] = Undefined,
        tickColor: Union[
            Union[
                Union["ConditionalAxisColor", dict],
                Union["ExprRef", "_ParameterProtocol", dict],
                Union[
                    None,
                    Union[
                        "Color",
                        Union[
                            "ColorName",
                            Literal[
                                "black",
                                "silver",
                                "gray",
                                "white",
                                "maroon",
                                "red",
                                "purple",
                                "fuchsia",
                                "green",
                                "lime",
                                "olive",
                                "yellow",
                                "navy",
                                "blue",
                                "teal",
                                "aqua",
                                "orange",
                                "aliceblue",
                                "antiquewhite",
                                "aquamarine",
                                "azure",
                                "beige",
                                "bisque",
                                "blanchedalmond",
                                "blueviolet",
                                "brown",
                                "burlywood",
                                "cadetblue",
                                "chartreuse",
                                "chocolate",
                                "coral",
                                "cornflowerblue",
                                "cornsilk",
                                "crimson",
                                "cyan",
                                "darkblue",
                                "darkcyan",
                                "darkgoldenrod",
                                "darkgray",
                                "darkgreen",
                                "darkgrey",
                                "darkkhaki",
                                "darkmagenta",
                                "darkolivegreen",
                                "darkorange",
                                "darkorchid",
                                "darkred",
                                "darksalmon",
                                "darkseagreen",
                                "darkslateblue",
                                "darkslategray",
                                "darkslategrey",
                                "darkturquoise",
                                "darkviolet",
                                "deeppink",
                                "deepskyblue",
                                "dimgray",
                                "dimgrey",
                                "dodgerblue",
                                "firebrick",
                                "floralwhite",
                                "forestgreen",
                                "gainsboro",
                                "ghostwhite",
                                "gold",
                                "goldenrod",
                                "greenyellow",
                                "grey",
                                "honeydew",
                                "hotpink",
                                "indianred",
                                "indigo",
                                "ivory",
                                "khaki",
                                "lavender",
                                "lavenderblush",
                                "lawngreen",
                                "lemonchiffon",
                                "lightblue",
                                "lightcoral",
                                "lightcyan",
                                "lightgoldenrodyellow",
                                "lightgray",
                                "lightgreen",
                                "lightgrey",
                                "lightpink",
                                "lightsalmon",
                                "lightseagreen",
                                "lightskyblue",
                                "lightslategray",
                                "lightslategrey",
                                "lightsteelblue",
                                "lightyellow",
                                "limegreen",
                                "linen",
                                "magenta",
                                "mediumaquamarine",
                                "mediumblue",
                                "mediumorchid",
                                "mediumpurple",
                                "mediumseagreen",
                                "mediumslateblue",
                                "mediumspringgreen",
                                "mediumturquoise",
                                "mediumvioletred",
                                "midnightblue",
                                "mintcream",
                                "mistyrose",
                                "moccasin",
                                "navajowhite",
                                "oldlace",
                                "olivedrab",
                                "orangered",
                                "orchid",
                                "palegoldenrod",
                                "palegreen",
                                "paleturquoise",
                                "palevioletred",
                                "papayawhip",
                                "peachpuff",
                                "peru",
                                "pink",
                                "plum",
                                "powderblue",
                                "rosybrown",
                                "royalblue",
                                "saddlebrown",
                                "salmon",
                                "sandybrown",
                                "seagreen",
                                "seashell",
                                "sienna",
                                "skyblue",
                                "slateblue",
                                "slategray",
                                "slategrey",
                                "snow",
                                "springgreen",
                                "steelblue",
                                "tan",
                                "thistle",
                                "tomato",
                                "turquoise",
                                "violet",
                                "wheat",
                                "whitesmoke",
                                "yellowgreen",
                                "rebeccapurple",
                            ],
                        ],
                        Union["HexColor", str],
                        str,
                    ],
                ],
            ],
            UndefinedType,
        ] = Undefined,
        tickCount: Union[
            Union[
                Union["ExprRef", "_ParameterProtocol", dict],
                Union[
                    "TimeInterval",
                    Literal[
                        "millisecond",
                        "second",
                        "minute",
                        "hour",
                        "day",
                        "week",
                        "month",
                        "year",
                    ],
                ],
                Union["TimeIntervalStep", dict],
                float,
            ],
            UndefinedType,
        ] = Undefined,
        tickDash: Union[
            Union[
                List[float],
                Union["ConditionalAxisNumberArray", dict],
                Union["ExprRef", "_ParameterProtocol", dict],
            ],
            UndefinedType,
        ] = Undefined,
        tickDashOffset: Union[
            Union[
                Union["ConditionalAxisNumber", dict],
                Union["ExprRef", "_ParameterProtocol", dict],
                float,
            ],
            UndefinedType,
        ] = Undefined,
        tickExtra: Union[bool, UndefinedType] = Undefined,
        tickMinStep: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], float], UndefinedType
        ] = Undefined,
        tickOffset: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], float], UndefinedType
        ] = Undefined,
        tickOpacity: Union[
            Union[
                Union["ConditionalAxisNumber", dict],
                Union["ExprRef", "_ParameterProtocol", dict],
                float,
            ],
            UndefinedType,
        ] = Undefined,
        tickRound: Union[bool, UndefinedType] = Undefined,
        tickSize: Union[
            Union[
                Union["ConditionalAxisNumber", dict],
                Union["ExprRef", "_ParameterProtocol", dict],
                float,
            ],
            UndefinedType,
        ] = Undefined,
        tickWidth: Union[
            Union[
                Union["ConditionalAxisNumber", dict],
                Union["ExprRef", "_ParameterProtocol", dict],
                float,
            ],
            UndefinedType,
        ] = Undefined,
        ticks: Union[bool, UndefinedType] = Undefined,
        title: Union[
            Union[None, Union["Text", List[str], str]], UndefinedType
        ] = Undefined,
        titleAlign: Union[
            Union[
                Union["Align", Literal["left", "center", "right"]],
                Union["ExprRef", "_ParameterProtocol", dict],
            ],
            UndefinedType,
        ] = Undefined,
        titleAnchor: Union[
            Union[
                Union["ExprRef", "_ParameterProtocol", dict],
                Union["TitleAnchor", Literal[None, "start", "middle", "end"]],
            ],
            UndefinedType,
        ] = Undefined,
        titleAngle: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], float], UndefinedType
        ] = Undefined,
        titleBaseline: Union[
            Union[
                Union["ExprRef", "_ParameterProtocol", dict],
                Union[
                    "TextBaseline",
                    Union["Baseline", Literal["top", "middle", "bottom"]],
                    str,
                ],
            ],
            UndefinedType,
        ] = Undefined,
        titleColor: Union[
            Union[
                Union["ExprRef", "_ParameterProtocol", dict],
                Union[
                    None,
                    Union[
                        "Color",
                        Union[
                            "ColorName",
                            Literal[
                                "black",
                                "silver",
                                "gray",
                                "white",
                                "maroon",
                                "red",
                                "purple",
                                "fuchsia",
                                "green",
                                "lime",
                                "olive",
                                "yellow",
                                "navy",
                                "blue",
                                "teal",
                                "aqua",
                                "orange",
                                "aliceblue",
                                "antiquewhite",
                                "aquamarine",
                                "azure",
                                "beige",
                                "bisque",
                                "blanchedalmond",
                                "blueviolet",
                                "brown",
                                "burlywood",
                                "cadetblue",
                                "chartreuse",
                                "chocolate",
                                "coral",
                                "cornflowerblue",
                                "cornsilk",
                                "crimson",
                                "cyan",
                                "darkblue",
                                "darkcyan",
                                "darkgoldenrod",
                                "darkgray",
                                "darkgreen",
                                "darkgrey",
                                "darkkhaki",
                                "darkmagenta",
                                "darkolivegreen",
                                "darkorange",
                                "darkorchid",
                                "darkred",
                                "darksalmon",
                                "darkseagreen",
                                "darkslateblue",
                                "darkslategray",
                                "darkslategrey",
                                "darkturquoise",
                                "darkviolet",
                                "deeppink",
                                "deepskyblue",
                                "dimgray",
                                "dimgrey",
                                "dodgerblue",
                                "firebrick",
                                "floralwhite",
                                "forestgreen",
                                "gainsboro",
                                "ghostwhite",
                                "gold",
                                "goldenrod",
                                "greenyellow",
                                "grey",
                                "honeydew",
                                "hotpink",
                                "indianred",
                                "indigo",
                                "ivory",
                                "khaki",
                                "lavender",
                                "lavenderblush",
                                "lawngreen",
                                "lemonchiffon",
                                "lightblue",
                                "lightcoral",
                                "lightcyan",
                                "lightgoldenrodyellow",
                                "lightgray",
                                "lightgreen",
                                "lightgrey",
                                "lightpink",
                                "lightsalmon",
                                "lightseagreen",
                                "lightskyblue",
                                "lightslategray",
                                "lightslategrey",
                                "lightsteelblue",
                                "lightyellow",
                                "limegreen",
                                "linen",
                                "magenta",
                                "mediumaquamarine",
                                "mediumblue",
                                "mediumorchid",
                                "mediumpurple",
                                "mediumseagreen",
                                "mediumslateblue",
                                "mediumspringgreen",
                                "mediumturquoise",
                                "mediumvioletred",
                                "midnightblue",
                                "mintcream",
                                "mistyrose",
                                "moccasin",
                                "navajowhite",
                                "oldlace",
                                "olivedrab",
                                "orangered",
                                "orchid",
                                "palegoldenrod",
                                "palegreen",
                                "paleturquoise",
                                "palevioletred",
                                "papayawhip",
                                "peachpuff",
                                "peru",
                                "pink",
                                "plum",
                                "powderblue",
                                "rosybrown",
                                "royalblue",
                                "saddlebrown",
                                "salmon",
                                "sandybrown",
                                "seagreen",
                                "seashell",
                                "sienna",
                                "skyblue",
                                "slateblue",
                                "slategray",
                                "slategrey",
                                "snow",
                                "springgreen",
                                "steelblue",
                                "tan",
                                "thistle",
                                "tomato",
                                "turquoise",
                                "violet",
                                "wheat",
                                "whitesmoke",
                                "yellowgreen",
                                "rebeccapurple",
                            ],
                        ],
                        Union["HexColor", str],
                        str,
                    ],
                ],
            ],
            UndefinedType,
        ] = Undefined,
        titleFont: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], str], UndefinedType
        ] = Undefined,
        titleFontSize: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], float], UndefinedType
        ] = Undefined,
        titleFontStyle: Union[
            Union[
                Union["ExprRef", "_ParameterProtocol", dict], Union["FontStyle", str]
            ],
            UndefinedType,
        ] = Undefined,
        titleFontWeight: Union[
            Union[
                Union["ExprRef", "_ParameterProtocol", dict],
                Union[
                    "FontWeight",
                    Literal[
                        "normal",
                        "bold",
                        "lighter",
                        "bolder",
                        100,
                        200,
                        300,
                        400,
                        500,
                        600,
                        700,
                        800,
                        900,
                    ],
                ],
            ],
            UndefinedType,
        ] = Undefined,
        titleLimit: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], float], UndefinedType
        ] = Undefined,
        titleLineHeight: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], float], UndefinedType
        ] = Undefined,
        titleOpacity: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], float], UndefinedType
        ] = Undefined,
        titlePadding: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], float], UndefinedType
        ] = Undefined,
        titleX: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], float], UndefinedType
        ] = Undefined,
        titleY: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], float], UndefinedType
        ] = Undefined,
        translate: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], float], UndefinedType
        ] = Undefined,
        values: Union[
            Union[
                List[bool],
                List[float],
                List[str],
                Union["ExprRef", "_ParameterProtocol", dict],
                Union[List["DateTime"], List[dict]],
            ],
            UndefinedType,
        ] = Undefined,
        zindex: Union[float, UndefinedType] = Undefined,
        **kwds
    ):
        super(AxisConfig, self).__init__(
            aria=aria,
            bandPosition=bandPosition,
            description=description,
            disable=disable,
            domain=domain,
            domainCap=domainCap,
            domainColor=domainColor,
            domainDash=domainDash,
            domainDashOffset=domainDashOffset,
            domainOpacity=domainOpacity,
            domainWidth=domainWidth,
            format=format,
            formatType=formatType,
            grid=grid,
            gridCap=gridCap,
            gridColor=gridColor,
            gridDash=gridDash,
            gridDashOffset=gridDashOffset,
            gridOpacity=gridOpacity,
            gridWidth=gridWidth,
            labelAlign=labelAlign,
            labelAngle=labelAngle,
            labelBaseline=labelBaseline,
            labelBound=labelBound,
            labelColor=labelColor,
            labelExpr=labelExpr,
            labelFlush=labelFlush,
            labelFlushOffset=labelFlushOffset,
            labelFont=labelFont,
            labelFontSize=labelFontSize,
            labelFontStyle=labelFontStyle,
            labelFontWeight=labelFontWeight,
            labelLimit=labelLimit,
            labelLineHeight=labelLineHeight,
            labelOffset=labelOffset,
            labelOpacity=labelOpacity,
            labelOverlap=labelOverlap,
            labelPadding=labelPadding,
            labelSeparation=labelSeparation,
            labels=labels,
            maxExtent=maxExtent,
            minExtent=minExtent,
            offset=offset,
            orient=orient,
            position=position,
            style=style,
            tickBand=tickBand,
            tickCap=tickCap,
            tickColor=tickColor,
            tickCount=tickCount,
            tickDash=tickDash,
            tickDashOffset=tickDashOffset,
            tickExtra=tickExtra,
            tickMinStep=tickMinStep,
            tickOffset=tickOffset,
            tickOpacity=tickOpacity,
            tickRound=tickRound,
            tickSize=tickSize,
            tickWidth=tickWidth,
            ticks=ticks,
            title=title,
            titleAlign=titleAlign,
            titleAnchor=titleAnchor,
            titleAngle=titleAngle,
            titleBaseline=titleBaseline,
            titleColor=titleColor,
            titleFont=titleFont,
            titleFontSize=titleFontSize,
            titleFontStyle=titleFontStyle,
            titleFontWeight=titleFontWeight,
            titleLimit=titleLimit,
            titleLineHeight=titleLineHeight,
            titleOpacity=titleOpacity,
            titlePadding=titlePadding,
            titleX=titleX,
            titleY=titleY,
            translate=translate,
            values=values,
            zindex=zindex,
            **kwds
        )


class AxisOrient(VegaLiteSchema):
    """AxisOrient schema wrapper

    Union[:class:`AxisOrient`, Literal['top', 'bottom', 'left', 'right']]
    """

    _schema = {"$ref": "#/definitions/AxisOrient"}

    def __init__(self, *args):
        super(AxisOrient, self).__init__(*args)


class AxisResolveMap(VegaLiteSchema):
    """AxisResolveMap schema wrapper

    Union[:class:`AxisResolveMap`, Dict[required=[]]]

    Parameters
    ----------

    x : Union[:class:`ResolveMode`, Literal['independent', 'shared']]

    y : Union[:class:`ResolveMode`, Literal['independent', 'shared']]

    """

    _schema = {"$ref": "#/definitions/AxisResolveMap"}

    def __init__(
        self,
        x: Union[
            Union["ResolveMode", Literal["independent", "shared"]], UndefinedType
        ] = Undefined,
        y: Union[
            Union["ResolveMode", Literal["independent", "shared"]], UndefinedType
        ] = Undefined,
        **kwds
    ):
        super(AxisResolveMap, self).__init__(x=x, y=y, **kwds)


class BBox(VegaLiteSchema):
    """BBox schema wrapper

    Union[:class:`BBox`, List[float]]
    Bounding box https://tools.ietf.org/html/rfc7946#section-5
    """

    _schema = {"$ref": "#/definitions/BBox"}

    def __init__(self, *args, **kwds):
        super(BBox, self).__init__(*args, **kwds)


class BarConfig(AnyMarkConfig):
    """BarConfig schema wrapper

    Union[:class:`BarConfig`, Dict[required=[]]]

    Parameters
    ----------

    align : Union[Union[:class:`Align`, Literal['left', 'center', 'right']], Union[:class:`ExprRef`, Dict[required=[expr]]]]
        The horizontal alignment of the text or ranged marks (area, bar, image, rect, rule).
        One of ``"left"``, ``"right"``, ``"center"``.

        **Note:** Expression reference is *not* supported for range marks.
    angle : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], float]
        The rotation angle of the text, in degrees.
    aria : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], bool]
        A boolean flag indicating if `ARIA attributes
        <https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA>`__ should be
        included (SVG output only). If ``false``, the "aria-hidden" attribute will be set on
        the output SVG element, removing the mark item from the ARIA accessibility tree.
    ariaRole : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], str]
        Sets the type of user interface element of the mark item for `ARIA accessibility
        <https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA>`__ (SVG output
        only). If specified, this property determines the "role" attribute. Warning: this
        property is experimental and may be changed in the future.
    ariaRoleDescription : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], str]
        A human-readable, author-localized description for the role of the mark item for
        `ARIA accessibility
        <https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA>`__ (SVG output
        only). If specified, this property determines the "aria-roledescription" attribute.
        Warning: this property is experimental and may be changed in the future.
    aspect : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], bool]
        Whether to keep aspect ratio of image marks.
    baseline : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], Union[:class:`TextBaseline`, Union[:class:`Baseline`, Literal['top', 'middle', 'bottom']], str]]
        For text marks, the vertical text baseline. One of ``"alphabetic"`` (default),
        ``"top"``, ``"middle"``, ``"bottom"``, ``"line-top"``, ``"line-bottom"``, or an
        expression reference that provides one of the valid values. The ``"line-top"`` and
        ``"line-bottom"`` values operate similarly to ``"top"`` and ``"bottom"``, but are
        calculated relative to the ``lineHeight`` rather than ``fontSize`` alone.

        For range marks, the vertical alignment of the marks. One of ``"top"``,
        ``"middle"``, ``"bottom"``.

        **Note:** Expression reference is *not* supported for range marks.
    binSpacing : float
        Offset between bars for binned field. The ideal value for this is either 0
        (preferred by statisticians) or 1 (Vega-Lite default, D3 example style).

        **Default value:** ``1``
    blend : Union[Union[:class:`Blend`, Literal[None, 'multiply', 'screen', 'overlay', 'darken', 'lighten', 'color-dodge', 'color-burn', 'hard-light', 'soft-light', 'difference', 'exclusion', 'hue', 'saturation', 'color', 'luminosity']], Union[:class:`ExprRef`, Dict[required=[expr]]]]
        The color blend mode for drawing an item on its current background. Any valid `CSS
        mix-blend-mode <https://developer.mozilla.org/en-US/docs/Web/CSS/mix-blend-mode>`__
        value can be used.

        __Default value:__ ``"source-over"``
    color : Union[Union[:class:`Color`, Union[:class:`ColorName`, Literal['black', 'silver', 'gray', 'white', 'maroon', 'red', 'purple', 'fuchsia', 'green', 'lime', 'olive', 'yellow', 'navy', 'blue', 'teal', 'aqua', 'orange', 'aliceblue', 'antiquewhite', 'aquamarine', 'azure', 'beige', 'bisque', 'blanchedalmond', 'blueviolet', 'brown', 'burlywood', 'cadetblue', 'chartreuse', 'chocolate', 'coral', 'cornflowerblue', 'cornsilk', 'crimson', 'cyan', 'darkblue', 'darkcyan', 'darkgoldenrod', 'darkgray', 'darkgreen', 'darkgrey', 'darkkhaki', 'darkmagenta', 'darkolivegreen', 'darkorange', 'darkorchid', 'darkred', 'darksalmon', 'darkseagreen', 'darkslateblue', 'darkslategray', 'darkslategrey', 'darkturquoise', 'darkviolet', 'deeppink', 'deepskyblue', 'dimgray', 'dimgrey', 'dodgerblue', 'firebrick', 'floralwhite', 'forestgreen', 'gainsboro', 'ghostwhite', 'gold', 'goldenrod', 'greenyellow', 'grey', 'honeydew', 'hotpink', 'indianred', 'indigo', 'ivory', 'khaki', 'lavender', 'lavenderblush', 'lawngreen', 'lemonchiffon', 'lightblue', 'lightcoral', 'lightcyan', 'lightgoldenrodyellow', 'lightgray', 'lightgreen', 'lightgrey', 'lightpink', 'lightsalmon', 'lightseagreen', 'lightskyblue', 'lightslategray', 'lightslategrey', 'lightsteelblue', 'lightyellow', 'limegreen', 'linen', 'magenta', 'mediumaquamarine', 'mediumblue', 'mediumorchid', 'mediumpurple', 'mediumseagreen', 'mediumslateblue', 'mediumspringgreen', 'mediumturquoise', 'mediumvioletred', 'midnightblue', 'mintcream', 'mistyrose', 'moccasin', 'navajowhite', 'oldlace', 'olivedrab', 'orangered', 'orchid', 'palegoldenrod', 'palegreen', 'paleturquoise', 'palevioletred', 'papayawhip', 'peachpuff', 'peru', 'pink', 'plum', 'powderblue', 'rosybrown', 'royalblue', 'saddlebrown', 'salmon', 'sandybrown', 'seagreen', 'seashell', 'sienna', 'skyblue', 'slateblue', 'slategray', 'slategrey', 'snow', 'springgreen', 'steelblue', 'tan', 'thistle', 'tomato', 'turquoise', 'violet', 'wheat', 'whitesmoke', 'yellowgreen', 'rebeccapurple']], Union[:class:`HexColor`, str], str], Union[:class:`ExprRef`, Dict[required=[expr]]], Union[:class:`Gradient`, Union[:class:`LinearGradient`, Dict[required=[gradient, stops]]], Union[:class:`RadialGradient`, Dict[required=[gradient, stops]]]]]
        Default color.

        **Default value:** :raw-html:`<span style="color: #4682b4;">&#9632;</span>`
        ``"#4682b4"``

        **Note:**


        * This property cannot be used in a `style config
          <https://vega.github.io/vega-lite/docs/mark.html#style-config>`__.
        * The ``fill`` and ``stroke`` properties have higher precedence than ``color`` and
          will override ``color``.
    continuousBandSize : float
        The default size of the bars on continuous scales.

        **Default value:** ``5``
    cornerRadius : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], float]
        The radius in pixels of rounded rectangles or arcs' corners.

        **Default value:** ``0``
    cornerRadiusBottomLeft : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], float]
        The radius in pixels of rounded rectangles' bottom left corner.

        **Default value:** ``0``
    cornerRadiusBottomRight : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], float]
        The radius in pixels of rounded rectangles' bottom right corner.

        **Default value:** ``0``
    cornerRadiusEnd : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], float]
        For vertical bars, top-left and top-right corner radius.

        For horizontal bars, top-right and bottom-right corner radius.
    cornerRadiusTopLeft : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], float]
        The radius in pixels of rounded rectangles' top right corner.

        **Default value:** ``0``
    cornerRadiusTopRight : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], float]
        The radius in pixels of rounded rectangles' top left corner.

        **Default value:** ``0``
    cursor : Union[Union[:class:`Cursor`, Literal['auto', 'default', 'none', 'context-menu', 'help', 'pointer', 'progress', 'wait', 'cell', 'crosshair', 'text', 'vertical-text', 'alias', 'copy', 'move', 'no-drop', 'not-allowed', 'e-resize', 'n-resize', 'ne-resize', 'nw-resize', 's-resize', 'se-resize', 'sw-resize', 'w-resize', 'ew-resize', 'ns-resize', 'nesw-resize', 'nwse-resize', 'col-resize', 'row-resize', 'all-scroll', 'zoom-in', 'zoom-out', 'grab', 'grabbing']], Union[:class:`ExprRef`, Dict[required=[expr]]]]
        The mouse cursor used over the mark. Any valid `CSS cursor type
        <https://developer.mozilla.org/en-US/docs/Web/CSS/cursor#Values>`__ can be used.
    description : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], str]
        A text description of the mark item for `ARIA accessibility
        <https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA>`__ (SVG output
        only). If specified, this property determines the `"aria-label" attribute
        <https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/ARIA_Techniques/Using_the_aria-label_attribute>`__.
    dir : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], Union[:class:`TextDirection`, Literal['ltr', 'rtl']]]
        The direction of the text. One of ``"ltr"`` (left-to-right) or ``"rtl"``
        (right-to-left). This property determines on which side is truncated in response to
        the limit parameter.

        **Default value:** ``"ltr"``
    discreteBandSize : Union[Union[:class:`RelativeBandSize`, Dict[required=[band]]], float]
        The default size of the bars with discrete dimensions. If unspecified, the default
        size is  ``step-2``, which provides 2 pixel offset between bars.
    dx : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], float]
        The horizontal offset, in pixels, between the text label and its anchor point. The
        offset is applied after rotation by the *angle* property.
    dy : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], float]
        The vertical offset, in pixels, between the text label and its anchor point. The
        offset is applied after rotation by the *angle* property.
    ellipsis : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], str]
        The ellipsis string for text truncated in response to the limit parameter.

        **Default value:** ``"…"``
    endAngle : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], float]
        The end angle in radians for arc marks. A value of ``0`` indicates up (north),
        increasing values proceed clockwise.
    fill : Union[None, Union[:class:`Color`, Union[:class:`ColorName`, Literal['black', 'silver', 'gray', 'white', 'maroon', 'red', 'purple', 'fuchsia', 'green', 'lime', 'olive', 'yellow', 'navy', 'blue', 'teal', 'aqua', 'orange', 'aliceblue', 'antiquewhite', 'aquamarine', 'azure', 'beige', 'bisque', 'blanchedalmond', 'blueviolet', 'brown', 'burlywood', 'cadetblue', 'chartreuse', 'chocolate', 'coral', 'cornflowerblue', 'cornsilk', 'crimson', 'cyan', 'darkblue', 'darkcyan', 'darkgoldenrod', 'darkgray', 'darkgreen', 'darkgrey', 'darkkhaki', 'darkmagenta', 'darkolivegreen', 'darkorange', 'darkorchid', 'darkred', 'darksalmon', 'darkseagreen', 'darkslateblue', 'darkslategray', 'darkslategrey', 'darkturquoise', 'darkviolet', 'deeppink', 'deepskyblue', 'dimgray', 'dimgrey', 'dodgerblue', 'firebrick', 'floralwhite', 'forestgreen', 'gainsboro', 'ghostwhite', 'gold', 'goldenrod', 'greenyellow', 'grey', 'honeydew', 'hotpink', 'indianred', 'indigo', 'ivory', 'khaki', 'lavender', 'lavenderblush', 'lawngreen', 'lemonchiffon', 'lightblue', 'lightcoral', 'lightcyan', 'lightgoldenrodyellow', 'lightgray', 'lightgreen', 'lightgrey', 'lightpink', 'lightsalmon', 'lightseagreen', 'lightskyblue', 'lightslategray', 'lightslategrey', 'lightsteelblue', 'lightyellow', 'limegreen', 'linen', 'magenta', 'mediumaquamarine', 'mediumblue', 'mediumorchid', 'mediumpurple', 'mediumseagreen', 'mediumslateblue', 'mediumspringgreen', 'mediumturquoise', 'mediumvioletred', 'midnightblue', 'mintcream', 'mistyrose', 'moccasin', 'navajowhite', 'oldlace', 'olivedrab', 'orangered', 'orchid', 'palegoldenrod', 'palegreen', 'paleturquoise', 'palevioletred', 'papayawhip', 'peachpuff', 'peru', 'pink', 'plum', 'powderblue', 'rosybrown', 'royalblue', 'saddlebrown', 'salmon', 'sandybrown', 'seagreen', 'seashell', 'sienna', 'skyblue', 'slateblue', 'slategray', 'slategrey', 'snow', 'springgreen', 'steelblue', 'tan', 'thistle', 'tomato', 'turquoise', 'violet', 'wheat', 'whitesmoke', 'yellowgreen', 'rebeccapurple']], Union[:class:`HexColor`, str], str], Union[:class:`ExprRef`, Dict[required=[expr]]], Union[:class:`Gradient`, Union[:class:`LinearGradient`, Dict[required=[gradient, stops]]], Union[:class:`RadialGradient`, Dict[required=[gradient, stops]]]]]
        Default fill color. This property has higher precedence than ``config.color``. Set
        to ``null`` to remove fill.

        **Default value:** (None)
    fillOpacity : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], float]
        The fill opacity (value between [0,1]).

        **Default value:** ``1``
    filled : bool
        Whether the mark's color should be used as fill color instead of stroke color.

        **Default value:** ``false`` for all ``point``, ``line``, and ``rule`` marks as well
        as ``geoshape`` marks for `graticule
        <https://vega.github.io/vega-lite/docs/data.html#graticule>`__ data sources;
        otherwise, ``true``.

        **Note:** This property cannot be used in a `style config
        <https://vega.github.io/vega-lite/docs/mark.html#style-config>`__.
    font : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], str]
        The typeface to set the text in (e.g., ``"Helvetica Neue"`` ).
    fontSize : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], float]
        The font size, in pixels.

        **Default value:** ``11``
    fontStyle : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], Union[:class:`FontStyle`, str]]
        The font style (e.g., ``"italic"`` ).
    fontWeight : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], Union[:class:`FontWeight`, Literal['normal', 'bold', 'lighter', 'bolder', 100, 200, 300, 400, 500, 600, 700, 800, 900]]]
        The font weight. This can be either a string (e.g ``"bold"``, ``"normal"`` ) or a
        number ( ``100``, ``200``, ``300``, ..., ``900`` where ``"normal"`` = ``400`` and
        ``"bold"`` = ``700`` ).
    height : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], float]
        Height of the marks.
    href : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], Union[:class:`URI`, str]]
        A URL to load upon mouse click. If defined, the mark acts as a hyperlink.
    innerRadius : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], float]
        The inner radius in pixels of arc marks. ``innerRadius`` is an alias for
        ``radius2``.

        **Default value:** ``0``
    interpolate : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], Union[:class:`Interpolate`, Literal['basis', 'basis-open', 'basis-closed', 'bundle', 'cardinal', 'cardinal-open', 'cardinal-closed', 'catmull-rom', 'linear', 'linear-closed', 'monotone', 'natural', 'step', 'step-before', 'step-after']]]
        The line interpolation method to use for line and area marks. One of the following:


        * ``"linear"`` : piecewise linear segments, as in a polyline.
        * ``"linear-closed"`` : close the linear segments to form a polygon.
        * ``"step"`` : alternate between horizontal and vertical segments, as in a step
          function.
        * ``"step-before"`` : alternate between vertical and horizontal segments, as in a
          step function.
        * ``"step-after"`` : alternate between horizontal and vertical segments, as in a
          step function.
        * ``"basis"`` : a B-spline, with control point duplication on the ends.
        * ``"basis-open"`` : an open B-spline; may not intersect the start or end.
        * ``"basis-closed"`` : a closed B-spline, as in a loop.
        * ``"cardinal"`` : a Cardinal spline, with control point duplication on the ends.
        * ``"cardinal-open"`` : an open Cardinal spline; may not intersect the start or end,
          but will intersect other control points.
        * ``"cardinal-closed"`` : a closed Cardinal spline, as in a loop.
        * ``"bundle"`` : equivalent to basis, except the tension parameter is used to
          straighten the spline.
        * ``"monotone"`` : cubic interpolation that preserves monotonicity in y.
    invalid : Literal['filter', None]
        Defines how Vega-Lite should handle marks for invalid values ( ``null`` and ``NaN``
        ).


        * If set to ``"filter"`` (default), all data items with null values will be skipped
          (for line, trail, and area marks) or filtered (for other marks).
        * If ``null``, all data items are included. In this case, invalid values will be
          interpreted as zeroes.
    limit : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], float]
        The maximum length of the text mark in pixels. The text value will be automatically
        truncated if the rendered size exceeds the limit.

        **Default value:** ``0`` -- indicating no limit
    lineBreak : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], str]
        A delimiter, such as a newline character, upon which to break text strings into
        multiple lines. This property is ignored if the text is array-valued.
    lineHeight : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], float]
        The line height in pixels (the spacing between subsequent lines of text) for
        multi-line text marks.
    minBandSize : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], float]
        The minimum band size for bar and rectangle marks. **Default value:** ``0.25``
    opacity : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], float]
        The overall opacity (value between [0,1]).

        **Default value:** ``0.7`` for non-aggregate plots with ``point``, ``tick``,
        ``circle``, or ``square`` marks or layered ``bar`` charts and ``1`` otherwise.
    order : Union[None, bool]
        For line and trail marks, this ``order`` property can be set to ``null`` or
        ``false`` to make the lines use the original order in the data sources.
    orient : Union[:class:`Orientation`, Literal['horizontal', 'vertical']]
        The orientation of a non-stacked bar, tick, area, and line charts. The value is
        either horizontal (default) or vertical.


        * For bar, rule and tick, this determines whether the size of the bar and tick
          should be applied to x or y dimension.
        * For area, this property determines the orient property of the Vega output.
        * For line and trail marks, this property determines the sort order of the points in
          the line if ``config.sortLineBy`` is not specified. For stacked charts, this is
          always determined by the orientation of the stack; therefore explicitly specified
          value will be ignored.
    outerRadius : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], float]
        The outer radius in pixels of arc marks. ``outerRadius`` is an alias for ``radius``.

        **Default value:** ``0``
    padAngle : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], float]
        The angular padding applied to sides of the arc, in radians.
    radius : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], float]
        For arc mark, the primary (outer) radius in pixels.

        For text marks, polar coordinate radial offset, in pixels, of the text from the
        origin determined by the ``x`` and ``y`` properties.

        **Default value:** ``min(plot_width, plot_height)/2``
    radius2 : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], float]
        The secondary (inner) radius in pixels of arc marks.

        **Default value:** ``0``
    shape : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], Union[Union[:class:`SymbolShape`, str], str]]
        Shape of the point marks. Supported values include:


        * plotting shapes: ``"circle"``, ``"square"``, ``"cross"``, ``"diamond"``,
          ``"triangle-up"``, ``"triangle-down"``, ``"triangle-right"``, or
          ``"triangle-left"``.
        * the line symbol ``"stroke"``
        * centered directional shapes ``"arrow"``, ``"wedge"``, or ``"triangle"``
        * a custom `SVG path string
          <https://developer.mozilla.org/en-US/docs/Web/SVG/Tutorial/Paths>`__ (For correct
          sizing, custom shape paths should be defined within a square bounding box with
          coordinates ranging from -1 to 1 along both the x and y dimensions.)

        **Default value:** ``"circle"``
    size : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], float]
        Default size for marks.


        * For ``point`` / ``circle`` / ``square``, this represents the pixel area of the
          marks. Note that this value sets the area of the symbol; the side lengths will
          increase with the square root of this value.
        * For ``bar``, this represents the band size of the bar, in pixels.
        * For ``text``, this represents the font size, in pixels.

        **Default value:**


        * ``30`` for point, circle, square marks; width/height's ``step``
        * ``2`` for bar marks with discrete dimensions;
        * ``5`` for bar marks with continuous dimensions;
        * ``11`` for text marks.
    smooth : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], bool]
        A boolean flag (default true) indicating if the image should be smoothed when
        resized. If false, individual pixels should be scaled directly rather than
        interpolated with smoothing. For SVG rendering, this option may not work in some
        browsers due to lack of standardization.
    startAngle : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], float]
        The start angle in radians for arc marks. A value of ``0`` indicates up (north),
        increasing values proceed clockwise.
    stroke : Union[None, Union[:class:`Color`, Union[:class:`ColorName`, Literal['black', 'silver', 'gray', 'white', 'maroon', 'red', 'purple', 'fuchsia', 'green', 'lime', 'olive', 'yellow', 'navy', 'blue', 'teal', 'aqua', 'orange', 'aliceblue', 'antiquewhite', 'aquamarine', 'azure', 'beige', 'bisque', 'blanchedalmond', 'blueviolet', 'brown', 'burlywood', 'cadetblue', 'chartreuse', 'chocolate', 'coral', 'cornflowerblue', 'cornsilk', 'crimson', 'cyan', 'darkblue', 'darkcyan', 'darkgoldenrod', 'darkgray', 'darkgreen', 'darkgrey', 'darkkhaki', 'darkmagenta', 'darkolivegreen', 'darkorange', 'darkorchid', 'darkred', 'darksalmon', 'darkseagreen', 'darkslateblue', 'darkslategray', 'darkslategrey', 'darkturquoise', 'darkviolet', 'deeppink', 'deepskyblue', 'dimgray', 'dimgrey', 'dodgerblue', 'firebrick', 'floralwhite', 'forestgreen', 'gainsboro', 'ghostwhite', 'gold', 'goldenrod', 'greenyellow', 'grey', 'honeydew', 'hotpink', 'indianred', 'indigo', 'ivory', 'khaki', 'lavender', 'lavenderblush', 'lawngreen', 'lemonchiffon', 'lightblue', 'lightcoral', 'lightcyan', 'lightgoldenrodyellow', 'lightgray', 'lightgreen', 'lightgrey', 'lightpink', 'lightsalmon', 'lightseagreen', 'lightskyblue', 'lightslategray', 'lightslategrey', 'lightsteelblue', 'lightyellow', 'limegreen', 'linen', 'magenta', 'mediumaquamarine', 'mediumblue', 'mediumorchid', 'mediumpurple', 'mediumseagreen', 'mediumslateblue', 'mediumspringgreen', 'mediumturquoise', 'mediumvioletred', 'midnightblue', 'mintcream', 'mistyrose', 'moccasin', 'navajowhite', 'oldlace', 'olivedrab', 'orangered', 'orchid', 'palegoldenrod', 'palegreen', 'paleturquoise', 'palevioletred', 'papayawhip', 'peachpuff', 'peru', 'pink', 'plum', 'powderblue', 'rosybrown', 'royalblue', 'saddlebrown', 'salmon', 'sandybrown', 'seagreen', 'seashell', 'sienna', 'skyblue', 'slateblue', 'slategray', 'slategrey', 'snow', 'springgreen', 'steelblue', 'tan', 'thistle', 'tomato', 'turquoise', 'violet', 'wheat', 'whitesmoke', 'yellowgreen', 'rebeccapurple']], Union[:class:`HexColor`, str], str], Union[:class:`ExprRef`, Dict[required=[expr]]], Union[:class:`Gradient`, Union[:class:`LinearGradient`, Dict[required=[gradient, stops]]], Union[:class:`RadialGradient`, Dict[required=[gradient, stops]]]]]
        Default stroke color. This property has higher precedence than ``config.color``. Set
        to ``null`` to remove stroke.

        **Default value:** (None)
    strokeCap : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], Union[:class:`StrokeCap`, Literal['butt', 'round', 'square']]]
        The stroke cap for line ending style. One of ``"butt"``, ``"round"``, or
        ``"square"``.

        **Default value:** ``"butt"``
    strokeDash : Union[List[float], Union[:class:`ExprRef`, Dict[required=[expr]]]]
        An array of alternating stroke, space lengths for creating dashed or dotted lines.
    strokeDashOffset : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], float]
        The offset (in pixels) into which to begin drawing with the stroke dash array.
    strokeJoin : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], Union[:class:`StrokeJoin`, Literal['miter', 'round', 'bevel']]]
        The stroke line join method. One of ``"miter"``, ``"round"`` or ``"bevel"``.

        **Default value:** ``"miter"``
    strokeMiterLimit : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], float]
        The miter limit at which to bevel a line join.
    strokeOffset : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], float]
        The offset in pixels at which to draw the group stroke and fill. If unspecified, the
        default behavior is to dynamically offset stroked groups such that 1 pixel stroke
        widths align with the pixel grid.
    strokeOpacity : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], float]
        The stroke opacity (value between [0,1]).

        **Default value:** ``1``
    strokeWidth : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], float]
        The stroke width, in pixels.
    tension : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], float]
        Depending on the interpolation type, sets the tension parameter (for line and area
        marks).
    text : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], Union[:class:`Text`, List[str], str]]
        Placeholder text if the ``text`` channel is not specified
    theta : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], float]
        For arc marks, the arc length in radians if theta2 is not specified, otherwise the
        start arc angle. (A value of 0 indicates up or “north”, increasing values proceed
        clockwise.)

        For text marks, polar coordinate angle in radians.
    theta2 : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], float]
        The end angle of arc marks in radians. A value of 0 indicates up or “north”,
        increasing values proceed clockwise.
    timeUnitBandPosition : float
        Default relative band position for a time unit. If set to ``0``, the marks will be
        positioned at the beginning of the time unit band step. If set to ``0.5``, the marks
        will be positioned in the middle of the time unit band step.
    timeUnitBandSize : float
        Default relative band size for a time unit. If set to ``1``, the bandwidth of the
        marks will be equal to the time unit band step. If set to ``0.5``, bandwidth of the
        marks will be half of the time unit band step.
    tooltip : Union[None, Union[:class:`ExprRef`, Dict[required=[expr]]], Union[:class:`TooltipContent`, Dict[required=[content]]], bool, float, str]
        The tooltip text string to show upon mouse hover or an object defining which fields
        should the tooltip be derived from.


        * If ``tooltip`` is ``true`` or ``{"content": "encoding"}``, then all fields from
          ``encoding`` will be used.
        * If ``tooltip`` is ``{"content": "data"}``, then all fields that appear in the
          highlighted data point will be used.
        * If set to ``null`` or ``false``, then no tooltip will be used.

        See the `tooltip <https://vega.github.io/vega-lite/docs/tooltip.html>`__
        documentation for a detailed discussion about tooltip  in Vega-Lite.

        **Default value:** ``null``
    url : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], Union[:class:`URI`, str]]
        The URL of the image file for image marks.
    width : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], float]
        Width of the marks.
    x : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], float, str]
        X coordinates of the marks, or width of horizontal ``"bar"`` and ``"area"`` without
        specified ``x2`` or ``width``.

        The ``value`` of this channel can be a number or a string ``"width"`` for the width
        of the plot.
    x2 : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], float, str]
        X2 coordinates for ranged ``"area"``, ``"bar"``, ``"rect"``, and  ``"rule"``.

        The ``value`` of this channel can be a number or a string ``"width"`` for the width
        of the plot.
    y : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], float, str]
        Y coordinates of the marks, or height of vertical ``"bar"`` and ``"area"`` without
        specified ``y2`` or ``height``.

        The ``value`` of this channel can be a number or a string ``"height"`` for the
        height of the plot.
    y2 : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], float, str]
        Y2 coordinates for ranged ``"area"``, ``"bar"``, ``"rect"``, and  ``"rule"``.

        The ``value`` of this channel can be a number or a string ``"height"`` for the
        height of the plot.
    """

    _schema = {"$ref": "#/definitions/BarConfig"}

    def __init__(
        self,
        align: Union[
            Union[
                Union["Align", Literal["left", "center", "right"]],
                Union["ExprRef", "_ParameterProtocol", dict],
            ],
            UndefinedType,
        ] = Undefined,
        angle: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], float], UndefinedType
        ] = Undefined,
        aria: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], bool], UndefinedType
        ] = Undefined,
        ariaRole: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], str], UndefinedType
        ] = Undefined,
        ariaRoleDescription: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], str], UndefinedType
        ] = Undefined,
        aspect: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], bool], UndefinedType
        ] = Undefined,
        baseline: Union[
            Union[
                Union["ExprRef", "_ParameterProtocol", dict],
                Union[
                    "TextBaseline",
                    Union["Baseline", Literal["top", "middle", "bottom"]],
                    str,
                ],
            ],
            UndefinedType,
        ] = Undefined,
        binSpacing: Union[float, UndefinedType] = Undefined,
        blend: Union[
            Union[
                Union[
                    "Blend",
                    Literal[
                        None,
                        "multiply",
                        "screen",
                        "overlay",
                        "darken",
                        "lighten",
                        "color-dodge",
                        "color-burn",
                        "hard-light",
                        "soft-light",
                        "difference",
                        "exclusion",
                        "hue",
                        "saturation",
                        "color",
                        "luminosity",
                    ],
                ],
                Union["ExprRef", "_ParameterProtocol", dict],
            ],
            UndefinedType,
        ] = Undefined,
        color: Union[
            Union[
                Union[
                    "Color",
                    Union[
                        "ColorName",
                        Literal[
                            "black",
                            "silver",
                            "gray",
                            "white",
                            "maroon",
                            "red",
                            "purple",
                            "fuchsia",
                            "green",
                            "lime",
                            "olive",
                            "yellow",
                            "navy",
                            "blue",
                            "teal",
                            "aqua",
                            "orange",
                            "aliceblue",
                            "antiquewhite",
                            "aquamarine",
                            "azure",
                            "beige",
                            "bisque",
                            "blanchedalmond",
                            "blueviolet",
                            "brown",
                            "burlywood",
                            "cadetblue",
                            "chartreuse",
                            "chocolate",
                            "coral",
                            "cornflowerblue",
                            "cornsilk",
                            "crimson",
                            "cyan",
                            "darkblue",
                            "darkcyan",
                            "darkgoldenrod",
                            "darkgray",
                            "darkgreen",
                            "darkgrey",
                            "darkkhaki",
                            "darkmagenta",
                            "darkolivegreen",
                            "darkorange",
                            "darkorchid",
                            "darkred",
                            "darksalmon",
                            "darkseagreen",
                            "darkslateblue",
                            "darkslategray",
                            "darkslategrey",
                            "darkturquoise",
                            "darkviolet",
                            "deeppink",
                            "deepskyblue",
                            "dimgray",
                            "dimgrey",
                            "dodgerblue",
                            "firebrick",
                            "floralwhite",
                            "forestgreen",
                            "gainsboro",
                            "ghostwhite",
                            "gold",
                            "goldenrod",
                            "greenyellow",
                            "grey",
                            "honeydew",
                            "hotpink",
                            "indianred",
                            "indigo",
                            "ivory",
                            "khaki",
                            "lavender",
                            "lavenderblush",
                            "lawngreen",
                            "lemonchiffon",
                            "lightblue",
                            "lightcoral",
                            "lightcyan",
                            "lightgoldenrodyellow",
                            "lightgray",
                            "lightgreen",
                            "lightgrey",
                            "lightpink",
                            "lightsalmon",
                            "lightseagreen",
                            "lightskyblue",
                            "lightslategray",
                            "lightslategrey",
                            "lightsteelblue",
                            "lightyellow",
                            "limegreen",
                            "linen",
                            "magenta",
                            "mediumaquamarine",
                            "mediumblue",
                            "mediumorchid",
                            "mediumpurple",
                            "mediumseagreen",
                            "mediumslateblue",
                            "mediumspringgreen",
                            "mediumturquoise",
                            "mediumvioletred",
                            "midnightblue",
                            "mintcream",
                            "mistyrose",
                            "moccasin",
                            "navajowhite",
                            "oldlace",
                            "olivedrab",
                            "orangered",
                            "orchid",
                            "palegoldenrod",
                            "palegreen",
                            "paleturquoise",
                            "palevioletred",
                            "papayawhip",
                            "peachpuff",
                            "peru",
                            "pink",
                            "plum",
                            "powderblue",
                            "rosybrown",
                            "royalblue",
                            "saddlebrown",
                            "salmon",
                            "sandybrown",
                            "seagreen",
                            "seashell",
                            "sienna",
                            "skyblue",
                            "slateblue",
                            "slategray",
                            "slategrey",
                            "snow",
                            "springgreen",
                            "steelblue",
                            "tan",
                            "thistle",
                            "tomato",
                            "turquoise",
                            "violet",
                            "wheat",
                            "whitesmoke",
                            "yellowgreen",
                            "rebeccapurple",
                        ],
                    ],
                    Union["HexColor", str],
                    str,
                ],
                Union["ExprRef", "_ParameterProtocol", dict],
                Union[
                    "Gradient",
                    Union["LinearGradient", dict],
                    Union["RadialGradient", dict],
                ],
            ],
            UndefinedType,
        ] = Undefined,
        continuousBandSize: Union[float, UndefinedType] = Undefined,
        cornerRadius: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], float], UndefinedType
        ] = Undefined,
        cornerRadiusBottomLeft: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], float], UndefinedType
        ] = Undefined,
        cornerRadiusBottomRight: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], float], UndefinedType
        ] = Undefined,
        cornerRadiusEnd: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], float], UndefinedType
        ] = Undefined,
        cornerRadiusTopLeft: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], float], UndefinedType
        ] = Undefined,
        cornerRadiusTopRight: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], float], UndefinedType
        ] = Undefined,
        cursor: Union[
            Union[
                Union[
                    "Cursor",
                    Literal[
                        "auto",
                        "default",
                        "none",
                        "context-menu",
                        "help",
                        "pointer",
                        "progress",
                        "wait",
                        "cell",
                        "crosshair",
                        "text",
                        "vertical-text",
                        "alias",
                        "copy",
                        "move",
                        "no-drop",
                        "not-allowed",
                        "e-resize",
                        "n-resize",
                        "ne-resize",
                        "nw-resize",
                        "s-resize",
                        "se-resize",
                        "sw-resize",
                        "w-resize",
                        "ew-resize",
                        "ns-resize",
                        "nesw-resize",
                        "nwse-resize",
                        "col-resize",
                        "row-resize",
                        "all-scroll",
                        "zoom-in",
                        "zoom-out",
                        "grab",
                        "grabbing",
                    ],
                ],
                Union["ExprRef", "_ParameterProtocol", dict],
            ],
            UndefinedType,
        ] = Undefined,
        description: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], str], UndefinedType
        ] = Undefined,
        dir: Union[
            Union[
                Union["ExprRef", "_ParameterProtocol", dict],
                Union["TextDirection", Literal["ltr", "rtl"]],
            ],
            UndefinedType,
        ] = Undefined,
        discreteBandSize: Union[
            Union[Union["RelativeBandSize", dict], float], UndefinedType
        ] = Undefined,
        dx: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], float], UndefinedType
        ] = Undefined,
        dy: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], float], UndefinedType
        ] = Undefined,
        ellipsis: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], str], UndefinedType
        ] = Undefined,
        endAngle: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], float], UndefinedType
        ] = Undefined,
        fill: Union[
            Union[
                None,
                Union[
                    "Color",
                    Union[
                        "ColorName",
                        Literal[
                            "black",
                            "silver",
                            "gray",
                            "white",
                            "maroon",
                            "red",
                            "purple",
                            "fuchsia",
                            "green",
                            "lime",
                            "olive",
                            "yellow",
                            "navy",
                            "blue",
                            "teal",
                            "aqua",
                            "orange",
                            "aliceblue",
                            "antiquewhite",
                            "aquamarine",
                            "azure",
                            "beige",
                            "bisque",
                            "blanchedalmond",
                            "blueviolet",
                            "brown",
                            "burlywood",
                            "cadetblue",
                            "chartreuse",
                            "chocolate",
                            "coral",
                            "cornflowerblue",
                            "cornsilk",
                            "crimson",
                            "cyan",
                            "darkblue",
                            "darkcyan",
                            "darkgoldenrod",
                            "darkgray",
                            "darkgreen",
                            "darkgrey",
                            "darkkhaki",
                            "darkmagenta",
                            "darkolivegreen",
                            "darkorange",
                            "darkorchid",
                            "darkred",
                            "darksalmon",
                            "darkseagreen",
                            "darkslateblue",
                            "darkslategray",
                            "darkslategrey",
                            "darkturquoise",
                            "darkviolet",
                            "deeppink",
                            "deepskyblue",
                            "dimgray",
                            "dimgrey",
                            "dodgerblue",
                            "firebrick",
                            "floralwhite",
                            "forestgreen",
                            "gainsboro",
                            "ghostwhite",
                            "gold",
                            "goldenrod",
                            "greenyellow",
                            "grey",
                            "honeydew",
                            "hotpink",
                            "indianred",
                            "indigo",
                            "ivory",
                            "khaki",
                            "lavender",
                            "lavenderblush",
                            "lawngreen",
                            "lemonchiffon",
                            "lightblue",
                            "lightcoral",
                            "lightcyan",
                            "lightgoldenrodyellow",
                            "lightgray",
                            "lightgreen",
                            "lightgrey",
                            "lightpink",
                            "lightsalmon",
                            "lightseagreen",
                            "lightskyblue",
                            "lightslategray",
                            "lightslategrey",
                            "lightsteelblue",
                            "lightyellow",
                            "limegreen",
                            "linen",
                            "magenta",
                            "mediumaquamarine",
                            "mediumblue",
                            "mediumorchid",
                            "mediumpurple",
                            "mediumseagreen",
                            "mediumslateblue",
                            "mediumspringgreen",
                            "mediumturquoise",
                            "mediumvioletred",
                            "midnightblue",
                            "mintcream",
                            "mistyrose",
                            "moccasin",
                            "navajowhite",
                            "oldlace",
                            "olivedrab",
                            "orangered",
                            "orchid",
                            "palegoldenrod",
                            "palegreen",
                            "paleturquoise",
                            "palevioletred",
                            "papayawhip",
                            "peachpuff",
                            "peru",
                            "pink",
                            "plum",
                            "powderblue",
                            "rosybrown",
                            "royalblue",
                            "saddlebrown",
                            "salmon",
                            "sandybrown",
                            "seagreen",
                            "seashell",
                            "sienna",
                            "skyblue",
                            "slateblue",
                            "slategray",
                            "slategrey",
                            "snow",
                            "springgreen",
                            "steelblue",
                            "tan",
                            "thistle",
                            "tomato",
                            "turquoise",
                            "violet",
                            "wheat",
                            "whitesmoke",
                            "yellowgreen",
                            "rebeccapurple",
                        ],
                    ],
                    Union["HexColor", str],
                    str,
                ],
                Union["ExprRef", "_ParameterProtocol", dict],
                Union[
                    "Gradient",
                    Union["LinearGradient", dict],
                    Union["RadialGradient", dict],
                ],
            ],
            UndefinedType,
        ] = Undefined,
        fillOpacity: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], float], UndefinedType
        ] = Undefined,
        filled: Union[bool, UndefinedType] = Undefined,
        font: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], str], UndefinedType
        ] = Undefined,
        fontSize: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], float], UndefinedType
        ] = Undefined,
        fontStyle: Union[
            Union[
                Union["ExprRef", "_ParameterProtocol", dict], Union["FontStyle", str]
            ],
            UndefinedType,
        ] = Undefined,
        fontWeight: Union[
            Union[
                Union["ExprRef", "_ParameterProtocol", dict],
                Union[
                    "FontWeight",
                    Literal[
                        "normal",
                        "bold",
                        "lighter",
                        "bolder",
                        100,
                        200,
                        300,
                        400,
                        500,
                        600,
                        700,
                        800,
                        900,
                    ],
                ],
            ],
            UndefinedType,
        ] = Undefined,
        height: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], float], UndefinedType
        ] = Undefined,
        href: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], Union["URI", str]],
            UndefinedType,
        ] = Undefined,
        innerRadius: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], float], UndefinedType
        ] = Undefined,
        interpolate: Union[
            Union[
                Union["ExprRef", "_ParameterProtocol", dict],
                Union[
                    "Interpolate",
                    Literal[
                        "basis",
                        "basis-open",
                        "basis-closed",
                        "bundle",
                        "cardinal",
                        "cardinal-open",
                        "cardinal-closed",
                        "catmull-rom",
                        "linear",
                        "linear-closed",
                        "monotone",
                        "natural",
                        "step",
                        "step-before",
                        "step-after",
                    ],
                ],
            ],
            UndefinedType,
        ] = Undefined,
        invalid: Union[Literal["filter", None], UndefinedType] = Undefined,
        limit: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], float], UndefinedType
        ] = Undefined,
        lineBreak: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], str], UndefinedType
        ] = Undefined,
        lineHeight: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], float], UndefinedType
        ] = Undefined,
        minBandSize: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], float], UndefinedType
        ] = Undefined,
        opacity: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], float], UndefinedType
        ] = Undefined,
        order: Union[Union[None, bool], UndefinedType] = Undefined,
        orient: Union[
            Union["Orientation", Literal["horizontal", "vertical"]], UndefinedType
        ] = Undefined,
        outerRadius: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], float], UndefinedType
        ] = Undefined,
        padAngle: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], float], UndefinedType
        ] = Undefined,
        radius: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], float], UndefinedType
        ] = Undefined,
        radius2: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], float], UndefinedType
        ] = Undefined,
        shape: Union[
            Union[
                Union["ExprRef", "_ParameterProtocol", dict],
                Union[Union["SymbolShape", str], str],
            ],
            UndefinedType,
        ] = Undefined,
        size: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], float], UndefinedType
        ] = Undefined,
        smooth: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], bool], UndefinedType
        ] = Undefined,
        startAngle: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], float], UndefinedType
        ] = Undefined,
        stroke: Union[
            Union[
                None,
                Union[
                    "Color",
                    Union[
                        "ColorName",
                        Literal[
                            "black",
                            "silver",
                            "gray",
                            "white",
                            "maroon",
                            "red",
                            "purple",
                            "fuchsia",
                            "green",
                            "lime",
                            "olive",
                            "yellow",
                            "navy",
                            "blue",
                            "teal",
                            "aqua",
                            "orange",
                            "aliceblue",
                            "antiquewhite",
                            "aquamarine",
                            "azure",
                            "beige",
                            "bisque",
                            "blanchedalmond",
                            "blueviolet",
                            "brown",
                            "burlywood",
                            "cadetblue",
                            "chartreuse",
                            "chocolate",
                            "coral",
                            "cornflowerblue",
                            "cornsilk",
                            "crimson",
                            "cyan",
                            "darkblue",
                            "darkcyan",
                            "darkgoldenrod",
                            "darkgray",
                            "darkgreen",
                            "darkgrey",
                            "darkkhaki",
                            "darkmagenta",
                            "darkolivegreen",
                            "darkorange",
                            "darkorchid",
                            "darkred",
                            "darksalmon",
                            "darkseagreen",
                            "darkslateblue",
                            "darkslategray",
                            "darkslategrey",
                            "darkturquoise",
                            "darkviolet",
                            "deeppink",
                            "deepskyblue",
                            "dimgray",
                            "dimgrey",
                            "dodgerblue",
                            "firebrick",
                            "floralwhite",
                            "forestgreen",
                            "gainsboro",
                            "ghostwhite",
                            "gold",
                            "goldenrod",
                            "greenyellow",
                            "grey",
                            "honeydew",
                            "hotpink",
                            "indianred",
                            "indigo",
                            "ivory",
                            "khaki",
                            "lavender",
                            "lavenderblush",
                            "lawngreen",
                            "lemonchiffon",
                            "lightblue",
                            "lightcoral",
                            "lightcyan",
                            "lightgoldenrodyellow",
                            "lightgray",
                            "lightgreen",
                            "lightgrey",
                            "lightpink",
                            "lightsalmon",
                            "lightseagreen",
                            "lightskyblue",
                            "lightslategray",
                            "lightslategrey",
                            "lightsteelblue",
                            "lightyellow",
                            "limegreen",
                            "linen",
                            "magenta",
                            "mediumaquamarine",
                            "mediumblue",
                            "mediumorchid",
                            "mediumpurple",
                            "mediumseagreen",
                            "mediumslateblue",
                            "mediumspringgreen",
                            "mediumturquoise",
                            "mediumvioletred",
                            "midnightblue",
                            "mintcream",
                            "mistyrose",
                            "moccasin",
                            "navajowhite",
                            "oldlace",
                            "olivedrab",
                            "orangered",
                            "orchid",
                            "palegoldenrod",
                            "palegreen",
                            "paleturquoise",
                            "palevioletred",
                            "papayawhip",
                            "peachpuff",
                            "peru",
                            "pink",
                            "plum",
                            "powderblue",
                            "rosybrown",
                            "royalblue",
                            "saddlebrown",
                            "salmon",
                            "sandybrown",
                            "seagreen",
                            "seashell",
                            "sienna",
                            "skyblue",
                            "slateblue",
                            "slategray",
                            "slategrey",
                            "snow",
                            "springgreen",
                            "steelblue",
                            "tan",
                            "thistle",
                            "tomato",
                            "turquoise",
                            "violet",
                            "wheat",
                            "whitesmoke",
                            "yellowgreen",
                            "rebeccapurple",
                        ],
                    ],
                    Union["HexColor", str],
                    str,
                ],
                Union["ExprRef", "_ParameterProtocol", dict],
                Union[
                    "Gradient",
                    Union["LinearGradient", dict],
                    Union["RadialGradient", dict],
                ],
            ],
            UndefinedType,
        ] = Undefined,
        strokeCap: Union[
            Union[
                Union["ExprRef", "_ParameterProtocol", dict],
                Union["StrokeCap", Literal["butt", "round", "square"]],
            ],
            UndefinedType,
        ] = Undefined,
        strokeDash: Union[
            Union[List[float], Union["ExprRef", "_ParameterProtocol", dict]],
            UndefinedType,
        ] = Undefined,
        strokeDashOffset: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], float], UndefinedType
        ] = Undefined,
        strokeJoin: Union[
            Union[
                Union["ExprRef", "_ParameterProtocol", dict],
                Union["StrokeJoin", Literal["miter", "round", "bevel"]],
            ],
            UndefinedType,
        ] = Undefined,
        strokeMiterLimit: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], float], UndefinedType
        ] = Undefined,
        strokeOffset: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], float], UndefinedType
        ] = Undefined,
        strokeOpacity: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], float], UndefinedType
        ] = Undefined,
        strokeWidth: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], float], UndefinedType
        ] = Undefined,
        tension: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], float], UndefinedType
        ] = Undefined,
        text: Union[
            Union[
                Union["ExprRef", "_ParameterProtocol", dict],
                Union["Text", List[str], str],
            ],
            UndefinedType,
        ] = Undefined,
        theta: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], float], UndefinedType
        ] = Undefined,
        theta2: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], float], UndefinedType
        ] = Undefined,
        timeUnitBandPosition: Union[float, UndefinedType] = Undefined,
        timeUnitBandSize: Union[float, UndefinedType] = Undefined,
        tooltip: Union[
            Union[
                None,
                Union["ExprRef", "_ParameterProtocol", dict],
                Union["TooltipContent", dict],
                bool,
                float,
                str,
            ],
            UndefinedType,
        ] = Undefined,
        url: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], Union["URI", str]],
            UndefinedType,
        ] = Undefined,
        width: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], float], UndefinedType
        ] = Undefined,
        x: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], float, str],
            UndefinedType,
        ] = Undefined,
        x2: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], float, str],
            UndefinedType,
        ] = Undefined,
        y: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], float, str],
            UndefinedType,
        ] = Undefined,
        y2: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], float, str],
            UndefinedType,
        ] = Undefined,
        **kwds
    ):
        super(BarConfig, self).__init__(
            align=align,
            angle=angle,
            aria=aria,
            ariaRole=ariaRole,
            ariaRoleDescription=ariaRoleDescription,
            aspect=aspect,
            baseline=baseline,
            binSpacing=binSpacing,
            blend=blend,
            color=color,
            continuousBandSize=continuousBandSize,
            cornerRadius=cornerRadius,
            cornerRadiusBottomLeft=cornerRadiusBottomLeft,
            cornerRadiusBottomRight=cornerRadiusBottomRight,
            cornerRadiusEnd=cornerRadiusEnd,
            cornerRadiusTopLeft=cornerRadiusTopLeft,
            cornerRadiusTopRight=cornerRadiusTopRight,
            cursor=cursor,
            description=description,
            dir=dir,
            discreteBandSize=discreteBandSize,
            dx=dx,
            dy=dy,
            ellipsis=ellipsis,
            endAngle=endAngle,
            fill=fill,
            fillOpacity=fillOpacity,
            filled=filled,
            font=font,
            fontSize=fontSize,
            fontStyle=fontStyle,
            fontWeight=fontWeight,
            height=height,
            href=href,
            innerRadius=innerRadius,
            interpolate=interpolate,
            invalid=invalid,
            limit=limit,
            lineBreak=lineBreak,
            lineHeight=lineHeight,
            minBandSize=minBandSize,
            opacity=opacity,
            order=order,
            orient=orient,
            outerRadius=outerRadius,
            padAngle=padAngle,
            radius=radius,
            radius2=radius2,
            shape=shape,
            size=size,
            smooth=smooth,
            startAngle=startAngle,
            stroke=stroke,
            strokeCap=strokeCap,
            strokeDash=strokeDash,
            strokeDashOffset=strokeDashOffset,
            strokeJoin=strokeJoin,
            strokeMiterLimit=strokeMiterLimit,
            strokeOffset=strokeOffset,
            strokeOpacity=strokeOpacity,
            strokeWidth=strokeWidth,
            tension=tension,
            text=text,
            theta=theta,
            theta2=theta2,
            timeUnitBandPosition=timeUnitBandPosition,
            timeUnitBandSize=timeUnitBandSize,
            tooltip=tooltip,
            url=url,
            width=width,
            x=x,
            x2=x2,
            y=y,
            y2=y2,
            **kwds
        )


class BaseTitleNoValueRefs(VegaLiteSchema):
    """BaseTitleNoValueRefs schema wrapper

    Union[:class:`BaseTitleNoValueRefs`, Dict[required=[]]]

    Parameters
    ----------

    align : Union[:class:`Align`, Literal['left', 'center', 'right']]
        Horizontal text alignment for title text. One of ``"left"``, ``"center"``, or
        ``"right"``.
    anchor : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], Union[:class:`TitleAnchor`, Literal[None, 'start', 'middle', 'end']]]
        The anchor position for placing the title and subtitle text. One of ``"start"``,
        ``"middle"``, or ``"end"``. For example, with an orientation of top these anchor
        positions map to a left-, center-, or right-aligned title.
    angle : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], float]
        Angle in degrees of title and subtitle text.
    aria : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], bool]
        A boolean flag indicating if `ARIA attributes
        <https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA>`__ should be
        included (SVG output only). If ``false``, the "aria-hidden" attribute will be set on
        the output SVG group, removing the title from the ARIA accessibility tree.

        **Default value:** ``true``
    baseline : Union[:class:`TextBaseline`, Union[:class:`Baseline`, Literal['top', 'middle', 'bottom']], str]
        Vertical text baseline for title and subtitle text. One of ``"alphabetic"``
        (default), ``"top"``, ``"middle"``, ``"bottom"``, ``"line-top"``, or
        ``"line-bottom"``. The ``"line-top"`` and ``"line-bottom"`` values operate similarly
        to ``"top"`` and ``"bottom"``, but are calculated relative to the *lineHeight*
        rather than *fontSize* alone.
    color : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], Union[None, Union[:class:`Color`, Union[:class:`ColorName`, Literal['black', 'silver', 'gray', 'white', 'maroon', 'red', 'purple', 'fuchsia', 'green', 'lime', 'olive', 'yellow', 'navy', 'blue', 'teal', 'aqua', 'orange', 'aliceblue', 'antiquewhite', 'aquamarine', 'azure', 'beige', 'bisque', 'blanchedalmond', 'blueviolet', 'brown', 'burlywood', 'cadetblue', 'chartreuse', 'chocolate', 'coral', 'cornflowerblue', 'cornsilk', 'crimson', 'cyan', 'darkblue', 'darkcyan', 'darkgoldenrod', 'darkgray', 'darkgreen', 'darkgrey', 'darkkhaki', 'darkmagenta', 'darkolivegreen', 'darkorange', 'darkorchid', 'darkred', 'darksalmon', 'darkseagreen', 'darkslateblue', 'darkslategray', 'darkslategrey', 'darkturquoise', 'darkviolet', 'deeppink', 'deepskyblue', 'dimgray', 'dimgrey', 'dodgerblue', 'firebrick', 'floralwhite', 'forestgreen', 'gainsboro', 'ghostwhite', 'gold', 'goldenrod', 'greenyellow', 'grey', 'honeydew', 'hotpink', 'indianred', 'indigo', 'ivory', 'khaki', 'lavender', 'lavenderblush', 'lawngreen', 'lemonchiffon', 'lightblue', 'lightcoral', 'lightcyan', 'lightgoldenrodyellow', 'lightgray', 'lightgreen', 'lightgrey', 'lightpink', 'lightsalmon', 'lightseagreen', 'lightskyblue', 'lightslategray', 'lightslategrey', 'lightsteelblue', 'lightyellow', 'limegreen', 'linen', 'magenta', 'mediumaquamarine', 'mediumblue', 'mediumorchid', 'mediumpurple', 'mediumseagreen', 'mediumslateblue', 'mediumspringgreen', 'mediumturquoise', 'mediumvioletred', 'midnightblue', 'mintcream', 'mistyrose', 'moccasin', 'navajowhite', 'oldlace', 'olivedrab', 'orangered', 'orchid', 'palegoldenrod', 'palegreen', 'paleturquoise', 'palevioletred', 'papayawhip', 'peachpuff', 'peru', 'pink', 'plum', 'powderblue', 'rosybrown', 'royalblue', 'saddlebrown', 'salmon', 'sandybrown', 'seagreen', 'seashell', 'sienna', 'skyblue', 'slateblue', 'slategray', 'slategrey', 'snow', 'springgreen', 'steelblue', 'tan', 'thistle', 'tomato', 'turquoise', 'violet', 'wheat', 'whitesmoke', 'yellowgreen', 'rebeccapurple']], Union[:class:`HexColor`, str], str]]]
        Text color for title text.
    dx : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], float]
        Delta offset for title and subtitle text x-coordinate.
    dy : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], float]
        Delta offset for title and subtitle text y-coordinate.
    font : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], str]
        Font name for title text.
    fontSize : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], float]
        Font size in pixels for title text.
    fontStyle : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], Union[:class:`FontStyle`, str]]
        Font style for title text.
    fontWeight : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], Union[:class:`FontWeight`, Literal['normal', 'bold', 'lighter', 'bolder', 100, 200, 300, 400, 500, 600, 700, 800, 900]]]
        Font weight for title text. This can be either a string (e.g ``"bold"``,
        ``"normal"`` ) or a number ( ``100``, ``200``, ``300``, ..., ``900`` where
        ``"normal"`` = ``400`` and ``"bold"`` = ``700`` ).
    frame : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], Union[Union[:class:`TitleFrame`, Literal['bounds', 'group']], str]]
        The reference frame for the anchor position, one of ``"bounds"`` (to anchor relative
        to the full bounding box) or ``"group"`` (to anchor relative to the group width or
        height).
    limit : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], float]
        The maximum allowed length in pixels of title and subtitle text.
    lineHeight : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], float]
        Line height in pixels for multi-line title text or title text with ``"line-top"`` or
        ``"line-bottom"`` baseline.
    offset : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], float]
        The orthogonal offset in pixels by which to displace the title group from its
        position along the edge of the chart.
    orient : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], Union[:class:`TitleOrient`, Literal['none', 'left', 'right', 'top', 'bottom']]]
        Default title orientation ( ``"top"``, ``"bottom"``, ``"left"``, or ``"right"`` )
    subtitleColor : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], Union[None, Union[:class:`Color`, Union[:class:`ColorName`, Literal['black', 'silver', 'gray', 'white', 'maroon', 'red', 'purple', 'fuchsia', 'green', 'lime', 'olive', 'yellow', 'navy', 'blue', 'teal', 'aqua', 'orange', 'aliceblue', 'antiquewhite', 'aquamarine', 'azure', 'beige', 'bisque', 'blanchedalmond', 'blueviolet', 'brown', 'burlywood', 'cadetblue', 'chartreuse', 'chocolate', 'coral', 'cornflowerblue', 'cornsilk', 'crimson', 'cyan', 'darkblue', 'darkcyan', 'darkgoldenrod', 'darkgray', 'darkgreen', 'darkgrey', 'darkkhaki', 'darkmagenta', 'darkolivegreen', 'darkorange', 'darkorchid', 'darkred', 'darksalmon', 'darkseagreen', 'darkslateblue', 'darkslategray', 'darkslategrey', 'darkturquoise', 'darkviolet', 'deeppink', 'deepskyblue', 'dimgray', 'dimgrey', 'dodgerblue', 'firebrick', 'floralwhite', 'forestgreen', 'gainsboro', 'ghostwhite', 'gold', 'goldenrod', 'greenyellow', 'grey', 'honeydew', 'hotpink', 'indianred', 'indigo', 'ivory', 'khaki', 'lavender', 'lavenderblush', 'lawngreen', 'lemonchiffon', 'lightblue', 'lightcoral', 'lightcyan', 'lightgoldenrodyellow', 'lightgray', 'lightgreen', 'lightgrey', 'lightpink', 'lightsalmon', 'lightseagreen', 'lightskyblue', 'lightslategray', 'lightslategrey', 'lightsteelblue', 'lightyellow', 'limegreen', 'linen', 'magenta', 'mediumaquamarine', 'mediumblue', 'mediumorchid', 'mediumpurple', 'mediumseagreen', 'mediumslateblue', 'mediumspringgreen', 'mediumturquoise', 'mediumvioletred', 'midnightblue', 'mintcream', 'mistyrose', 'moccasin', 'navajowhite', 'oldlace', 'olivedrab', 'orangered', 'orchid', 'palegoldenrod', 'palegreen', 'paleturquoise', 'palevioletred', 'papayawhip', 'peachpuff', 'peru', 'pink', 'plum', 'powderblue', 'rosybrown', 'royalblue', 'saddlebrown', 'salmon', 'sandybrown', 'seagreen', 'seashell', 'sienna', 'skyblue', 'slateblue', 'slategray', 'slategrey', 'snow', 'springgreen', 'steelblue', 'tan', 'thistle', 'tomato', 'turquoise', 'violet', 'wheat', 'whitesmoke', 'yellowgreen', 'rebeccapurple']], Union[:class:`HexColor`, str], str]]]
        Text color for subtitle text.
    subtitleFont : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], str]
        Font name for subtitle text.
    subtitleFontSize : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], float]
        Font size in pixels for subtitle text.
    subtitleFontStyle : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], Union[:class:`FontStyle`, str]]
        Font style for subtitle text.
    subtitleFontWeight : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], Union[:class:`FontWeight`, Literal['normal', 'bold', 'lighter', 'bolder', 100, 200, 300, 400, 500, 600, 700, 800, 900]]]
        Font weight for subtitle text. This can be either a string (e.g ``"bold"``,
        ``"normal"`` ) or a number ( ``100``, ``200``, ``300``, ..., ``900`` where
        ``"normal"`` = ``400`` and ``"bold"`` = ``700`` ).
    subtitleLineHeight : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], float]
        Line height in pixels for multi-line subtitle text.
    subtitlePadding : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], float]
        The padding in pixels between title and subtitle text.
    zindex : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], float]
        The integer z-index indicating the layering of the title group relative to other
        axis, mark, and legend groups.

        **Default value:** ``0``.
    """

    _schema = {"$ref": "#/definitions/BaseTitleNoValueRefs"}

    def __init__(
        self,
        align: Union[
            Union["Align", Literal["left", "center", "right"]], UndefinedType
        ] = Undefined,
        anchor: Union[
            Union[
                Union["ExprRef", "_ParameterProtocol", dict],
                Union["TitleAnchor", Literal[None, "start", "middle", "end"]],
            ],
            UndefinedType,
        ] = Undefined,
        angle: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], float], UndefinedType
        ] = Undefined,
        aria: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], bool], UndefinedType
        ] = Undefined,
        baseline: Union[
            Union[
                "TextBaseline",
                Union["Baseline", Literal["top", "middle", "bottom"]],
                str,
            ],
            UndefinedType,
        ] = Undefined,
        color: Union[
            Union[
                Union["ExprRef", "_ParameterProtocol", dict],
                Union[
                    None,
                    Union[
                        "Color",
                        Union[
                            "ColorName",
                            Literal[
                                "black",
                                "silver",
                                "gray",
                                "white",
                                "maroon",
                                "red",
                                "purple",
                                "fuchsia",
                                "green",
                                "lime",
                                "olive",
                                "yellow",
                                "navy",
                                "blue",
                                "teal",
                                "aqua",
                                "orange",
                                "aliceblue",
                                "antiquewhite",
                                "aquamarine",
                                "azure",
                                "beige",
                                "bisque",
                                "blanchedalmond",
                                "blueviolet",
                                "brown",
                                "burlywood",
                                "cadetblue",
                                "chartreuse",
                                "chocolate",
                                "coral",
                                "cornflowerblue",
                                "cornsilk",
                                "crimson",
                                "cyan",
                                "darkblue",
                                "darkcyan",
                                "darkgoldenrod",
                                "darkgray",
                                "darkgreen",
                                "darkgrey",
                                "darkkhaki",
                                "darkmagenta",
                                "darkolivegreen",
                                "darkorange",
                                "darkorchid",
                                "darkred",
                                "darksalmon",
                                "darkseagreen",
                                "darkslateblue",
                                "darkslategray",
                                "darkslategrey",
                                "darkturquoise",
                                "darkviolet",
                                "deeppink",
                                "deepskyblue",
                                "dimgray",
                                "dimgrey",
                                "dodgerblue",
                                "firebrick",
                                "floralwhite",
                                "forestgreen",
                                "gainsboro",
                                "ghostwhite",
                                "gold",
                                "goldenrod",
                                "greenyellow",
                                "grey",
                                "honeydew",
                                "hotpink",
                                "indianred",
                                "indigo",
                                "ivory",
                                "khaki",
                                "lavender",
                                "lavenderblush",
                                "lawngreen",
                                "lemonchiffon",
                                "lightblue",
                                "lightcoral",
                                "lightcyan",
                                "lightgoldenrodyellow",
                                "lightgray",
                                "lightgreen",
                                "lightgrey",
                                "lightpink",
                                "lightsalmon",
                                "lightseagreen",
                                "lightskyblue",
                                "lightslategray",
                                "lightslategrey",
                                "lightsteelblue",
                                "lightyellow",
                                "limegreen",
                                "linen",
                                "magenta",
                                "mediumaquamarine",
                                "mediumblue",
                                "mediumorchid",
                                "mediumpurple",
                                "mediumseagreen",
                                "mediumslateblue",
                                "mediumspringgreen",
                                "mediumturquoise",
                                "mediumvioletred",
                                "midnightblue",
                                "mintcream",
                                "mistyrose",
                                "moccasin",
                                "navajowhite",
                                "oldlace",
                                "olivedrab",
                                "orangered",
                                "orchid",
                                "palegoldenrod",
                                "palegreen",
                                "paleturquoise",
                                "palevioletred",
                                "papayawhip",
                                "peachpuff",
                                "peru",
                                "pink",
                                "plum",
                                "powderblue",
                                "rosybrown",
                                "royalblue",
                                "saddlebrown",
                                "salmon",
                                "sandybrown",
                                "seagreen",
                                "seashell",
                                "sienna",
                                "skyblue",
                                "slateblue",
                                "slategray",
                                "slategrey",
                                "snow",
                                "springgreen",
                                "steelblue",
                                "tan",
                                "thistle",
                                "tomato",
                                "turquoise",
                                "violet",
                                "wheat",
                                "whitesmoke",
                                "yellowgreen",
                                "rebeccapurple",
                            ],
                        ],
                        Union["HexColor", str],
                        str,
                    ],
                ],
            ],
            UndefinedType,
        ] = Undefined,
        dx: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], float], UndefinedType
        ] = Undefined,
        dy: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], float], UndefinedType
        ] = Undefined,
        font: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], str], UndefinedType
        ] = Undefined,
        fontSize: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], float], UndefinedType
        ] = Undefined,
        fontStyle: Union[
            Union[
                Union["ExprRef", "_ParameterProtocol", dict], Union["FontStyle", str]
            ],
            UndefinedType,
        ] = Undefined,
        fontWeight: Union[
            Union[
                Union["ExprRef", "_ParameterProtocol", dict],
                Union[
                    "FontWeight",
                    Literal[
                        "normal",
                        "bold",
                        "lighter",
                        "bolder",
                        100,
                        200,
                        300,
                        400,
                        500,
                        600,
                        700,
                        800,
                        900,
                    ],
                ],
            ],
            UndefinedType,
        ] = Undefined,
        frame: Union[
            Union[
                Union["ExprRef", "_ParameterProtocol", dict],
                Union[Union["TitleFrame", Literal["bounds", "group"]], str],
            ],
            UndefinedType,
        ] = Undefined,
        limit: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], float], UndefinedType
        ] = Undefined,
        lineHeight: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], float], UndefinedType
        ] = Undefined,
        offset: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], float], UndefinedType
        ] = Undefined,
        orient: Union[
            Union[
                Union["ExprRef", "_ParameterProtocol", dict],
                Union["TitleOrient", Literal["none", "left", "right", "top", "bottom"]],
            ],
            UndefinedType,
        ] = Undefined,
        subtitleColor: Union[
            Union[
                Union["ExprRef", "_ParameterProtocol", dict],
                Union[
                    None,
                    Union[
                        "Color",
                        Union[
                            "ColorName",
                            Literal[
                                "black",
                                "silver",
                                "gray",
                                "white",
                                "maroon",
                                "red",
                                "purple",
                                "fuchsia",
                                "green",
                                "lime",
                                "olive",
                                "yellow",
                                "navy",
                                "blue",
                                "teal",
                                "aqua",
                                "orange",
                                "aliceblue",
                                "antiquewhite",
                                "aquamarine",
                                "azure",
                                "beige",
                                "bisque",
                                "blanchedalmond",
                                "blueviolet",
                                "brown",
                                "burlywood",
                                "cadetblue",
                                "chartreuse",
                                "chocolate",
                                "coral",
                                "cornflowerblue",
                                "cornsilk",
                                "crimson",
                                "cyan",
                                "darkblue",
                                "darkcyan",
                                "darkgoldenrod",
                                "darkgray",
                                "darkgreen",
                                "darkgrey",
                                "darkkhaki",
                                "darkmagenta",
                                "darkolivegreen",
                                "darkorange",
                                "darkorchid",
                                "darkred",
                                "darksalmon",
                                "darkseagreen",
                                "darkslateblue",
                                "darkslategray",
                                "darkslategrey",
                                "darkturquoise",
                                "darkviolet",
                                "deeppink",
                                "deepskyblue",
                                "dimgray",
                                "dimgrey",
                                "dodgerblue",
                                "firebrick",
                                "floralwhite",
                                "forestgreen",
                                "gainsboro",
                                "ghostwhite",
                                "gold",
                                "goldenrod",
                                "greenyellow",
                                "grey",
                                "honeydew",
                                "hotpink",
                                "indianred",
                                "indigo",
                                "ivory",
                                "khaki",
                                "lavender",
                                "lavenderblush",
                                "lawngreen",
                                "lemonchiffon",
                                "lightblue",
                                "lightcoral",
                                "lightcyan",
                                "lightgoldenrodyellow",
                                "lightgray",
                                "lightgreen",
                                "lightgrey",
                                "lightpink",
                                "lightsalmon",
                                "lightseagreen",
                                "lightskyblue",
                                "lightslategray",
                                "lightslategrey",
                                "lightsteelblue",
                                "lightyellow",
                                "limegreen",
                                "linen",
                                "magenta",
                                "mediumaquamarine",
                                "mediumblue",
                                "mediumorchid",
                                "mediumpurple",
                                "mediumseagreen",
                                "mediumslateblue",
                                "mediumspringgreen",
                                "mediumturquoise",
                                "mediumvioletred",
                                "midnightblue",
                                "mintcream",
                                "mistyrose",
                                "moccasin",
                                "navajowhite",
                                "oldlace",
                                "olivedrab",
                                "orangered",
                                "orchid",
                                "palegoldenrod",
                                "palegreen",
                                "paleturquoise",
                                "palevioletred",
                                "papayawhip",
                                "peachpuff",
                                "peru",
                                "pink",
                                "plum",
                                "powderblue",
                                "rosybrown",
                                "royalblue",
                                "saddlebrown",
                                "salmon",
                                "sandybrown",
                                "seagreen",
                                "seashell",
                                "sienna",
                                "skyblue",
                                "slateblue",
                                "slategray",
                                "slategrey",
                                "snow",
                                "springgreen",
                                "steelblue",
                                "tan",
                                "thistle",
                                "tomato",
                                "turquoise",
                                "violet",
                                "wheat",
                                "whitesmoke",
                                "yellowgreen",
                                "rebeccapurple",
                            ],
                        ],
                        Union["HexColor", str],
                        str,
                    ],
                ],
            ],
            UndefinedType,
        ] = Undefined,
        subtitleFont: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], str], UndefinedType
        ] = Undefined,
        subtitleFontSize: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], float], UndefinedType
        ] = Undefined,
        subtitleFontStyle: Union[
            Union[
                Union["ExprRef", "_ParameterProtocol", dict], Union["FontStyle", str]
            ],
            UndefinedType,
        ] = Undefined,
        subtitleFontWeight: Union[
            Union[
                Union["ExprRef", "_ParameterProtocol", dict],
                Union[
                    "FontWeight",
                    Literal[
                        "normal",
                        "bold",
                        "lighter",
                        "bolder",
                        100,
                        200,
                        300,
                        400,
                        500,
                        600,
                        700,
                        800,
                        900,
                    ],
                ],
            ],
            UndefinedType,
        ] = Undefined,
        subtitleLineHeight: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], float], UndefinedType
        ] = Undefined,
        subtitlePadding: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], float], UndefinedType
        ] = Undefined,
        zindex: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], float], UndefinedType
        ] = Undefined,
        **kwds
    ):
        super(BaseTitleNoValueRefs, self).__init__(
            align=align,
            anchor=anchor,
            angle=angle,
            aria=aria,
            baseline=baseline,
            color=color,
            dx=dx,
            dy=dy,
            font=font,
            fontSize=fontSize,
            fontStyle=fontStyle,
            fontWeight=fontWeight,
            frame=frame,
            limit=limit,
            lineHeight=lineHeight,
            offset=offset,
            orient=orient,
            subtitleColor=subtitleColor,
            subtitleFont=subtitleFont,
            subtitleFontSize=subtitleFontSize,
            subtitleFontStyle=subtitleFontStyle,
            subtitleFontWeight=subtitleFontWeight,
            subtitleLineHeight=subtitleLineHeight,
            subtitlePadding=subtitlePadding,
            zindex=zindex,
            **kwds
        )


class BinExtent(VegaLiteSchema):
    """BinExtent schema wrapper

    Union[:class:`BinExtent`, List[float], Union[:class:`ParameterExtent`,
    Dict[required=[param]]]]
    """

    _schema = {"$ref": "#/definitions/BinExtent"}

    def __init__(self, *args, **kwds):
        super(BinExtent, self).__init__(*args, **kwds)


class BinParams(VegaLiteSchema):
    """BinParams schema wrapper

    Union[:class:`BinParams`, Dict[required=[]]]
    Binning properties or boolean flag for determining whether to bin data or not.

    Parameters
    ----------

    anchor : float
        A value in the binned domain at which to anchor the bins, shifting the bin
        boundaries if necessary to ensure that a boundary aligns with the anchor value.

        **Default value:** the minimum bin extent value
    base : float
        The number base to use for automatic bin determination (default is base 10).

        **Default value:** ``10``
    binned : bool
        When set to ``true``, Vega-Lite treats the input data as already binned.
    divide : List[float]
        Scale factors indicating allowable subdivisions. The default value is [5, 2], which
        indicates that for base 10 numbers (the default base), the method may consider
        dividing bin sizes by 5 and/or 2. For example, for an initial step size of 10, the
        method can check if bin sizes of 2 (= 10/5), 5 (= 10/2), or 1 (= 10/(5*2)) might
        also satisfy the given constraints.

        **Default value:** ``[5, 2]``
    extent : Union[:class:`BinExtent`, List[float], Union[:class:`ParameterExtent`, Dict[required=[param]]]]
        A two-element ( ``[min, max]`` ) array indicating the range of desired bin values.
    maxbins : float
        Maximum number of bins.

        **Default value:** ``6`` for ``row``, ``column`` and ``shape`` channels; ``10`` for
        other channels
    minstep : float
        A minimum allowable step size (particularly useful for integer values).
    nice : bool
        If true, attempts to make the bin boundaries use human-friendly boundaries, such as
        multiples of ten.

        **Default value:** ``true``
    step : float
        An exact step size to use between bins.

        **Note:** If provided, options such as maxbins will be ignored.
    steps : List[float]
        An array of allowable step sizes to choose from.
    """

    _schema = {"$ref": "#/definitions/BinParams"}

    def __init__(
        self,
        anchor: Union[float, UndefinedType] = Undefined,
        base: Union[float, UndefinedType] = Undefined,
        binned: Union[bool, UndefinedType] = Undefined,
        divide: Union[List[float], UndefinedType] = Undefined,
        extent: Union[
            Union["BinExtent", List[float], Union["ParameterExtent", dict]],
            UndefinedType,
        ] = Undefined,
        maxbins: Union[float, UndefinedType] = Undefined,
        minstep: Union[float, UndefinedType] = Undefined,
        nice: Union[bool, UndefinedType] = Undefined,
        step: Union[float, UndefinedType] = Undefined,
        steps: Union[List[float], UndefinedType] = Undefined,
        **kwds
    ):
        super(BinParams, self).__init__(
            anchor=anchor,
            base=base,
            binned=binned,
            divide=divide,
            extent=extent,
            maxbins=maxbins,
            minstep=minstep,
            nice=nice,
            step=step,
            steps=steps,
            **kwds
        )


class Binding(VegaLiteSchema):
    """Binding schema wrapper

    Union[:class:`Binding`, Union[:class:`BindCheckbox`, Dict[required=[input]]],
    Union[:class:`BindDirect`, Dict[required=[element]]], Union[:class:`BindInput`,
    Dict[required=[]]], Union[:class:`BindRadioSelect`, Dict[required=[input, options]]],
    Union[:class:`BindRange`, Dict[required=[input]]]]
    """

    _schema = {"$ref": "#/definitions/Binding"}

    def __init__(self, *args, **kwds):
        super(Binding, self).__init__(*args, **kwds)


class BindCheckbox(Binding):
    """BindCheckbox schema wrapper

    Union[:class:`BindCheckbox`, Dict[required=[input]]]

    Parameters
    ----------

    input : str

    debounce : float
        If defined, delays event handling until the specified milliseconds have elapsed
        since the last event was fired.
    element : Union[:class:`Element`, str]
        An optional CSS selector string indicating the parent element to which the input
        element should be added. By default, all input elements are added within the parent
        container of the Vega view.
    name : str
        By default, the signal name is used to label input elements. This ``name`` property
        can be used instead to specify a custom label for the bound signal.
    """

    _schema = {"$ref": "#/definitions/BindCheckbox"}

    def __init__(
        self,
        input: Union[str, UndefinedType] = Undefined,
        debounce: Union[float, UndefinedType] = Undefined,
        element: Union[Union["Element", str], UndefinedType] = Undefined,
        name: Union[str, UndefinedType] = Undefined,
        **kwds
    ):
        super(BindCheckbox, self).__init__(
            input=input, debounce=debounce, element=element, name=name, **kwds
        )


class BindDirect(Binding):
    """BindDirect schema wrapper

    Union[:class:`BindDirect`, Dict[required=[element]]]

    Parameters
    ----------

    element : Union[Dict[required=[]], Union[:class:`Element`, str]]
        An input element that exposes a *value* property and supports the `EventTarget
        <https://developer.mozilla.org/en-US/docs/Web/API/EventTarget>`__ interface, or a
        CSS selector string to such an element. When the element updates and dispatches an
        event, the *value* property will be used as the new, bound signal value. When the
        signal updates independent of the element, the *value* property will be set to the
        signal value and a new event will be dispatched on the element.
    debounce : float
        If defined, delays event handling until the specified milliseconds have elapsed
        since the last event was fired.
    event : str
        The event (default ``"input"`` ) to listen for to track changes on the external
        element.
    """

    _schema = {"$ref": "#/definitions/BindDirect"}

    def __init__(
        self,
        element: Union[Union[Union["Element", str], dict], UndefinedType] = Undefined,
        debounce: Union[float, UndefinedType] = Undefined,
        event: Union[str, UndefinedType] = Undefined,
        **kwds
    ):
        super(BindDirect, self).__init__(
            element=element, debounce=debounce, event=event, **kwds
        )


class BindInput(Binding):
    """BindInput schema wrapper

    Union[:class:`BindInput`, Dict[required=[]]]

    Parameters
    ----------

    autocomplete : str
        A hint for form autofill. See the `HTML autocomplete attribute
        <https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/autocomplete>`__ for
        additional information.
    debounce : float
        If defined, delays event handling until the specified milliseconds have elapsed
        since the last event was fired.
    element : Union[:class:`Element`, str]
        An optional CSS selector string indicating the parent element to which the input
        element should be added. By default, all input elements are added within the parent
        container of the Vega view.
    input : str
        The type of input element to use. The valid values are ``"checkbox"``, ``"radio"``,
        ``"range"``, ``"select"``, and any other legal `HTML form input type
        <https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input>`__.
    name : str
        By default, the signal name is used to label input elements. This ``name`` property
        can be used instead to specify a custom label for the bound signal.
    placeholder : str
        Text that appears in the form control when it has no value set.
    """

    _schema = {"$ref": "#/definitions/BindInput"}

    def __init__(
        self,
        autocomplete: Union[str, UndefinedType] = Undefined,
        debounce: Union[float, UndefinedType] = Undefined,
        element: Union[Union["Element", str], UndefinedType] = Undefined,
        input: Union[str, UndefinedType] = Undefined,
        name: Union[str, UndefinedType] = Undefined,
        placeholder: Union[str, UndefinedType] = Undefined,
        **kwds
    ):
        super(BindInput, self).__init__(
            autocomplete=autocomplete,
            debounce=debounce,
            element=element,
            input=input,
            name=name,
            placeholder=placeholder,
            **kwds
        )


class BindRadioSelect(Binding):
    """BindRadioSelect schema wrapper

    Union[:class:`BindRadioSelect`, Dict[required=[input, options]]]

    Parameters
    ----------

    input : Literal['radio', 'select']

    options : List[Any]
        An array of options to select from.
    debounce : float
        If defined, delays event handling until the specified milliseconds have elapsed
        since the last event was fired.
    element : Union[:class:`Element`, str]
        An optional CSS selector string indicating the parent element to which the input
        element should be added. By default, all input elements are added within the parent
        container of the Vega view.
    labels : List[str]
        An array of label strings to represent the ``options`` values. If unspecified, the
        ``options`` value will be coerced to a string and used as the label.
    name : str
        By default, the signal name is used to label input elements. This ``name`` property
        can be used instead to specify a custom label for the bound signal.
    """

    _schema = {"$ref": "#/definitions/BindRadioSelect"}

    def __init__(
        self,
        input: Union[Literal["radio", "select"], UndefinedType] = Undefined,
        options: Union[List[Any], UndefinedType] = Undefined,
        debounce: Union[float, UndefinedType] = Undefined,
        element: Union[Union["Element", str], UndefinedType] = Undefined,
        labels: Union[List[str], UndefinedType] = Undefined,
        name: Union[str, UndefinedType] = Undefined,
        **kwds
    ):
        super(BindRadioSelect, self).__init__(
            input=input,
            options=options,
            debounce=debounce,
            element=element,
            labels=labels,
            name=name,
            **kwds
        )


class BindRange(Binding):
    """BindRange schema wrapper

    Union[:class:`BindRange`, Dict[required=[input]]]

    Parameters
    ----------

    input : str

    debounce : float
        If defined, delays event handling until the specified milliseconds have elapsed
        since the last event was fired.
    element : Union[:class:`Element`, str]
        An optional CSS selector string indicating the parent element to which the input
        element should be added. By default, all input elements are added within the parent
        container of the Vega view.
    max : float
        Sets the maximum slider value. Defaults to the larger of the signal value and
        ``100``.
    min : float
        Sets the minimum slider value. Defaults to the smaller of the signal value and
        ``0``.
    name : str
        By default, the signal name is used to label input elements. This ``name`` property
        can be used instead to specify a custom label for the bound signal.
    step : float
        Sets the minimum slider increment. If undefined, the step size will be automatically
        determined based on the ``min`` and ``max`` values.
    """

    _schema = {"$ref": "#/definitions/BindRange"}

    def __init__(
        self,
        input: Union[str, UndefinedType] = Undefined,
        debounce: Union[float, UndefinedType] = Undefined,
        element: Union[Union["Element", str], UndefinedType] = Undefined,
        max: Union[float, UndefinedType] = Undefined,
        min: Union[float, UndefinedType] = Undefined,
        name: Union[str, UndefinedType] = Undefined,
        step: Union[float, UndefinedType] = Undefined,
        **kwds
    ):
        super(BindRange, self).__init__(
            input=input,
            debounce=debounce,
            element=element,
            max=max,
            min=min,
            name=name,
            step=step,
            **kwds
        )


class BinnedTimeUnit(VegaLiteSchema):
    """BinnedTimeUnit schema wrapper

    Union[:class:`BinnedTimeUnit`, Literal['binnedutcyear', 'binnedutcyearquarter',
    'binnedutcyearquartermonth', 'binnedutcyearmonth', 'binnedutcyearmonthdate',
    'binnedutcyearmonthdatehours', 'binnedutcyearmonthdatehoursminutes',
    'binnedutcyearmonthdatehoursminutesseconds', 'binnedutcyearweek', 'binnedutcyearweekday',
    'binnedutcyearweekdayhours', 'binnedutcyearweekdayhoursminutes',
    'binnedutcyearweekdayhoursminutesseconds', 'binnedutcyeardayofyear'], Literal['binnedyear',
    'binnedyearquarter', 'binnedyearquartermonth', 'binnedyearmonth', 'binnedyearmonthdate',
    'binnedyearmonthdatehours', 'binnedyearmonthdatehoursminutes',
    'binnedyearmonthdatehoursminutesseconds', 'binnedyearweek', 'binnedyearweekday',
    'binnedyearweekdayhours', 'binnedyearweekdayhoursminutes',
    'binnedyearweekdayhoursminutesseconds', 'binnedyeardayofyear']]
    """

    _schema = {"$ref": "#/definitions/BinnedTimeUnit"}

    def __init__(self, *args, **kwds):
        super(BinnedTimeUnit, self).__init__(*args, **kwds)


class Blend(VegaLiteSchema):
    """Blend schema wrapper

    Union[:class:`Blend`, Literal[None, 'multiply', 'screen', 'overlay', 'darken', 'lighten',
    'color-dodge', 'color-burn', 'hard-light', 'soft-light', 'difference', 'exclusion', 'hue',
    'saturation', 'color', 'luminosity']]
    """

    _schema = {"$ref": "#/definitions/Blend"}

    def __init__(self, *args):
        super(Blend, self).__init__(*args)


class BoxPlotConfig(VegaLiteSchema):
    """BoxPlotConfig schema wrapper

    Union[:class:`BoxPlotConfig`, Dict[required=[]]]

    Parameters
    ----------

    box : Union[Union[:class:`AnyMarkConfig`, Union[:class:`AreaConfig`, Dict[required=[]]], Union[:class:`BarConfig`, Dict[required=[]]], Union[:class:`LineConfig`, Dict[required=[]]], Union[:class:`MarkConfig`, Dict[required=[]]], Union[:class:`RectConfig`, Dict[required=[]]], Union[:class:`TickConfig`, Dict[required=[]]]], bool]

    extent : Union[float, str]
        The extent of the whiskers. Available options include:


        * ``"min-max"`` : min and max are the lower and upper whiskers respectively.
        * A number representing multiple of the interquartile range. This number will be
          multiplied by the IQR to determine whisker boundary, which spans from the smallest
          data to the largest data within the range *[Q1 - k * IQR, Q3 + k * IQR]* where
          *Q1* and *Q3* are the first and third quartiles while *IQR* is the interquartile
          range ( *Q3-Q1* ).

        **Default value:** ``1.5``.
    median : Union[Union[:class:`AnyMarkConfig`, Union[:class:`AreaConfig`, Dict[required=[]]], Union[:class:`BarConfig`, Dict[required=[]]], Union[:class:`LineConfig`, Dict[required=[]]], Union[:class:`MarkConfig`, Dict[required=[]]], Union[:class:`RectConfig`, Dict[required=[]]], Union[:class:`TickConfig`, Dict[required=[]]]], bool]

    outliers : Union[Union[:class:`AnyMarkConfig`, Union[:class:`AreaConfig`, Dict[required=[]]], Union[:class:`BarConfig`, Dict[required=[]]], Union[:class:`LineConfig`, Dict[required=[]]], Union[:class:`MarkConfig`, Dict[required=[]]], Union[:class:`RectConfig`, Dict[required=[]]], Union[:class:`TickConfig`, Dict[required=[]]]], bool]

    rule : Union[Union[:class:`AnyMarkConfig`, Union[:class:`AreaConfig`, Dict[required=[]]], Union[:class:`BarConfig`, Dict[required=[]]], Union[:class:`LineConfig`, Dict[required=[]]], Union[:class:`MarkConfig`, Dict[required=[]]], Union[:class:`RectConfig`, Dict[required=[]]], Union[:class:`TickConfig`, Dict[required=[]]]], bool]

    size : float
        Size of the box and median tick of a box plot
    ticks : Union[Union[:class:`AnyMarkConfig`, Union[:class:`AreaConfig`, Dict[required=[]]], Union[:class:`BarConfig`, Dict[required=[]]], Union[:class:`LineConfig`, Dict[required=[]]], Union[:class:`MarkConfig`, Dict[required=[]]], Union[:class:`RectConfig`, Dict[required=[]]], Union[:class:`TickConfig`, Dict[required=[]]]], bool]

    """

    _schema = {"$ref": "#/definitions/BoxPlotConfig"}

    def __init__(
        self,
        box: Union[
            Union[
                Union[
                    "AnyMarkConfig",
                    Union["AreaConfig", dict],
                    Union["BarConfig", dict],
                    Union["LineConfig", dict],
                    Union["MarkConfig", dict],
                    Union["RectConfig", dict],
                    Union["TickConfig", dict],
                ],
                bool,
            ],
            UndefinedType,
        ] = Undefined,
        extent: Union[Union[float, str], UndefinedType] = Undefined,
        median: Union[
            Union[
                Union[
                    "AnyMarkConfig",
                    Union["AreaConfig", dict],
                    Union["BarConfig", dict],
                    Union["LineConfig", dict],
                    Union["MarkConfig", dict],
                    Union["RectConfig", dict],
                    Union["TickConfig", dict],
                ],
                bool,
            ],
            UndefinedType,
        ] = Undefined,
        outliers: Union[
            Union[
                Union[
                    "AnyMarkConfig",
                    Union["AreaConfig", dict],
                    Union["BarConfig", dict],
                    Union["LineConfig", dict],
                    Union["MarkConfig", dict],
                    Union["RectConfig", dict],
                    Union["TickConfig", dict],
                ],
                bool,
            ],
            UndefinedType,
        ] = Undefined,
        rule: Union[
            Union[
                Union[
                    "AnyMarkConfig",
                    Union["AreaConfig", dict],
                    Union["BarConfig", dict],
                    Union["LineConfig", dict],
                    Union["MarkConfig", dict],
                    Union["RectConfig", dict],
                    Union["TickConfig", dict],
                ],
                bool,
            ],
            UndefinedType,
        ] = Undefined,
        size: Union[float, UndefinedType] = Undefined,
        ticks: Union[
            Union[
                Union[
                    "AnyMarkConfig",
                    Union["AreaConfig", dict],
                    Union["BarConfig", dict],
                    Union["LineConfig", dict],
                    Union["MarkConfig", dict],
                    Union["RectConfig", dict],
                    Union["TickConfig", dict],
                ],
                bool,
            ],
            UndefinedType,
        ] = Undefined,
        **kwds
    ):
        super(BoxPlotConfig, self).__init__(
            box=box,
            extent=extent,
            median=median,
            outliers=outliers,
            rule=rule,
            size=size,
            ticks=ticks,
            **kwds
        )


class BrushConfig(VegaLiteSchema):
    """BrushConfig schema wrapper

    Union[:class:`BrushConfig`, Dict[required=[]]]

    Parameters
    ----------

    cursor : Union[:class:`Cursor`, Literal['auto', 'default', 'none', 'context-menu', 'help', 'pointer', 'progress', 'wait', 'cell', 'crosshair', 'text', 'vertical-text', 'alias', 'copy', 'move', 'no-drop', 'not-allowed', 'e-resize', 'n-resize', 'ne-resize', 'nw-resize', 's-resize', 'se-resize', 'sw-resize', 'w-resize', 'ew-resize', 'ns-resize', 'nesw-resize', 'nwse-resize', 'col-resize', 'row-resize', 'all-scroll', 'zoom-in', 'zoom-out', 'grab', 'grabbing']]
        The mouse cursor used over the interval mark. Any valid `CSS cursor type
        <https://developer.mozilla.org/en-US/docs/Web/CSS/cursor#Values>`__ can be used.
    fill : Union[:class:`Color`, Union[:class:`ColorName`, Literal['black', 'silver', 'gray', 'white', 'maroon', 'red', 'purple', 'fuchsia', 'green', 'lime', 'olive', 'yellow', 'navy', 'blue', 'teal', 'aqua', 'orange', 'aliceblue', 'antiquewhite', 'aquamarine', 'azure', 'beige', 'bisque', 'blanchedalmond', 'blueviolet', 'brown', 'burlywood', 'cadetblue', 'chartreuse', 'chocolate', 'coral', 'cornflowerblue', 'cornsilk', 'crimson', 'cyan', 'darkblue', 'darkcyan', 'darkgoldenrod', 'darkgray', 'darkgreen', 'darkgrey', 'darkkhaki', 'darkmagenta', 'darkolivegreen', 'darkorange', 'darkorchid', 'darkred', 'darksalmon', 'darkseagreen', 'darkslateblue', 'darkslategray', 'darkslategrey', 'darkturquoise', 'darkviolet', 'deeppink', 'deepskyblue', 'dimgray', 'dimgrey', 'dodgerblue', 'firebrick', 'floralwhite', 'forestgreen', 'gainsboro', 'ghostwhite', 'gold', 'goldenrod', 'greenyellow', 'grey', 'honeydew', 'hotpink', 'indianred', 'indigo', 'ivory', 'khaki', 'lavender', 'lavenderblush', 'lawngreen', 'lemonchiffon', 'lightblue', 'lightcoral', 'lightcyan', 'lightgoldenrodyellow', 'lightgray', 'lightgreen', 'lightgrey', 'lightpink', 'lightsalmon', 'lightseagreen', 'lightskyblue', 'lightslategray', 'lightslategrey', 'lightsteelblue', 'lightyellow', 'limegreen', 'linen', 'magenta', 'mediumaquamarine', 'mediumblue', 'mediumorchid', 'mediumpurple', 'mediumseagreen', 'mediumslateblue', 'mediumspringgreen', 'mediumturquoise', 'mediumvioletred', 'midnightblue', 'mintcream', 'mistyrose', 'moccasin', 'navajowhite', 'oldlace', 'olivedrab', 'orangered', 'orchid', 'palegoldenrod', 'palegreen', 'paleturquoise', 'palevioletred', 'papayawhip', 'peachpuff', 'peru', 'pink', 'plum', 'powderblue', 'rosybrown', 'royalblue', 'saddlebrown', 'salmon', 'sandybrown', 'seagreen', 'seashell', 'sienna', 'skyblue', 'slateblue', 'slategray', 'slategrey', 'snow', 'springgreen', 'steelblue', 'tan', 'thistle', 'tomato', 'turquoise', 'violet', 'wheat', 'whitesmoke', 'yellowgreen', 'rebeccapurple']], Union[:class:`HexColor`, str], str]
        The fill color of the interval mark.

        **Default value:** ``"#333333"``
    fillOpacity : float
        The fill opacity of the interval mark (a value between ``0`` and ``1`` ).

        **Default value:** ``0.125``
    stroke : Union[:class:`Color`, Union[:class:`ColorName`, Literal['black', 'silver', 'gray', 'white', 'maroon', 'red', 'purple', 'fuchsia', 'green', 'lime', 'olive', 'yellow', 'navy', 'blue', 'teal', 'aqua', 'orange', 'aliceblue', 'antiquewhite', 'aquamarine', 'azure', 'beige', 'bisque', 'blanchedalmond', 'blueviolet', 'brown', 'burlywood', 'cadetblue', 'chartreuse', 'chocolate', 'coral', 'cornflowerblue', 'cornsilk', 'crimson', 'cyan', 'darkblue', 'darkcyan', 'darkgoldenrod', 'darkgray', 'darkgreen', 'darkgrey', 'darkkhaki', 'darkmagenta', 'darkolivegreen', 'darkorange', 'darkorchid', 'darkred', 'darksalmon', 'darkseagreen', 'darkslateblue', 'darkslategray', 'darkslategrey', 'darkturquoise', 'darkviolet', 'deeppink', 'deepskyblue', 'dimgray', 'dimgrey', 'dodgerblue', 'firebrick', 'floralwhite', 'forestgreen', 'gainsboro', 'ghostwhite', 'gold', 'goldenrod', 'greenyellow', 'grey', 'honeydew', 'hotpink', 'indianred', 'indigo', 'ivory', 'khaki', 'lavender', 'lavenderblush', 'lawngreen', 'lemonchiffon', 'lightblue', 'lightcoral', 'lightcyan', 'lightgoldenrodyellow', 'lightgray', 'lightgreen', 'lightgrey', 'lightpink', 'lightsalmon', 'lightseagreen', 'lightskyblue', 'lightslategray', 'lightslategrey', 'lightsteelblue', 'lightyellow', 'limegreen', 'linen', 'magenta', 'mediumaquamarine', 'mediumblue', 'mediumorchid', 'mediumpurple', 'mediumseagreen', 'mediumslateblue', 'mediumspringgreen', 'mediumturquoise', 'mediumvioletred', 'midnightblue', 'mintcream', 'mistyrose', 'moccasin', 'navajowhite', 'oldlace', 'olivedrab', 'orangered', 'orchid', 'palegoldenrod', 'palegreen', 'paleturquoise', 'palevioletred', 'papayawhip', 'peachpuff', 'peru', 'pink', 'plum', 'powderblue', 'rosybrown', 'royalblue', 'saddlebrown', 'salmon', 'sandybrown', 'seagreen', 'seashell', 'sienna', 'skyblue', 'slateblue', 'slategray', 'slategrey', 'snow', 'springgreen', 'steelblue', 'tan', 'thistle', 'tomato', 'turquoise', 'violet', 'wheat', 'whitesmoke', 'yellowgreen', 'rebeccapurple']], Union[:class:`HexColor`, str], str]
        The stroke color of the interval mark.

        **Default value:** ``"#ffffff"``
    strokeDash : List[float]
        An array of alternating stroke and space lengths, for creating dashed or dotted
        lines.
    strokeDashOffset : float
        The offset (in pixels) with which to begin drawing the stroke dash array.
    strokeOpacity : float
        The stroke opacity of the interval mark (a value between ``0`` and ``1`` ).
    strokeWidth : float
        The stroke width of the interval mark.
    """

    _schema = {"$ref": "#/definitions/BrushConfig"}

    def __init__(
        self,
        cursor: Union[
            Union[
                "Cursor",
                Literal[
                    "auto",
                    "default",
                    "none",
                    "context-menu",
                    "help",
                    "pointer",
                    "progress",
                    "wait",
                    "cell",
                    "crosshair",
                    "text",
                    "vertical-text",
                    "alias",
                    "copy",
                    "move",
                    "no-drop",
                    "not-allowed",
                    "e-resize",
                    "n-resize",
                    "ne-resize",
                    "nw-resize",
                    "s-resize",
                    "se-resize",
                    "sw-resize",
                    "w-resize",
                    "ew-resize",
                    "ns-resize",
                    "nesw-resize",
                    "nwse-resize",
                    "col-resize",
                    "row-resize",
                    "all-scroll",
                    "zoom-in",
                    "zoom-out",
                    "grab",
                    "grabbing",
                ],
            ],
            UndefinedType,
        ] = Undefined,
        fill: Union[
            Union[
                "Color",
                Union[
                    "ColorName",
                    Literal[
                        "black",
                        "silver",
                        "gray",
                        "white",
                        "maroon",
                        "red",
                        "purple",
                        "fuchsia",
                        "green",
                        "lime",
                        "olive",
                        "yellow",
                        "navy",
                        "blue",
                        "teal",
                        "aqua",
                        "orange",
                        "aliceblue",
                        "antiquewhite",
                        "aquamarine",
                        "azure",
                        "beige",
                        "bisque",
                        "blanchedalmond",
                        "blueviolet",
                        "brown",
                        "burlywood",
                        "cadetblue",
                        "chartreuse",
                        "chocolate",
                        "coral",
                        "cornflowerblue",
                        "cornsilk",
                        "crimson",
                        "cyan",
                        "darkblue",
                        "darkcyan",
                        "darkgoldenrod",
                        "darkgray",
                        "darkgreen",
                        "darkgrey",
                        "darkkhaki",
                        "darkmagenta",
                        "darkolivegreen",
                        "darkorange",
                        "darkorchid",
                        "darkred",
                        "darksalmon",
                        "darkseagreen",
                        "darkslateblue",
                        "darkslategray",
                        "darkslategrey",
                        "darkturquoise",
                        "darkviolet",
                        "deeppink",
                        "deepskyblue",
                        "dimgray",
                        "dimgrey",
                        "dodgerblue",
                        "firebrick",
                        "floralwhite",
                        "forestgreen",
                        "gainsboro",
                        "ghostwhite",
                        "gold",
                        "goldenrod",
                        "greenyellow",
                        "grey",
                        "honeydew",
                        "hotpink",
                        "indianred",
                        "indigo",
                        "ivory",
                        "khaki",
                        "lavender",
                        "lavenderblush",
                        "lawngreen",
                        "lemonchiffon",
                        "lightblue",
                        "lightcoral",
                        "lightcyan",
                        "lightgoldenrodyellow",
                        "lightgray",
                        "lightgreen",
                        "lightgrey",
                        "lightpink",
                        "lightsalmon",
                        "lightseagreen",
                        "lightskyblue",
                        "lightslategray",
                        "lightslategrey",
                        "lightsteelblue",
                        "lightyellow",
                        "limegreen",
                        "linen",
                        "magenta",
                        "mediumaquamarine",
                        "mediumblue",
                        "mediumorchid",
                        "mediumpurple",
                        "mediumseagreen",
                        "mediumslateblue",
                        "mediumspringgreen",
                        "mediumturquoise",
                        "mediumvioletred",
                        "midnightblue",
                        "mintcream",
                        "mistyrose",
                        "moccasin",
                        "navajowhite",
                        "oldlace",
                        "olivedrab",
                        "orangered",
                        "orchid",
                        "palegoldenrod",
                        "palegreen",
                        "paleturquoise",
                        "palevioletred",
                        "papayawhip",
                        "peachpuff",
                        "peru",
                        "pink",
                        "plum",
                        "powderblue",
                        "rosybrown",
                        "royalblue",
                        "saddlebrown",
                        "salmon",
                        "sandybrown",
                        "seagreen",
                        "seashell",
                        "sienna",
                        "skyblue",
                        "slateblue",
                        "slategray",
                        "slategrey",
                        "snow",
                        "springgreen",
                        "steelblue",
                        "tan",
                        "thistle",
                        "tomato",
                        "turquoise",
                        "violet",
                        "wheat",
                        "whitesmoke",
                        "yellowgreen",
                        "rebeccapurple",
                    ],
                ],
                Union["HexColor", str],
                str,
            ],
            UndefinedType,
        ] = Undefined,
        fillOpacity: Union[float, UndefinedType] = Undefined,
        stroke: Union[
            Union[
                "Color",
                Union[
                    "ColorName",
                    Literal[
                        "black",
                        "silver",
                        "gray",
                        "white",
                        "maroon",
                        "red",
                        "purple",
                        "fuchsia",
                        "green",
                        "lime",
                        "olive",
                        "yellow",
                        "navy",
                        "blue",
                        "teal",
                        "aqua",
                        "orange",
                        "aliceblue",
                        "antiquewhite",
                        "aquamarine",
                        "azure",
                        "beige",
                        "bisque",
                        "blanchedalmond",
                        "blueviolet",
                        "brown",
                        "burlywood",
                        "cadetblue",
                        "chartreuse",
                        "chocolate",
                        "coral",
                        "cornflowerblue",
                        "cornsilk",
                        "crimson",
                        "cyan",
                        "darkblue",
                        "darkcyan",
                        "darkgoldenrod",
                        "darkgray",
                        "darkgreen",
                        "darkgrey",
                        "darkkhaki",
                        "darkmagenta",
                        "darkolivegreen",
                        "darkorange",
                        "darkorchid",
                        "darkred",
                        "darksalmon",
                        "darkseagreen",
                        "darkslateblue",
                        "darkslategray",
                        "darkslategrey",
                        "darkturquoise",
                        "darkviolet",
                        "deeppink",
                        "deepskyblue",
                        "dimgray",
                        "dimgrey",
                        "dodgerblue",
                        "firebrick",
                        "floralwhite",
                        "forestgreen",
                        "gainsboro",
                        "ghostwhite",
                        "gold",
                        "goldenrod",
                        "greenyellow",
                        "grey",
                        "honeydew",
                        "hotpink",
                        "indianred",
                        "indigo",
                        "ivory",
                        "khaki",
                        "lavender",
                        "lavenderblush",
                        "lawngreen",
                        "lemonchiffon",
                        "lightblue",
                        "lightcoral",
                        "lightcyan",
                        "lightgoldenrodyellow",
                        "lightgray",
                        "lightgreen",
                        "lightgrey",
                        "lightpink",
                        "lightsalmon",
                        "lightseagreen",
                        "lightskyblue",
                        "lightslategray",
                        "lightslategrey",
                        "lightsteelblue",
                        "lightyellow",
                        "limegreen",
                        "linen",
                        "magenta",
                        "mediumaquamarine",
                        "mediumblue",
                        "mediumorchid",
                        "mediumpurple",
                        "mediumseagreen",
                        "mediumslateblue",
                        "mediumspringgreen",
                        "mediumturquoise",
                        "mediumvioletred",
                        "midnightblue",
                        "mintcream",
                        "mistyrose",
                        "moccasin",
                        "navajowhite",
                        "oldlace",
                        "olivedrab",
                        "orangered",
                        "orchid",
                        "palegoldenrod",
                        "palegreen",
                        "paleturquoise",
                        "palevioletred",
                        "papayawhip",
                        "peachpuff",
                        "peru",
                        "pink",
                        "plum",
                        "powderblue",
                        "rosybrown",
                        "royalblue",
                        "saddlebrown",
                        "salmon",
                        "sandybrown",
                        "seagreen",
                        "seashell",
                        "sienna",
                        "skyblue",
                        "slateblue",
                        "slategray",
                        "slategrey",
                        "snow",
                        "springgreen",
                        "steelblue",
                        "tan",
                        "thistle",
                        "tomato",
                        "turquoise",
                        "violet",
                        "wheat",
                        "whitesmoke",
                        "yellowgreen",
                        "rebeccapurple",
                    ],
                ],
                Union["HexColor", str],
                str,
            ],
            UndefinedType,
        ] = Undefined,
        strokeDash: Union[List[float], UndefinedType] = Undefined,
        strokeDashOffset: Union[float, UndefinedType] = Undefined,
        strokeOpacity: Union[float, UndefinedType] = Undefined,
        strokeWidth: Union[float, UndefinedType] = Undefined,
        **kwds
    ):
        super(BrushConfig, self).__init__(
            cursor=cursor,
            fill=fill,
            fillOpacity=fillOpacity,
            stroke=stroke,
            strokeDash=strokeDash,
            strokeDashOffset=strokeDashOffset,
            strokeOpacity=strokeOpacity,
            strokeWidth=strokeWidth,
            **kwds
        )


class Color(VegaLiteSchema):
    """Color schema wrapper

    Union[:class:`Color`, Union[:class:`ColorName`, Literal['black', 'silver', 'gray', 'white',
    'maroon', 'red', 'purple', 'fuchsia', 'green', 'lime', 'olive', 'yellow', 'navy', 'blue',
    'teal', 'aqua', 'orange', 'aliceblue', 'antiquewhite', 'aquamarine', 'azure', 'beige',
    'bisque', 'blanchedalmond', 'blueviolet', 'brown', 'burlywood', 'cadetblue', 'chartreuse',
    'chocolate', 'coral', 'cornflowerblue', 'cornsilk', 'crimson', 'cyan', 'darkblue',
    'darkcyan', 'darkgoldenrod', 'darkgray', 'darkgreen', 'darkgrey', 'darkkhaki',
    'darkmagenta', 'darkolivegreen', 'darkorange', 'darkorchid', 'darkred', 'darksalmon',
    'darkseagreen', 'darkslateblue', 'darkslategray', 'darkslategrey', 'darkturquoise',
    'darkviolet', 'deeppink', 'deepskyblue', 'dimgray', 'dimgrey', 'dodgerblue', 'firebrick',
    'floralwhite', 'forestgreen', 'gainsboro', 'ghostwhite', 'gold', 'goldenrod', 'greenyellow',
    'grey', 'honeydew', 'hotpink', 'indianred', 'indigo', 'ivory', 'khaki', 'lavender',
    'lavenderblush', 'lawngreen', 'lemonchiffon', 'lightblue', 'lightcoral', 'lightcyan',
    'lightgoldenrodyellow', 'lightgray', 'lightgreen', 'lightgrey', 'lightpink', 'lightsalmon',
    'lightseagreen', 'lightskyblue', 'lightslategray', 'lightslategrey', 'lightsteelblue',
    'lightyellow', 'limegreen', 'linen', 'magenta', 'mediumaquamarine', 'mediumblue',
    'mediumorchid', 'mediumpurple', 'mediumseagreen', 'mediumslateblue', 'mediumspringgreen',
    'mediumturquoise', 'mediumvioletred', 'midnightblue', 'mintcream', 'mistyrose', 'moccasin',
    'navajowhite', 'oldlace', 'olivedrab', 'orangered', 'orchid', 'palegoldenrod', 'palegreen',
    'paleturquoise', 'palevioletred', 'papayawhip', 'peachpuff', 'peru', 'pink', 'plum',
    'powderblue', 'rosybrown', 'royalblue', 'saddlebrown', 'salmon', 'sandybrown', 'seagreen',
    'seashell', 'sienna', 'skyblue', 'slateblue', 'slategray', 'slategrey', 'snow',
    'springgreen', 'steelblue', 'tan', 'thistle', 'tomato', 'turquoise', 'violet', 'wheat',
    'whitesmoke', 'yellowgreen', 'rebeccapurple']], Union[:class:`HexColor`, str], str]
    """

    _schema = {"$ref": "#/definitions/Color"}

    def __init__(self, *args, **kwds):
        super(Color, self).__init__(*args, **kwds)


class ColorDef(VegaLiteSchema):
    """ColorDef schema wrapper

    Union[:class:`ColorDef`,
    Union[:class:`FieldOrDatumDefWithConditionDatumDefGradientstringnull`, Dict[required=[]]],
    Union[:class:`FieldOrDatumDefWithConditionMarkPropFieldDefGradientstringnull`,
    Dict[required=[]]],
    Union[:class:`ValueDefWithConditionMarkPropFieldOrDatumDefGradientstringnull`,
    Dict[required=[]]]]
    """

    _schema = {"$ref": "#/definitions/ColorDef"}

    def __init__(self, *args, **kwds):
        super(ColorDef, self).__init__(*args, **kwds)


class ColorName(Color):
    """ColorName schema wrapper

    Union[:class:`ColorName`, Literal['black', 'silver', 'gray', 'white', 'maroon', 'red',
    'purple', 'fuchsia', 'green', 'lime', 'olive', 'yellow', 'navy', 'blue', 'teal', 'aqua',
    'orange', 'aliceblue', 'antiquewhite', 'aquamarine', 'azure', 'beige', 'bisque',
    'blanchedalmond', 'blueviolet', 'brown', 'burlywood', 'cadetblue', 'chartreuse',
    'chocolate', 'coral', 'cornflowerblue', 'cornsilk', 'crimson', 'cyan', 'darkblue',
    'darkcyan', 'darkgoldenrod', 'darkgray', 'darkgreen', 'darkgrey', 'darkkhaki',
    'darkmagenta', 'darkolivegreen', 'darkorange', 'darkorchid', 'darkred', 'darksalmon',
    'darkseagreen', 'darkslateblue', 'darkslategray', 'darkslategrey', 'darkturquoise',
    'darkviolet', 'deeppink', 'deepskyblue', 'dimgray', 'dimgrey', 'dodgerblue', 'firebrick',
    'floralwhite', 'forestgreen', 'gainsboro', 'ghostwhite', 'gold', 'goldenrod', 'greenyellow',
    'grey', 'honeydew', 'hotpink', 'indianred', 'indigo', 'ivory', 'khaki', 'lavender',
    'lavenderblush', 'lawngreen', 'lemonchiffon', 'lightblue', 'lightcoral', 'lightcyan',
    'lightgoldenrodyellow', 'lightgray', 'lightgreen', 'lightgrey', 'lightpink', 'lightsalmon',
    'lightseagreen', 'lightskyblue', 'lightslategray', 'lightslategrey', 'lightsteelblue',
    'lightyellow', 'limegreen', 'linen', 'magenta', 'mediumaquamarine', 'mediumblue',
    'mediumorchid', 'mediumpurple', 'mediumseagreen', 'mediumslateblue', 'mediumspringgreen',
    'mediumturquoise', 'mediumvioletred', 'midnightblue', 'mintcream', 'mistyrose', 'moccasin',
    'navajowhite', 'oldlace', 'olivedrab', 'orangered', 'orchid', 'palegoldenrod', 'palegreen',
    'paleturquoise', 'palevioletred', 'papayawhip', 'peachpuff', 'peru', 'pink', 'plum',
    'powderblue', 'rosybrown', 'royalblue', 'saddlebrown', 'salmon', 'sandybrown', 'seagreen',
    'seashell', 'sienna', 'skyblue', 'slateblue', 'slategray', 'slategrey', 'snow',
    'springgreen', 'steelblue', 'tan', 'thistle', 'tomato', 'turquoise', 'violet', 'wheat',
    'whitesmoke', 'yellowgreen', 'rebeccapurple']]
    """

    _schema = {"$ref": "#/definitions/ColorName"}

    def __init__(self, *args):
        super(ColorName, self).__init__(*args)


class ColorScheme(VegaLiteSchema):
    """ColorScheme schema wrapper

    Union[:class:`ColorScheme`, Union[:class:`Categorical`, Literal['accent', 'category10',
    'category20', 'category20b', 'category20c', 'dark2', 'paired', 'pastel1', 'pastel2', 'set1',
    'set2', 'set3', 'tableau10', 'tableau20']], Union[:class:`Cyclical`, Literal['rainbow',
    'sinebow']], Union[:class:`Diverging`, Literal['blueorange', 'blueorange-3', 'blueorange-4',
    'blueorange-5', 'blueorange-6', 'blueorange-7', 'blueorange-8', 'blueorange-9',
    'blueorange-10', 'blueorange-11', 'brownbluegreen', 'brownbluegreen-3', 'brownbluegreen-4',
    'brownbluegreen-5', 'brownbluegreen-6', 'brownbluegreen-7', 'brownbluegreen-8',
    'brownbluegreen-9', 'brownbluegreen-10', 'brownbluegreen-11', 'purplegreen',
    'purplegreen-3', 'purplegreen-4', 'purplegreen-5', 'purplegreen-6', 'purplegreen-7',
    'purplegreen-8', 'purplegreen-9', 'purplegreen-10', 'purplegreen-11', 'pinkyellowgreen',
    'pinkyellowgreen-3', 'pinkyellowgreen-4', 'pinkyellowgreen-5', 'pinkyellowgreen-6',
    'pinkyellowgreen-7', 'pinkyellowgreen-8', 'pinkyellowgreen-9', 'pinkyellowgreen-10',
    'pinkyellowgreen-11', 'purpleorange', 'purpleorange-3', 'purpleorange-4', 'purpleorange-5',
    'purpleorange-6', 'purpleorange-7', 'purpleorange-8', 'purpleorange-9', 'purpleorange-10',
    'purpleorange-11', 'redblue', 'redblue-3', 'redblue-4', 'redblue-5', 'redblue-6',
    'redblue-7', 'redblue-8', 'redblue-9', 'redblue-10', 'redblue-11', 'redgrey', 'redgrey-3',
    'redgrey-4', 'redgrey-5', 'redgrey-6', 'redgrey-7', 'redgrey-8', 'redgrey-9', 'redgrey-10',
    'redgrey-11', 'redyellowblue', 'redyellowblue-3', 'redyellowblue-4', 'redyellowblue-5',
    'redyellowblue-6', 'redyellowblue-7', 'redyellowblue-8', 'redyellowblue-9',
    'redyellowblue-10', 'redyellowblue-11', 'redyellowgreen', 'redyellowgreen-3',
    'redyellowgreen-4', 'redyellowgreen-5', 'redyellowgreen-6', 'redyellowgreen-7',
    'redyellowgreen-8', 'redyellowgreen-9', 'redyellowgreen-10', 'redyellowgreen-11',
    'spectral', 'spectral-3', 'spectral-4', 'spectral-5', 'spectral-6', 'spectral-7',
    'spectral-8', 'spectral-9', 'spectral-10', 'spectral-11']],
    Union[:class:`SequentialMultiHue`, Literal['turbo', 'viridis', 'inferno', 'magma', 'plasma',
    'cividis', 'bluegreen', 'bluegreen-3', 'bluegreen-4', 'bluegreen-5', 'bluegreen-6',
    'bluegreen-7', 'bluegreen-8', 'bluegreen-9', 'bluepurple', 'bluepurple-3', 'bluepurple-4',
    'bluepurple-5', 'bluepurple-6', 'bluepurple-7', 'bluepurple-8', 'bluepurple-9', 'goldgreen',
    'goldgreen-3', 'goldgreen-4', 'goldgreen-5', 'goldgreen-6', 'goldgreen-7', 'goldgreen-8',
    'goldgreen-9', 'goldorange', 'goldorange-3', 'goldorange-4', 'goldorange-5', 'goldorange-6',
    'goldorange-7', 'goldorange-8', 'goldorange-9', 'goldred', 'goldred-3', 'goldred-4',
    'goldred-5', 'goldred-6', 'goldred-7', 'goldred-8', 'goldred-9', 'greenblue', 'greenblue-3',
    'greenblue-4', 'greenblue-5', 'greenblue-6', 'greenblue-7', 'greenblue-8', 'greenblue-9',
    'orangered', 'orangered-3', 'orangered-4', 'orangered-5', 'orangered-6', 'orangered-7',
    'orangered-8', 'orangered-9', 'purplebluegreen', 'purplebluegreen-3', 'purplebluegreen-4',
    'purplebluegreen-5', 'purplebluegreen-6', 'purplebluegreen-7', 'purplebluegreen-8',
    'purplebluegreen-9', 'purpleblue', 'purpleblue-3', 'purpleblue-4', 'purpleblue-5',
    'purpleblue-6', 'purpleblue-7', 'purpleblue-8', 'purpleblue-9', 'purplered', 'purplered-3',
    'purplered-4', 'purplered-5', 'purplered-6', 'purplered-7', 'purplered-8', 'purplered-9',
    'redpurple', 'redpurple-3', 'redpurple-4', 'redpurple-5', 'redpurple-6', 'redpurple-7',
    'redpurple-8', 'redpurple-9', 'yellowgreenblue', 'yellowgreenblue-3', 'yellowgreenblue-4',
    'yellowgreenblue-5', 'yellowgreenblue-6', 'yellowgreenblue-7', 'yellowgreenblue-8',
    'yellowgreenblue-9', 'yellowgreen', 'yellowgreen-3', 'yellowgreen-4', 'yellowgreen-5',
    'yellowgreen-6', 'yellowgreen-7', 'yellowgreen-8', 'yellowgreen-9', 'yelloworangebrown',
    'yelloworangebrown-3', 'yelloworangebrown-4', 'yelloworangebrown-5', 'yelloworangebrown-6',
    'yelloworangebrown-7', 'yelloworangebrown-8', 'yelloworangebrown-9', 'yelloworangered',
    'yelloworangered-3', 'yelloworangered-4', 'yelloworangered-5', 'yelloworangered-6',
    'yelloworangered-7', 'yelloworangered-8', 'yelloworangered-9', 'darkblue', 'darkblue-3',
    'darkblue-4', 'darkblue-5', 'darkblue-6', 'darkblue-7', 'darkblue-8', 'darkblue-9',
    'darkgold', 'darkgold-3', 'darkgold-4', 'darkgold-5', 'darkgold-6', 'darkgold-7',
    'darkgold-8', 'darkgold-9', 'darkgreen', 'darkgreen-3', 'darkgreen-4', 'darkgreen-5',
    'darkgreen-6', 'darkgreen-7', 'darkgreen-8', 'darkgreen-9', 'darkmulti', 'darkmulti-3',
    'darkmulti-4', 'darkmulti-5', 'darkmulti-6', 'darkmulti-7', 'darkmulti-8', 'darkmulti-9',
    'darkred', 'darkred-3', 'darkred-4', 'darkred-5', 'darkred-6', 'darkred-7', 'darkred-8',
    'darkred-9', 'lightgreyred', 'lightgreyred-3', 'lightgreyred-4', 'lightgreyred-5',
    'lightgreyred-6', 'lightgreyred-7', 'lightgreyred-8', 'lightgreyred-9', 'lightgreyteal',
    'lightgreyteal-3', 'lightgreyteal-4', 'lightgreyteal-5', 'lightgreyteal-6',
    'lightgreyteal-7', 'lightgreyteal-8', 'lightgreyteal-9', 'lightmulti', 'lightmulti-3',
    'lightmulti-4', 'lightmulti-5', 'lightmulti-6', 'lightmulti-7', 'lightmulti-8',
    'lightmulti-9', 'lightorange', 'lightorange-3', 'lightorange-4', 'lightorange-5',
    'lightorange-6', 'lightorange-7', 'lightorange-8', 'lightorange-9', 'lighttealblue',
    'lighttealblue-3', 'lighttealblue-4', 'lighttealblue-5', 'lighttealblue-6',
    'lighttealblue-7', 'lighttealblue-8', 'lighttealblue-9']],
    Union[:class:`SequentialSingleHue`, Literal['blues', 'tealblues', 'teals', 'greens',
    'browns', 'greys', 'purples', 'warmgreys', 'reds', 'oranges']]]
    """

    _schema = {"$ref": "#/definitions/ColorScheme"}

    def __init__(self, *args, **kwds):
        super(ColorScheme, self).__init__(*args, **kwds)


class Categorical(ColorScheme):
    """Categorical schema wrapper

    Union[:class:`Categorical`, Literal['accent', 'category10', 'category20', 'category20b',
    'category20c', 'dark2', 'paired', 'pastel1', 'pastel2', 'set1', 'set2', 'set3', 'tableau10',
    'tableau20']]
    """

    _schema = {"$ref": "#/definitions/Categorical"}

    def __init__(self, *args):
        super(Categorical, self).__init__(*args)


class CompositeMark(AnyMark):
    """CompositeMark schema wrapper

    Union[:class:`CompositeMark`, Union[:class:`BoxPlot`, str], Union[:class:`ErrorBand`, str],
    Union[:class:`ErrorBar`, str]]
    """

    _schema = {"$ref": "#/definitions/CompositeMark"}

    def __init__(self, *args, **kwds):
        super(CompositeMark, self).__init__(*args, **kwds)


class BoxPlot(CompositeMark):
    """BoxPlot schema wrapper

    Union[:class:`BoxPlot`, str]
    """

    _schema = {"$ref": "#/definitions/BoxPlot"}

    def __init__(self, *args):
        super(BoxPlot, self).__init__(*args)


class CompositeMarkDef(AnyMark):
    """CompositeMarkDef schema wrapper

    Union[:class:`CompositeMarkDef`, Union[:class:`BoxPlotDef`, Dict[required=[type]]],
    Union[:class:`ErrorBandDef`, Dict[required=[type]]], Union[:class:`ErrorBarDef`,
    Dict[required=[type]]]]
    """

    _schema = {"$ref": "#/definitions/CompositeMarkDef"}

    def __init__(self, *args, **kwds):
        super(CompositeMarkDef, self).__init__(*args, **kwds)


class BoxPlotDef(CompositeMarkDef):
    """BoxPlotDef schema wrapper

    Union[:class:`BoxPlotDef`, Dict[required=[type]]]

    Parameters
    ----------

    type : Union[:class:`BoxPlot`, str]
        The mark type. This could a primitive mark type (one of ``"bar"``, ``"circle"``,
        ``"square"``, ``"tick"``, ``"line"``, ``"area"``, ``"point"``, ``"geoshape"``,
        ``"rule"``, and ``"text"`` ) or a composite mark type ( ``"boxplot"``,
        ``"errorband"``, ``"errorbar"`` ).
    box : Union[Union[:class:`AnyMarkConfig`, Union[:class:`AreaConfig`, Dict[required=[]]], Union[:class:`BarConfig`, Dict[required=[]]], Union[:class:`LineConfig`, Dict[required=[]]], Union[:class:`MarkConfig`, Dict[required=[]]], Union[:class:`RectConfig`, Dict[required=[]]], Union[:class:`TickConfig`, Dict[required=[]]]], bool]

    clip : bool
        Whether a composite mark be clipped to the enclosing group’s width and height.
    color : Union[Union[:class:`Color`, Union[:class:`ColorName`, Literal['black', 'silver', 'gray', 'white', 'maroon', 'red', 'purple', 'fuchsia', 'green', 'lime', 'olive', 'yellow', 'navy', 'blue', 'teal', 'aqua', 'orange', 'aliceblue', 'antiquewhite', 'aquamarine', 'azure', 'beige', 'bisque', 'blanchedalmond', 'blueviolet', 'brown', 'burlywood', 'cadetblue', 'chartreuse', 'chocolate', 'coral', 'cornflowerblue', 'cornsilk', 'crimson', 'cyan', 'darkblue', 'darkcyan', 'darkgoldenrod', 'darkgray', 'darkgreen', 'darkgrey', 'darkkhaki', 'darkmagenta', 'darkolivegreen', 'darkorange', 'darkorchid', 'darkred', 'darksalmon', 'darkseagreen', 'darkslateblue', 'darkslategray', 'darkslategrey', 'darkturquoise', 'darkviolet', 'deeppink', 'deepskyblue', 'dimgray', 'dimgrey', 'dodgerblue', 'firebrick', 'floralwhite', 'forestgreen', 'gainsboro', 'ghostwhite', 'gold', 'goldenrod', 'greenyellow', 'grey', 'honeydew', 'hotpink', 'indianred', 'indigo', 'ivory', 'khaki', 'lavender', 'lavenderblush', 'lawngreen', 'lemonchiffon', 'lightblue', 'lightcoral', 'lightcyan', 'lightgoldenrodyellow', 'lightgray', 'lightgreen', 'lightgrey', 'lightpink', 'lightsalmon', 'lightseagreen', 'lightskyblue', 'lightslategray', 'lightslategrey', 'lightsteelblue', 'lightyellow', 'limegreen', 'linen', 'magenta', 'mediumaquamarine', 'mediumblue', 'mediumorchid', 'mediumpurple', 'mediumseagreen', 'mediumslateblue', 'mediumspringgreen', 'mediumturquoise', 'mediumvioletred', 'midnightblue', 'mintcream', 'mistyrose', 'moccasin', 'navajowhite', 'oldlace', 'olivedrab', 'orangered', 'orchid', 'palegoldenrod', 'palegreen', 'paleturquoise', 'palevioletred', 'papayawhip', 'peachpuff', 'peru', 'pink', 'plum', 'powderblue', 'rosybrown', 'royalblue', 'saddlebrown', 'salmon', 'sandybrown', 'seagreen', 'seashell', 'sienna', 'skyblue', 'slateblue', 'slategray', 'slategrey', 'snow', 'springgreen', 'steelblue', 'tan', 'thistle', 'tomato', 'turquoise', 'violet', 'wheat', 'whitesmoke', 'yellowgreen', 'rebeccapurple']], Union[:class:`HexColor`, str], str], Union[:class:`ExprRef`, Dict[required=[expr]]], Union[:class:`Gradient`, Union[:class:`LinearGradient`, Dict[required=[gradient, stops]]], Union[:class:`RadialGradient`, Dict[required=[gradient, stops]]]]]
        Default color.

        **Default value:** :raw-html:`<span style="color: #4682b4;">&#9632;</span>`
        ``"#4682b4"``

        **Note:**


        * This property cannot be used in a `style config
          <https://vega.github.io/vega-lite/docs/mark.html#style-config>`__.
        * The ``fill`` and ``stroke`` properties have higher precedence than ``color`` and
          will override ``color``.
    extent : Union[float, str]
        The extent of the whiskers. Available options include:


        * ``"min-max"`` : min and max are the lower and upper whiskers respectively.
        * A number representing multiple of the interquartile range. This number will be
          multiplied by the IQR to determine whisker boundary, which spans from the smallest
          data to the largest data within the range *[Q1 - k * IQR, Q3 + k * IQR]* where
          *Q1* and *Q3* are the first and third quartiles while *IQR* is the interquartile
          range ( *Q3-Q1* ).

        **Default value:** ``1.5``.
    invalid : Literal['filter', None]
        Defines how Vega-Lite should handle marks for invalid values ( ``null`` and ``NaN``
        ).


        * If set to ``"filter"`` (default), all data items with null values will be skipped
          (for line, trail, and area marks) or filtered (for other marks).
        * If ``null``, all data items are included. In this case, invalid values will be
          interpreted as zeroes.
    median : Union[Union[:class:`AnyMarkConfig`, Union[:class:`AreaConfig`, Dict[required=[]]], Union[:class:`BarConfig`, Dict[required=[]]], Union[:class:`LineConfig`, Dict[required=[]]], Union[:class:`MarkConfig`, Dict[required=[]]], Union[:class:`RectConfig`, Dict[required=[]]], Union[:class:`TickConfig`, Dict[required=[]]]], bool]

    opacity : float
        The opacity (value between [0,1]) of the mark.
    orient : Union[:class:`Orientation`, Literal['horizontal', 'vertical']]
        Orientation of the box plot. This is normally automatically determined based on
        types of fields on x and y channels. However, an explicit ``orient`` be specified
        when the orientation is ambiguous.

        **Default value:** ``"vertical"``.
    outliers : Union[Union[:class:`AnyMarkConfig`, Union[:class:`AreaConfig`, Dict[required=[]]], Union[:class:`BarConfig`, Dict[required=[]]], Union[:class:`LineConfig`, Dict[required=[]]], Union[:class:`MarkConfig`, Dict[required=[]]], Union[:class:`RectConfig`, Dict[required=[]]], Union[:class:`TickConfig`, Dict[required=[]]]], bool]

    rule : Union[Union[:class:`AnyMarkConfig`, Union[:class:`AreaConfig`, Dict[required=[]]], Union[:class:`BarConfig`, Dict[required=[]]], Union[:class:`LineConfig`, Dict[required=[]]], Union[:class:`MarkConfig`, Dict[required=[]]], Union[:class:`RectConfig`, Dict[required=[]]], Union[:class:`TickConfig`, Dict[required=[]]]], bool]

    size : float
        Size of the box and median tick of a box plot
    ticks : Union[Union[:class:`AnyMarkConfig`, Union[:class:`AreaConfig`, Dict[required=[]]], Union[:class:`BarConfig`, Dict[required=[]]], Union[:class:`LineConfig`, Dict[required=[]]], Union[:class:`MarkConfig`, Dict[required=[]]], Union[:class:`RectConfig`, Dict[required=[]]], Union[:class:`TickConfig`, Dict[required=[]]]], bool]

    """

    _schema = {"$ref": "#/definitions/BoxPlotDef"}

    def __init__(
        self,
        type: Union[Union["BoxPlot", str], UndefinedType] = Undefined,
        box: Union[
            Union[
                Union[
                    "AnyMarkConfig",
                    Union["AreaConfig", dict],
                    Union["BarConfig", dict],
                    Union["LineConfig", dict],
                    Union["MarkConfig", dict],
                    Union["RectConfig", dict],
                    Union["TickConfig", dict],
                ],
                bool,
            ],
            UndefinedType,
        ] = Undefined,
        clip: Union[bool, UndefinedType] = Undefined,
        color: Union[
            Union[
                Union[
                    "Color",
                    Union[
                        "ColorName",
                        Literal[
                            "black",
                            "silver",
                            "gray",
                            "white",
                            "maroon",
                            "red",
                            "purple",
                            "fuchsia",
                            "green",
                            "lime",
                            "olive",
                            "yellow",
                            "navy",
                            "blue",
                            "teal",
                            "aqua",
                            "orange",
                            "aliceblue",
                            "antiquewhite",
                            "aquamarine",
                            "azure",
                            "beige",
                            "bisque",
                            "blanchedalmond",
                            "blueviolet",
                            "brown",
                            "burlywood",
                            "cadetblue",
                            "chartreuse",
                            "chocolate",
                            "coral",
                            "cornflowerblue",
                            "cornsilk",
                            "crimson",
                            "cyan",
                            "darkblue",
                            "darkcyan",
                            "darkgoldenrod",
                            "darkgray",
                            "darkgreen",
                            "darkgrey",
                            "darkkhaki",
                            "darkmagenta",
                            "darkolivegreen",
                            "darkorange",
                            "darkorchid",
                            "darkred",
                            "darksalmon",
                            "darkseagreen",
                            "darkslateblue",
                            "darkslategray",
                            "darkslategrey",
                            "darkturquoise",
                            "darkviolet",
                            "deeppink",
                            "deepskyblue",
                            "dimgray",
                            "dimgrey",
                            "dodgerblue",
                            "firebrick",
                            "floralwhite",
                            "forestgreen",
                            "gainsboro",
                            "ghostwhite",
                            "gold",
                            "goldenrod",
                            "greenyellow",
                            "grey",
                            "honeydew",
                            "hotpink",
                            "indianred",
                            "indigo",
                            "ivory",
                            "khaki",
                            "lavender",
                            "lavenderblush",
                            "lawngreen",
                            "lemonchiffon",
                            "lightblue",
                            "lightcoral",
                            "lightcyan",
                            "lightgoldenrodyellow",
                            "lightgray",
                            "lightgreen",
                            "lightgrey",
                            "lightpink",
                            "lightsalmon",
                            "lightseagreen",
                            "lightskyblue",
                            "lightslategray",
                            "lightslategrey",
                            "lightsteelblue",
                            "lightyellow",
                            "limegreen",
                            "linen",
                            "magenta",
                            "mediumaquamarine",
                            "mediumblue",
                            "mediumorchid",
                            "mediumpurple",
                            "mediumseagreen",
                            "mediumslateblue",
                            "mediumspringgreen",
                            "mediumturquoise",
                            "mediumvioletred",
                            "midnightblue",
                            "mintcream",
                            "mistyrose",
                            "moccasin",
                            "navajowhite",
                            "oldlace",
                            "olivedrab",
                            "orangered",
                            "orchid",
                            "palegoldenrod",
                            "palegreen",
                            "paleturquoise",
                            "palevioletred",
                            "papayawhip",
                            "peachpuff",
                            "peru",
                            "pink",
                            "plum",
                            "powderblue",
                            "rosybrown",
                            "royalblue",
                            "saddlebrown",
                            "salmon",
                            "sandybrown",
                            "seagreen",
                            "seashell",
                            "sienna",
                            "skyblue",
                            "slateblue",
                            "slategray",
                            "slategrey",
                            "snow",
                            "springgreen",
                            "steelblue",
                            "tan",
                            "thistle",
                            "tomato",
                            "turquoise",
                            "violet",
                            "wheat",
                            "whitesmoke",
                            "yellowgreen",
                            "rebeccapurple",
                        ],
                    ],
                    Union["HexColor", str],
                    str,
                ],
                Union["ExprRef", "_ParameterProtocol", dict],
                Union[
                    "Gradient",
                    Union["LinearGradient", dict],
                    Union["RadialGradient", dict],
                ],
            ],
            UndefinedType,
        ] = Undefined,
        extent: Union[Union[float, str], UndefinedType] = Undefined,
        invalid: Union[Literal["filter", None], UndefinedType] = Undefined,
        median: Union[
            Union[
                Union[
                    "AnyMarkConfig",
                    Union["AreaConfig", dict],
                    Union["BarConfig", dict],
                    Union["LineConfig", dict],
                    Union["MarkConfig", dict],
                    Union["RectConfig", dict],
                    Union["TickConfig", dict],
                ],
                bool,
            ],
            UndefinedType,
        ] = Undefined,
        opacity: Union[float, UndefinedType] = Undefined,
        orient: Union[
            Union["Orientation", Literal["horizontal", "vertical"]], UndefinedType
        ] = Undefined,
        outliers: Union[
            Union[
                Union[
                    "AnyMarkConfig",
                    Union["AreaConfig", dict],
                    Union["BarConfig", dict],
                    Union["LineConfig", dict],
                    Union["MarkConfig", dict],
                    Union["RectConfig", dict],
                    Union["TickConfig", dict],
                ],
                bool,
            ],
            UndefinedType,
        ] = Undefined,
        rule: Union[
            Union[
                Union[
                    "AnyMarkConfig",
                    Union["AreaConfig", dict],
                    Union["BarConfig", dict],
                    Union["LineConfig", dict],
                    Union["MarkConfig", dict],
                    Union["RectConfig", dict],
                    Union["TickConfig", dict],
                ],
                bool,
            ],
            UndefinedType,
        ] = Undefined,
        size: Union[float, UndefinedType] = Undefined,
        ticks: Union[
            Union[
                Union[
                    "AnyMarkConfig",
                    Union["AreaConfig", dict],
                    Union["BarConfig", dict],
                    Union["LineConfig", dict],
                    Union["MarkConfig", dict],
                    Union["RectConfig", dict],
                    Union["TickConfig", dict],
                ],
                bool,
            ],
            UndefinedType,
        ] = Undefined,
        **kwds
    ):
        super(BoxPlotDef, self).__init__(
            type=type,
            box=box,
            clip=clip,
            color=color,
            extent=extent,
            invalid=invalid,
            median=median,
            opacity=opacity,
            orient=orient,
            outliers=outliers,
            rule=rule,
            size=size,
            ticks=ticks,
            **kwds
        )


class CompositionConfig(VegaLiteSchema):
    """CompositionConfig schema wrapper

    Union[:class:`CompositionConfig`, Dict[required=[]]]

    Parameters
    ----------

    columns : float
        The number of columns to include in the view composition layout.

        **Default value** : ``undefined`` -- An infinite number of columns (a single row)
        will be assumed. This is equivalent to ``hconcat`` (for ``concat`` ) and to using
        the ``column`` channel (for ``facet`` and ``repeat`` ).

        **Note** :

        1) This property is only for:


        * the general (wrappable) ``concat`` operator (not ``hconcat`` / ``vconcat`` )
        * the ``facet`` and ``repeat`` operator with one field/repetition definition
          (without row/column nesting)

        2) Setting the ``columns`` to ``1`` is equivalent to ``vconcat`` (for ``concat`` )
        and to using the ``row`` channel (for ``facet`` and ``repeat`` ).
    spacing : float
        The default spacing in pixels between composed sub-views.

        **Default value** : ``20``
    """

    _schema = {"$ref": "#/definitions/CompositionConfig"}

    def __init__(
        self,
        columns: Union[float, UndefinedType] = Undefined,
        spacing: Union[float, UndefinedType] = Undefined,
        **kwds
    ):
        super(CompositionConfig, self).__init__(
            columns=columns, spacing=spacing, **kwds
        )


class ConditionalAxisColor(VegaLiteSchema):
    """ConditionalAxisColor schema wrapper

    Union[:class:`ConditionalAxisColor`, Dict[required=[condition, expr]],
    Dict[required=[condition, value]]]
    """

    _schema = {"$ref": "#/definitions/ConditionalAxisColor"}

    def __init__(self, *args, **kwds):
        super(ConditionalAxisColor, self).__init__(*args, **kwds)


class ConditionalAxisLabelAlign(VegaLiteSchema):
    """ConditionalAxisLabelAlign schema wrapper

    Union[:class:`ConditionalAxisLabelAlign`, Dict[required=[condition, expr]],
    Dict[required=[condition, value]]]
    """

    _schema = {"$ref": "#/definitions/ConditionalAxisLabelAlign"}

    def __init__(self, *args, **kwds):
        super(ConditionalAxisLabelAlign, self).__init__(*args, **kwds)


class ConditionalAxisLabelBaseline(VegaLiteSchema):
    """ConditionalAxisLabelBaseline schema wrapper

    Union[:class:`ConditionalAxisLabelBaseline`, Dict[required=[condition, expr]],
    Dict[required=[condition, value]]]
    """

    _schema = {"$ref": "#/definitions/ConditionalAxisLabelBaseline"}

    def __init__(self, *args, **kwds):
        super(ConditionalAxisLabelBaseline, self).__init__(*args, **kwds)


class ConditionalAxisLabelFontStyle(VegaLiteSchema):
    """ConditionalAxisLabelFontStyle schema wrapper

    Union[:class:`ConditionalAxisLabelFontStyle`, Dict[required=[condition, expr]],
    Dict[required=[condition, value]]]
    """

    _schema = {"$ref": "#/definitions/ConditionalAxisLabelFontStyle"}

    def __init__(self, *args, **kwds):
        super(ConditionalAxisLabelFontStyle, self).__init__(*args, **kwds)


class ConditionalAxisLabelFontWeight(VegaLiteSchema):
    """ConditionalAxisLabelFontWeight schema wrapper

    Union[:class:`ConditionalAxisLabelFontWeight`, Dict[required=[condition, expr]],
    Dict[required=[condition, value]]]
    """

    _schema = {"$ref": "#/definitions/ConditionalAxisLabelFontWeight"}

    def __init__(self, *args, **kwds):
        super(ConditionalAxisLabelFontWeight, self).__init__(*args, **kwds)


class ConditionalAxisNumber(VegaLiteSchema):
    """ConditionalAxisNumber schema wrapper

    Union[:class:`ConditionalAxisNumber`, Dict[required=[condition, expr]],
    Dict[required=[condition, value]]]
    """

    _schema = {"$ref": "#/definitions/ConditionalAxisNumber"}

    def __init__(self, *args, **kwds):
        super(ConditionalAxisNumber, self).__init__(*args, **kwds)


class ConditionalAxisNumberArray(VegaLiteSchema):
    """ConditionalAxisNumberArray schema wrapper

    Union[:class:`ConditionalAxisNumberArray`, Dict[required=[condition, expr]],
    Dict[required=[condition, value]]]
    """

    _schema = {"$ref": "#/definitions/ConditionalAxisNumberArray"}

    def __init__(self, *args, **kwds):
        super(ConditionalAxisNumberArray, self).__init__(*args, **kwds)


class ConditionalAxisPropertyAlignnull(VegaLiteSchema):
    """ConditionalAxisPropertyAlignnull schema wrapper

    Union[:class:`ConditionalAxisPropertyAlignnull`, Dict[required=[condition, expr]],
    Dict[required=[condition, value]]]
    """

    _schema = {"$ref": "#/definitions/ConditionalAxisProperty<(Align|null)>"}

    def __init__(self, *args, **kwds):
        super(ConditionalAxisPropertyAlignnull, self).__init__(*args, **kwds)


class ConditionalAxisPropertyColornull(VegaLiteSchema):
    """ConditionalAxisPropertyColornull schema wrapper

    Union[:class:`ConditionalAxisPropertyColornull`, Dict[required=[condition, expr]],
    Dict[required=[condition, value]]]
    """

    _schema = {"$ref": "#/definitions/ConditionalAxisProperty<(Color|null)>"}

    def __init__(self, *args, **kwds):
        super(ConditionalAxisPropertyColornull, self).__init__(*args, **kwds)


class ConditionalAxisPropertyFontStylenull(VegaLiteSchema):
    """ConditionalAxisPropertyFontStylenull schema wrapper

    Union[:class:`ConditionalAxisPropertyFontStylenull`, Dict[required=[condition, expr]],
    Dict[required=[condition, value]]]
    """

    _schema = {"$ref": "#/definitions/ConditionalAxisProperty<(FontStyle|null)>"}

    def __init__(self, *args, **kwds):
        super(ConditionalAxisPropertyFontStylenull, self).__init__(*args, **kwds)


class ConditionalAxisPropertyFontWeightnull(VegaLiteSchema):
    """ConditionalAxisPropertyFontWeightnull schema wrapper

    Union[:class:`ConditionalAxisPropertyFontWeightnull`, Dict[required=[condition, expr]],
    Dict[required=[condition, value]]]
    """

    _schema = {"$ref": "#/definitions/ConditionalAxisProperty<(FontWeight|null)>"}

    def __init__(self, *args, **kwds):
        super(ConditionalAxisPropertyFontWeightnull, self).__init__(*args, **kwds)


class ConditionalAxisPropertyTextBaselinenull(VegaLiteSchema):
    """ConditionalAxisPropertyTextBaselinenull schema wrapper

    Union[:class:`ConditionalAxisPropertyTextBaselinenull`, Dict[required=[condition, expr]],
    Dict[required=[condition, value]]]
    """

    _schema = {"$ref": "#/definitions/ConditionalAxisProperty<(TextBaseline|null)>"}

    def __init__(self, *args, **kwds):
        super(ConditionalAxisPropertyTextBaselinenull, self).__init__(*args, **kwds)


class ConditionalAxisPropertynumberArraynull(VegaLiteSchema):
    """ConditionalAxisPropertynumberArraynull schema wrapper

    Union[:class:`ConditionalAxisPropertynumberArraynull`, Dict[required=[condition, expr]],
    Dict[required=[condition, value]]]
    """

    _schema = {"$ref": "#/definitions/ConditionalAxisProperty<(number[]|null)>"}

    def __init__(self, *args, **kwds):
        super(ConditionalAxisPropertynumberArraynull, self).__init__(*args, **kwds)


class ConditionalAxisPropertynumbernull(VegaLiteSchema):
    """ConditionalAxisPropertynumbernull schema wrapper

    Union[:class:`ConditionalAxisPropertynumbernull`, Dict[required=[condition, expr]],
    Dict[required=[condition, value]]]
    """

    _schema = {"$ref": "#/definitions/ConditionalAxisProperty<(number|null)>"}

    def __init__(self, *args, **kwds):
        super(ConditionalAxisPropertynumbernull, self).__init__(*args, **kwds)


class ConditionalAxisPropertystringnull(VegaLiteSchema):
    """ConditionalAxisPropertystringnull schema wrapper

    Union[:class:`ConditionalAxisPropertystringnull`, Dict[required=[condition, expr]],
    Dict[required=[condition, value]]]
    """

    _schema = {"$ref": "#/definitions/ConditionalAxisProperty<(string|null)>"}

    def __init__(self, *args, **kwds):
        super(ConditionalAxisPropertystringnull, self).__init__(*args, **kwds)


class ConditionalAxisString(VegaLiteSchema):
    """ConditionalAxisString schema wrapper

    Union[:class:`ConditionalAxisString`, Dict[required=[condition, expr]],
    Dict[required=[condition, value]]]
    """

    _schema = {"$ref": "#/definitions/ConditionalAxisString"}

    def __init__(self, *args, **kwds):
        super(ConditionalAxisString, self).__init__(*args, **kwds)


class ConditionalMarkPropFieldOrDatumDef(VegaLiteSchema):
    """ConditionalMarkPropFieldOrDatumDef schema wrapper

    Union[:class:`ConditionalMarkPropFieldOrDatumDef`,
    Union[:class:`ConditionalParameterMarkPropFieldOrDatumDef`, Dict[required=[param]]],
    Union[:class:`ConditionalPredicateMarkPropFieldOrDatumDef`, Dict[required=[test]]]]
    """

    _schema = {"$ref": "#/definitions/ConditionalMarkPropFieldOrDatumDef"}

    def __init__(self, *args, **kwds):
        super(ConditionalMarkPropFieldOrDatumDef, self).__init__(*args, **kwds)


class ConditionalMarkPropFieldOrDatumDefTypeForShape(VegaLiteSchema):
    """ConditionalMarkPropFieldOrDatumDefTypeForShape schema wrapper

    Union[:class:`ConditionalMarkPropFieldOrDatumDefTypeForShape`,
    Union[:class:`ConditionalParameterMarkPropFieldOrDatumDefTypeForShape`,
    Dict[required=[param]]],
    Union[:class:`ConditionalPredicateMarkPropFieldOrDatumDefTypeForShape`,
    Dict[required=[test]]]]
    """

    _schema = {"$ref": "#/definitions/ConditionalMarkPropFieldOrDatumDef<TypeForShape>"}

    def __init__(self, *args, **kwds):
        super(ConditionalMarkPropFieldOrDatumDefTypeForShape, self).__init__(
            *args, **kwds
        )


class ConditionalParameterMarkPropFieldOrDatumDef(ConditionalMarkPropFieldOrDatumDef):
    """ConditionalParameterMarkPropFieldOrDatumDef schema wrapper

    Union[:class:`ConditionalParameterMarkPropFieldOrDatumDef`, Dict[required=[param]]]
    """

    _schema = {"$ref": "#/definitions/ConditionalParameter<MarkPropFieldOrDatumDef>"}

    def __init__(self, *args, **kwds):
        super(ConditionalParameterMarkPropFieldOrDatumDef, self).__init__(*args, **kwds)


class ConditionalParameterMarkPropFieldOrDatumDefTypeForShape(
    ConditionalMarkPropFieldOrDatumDefTypeForShape
):
    """ConditionalParameterMarkPropFieldOrDatumDefTypeForShape schema wrapper

    Union[:class:`ConditionalParameterMarkPropFieldOrDatumDefTypeForShape`,
    Dict[required=[param]]]
    """

    _schema = {
        "$ref": "#/definitions/ConditionalParameter<MarkPropFieldOrDatumDef<TypeForShape>>"
    }

    def __init__(self, *args, **kwds):
        super(ConditionalParameterMarkPropFieldOrDatumDefTypeForShape, self).__init__(
            *args, **kwds
        )


class ConditionalPredicateMarkPropFieldOrDatumDef(ConditionalMarkPropFieldOrDatumDef):
    """ConditionalPredicateMarkPropFieldOrDatumDef schema wrapper

    Union[:class:`ConditionalPredicateMarkPropFieldOrDatumDef`, Dict[required=[test]]]
    """

    _schema = {"$ref": "#/definitions/ConditionalPredicate<MarkPropFieldOrDatumDef>"}

    def __init__(self, *args, **kwds):
        super(ConditionalPredicateMarkPropFieldOrDatumDef, self).__init__(*args, **kwds)


class ConditionalPredicateMarkPropFieldOrDatumDefTypeForShape(
    ConditionalMarkPropFieldOrDatumDefTypeForShape
):
    """ConditionalPredicateMarkPropFieldOrDatumDefTypeForShape schema wrapper

    Union[:class:`ConditionalPredicateMarkPropFieldOrDatumDefTypeForShape`,
    Dict[required=[test]]]
    """

    _schema = {
        "$ref": "#/definitions/ConditionalPredicate<MarkPropFieldOrDatumDef<TypeForShape>>"
    }

    def __init__(self, *args, **kwds):
        super(ConditionalPredicateMarkPropFieldOrDatumDefTypeForShape, self).__init__(
            *args, **kwds
        )


class ConditionalPredicateValueDefAlignnullExprRef(VegaLiteSchema):
    """ConditionalPredicateValueDefAlignnullExprRef schema wrapper

    Union[:class:`ConditionalPredicateValueDefAlignnullExprRef`, Dict[required=[expr, test]],
    Dict[required=[test, value]]]
    """

    _schema = {
        "$ref": "#/definitions/ConditionalPredicate<(ValueDef<(Align|null)>|ExprRef)>"
    }

    def __init__(self, *args, **kwds):
        super(ConditionalPredicateValueDefAlignnullExprRef, self).__init__(
            *args, **kwds
        )


class ConditionalPredicateValueDefColornullExprRef(VegaLiteSchema):
    """ConditionalPredicateValueDefColornullExprRef schema wrapper

    Union[:class:`ConditionalPredicateValueDefColornullExprRef`, Dict[required=[expr, test]],
    Dict[required=[test, value]]]
    """

    _schema = {
        "$ref": "#/definitions/ConditionalPredicate<(ValueDef<(Color|null)>|ExprRef)>"
    }

    def __init__(self, *args, **kwds):
        super(ConditionalPredicateValueDefColornullExprRef, self).__init__(
            *args, **kwds
        )


class ConditionalPredicateValueDefFontStylenullExprRef(VegaLiteSchema):
    """ConditionalPredicateValueDefFontStylenullExprRef schema wrapper

    Union[:class:`ConditionalPredicateValueDefFontStylenullExprRef`, Dict[required=[expr,
    test]], Dict[required=[test, value]]]
    """

    _schema = {
        "$ref": "#/definitions/ConditionalPredicate<(ValueDef<(FontStyle|null)>|ExprRef)>"
    }

    def __init__(self, *args, **kwds):
        super(ConditionalPredicateValueDefFontStylenullExprRef, self).__init__(
            *args, **kwds
        )


class ConditionalPredicateValueDefFontWeightnullExprRef(VegaLiteSchema):
    """ConditionalPredicateValueDefFontWeightnullExprRef schema wrapper

    Union[:class:`ConditionalPredicateValueDefFontWeightnullExprRef`, Dict[required=[expr,
    test]], Dict[required=[test, value]]]
    """

    _schema = {
        "$ref": "#/definitions/ConditionalPredicate<(ValueDef<(FontWeight|null)>|ExprRef)>"
    }

    def __init__(self, *args, **kwds):
        super(ConditionalPredicateValueDefFontWeightnullExprRef, self).__init__(
            *args, **kwds
        )


class ConditionalPredicateValueDefTextBaselinenullExprRef(VegaLiteSchema):
    """ConditionalPredicateValueDefTextBaselinenullExprRef schema wrapper

    Union[:class:`ConditionalPredicateValueDefTextBaselinenullExprRef`, Dict[required=[expr,
    test]], Dict[required=[test, value]]]
    """

    _schema = {
        "$ref": "#/definitions/ConditionalPredicate<(ValueDef<(TextBaseline|null)>|ExprRef)>"
    }

    def __init__(self, *args, **kwds):
        super(ConditionalPredicateValueDefTextBaselinenullExprRef, self).__init__(
            *args, **kwds
        )


class ConditionalPredicateValueDefnumberArraynullExprRef(VegaLiteSchema):
    """ConditionalPredicateValueDefnumberArraynullExprRef schema wrapper

    Union[:class:`ConditionalPredicateValueDefnumberArraynullExprRef`, Dict[required=[expr,
    test]], Dict[required=[test, value]]]
    """

    _schema = {
        "$ref": "#/definitions/ConditionalPredicate<(ValueDef<(number[]|null)>|ExprRef)>"
    }

    def __init__(self, *args, **kwds):
        super(ConditionalPredicateValueDefnumberArraynullExprRef, self).__init__(
            *args, **kwds
        )


class ConditionalPredicateValueDefnumbernullExprRef(VegaLiteSchema):
    """ConditionalPredicateValueDefnumbernullExprRef schema wrapper

    Union[:class:`ConditionalPredicateValueDefnumbernullExprRef`, Dict[required=[expr, test]],
    Dict[required=[test, value]]]
    """

    _schema = {
        "$ref": "#/definitions/ConditionalPredicate<(ValueDef<(number|null)>|ExprRef)>"
    }

    def __init__(self, *args, **kwds):
        super(ConditionalPredicateValueDefnumbernullExprRef, self).__init__(
            *args, **kwds
        )


class ConditionalStringFieldDef(VegaLiteSchema):
    """ConditionalStringFieldDef schema wrapper

    Union[:class:`ConditionalStringFieldDef`, Union[:class:`ConditionalParameterStringFieldDef`,
    Dict[required=[param]]], Union[:class:`ConditionalPredicateStringFieldDef`,
    Dict[required=[test]]]]
    """

    _schema = {"$ref": "#/definitions/ConditionalStringFieldDef"}

    def __init__(self, *args, **kwds):
        super(ConditionalStringFieldDef, self).__init__(*args, **kwds)


class ConditionalParameterStringFieldDef(ConditionalStringFieldDef):
    """ConditionalParameterStringFieldDef schema wrapper

    Union[:class:`ConditionalParameterStringFieldDef`, Dict[required=[param]]]

    Parameters
    ----------

    param : Union[:class:`ParameterName`, str]
        Filter using a parameter name.
    aggregate : Union[:class:`Aggregate`, Union[:class:`ArgmaxDef`, Dict[required=[argmax]]], Union[:class:`ArgminDef`, Dict[required=[argmin]]], Union[:class:`NonArgAggregateOp`, Literal['average', 'count', 'distinct', 'max', 'mean', 'median', 'min', 'missing', 'product', 'q1', 'q3', 'ci0', 'ci1', 'stderr', 'stdev', 'stdevp', 'sum', 'valid', 'values', 'variance', 'variancep']]]
        Aggregation function for the field (e.g., ``"mean"``, ``"sum"``, ``"median"``,
        ``"min"``, ``"max"``, ``"count"`` ).

        **Default value:** ``undefined`` (None)

        **See also:** `aggregate <https://vega.github.io/vega-lite/docs/aggregate.html>`__
        documentation.
    bandPosition : float
        Relative position on a band of a stacked, binned, time unit, or band scale. For
        example, the marks will be positioned at the beginning of the band if set to ``0``,
        and at the middle of the band if set to ``0.5``.
    bin : Union[None, Union[:class:`BinParams`, Dict[required=[]]], bool, str]
        A flag for binning a ``quantitative`` field, `an object defining binning parameters
        <https://vega.github.io/vega-lite/docs/bin.html#bin-parameters>`__, or indicating
        that the data for ``x`` or ``y`` channel are binned before they are imported into
        Vega-Lite ( ``"binned"`` ).


        If ``true``, default `binning parameters
        <https://vega.github.io/vega-lite/docs/bin.html#bin-parameters>`__ will be applied.

        If ``"binned"``, this indicates that the data for the ``x`` (or ``y`` ) channel are
        already binned. You can map the bin-start field to ``x`` (or ``y`` ) and the bin-end
        field to ``x2`` (or ``y2`` ). The scale and axis will be formatted similar to
        binning in Vega-Lite.  To adjust the axis ticks based on the bin step, you can also
        set the axis's `tickMinStep
        <https://vega.github.io/vega-lite/docs/axis.html#ticks>`__ property.

        **Default value:** ``false``

        **See also:** `bin <https://vega.github.io/vega-lite/docs/bin.html>`__
        documentation.
    empty : bool
        For selection parameters, the predicate of empty selections returns true by default.
        Override this behavior, by setting this property ``empty: false``.
    field : Union[:class:`Field`, Union[:class:`FieldName`, str], Union[:class:`RepeatRef`, Dict[required=[repeat]]]]
        **Required.** A string defining the name of the field from which to pull a data
        value or an object defining iterated values from the `repeat
        <https://vega.github.io/vega-lite/docs/repeat.html>`__ operator.

        **See also:** `field <https://vega.github.io/vega-lite/docs/field.html>`__
        documentation.

        **Notes:** 1)  Dots ( ``.`` ) and brackets ( ``[`` and ``]`` ) can be used to access
        nested objects (e.g., ``"field": "foo.bar"`` and ``"field": "foo['bar']"`` ). If
        field names contain dots or brackets but are not nested, you can use ``\\`` to
        escape dots and brackets (e.g., ``"a\\.b"`` and ``"a\\[0\\]"`` ). See more details
        about escaping in the `field documentation
        <https://vega.github.io/vega-lite/docs/field.html>`__. 2) ``field`` is not required
        if ``aggregate`` is ``count``.
    format : Union[Union[:class:`Dict`, Dict[required=[]]], str]
        When used with the default ``"number"`` and ``"time"`` format type, the text
        formatting pattern for labels of guides (axes, legends, headers) and text marks.


        * If the format type is ``"number"`` (e.g., for quantitative fields), this is D3's
          `number format pattern <https://github.com/d3/d3-format#locale_format>`__.
        * If the format type is ``"time"`` (e.g., for temporal fields), this is D3's `time
          format pattern <https://github.com/d3/d3-time-format#locale_format>`__.

        See the `format documentation <https://vega.github.io/vega-lite/docs/format.html>`__
        for more examples.

        When used with a `custom formatType
        <https://vega.github.io/vega-lite/docs/config.html#custom-format-type>`__, this
        value will be passed as ``format`` alongside ``datum.value`` to the registered
        function.

        **Default value:**  Derived from `numberFormat
        <https://vega.github.io/vega-lite/docs/config.html#format>`__ config for number
        format and from `timeFormat
        <https://vega.github.io/vega-lite/docs/config.html#format>`__ config for time
        format.
    formatType : str
        The format type for labels. One of ``"number"``, ``"time"``, or a `registered custom
        format type
        <https://vega.github.io/vega-lite/docs/config.html#custom-format-type>`__.

        **Default value:**


        * ``"time"`` for temporal fields and ordinal and nominal fields with ``timeUnit``.
        * ``"number"`` for quantitative fields as well as ordinal and nominal fields without
          ``timeUnit``.
    timeUnit : Union[Union[:class:`BinnedTimeUnit`, Literal['binnedutcyear', 'binnedutcyearquarter', 'binnedutcyearquartermonth', 'binnedutcyearmonth', 'binnedutcyearmonthdate', 'binnedutcyearmonthdatehours', 'binnedutcyearmonthdatehoursminutes', 'binnedutcyearmonthdatehoursminutesseconds', 'binnedutcyearweek', 'binnedutcyearweekday', 'binnedutcyearweekdayhours', 'binnedutcyearweekdayhoursminutes', 'binnedutcyearweekdayhoursminutesseconds', 'binnedutcyeardayofyear'], Literal['binnedyear', 'binnedyearquarter', 'binnedyearquartermonth', 'binnedyearmonth', 'binnedyearmonthdate', 'binnedyearmonthdatehours', 'binnedyearmonthdatehoursminutes', 'binnedyearmonthdatehoursminutesseconds', 'binnedyearweek', 'binnedyearweekday', 'binnedyearweekdayhours', 'binnedyearweekdayhoursminutes', 'binnedyearweekdayhoursminutesseconds', 'binnedyeardayofyear']], Union[:class:`TimeUnitParams`, Dict[required=[]]], Union[:class:`TimeUnit`, Union[:class:`MultiTimeUnit`, Union[:class:`LocalMultiTimeUnit`, Literal['yearquarter', 'yearquartermonth', 'yearmonth', 'yearmonthdate', 'yearmonthdatehours', 'yearmonthdatehoursminutes', 'yearmonthdatehoursminutesseconds', 'yearweek', 'yearweekday', 'yearweekdayhours', 'yearweekdayhoursminutes', 'yearweekdayhoursminutesseconds', 'yeardayofyear', 'quartermonth', 'monthdate', 'monthdatehours', 'monthdatehoursminutes', 'monthdatehoursminutesseconds', 'weekday', 'weeksdayhours', 'weekdayhoursminutes', 'weekdayhoursminutesseconds', 'dayhours', 'dayhoursminutes', 'dayhoursminutesseconds', 'hoursminutes', 'hoursminutesseconds', 'minutesseconds', 'secondsmilliseconds']], Union[:class:`UtcMultiTimeUnit`, Literal['utcyearquarter', 'utcyearquartermonth', 'utcyearmonth', 'utcyearmonthdate', 'utcyearmonthdatehours', 'utcyearmonthdatehoursminutes', 'utcyearmonthdatehoursminutesseconds', 'utcyearweek', 'utcyearweekday', 'utcyearweekdayhours', 'utcyearweekdayhoursminutes', 'utcyearweekdayhoursminutesseconds', 'utcyeardayofyear', 'utcquartermonth', 'utcmonthdate', 'utcmonthdatehours', 'utcmonthdatehoursminutes', 'utcmonthdatehoursminutesseconds', 'utcweekday', 'utcweeksdayhours', 'utcweekdayhoursminutes', 'utcweekdayhoursminutesseconds', 'utcdayhours', 'utcdayhoursminutes', 'utcdayhoursminutesseconds', 'utchoursminutes', 'utchoursminutesseconds', 'utcminutesseconds', 'utcsecondsmilliseconds']]], Union[:class:`SingleTimeUnit`, Union[:class:`LocalSingleTimeUnit`, Literal['year', 'quarter', 'month', 'week', 'day', 'dayofyear', 'date', 'hours', 'minutes', 'seconds', 'milliseconds']], Union[:class:`UtcSingleTimeUnit`, Literal['utcyear', 'utcquarter', 'utcmonth', 'utcweek', 'utcday', 'utcdayofyear', 'utcdate', 'utchours', 'utcminutes', 'utcseconds', 'utcmilliseconds']]]]]
        Time unit (e.g., ``year``, ``yearmonth``, ``month``, ``hours`` ) for a temporal
        field. or `a temporal field that gets casted as ordinal
        <https://vega.github.io/vega-lite/docs/type.html#cast>`__.

        **Default value:** ``undefined`` (None)

        **See also:** `timeUnit <https://vega.github.io/vega-lite/docs/timeunit.html>`__
        documentation.
    title : Union[None, Union[:class:`Text`, List[str], str]]
        A title for the field. If ``null``, the title will be removed.

        **Default value:**  derived from the field's name and transformation function (
        ``aggregate``, ``bin`` and ``timeUnit`` ). If the field has an aggregate function,
        the function is displayed as part of the title (e.g., ``"Sum of Profit"`` ). If the
        field is binned or has a time unit applied, the applied function is shown in
        parentheses (e.g., ``"Profit (binned)"``, ``"Transaction Date (year-month)"`` ).
        Otherwise, the title is simply the field name.

        **Notes** :

        1) You can customize the default field title format by providing the `fieldTitle
        <https://vega.github.io/vega-lite/docs/config.html#top-level-config>`__ property in
        the `config <https://vega.github.io/vega-lite/docs/config.html>`__ or `fieldTitle
        function via the compile function's options
        <https://vega.github.io/vega-lite/usage/compile.html#field-title>`__.

        2) If both field definition's ``title`` and axis, header, or legend ``title`` are
        defined, axis/header/legend title will be used.
    type : Union[:class:`StandardType`, Literal['quantitative', 'ordinal', 'temporal', 'nominal']]
        The type of measurement ( ``"quantitative"``, ``"temporal"``, ``"ordinal"``, or
        ``"nominal"`` ) for the encoded field or constant value ( ``datum`` ). It can also
        be a ``"geojson"`` type for encoding `'geoshape'
        <https://vega.github.io/vega-lite/docs/geoshape.html>`__.

        Vega-Lite automatically infers data types in many cases as discussed below. However,
        type is required for a field if: (1) the field is not nominal and the field encoding
        has no specified ``aggregate`` (except ``argmin`` and ``argmax`` ), ``bin``, scale
        type, custom ``sort`` order, nor ``timeUnit`` or (2) if you wish to use an ordinal
        scale for a field with ``bin`` or ``timeUnit``.

        **Default value:**

        1) For a data ``field``, ``"nominal"`` is the default data type unless the field
        encoding has ``aggregate``, ``channel``, ``bin``, scale type, ``sort``, or
        ``timeUnit`` that satisfies the following criteria:


        * ``"quantitative"`` is the default type if (1) the encoded field contains ``bin``
          or ``aggregate`` except ``"argmin"`` and ``"argmax"``, (2) the encoding channel is
          ``latitude`` or ``longitude`` channel or (3) if the specified scale type is `a
          quantitative scale <https://vega.github.io/vega-lite/docs/scale.html#type>`__.
        * ``"temporal"`` is the default type if (1) the encoded field contains ``timeUnit``
          or (2) the specified scale type is a time or utc scale
        * ``"ordinal"`` is the default type if (1) the encoded field contains a `custom sort
          order
          <https://vega.github.io/vega-lite/docs/sort.html#specifying-custom-sort-order>`__,
          (2) the specified scale type is an ordinal/point/band scale, or (3) the encoding
          channel is ``order``.

        2) For a constant value in data domain ( ``datum`` ):


        * ``"quantitative"`` if the datum is a number
        * ``"nominal"`` if the datum is a string
        * ``"temporal"`` if the datum is `a date time object
          <https://vega.github.io/vega-lite/docs/datetime.html>`__

        **Note:**


        * Data ``type`` describes the semantics of the data rather than the primitive data
          types (number, string, etc.). The same primitive data type can have different
          types of measurement. For example, numeric data can represent quantitative,
          ordinal, or nominal data.
        * Data values for a temporal field can be either a date-time string (e.g.,
          ``"2015-03-07 12:32:17"``, ``"17:01"``, ``"2015-03-16"``. ``"2015"`` ) or a
          timestamp number (e.g., ``1552199579097`` ).
        * When using with `bin <https://vega.github.io/vega-lite/docs/bin.html>`__, the
          ``type`` property can be either ``"quantitative"`` (for using a linear bin scale)
          or `"ordinal" (for using an ordinal bin scale)
          <https://vega.github.io/vega-lite/docs/type.html#cast-bin>`__.
        * When using with `timeUnit
          <https://vega.github.io/vega-lite/docs/timeunit.html>`__, the ``type`` property
          can be either ``"temporal"`` (default, for using a temporal scale) or `"ordinal"
          (for using an ordinal scale)
          <https://vega.github.io/vega-lite/docs/type.html#cast-bin>`__.
        * When using with `aggregate
          <https://vega.github.io/vega-lite/docs/aggregate.html>`__, the ``type`` property
          refers to the post-aggregation data type. For example, we can calculate count
          ``distinct`` of a categorical field ``"cat"`` using ``{"aggregate": "distinct",
          "field": "cat"}``. The ``"type"`` of the aggregate output is ``"quantitative"``.
        * Secondary channels (e.g., ``x2``, ``y2``, ``xError``, ``yError`` ) do not have
          ``type`` as they must have exactly the same type as their primary channels (e.g.,
          ``x``, ``y`` ).

        **See also:** `type <https://vega.github.io/vega-lite/docs/type.html>`__
        documentation.
    """

    _schema = {"$ref": "#/definitions/ConditionalParameter<StringFieldDef>"}

    def __init__(
        self,
        param: Union[Union["ParameterName", str], UndefinedType] = Undefined,
        aggregate: Union[
            Union[
                "Aggregate",
                Union["ArgmaxDef", dict],
                Union["ArgminDef", dict],
                Union[
                    "NonArgAggregateOp",
                    Literal[
                        "average",
                        "count",
                        "distinct",
                        "max",
                        "mean",
                        "median",
                        "min",
                        "missing",
                        "product",
                        "q1",
                        "q3",
                        "ci0",
                        "ci1",
                        "stderr",
                        "stdev",
                        "stdevp",
                        "sum",
                        "valid",
                        "values",
                        "variance",
                        "variancep",
                    ],
                ],
            ],
            UndefinedType,
        ] = Undefined,
        bandPosition: Union[float, UndefinedType] = Undefined,
        bin: Union[
            Union[None, Union["BinParams", dict], bool, str], UndefinedType
        ] = Undefined,
        empty: Union[bool, UndefinedType] = Undefined,
        field: Union[
            Union["Field", Union["FieldName", str], Union["RepeatRef", dict]],
            UndefinedType,
        ] = Undefined,
        format: Union[Union[Union["Dict", dict], str], UndefinedType] = Undefined,
        formatType: Union[str, UndefinedType] = Undefined,
        timeUnit: Union[
            Union[
                Union[
                    "BinnedTimeUnit",
                    Literal[
                        "binnedutcyear",
                        "binnedutcyearquarter",
                        "binnedutcyearquartermonth",
                        "binnedutcyearmonth",
                        "binnedutcyearmonthdate",
                        "binnedutcyearmonthdatehours",
                        "binnedutcyearmonthdatehoursminutes",
                        "binnedutcyearmonthdatehoursminutesseconds",
                        "binnedutcyearweek",
                        "binnedutcyearweekday",
                        "binnedutcyearweekdayhours",
                        "binnedutcyearweekdayhoursminutes",
                        "binnedutcyearweekdayhoursminutesseconds",
                        "binnedutcyeardayofyear",
                    ],
                    Literal[
                        "binnedyear",
                        "binnedyearquarter",
                        "binnedyearquartermonth",
                        "binnedyearmonth",
                        "binnedyearmonthdate",
                        "binnedyearmonthdatehours",
                        "binnedyearmonthdatehoursminutes",
                        "binnedyearmonthdatehoursminutesseconds",
                        "binnedyearweek",
                        "binnedyearweekday",
                        "binnedyearweekdayhours",
                        "binnedyearweekdayhoursminutes",
                        "binnedyearweekdayhoursminutesseconds",
                        "binnedyeardayofyear",
                    ],
                ],
                Union[
                    "TimeUnit",
                    Union[
                        "MultiTimeUnit",
                        Union[
                            "LocalMultiTimeUnit",
                            Literal[
                                "yearquarter",
                                "yearquartermonth",
                                "yearmonth",
                                "yearmonthdate",
                                "yearmonthdatehours",
                                "yearmonthdatehoursminutes",
                                "yearmonthdatehoursminutesseconds",
                                "yearweek",
                                "yearweekday",
                                "yearweekdayhours",
                                "yearweekdayhoursminutes",
                                "yearweekdayhoursminutesseconds",
                                "yeardayofyear",
                                "quartermonth",
                                "monthdate",
                                "monthdatehours",
                                "monthdatehoursminutes",
                                "monthdatehoursminutesseconds",
                                "weekday",
                                "weeksdayhours",
                                "weekdayhoursminutes",
                                "weekdayhoursminutesseconds",
                                "dayhours",
                                "dayhoursminutes",
                                "dayhoursminutesseconds",
                                "hoursminutes",
                                "hoursminutesseconds",
                                "minutesseconds",
                                "secondsmilliseconds",
                            ],
                        ],
                        Union[
                            "UtcMultiTimeUnit",
                            Literal[
                                "utcyearquarter",
                                "utcyearquartermonth",
                                "utcyearmonth",
                                "utcyearmonthdate",
                                "utcyearmonthdatehours",
                                "utcyearmonthdatehoursminutes",
                                "utcyearmonthdatehoursminutesseconds",
                                "utcyearweek",
                                "utcyearweekday",
                                "utcyearweekdayhours",
                                "utcyearweekdayhoursminutes",
                                "utcyearweekdayhoursminutesseconds",
                                "utcyeardayofyear",
                                "utcquartermonth",
                                "utcmonthdate",
                                "utcmonthdatehours",
                                "utcmonthdatehoursminutes",
                                "utcmonthdatehoursminutesseconds",
                                "utcweekday",
                                "utcweeksdayhours",
                                "utcweekdayhoursminutes",
                                "utcweekdayhoursminutesseconds",
                                "utcdayhours",
                                "utcdayhoursminutes",
                                "utcdayhoursminutesseconds",
                                "utchoursminutes",
                                "utchoursminutesseconds",
                                "utcminutesseconds",
                                "utcsecondsmilliseconds",
                            ],
                        ],
                    ],
                    Union[
                        "SingleTimeUnit",
                        Union[
                            "LocalSingleTimeUnit",
                            Literal[
                                "year",
                                "quarter",
                                "month",
                                "week",
                                "day",
                                "dayofyear",
                                "date",
                                "hours",
                                "minutes",
                                "seconds",
                                "milliseconds",
                            ],
                        ],
                        Union[
                            "UtcSingleTimeUnit",
                            Literal[
                                "utcyear",
                                "utcquarter",
                                "utcmonth",
                                "utcweek",
                                "utcday",
                                "utcdayofyear",
                                "utcdate",
                                "utchours",
                                "utcminutes",
                                "utcseconds",
                                "utcmilliseconds",
                            ],
                        ],
                    ],
                ],
                Union["TimeUnitParams", dict],
            ],
            UndefinedType,
        ] = Undefined,
        title: Union[
            Union[None, Union["Text", List[str], str]], UndefinedType
        ] = Undefined,
        type: Union[
            Union[
                "StandardType",
                Literal["quantitative", "ordinal", "temporal", "nominal"],
            ],
            UndefinedType,
        ] = Undefined,
        **kwds
    ):
        super(ConditionalParameterStringFieldDef, self).__init__(
            param=param,
            aggregate=aggregate,
            bandPosition=bandPosition,
            bin=bin,
            empty=empty,
            field=field,
            format=format,
            formatType=formatType,
            timeUnit=timeUnit,
            title=title,
            type=type,
            **kwds
        )


class ConditionalPredicateStringFieldDef(ConditionalStringFieldDef):
    """ConditionalPredicateStringFieldDef schema wrapper

    Union[:class:`ConditionalPredicateStringFieldDef`, Dict[required=[test]]]

    Parameters
    ----------

    test : Union[:class:`PredicateComposition`, Union[:class:`LogicalAndPredicate`, Dict[required=[and]]], Union[:class:`LogicalNotPredicate`, Dict[required=[not]]], Union[:class:`LogicalOrPredicate`, Dict[required=[or]]], Union[:class:`Predicate`, Union[:class:`FieldEqualPredicate`, Dict[required=[equal, field]]], Union[:class:`FieldGTEPredicate`, Dict[required=[field, gte]]], Union[:class:`FieldGTPredicate`, Dict[required=[field, gt]]], Union[:class:`FieldLTEPredicate`, Dict[required=[field, lte]]], Union[:class:`FieldLTPredicate`, Dict[required=[field, lt]]], Union[:class:`FieldOneOfPredicate`, Dict[required=[field, oneOf]]], Union[:class:`FieldRangePredicate`, Dict[required=[field, range]]], Union[:class:`FieldValidPredicate`, Dict[required=[field, valid]]], Union[:class:`ParameterPredicate`, Dict[required=[param]]], str]]
        Predicate for triggering the condition
    aggregate : Union[:class:`Aggregate`, Union[:class:`ArgmaxDef`, Dict[required=[argmax]]], Union[:class:`ArgminDef`, Dict[required=[argmin]]], Union[:class:`NonArgAggregateOp`, Literal['average', 'count', 'distinct', 'max', 'mean', 'median', 'min', 'missing', 'product', 'q1', 'q3', 'ci0', 'ci1', 'stderr', 'stdev', 'stdevp', 'sum', 'valid', 'values', 'variance', 'variancep']]]
        Aggregation function for the field (e.g., ``"mean"``, ``"sum"``, ``"median"``,
        ``"min"``, ``"max"``, ``"count"`` ).

        **Default value:** ``undefined`` (None)

        **See also:** `aggregate <https://vega.github.io/vega-lite/docs/aggregate.html>`__
        documentation.
    bandPosition : float
        Relative position on a band of a stacked, binned, time unit, or band scale. For
        example, the marks will be positioned at the beginning of the band if set to ``0``,
        and at the middle of the band if set to ``0.5``.
    bin : Union[None, Union[:class:`BinParams`, Dict[required=[]]], bool, str]
        A flag for binning a ``quantitative`` field, `an object defining binning parameters
        <https://vega.github.io/vega-lite/docs/bin.html#bin-parameters>`__, or indicating
        that the data for ``x`` or ``y`` channel are binned before they are imported into
        Vega-Lite ( ``"binned"`` ).


        If ``true``, default `binning parameters
        <https://vega.github.io/vega-lite/docs/bin.html#bin-parameters>`__ will be applied.

        If ``"binned"``, this indicates that the data for the ``x`` (or ``y`` ) channel are
        already binned. You can map the bin-start field to ``x`` (or ``y`` ) and the bin-end
        field to ``x2`` (or ``y2`` ). The scale and axis will be formatted similar to
        binning in Vega-Lite.  To adjust the axis ticks based on the bin step, you can also
        set the axis's `tickMinStep
        <https://vega.github.io/vega-lite/docs/axis.html#ticks>`__ property.

        **Default value:** ``false``

        **See also:** `bin <https://vega.github.io/vega-lite/docs/bin.html>`__
        documentation.
    field : Union[:class:`Field`, Union[:class:`FieldName`, str], Union[:class:`RepeatRef`, Dict[required=[repeat]]]]
        **Required.** A string defining the name of the field from which to pull a data
        value or an object defining iterated values from the `repeat
        <https://vega.github.io/vega-lite/docs/repeat.html>`__ operator.

        **See also:** `field <https://vega.github.io/vega-lite/docs/field.html>`__
        documentation.

        **Notes:** 1)  Dots ( ``.`` ) and brackets ( ``[`` and ``]`` ) can be used to access
        nested objects (e.g., ``"field": "foo.bar"`` and ``"field": "foo['bar']"`` ). If
        field names contain dots or brackets but are not nested, you can use ``\\`` to
        escape dots and brackets (e.g., ``"a\\.b"`` and ``"a\\[0\\]"`` ). See more details
        about escaping in the `field documentation
        <https://vega.github.io/vega-lite/docs/field.html>`__. 2) ``field`` is not required
        if ``aggregate`` is ``count``.
    format : Union[Union[:class:`Dict`, Dict[required=[]]], str]
        When used with the default ``"number"`` and ``"time"`` format type, the text
        formatting pattern for labels of guides (axes, legends, headers) and text marks.


        * If the format type is ``"number"`` (e.g., for quantitative fields), this is D3's
          `number format pattern <https://github.com/d3/d3-format#locale_format>`__.
        * If the format type is ``"time"`` (e.g., for temporal fields), this is D3's `time
          format pattern <https://github.com/d3/d3-time-format#locale_format>`__.

        See the `format documentation <https://vega.github.io/vega-lite/docs/format.html>`__
        for more examples.

        When used with a `custom formatType
        <https://vega.github.io/vega-lite/docs/config.html#custom-format-type>`__, this
        value will be passed as ``format`` alongside ``datum.value`` to the registered
        function.

        **Default value:**  Derived from `numberFormat
        <https://vega.github.io/vega-lite/docs/config.html#format>`__ config for number
        format and from `timeFormat
        <https://vega.github.io/vega-lite/docs/config.html#format>`__ config for time
        format.
    formatType : str
        The format type for labels. One of ``"number"``, ``"time"``, or a `registered custom
        format type
        <https://vega.github.io/vega-lite/docs/config.html#custom-format-type>`__.

        **Default value:**


        * ``"time"`` for temporal fields and ordinal and nominal fields with ``timeUnit``.
        * ``"number"`` for quantitative fields as well as ordinal and nominal fields without
          ``timeUnit``.
    timeUnit : Union[Union[:class:`BinnedTimeUnit`, Literal['binnedutcyear', 'binnedutcyearquarter', 'binnedutcyearquartermonth', 'binnedutcyearmonth', 'binnedutcyearmonthdate', 'binnedutcyearmonthdatehours', 'binnedutcyearmonthdatehoursminutes', 'binnedutcyearmonthdatehoursminutesseconds', 'binnedutcyearweek', 'binnedutcyearweekday', 'binnedutcyearweekdayhours', 'binnedutcyearweekdayhoursminutes', 'binnedutcyearweekdayhoursminutesseconds', 'binnedutcyeardayofyear'], Literal['binnedyear', 'binnedyearquarter', 'binnedyearquartermonth', 'binnedyearmonth', 'binnedyearmonthdate', 'binnedyearmonthdatehours', 'binnedyearmonthdatehoursminutes', 'binnedyearmonthdatehoursminutesseconds', 'binnedyearweek', 'binnedyearweekday', 'binnedyearweekdayhours', 'binnedyearweekdayhoursminutes', 'binnedyearweekdayhoursminutesseconds', 'binnedyeardayofyear']], Union[:class:`TimeUnitParams`, Dict[required=[]]], Union[:class:`TimeUnit`, Union[:class:`MultiTimeUnit`, Union[:class:`LocalMultiTimeUnit`, Literal['yearquarter', 'yearquartermonth', 'yearmonth', 'yearmonthdate', 'yearmonthdatehours', 'yearmonthdatehoursminutes', 'yearmonthdatehoursminutesseconds', 'yearweek', 'yearweekday', 'yearweekdayhours', 'yearweekdayhoursminutes', 'yearweekdayhoursminutesseconds', 'yeardayofyear', 'quartermonth', 'monthdate', 'monthdatehours', 'monthdatehoursminutes', 'monthdatehoursminutesseconds', 'weekday', 'weeksdayhours', 'weekdayhoursminutes', 'weekdayhoursminutesseconds', 'dayhours', 'dayhoursminutes', 'dayhoursminutesseconds', 'hoursminutes', 'hoursminutesseconds', 'minutesseconds', 'secondsmilliseconds']], Union[:class:`UtcMultiTimeUnit`, Literal['utcyearquarter', 'utcyearquartermonth', 'utcyearmonth', 'utcyearmonthdate', 'utcyearmonthdatehours', 'utcyearmonthdatehoursminutes', 'utcyearmonthdatehoursminutesseconds', 'utcyearweek', 'utcyearweekday', 'utcyearweekdayhours', 'utcyearweekdayhoursminutes', 'utcyearweekdayhoursminutesseconds', 'utcyeardayofyear', 'utcquartermonth', 'utcmonthdate', 'utcmonthdatehours', 'utcmonthdatehoursminutes', 'utcmonthdatehoursminutesseconds', 'utcweekday', 'utcweeksdayhours', 'utcweekdayhoursminutes', 'utcweekdayhoursminutesseconds', 'utcdayhours', 'utcdayhoursminutes', 'utcdayhoursminutesseconds', 'utchoursminutes', 'utchoursminutesseconds', 'utcminutesseconds', 'utcsecondsmilliseconds']]], Union[:class:`SingleTimeUnit`, Union[:class:`LocalSingleTimeUnit`, Literal['year', 'quarter', 'month', 'week', 'day', 'dayofyear', 'date', 'hours', 'minutes', 'seconds', 'milliseconds']], Union[:class:`UtcSingleTimeUnit`, Literal['utcyear', 'utcquarter', 'utcmonth', 'utcweek', 'utcday', 'utcdayofyear', 'utcdate', 'utchours', 'utcminutes', 'utcseconds', 'utcmilliseconds']]]]]
        Time unit (e.g., ``year``, ``yearmonth``, ``month``, ``hours`` ) for a temporal
        field. or `a temporal field that gets casted as ordinal
        <https://vega.github.io/vega-lite/docs/type.html#cast>`__.

        **Default value:** ``undefined`` (None)

        **See also:** `timeUnit <https://vega.github.io/vega-lite/docs/timeunit.html>`__
        documentation.
    title : Union[None, Union[:class:`Text`, List[str], str]]
        A title for the field. If ``null``, the title will be removed.

        **Default value:**  derived from the field's name and transformation function (
        ``aggregate``, ``bin`` and ``timeUnit`` ). If the field has an aggregate function,
        the function is displayed as part of the title (e.g., ``"Sum of Profit"`` ). If the
        field is binned or has a time unit applied, the applied function is shown in
        parentheses (e.g., ``"Profit (binned)"``, ``"Transaction Date (year-month)"`` ).
        Otherwise, the title is simply the field name.

        **Notes** :

        1) You can customize the default field title format by providing the `fieldTitle
        <https://vega.github.io/vega-lite/docs/config.html#top-level-config>`__ property in
        the `config <https://vega.github.io/vega-lite/docs/config.html>`__ or `fieldTitle
        function via the compile function's options
        <https://vega.github.io/vega-lite/usage/compile.html#field-title>`__.

        2) If both field definition's ``title`` and axis, header, or legend ``title`` are
        defined, axis/header/legend title will be used.
    type : Union[:class:`StandardType`, Literal['quantitative', 'ordinal', 'temporal', 'nominal']]
        The type of measurement ( ``"quantitative"``, ``"temporal"``, ``"ordinal"``, or
        ``"nominal"`` ) for the encoded field or constant value ( ``datum`` ). It can also
        be a ``"geojson"`` type for encoding `'geoshape'
        <https://vega.github.io/vega-lite/docs/geoshape.html>`__.

        Vega-Lite automatically infers data types in many cases as discussed below. However,
        type is required for a field if: (1) the field is not nominal and the field encoding
        has no specified ``aggregate`` (except ``argmin`` and ``argmax`` ), ``bin``, scale
        type, custom ``sort`` order, nor ``timeUnit`` or (2) if you wish to use an ordinal
        scale for a field with ``bin`` or ``timeUnit``.

        **Default value:**

        1) For a data ``field``, ``"nominal"`` is the default data type unless the field
        encoding has ``aggregate``, ``channel``, ``bin``, scale type, ``sort``, or
        ``timeUnit`` that satisfies the following criteria:


        * ``"quantitative"`` is the default type if (1) the encoded field contains ``bin``
          or ``aggregate`` except ``"argmin"`` and ``"argmax"``, (2) the encoding channel is
          ``latitude`` or ``longitude`` channel or (3) if the specified scale type is `a
          quantitative scale <https://vega.github.io/vega-lite/docs/scale.html#type>`__.
        * ``"temporal"`` is the default type if (1) the encoded field contains ``timeUnit``
          or (2) the specified scale type is a time or utc scale
        * ``"ordinal"`` is the default type if (1) the encoded field contains a `custom sort
          order
          <https://vega.github.io/vega-lite/docs/sort.html#specifying-custom-sort-order>`__,
          (2) the specified scale type is an ordinal/point/band scale, or (3) the encoding
          channel is ``order``.

        2) For a constant value in data domain ( ``datum`` ):


        * ``"quantitative"`` if the datum is a number
        * ``"nominal"`` if the datum is a string
        * ``"temporal"`` if the datum is `a date time object
          <https://vega.github.io/vega-lite/docs/datetime.html>`__

        **Note:**


        * Data ``type`` describes the semantics of the data rather than the primitive data
          types (number, string, etc.). The same primitive data type can have different
          types of measurement. For example, numeric data can represent quantitative,
          ordinal, or nominal data.
        * Data values for a temporal field can be either a date-time string (e.g.,
          ``"2015-03-07 12:32:17"``, ``"17:01"``, ``"2015-03-16"``. ``"2015"`` ) or a
          timestamp number (e.g., ``1552199579097`` ).
        * When using with `bin <https://vega.github.io/vega-lite/docs/bin.html>`__, the
          ``type`` property can be either ``"quantitative"`` (for using a linear bin scale)
          or `"ordinal" (for using an ordinal bin scale)
          <https://vega.github.io/vega-lite/docs/type.html#cast-bin>`__.
        * When using with `timeUnit
          <https://vega.github.io/vega-lite/docs/timeunit.html>`__, the ``type`` property
          can be either ``"temporal"`` (default, for using a temporal scale) or `"ordinal"
          (for using an ordinal scale)
          <https://vega.github.io/vega-lite/docs/type.html#cast-bin>`__.
        * When using with `aggregate
          <https://vega.github.io/vega-lite/docs/aggregate.html>`__, the ``type`` property
          refers to the post-aggregation data type. For example, we can calculate count
          ``distinct`` of a categorical field ``"cat"`` using ``{"aggregate": "distinct",
          "field": "cat"}``. The ``"type"`` of the aggregate output is ``"quantitative"``.
        * Secondary channels (e.g., ``x2``, ``y2``, ``xError``, ``yError`` ) do not have
          ``type`` as they must have exactly the same type as their primary channels (e.g.,
          ``x``, ``y`` ).

        **See also:** `type <https://vega.github.io/vega-lite/docs/type.html>`__
        documentation.
    """

    _schema = {"$ref": "#/definitions/ConditionalPredicate<StringFieldDef>"}

    def __init__(
        self,
        test: Union[
            Union[
                "PredicateComposition",
                Union["LogicalAndPredicate", dict],
                Union["LogicalNotPredicate", dict],
                Union["LogicalOrPredicate", dict],
                Union[
                    "Predicate",
                    Union["FieldEqualPredicate", dict],
                    Union["FieldGTEPredicate", dict],
                    Union["FieldGTPredicate", dict],
                    Union["FieldLTEPredicate", dict],
                    Union["FieldLTPredicate", dict],
                    Union["FieldOneOfPredicate", dict],
                    Union["FieldRangePredicate", dict],
                    Union["FieldValidPredicate", dict],
                    Union["ParameterPredicate", dict],
                    str,
                ],
            ],
            UndefinedType,
        ] = Undefined,
        aggregate: Union[
            Union[
                "Aggregate",
                Union["ArgmaxDef", dict],
                Union["ArgminDef", dict],
                Union[
                    "NonArgAggregateOp",
                    Literal[
                        "average",
                        "count",
                        "distinct",
                        "max",
                        "mean",
                        "median",
                        "min",
                        "missing",
                        "product",
                        "q1",
                        "q3",
                        "ci0",
                        "ci1",
                        "stderr",
                        "stdev",
                        "stdevp",
                        "sum",
                        "valid",
                        "values",
                        "variance",
                        "variancep",
                    ],
                ],
            ],
            UndefinedType,
        ] = Undefined,
        bandPosition: Union[float, UndefinedType] = Undefined,
        bin: Union[
            Union[None, Union["BinParams", dict], bool, str], UndefinedType
        ] = Undefined,
        field: Union[
            Union["Field", Union["FieldName", str], Union["RepeatRef", dict]],
            UndefinedType,
        ] = Undefined,
        format: Union[Union[Union["Dict", dict], str], UndefinedType] = Undefined,
        formatType: Union[str, UndefinedType] = Undefined,
        timeUnit: Union[
            Union[
                Union[
                    "BinnedTimeUnit",
                    Literal[
                        "binnedutcyear",
                        "binnedutcyearquarter",
                        "binnedutcyearquartermonth",
                        "binnedutcyearmonth",
                        "binnedutcyearmonthdate",
                        "binnedutcyearmonthdatehours",
                        "binnedutcyearmonthdatehoursminutes",
                        "binnedutcyearmonthdatehoursminutesseconds",
                        "binnedutcyearweek",
                        "binnedutcyearweekday",
                        "binnedutcyearweekdayhours",
                        "binnedutcyearweekdayhoursminutes",
                        "binnedutcyearweekdayhoursminutesseconds",
                        "binnedutcyeardayofyear",
                    ],
                    Literal[
                        "binnedyear",
                        "binnedyearquarter",
                        "binnedyearquartermonth",
                        "binnedyearmonth",
                        "binnedyearmonthdate",
                        "binnedyearmonthdatehours",
                        "binnedyearmonthdatehoursminutes",
                        "binnedyearmonthdatehoursminutesseconds",
                        "binnedyearweek",
                        "binnedyearweekday",
                        "binnedyearweekdayhours",
                        "binnedyearweekdayhoursminutes",
                        "binnedyearweekdayhoursminutesseconds",
                        "binnedyeardayofyear",
                    ],
                ],
                Union[
                    "TimeUnit",
                    Union[
                        "MultiTimeUnit",
                        Union[
                            "LocalMultiTimeUnit",
                            Literal[
                                "yearquarter",
                                "yearquartermonth",
                                "yearmonth",
                                "yearmonthdate",
                                "yearmonthdatehours",
                                "yearmonthdatehoursminutes",
                                "yearmonthdatehoursminutesseconds",
                                "yearweek",
                                "yearweekday",
                                "yearweekdayhours",
                                "yearweekdayhoursminutes",
                                "yearweekdayhoursminutesseconds",
                                "yeardayofyear",
                                "quartermonth",
                                "monthdate",
                                "monthdatehours",
                                "monthdatehoursminutes",
                                "monthdatehoursminutesseconds",
                                "weekday",
                                "weeksdayhours",
                                "weekdayhoursminutes",
                                "weekdayhoursminutesseconds",
                                "dayhours",
                                "dayhoursminutes",
                                "dayhoursminutesseconds",
                                "hoursminutes",
                                "hoursminutesseconds",
                                "minutesseconds",
                                "secondsmilliseconds",
                            ],
                        ],
                        Union[
                            "UtcMultiTimeUnit",
                            Literal[
                                "utcyearquarter",
                                "utcyearquartermonth",
                                "utcyearmonth",
                                "utcyearmonthdate",
                                "utcyearmonthdatehours",
                                "utcyearmonthdatehoursminutes",
                                "utcyearmonthdatehoursminutesseconds",
                                "utcyearweek",
                                "utcyearweekday",
                                "utcyearweekdayhours",
                                "utcyearweekdayhoursminutes",
                                "utcyearweekdayhoursminutesseconds",
                                "utcyeardayofyear",
                                "utcquartermonth",
                                "utcmonthdate",
                                "utcmonthdatehours",
                                "utcmonthdatehoursminutes",
                                "utcmonthdatehoursminutesseconds",
                                "utcweekday",
                                "utcweeksdayhours",
                                "utcweekdayhoursminutes",
                                "utcweekdayhoursminutesseconds",
                                "utcdayhours",
                                "utcdayhoursminutes",
                                "utcdayhoursminutesseconds",
                                "utchoursminutes",
                                "utchoursminutesseconds",
                                "utcminutesseconds",
                                "utcsecondsmilliseconds",
                            ],
                        ],
                    ],
                    Union[
                        "SingleTimeUnit",
                        Union[
                            "LocalSingleTimeUnit",
                            Literal[
                                "year",
                                "quarter",
                                "month",
                                "week",
                                "day",
                                "dayofyear",
                                "date",
                                "hours",
                                "minutes",
                                "seconds",
                                "milliseconds",
                            ],
                        ],
                        Union[
                            "UtcSingleTimeUnit",
                            Literal[
                                "utcyear",
                                "utcquarter",
                                "utcmonth",
                                "utcweek",
                                "utcday",
                                "utcdayofyear",
                                "utcdate",
                                "utchours",
                                "utcminutes",
                                "utcseconds",
                                "utcmilliseconds",
                            ],
                        ],
                    ],
                ],
                Union["TimeUnitParams", dict],
            ],
            UndefinedType,
        ] = Undefined,
        title: Union[
            Union[None, Union["Text", List[str], str]], UndefinedType
        ] = Undefined,
        type: Union[
            Union[
                "StandardType",
                Literal["quantitative", "ordinal", "temporal", "nominal"],
            ],
            UndefinedType,
        ] = Undefined,
        **kwds
    ):
        super(ConditionalPredicateStringFieldDef, self).__init__(
            test=test,
            aggregate=aggregate,
            bandPosition=bandPosition,
            bin=bin,
            field=field,
            format=format,
            formatType=formatType,
            timeUnit=timeUnit,
            title=title,
            type=type,
            **kwds
        )


class ConditionalValueDefGradientstringnullExprRef(VegaLiteSchema):
    """ConditionalValueDefGradientstringnullExprRef schema wrapper

    Union[:class:`ConditionalValueDefGradientstringnullExprRef`,
    Union[:class:`ConditionalParameterValueDefGradientstringnullExprRef`, Dict[required=[param,
    value]]], Union[:class:`ConditionalPredicateValueDefGradientstringnullExprRef`,
    Dict[required=[test, value]]]]
    """

    _schema = {
        "$ref": "#/definitions/ConditionalValueDef<(Gradient|string|null|ExprRef)>"
    }

    def __init__(self, *args, **kwds):
        super(ConditionalValueDefGradientstringnullExprRef, self).__init__(
            *args, **kwds
        )


class ConditionalParameterValueDefGradientstringnullExprRef(
    ConditionalValueDefGradientstringnullExprRef
):
    """ConditionalParameterValueDefGradientstringnullExprRef schema wrapper

    Union[:class:`ConditionalParameterValueDefGradientstringnullExprRef`, Dict[required=[param,
    value]]]

    Parameters
    ----------

    param : Union[:class:`ParameterName`, str]
        Filter using a parameter name.
    value : Union[None, Union[:class:`ExprRef`, Dict[required=[expr]]], Union[:class:`Gradient`, Union[:class:`LinearGradient`, Dict[required=[gradient, stops]]], Union[:class:`RadialGradient`, Dict[required=[gradient, stops]]]], str]
        A constant value in visual domain (e.g., ``"red"`` / ``"#0099ff"`` / `gradient
        definition <https://vega.github.io/vega-lite/docs/types.html#gradient>`__ for color,
        values between ``0`` to ``1`` for opacity).
    empty : bool
        For selection parameters, the predicate of empty selections returns true by default.
        Override this behavior, by setting this property ``empty: false``.
    """

    _schema = {
        "$ref": "#/definitions/ConditionalParameter<ValueDef<(Gradient|string|null|ExprRef)>>"
    }

    def __init__(
        self,
        param: Union[Union["ParameterName", str], UndefinedType] = Undefined,
        value: Union[
            Union[
                None,
                Union["ExprRef", "_ParameterProtocol", dict],
                Union[
                    "Gradient",
                    Union["LinearGradient", dict],
                    Union["RadialGradient", dict],
                ],
                str,
            ],
            UndefinedType,
        ] = Undefined,
        empty: Union[bool, UndefinedType] = Undefined,
        **kwds
    ):
        super(ConditionalParameterValueDefGradientstringnullExprRef, self).__init__(
            param=param, value=value, empty=empty, **kwds
        )


class ConditionalPredicateValueDefGradientstringnullExprRef(
    ConditionalValueDefGradientstringnullExprRef
):
    """ConditionalPredicateValueDefGradientstringnullExprRef schema wrapper

    Union[:class:`ConditionalPredicateValueDefGradientstringnullExprRef`, Dict[required=[test,
    value]]]

    Parameters
    ----------

    test : Union[:class:`PredicateComposition`, Union[:class:`LogicalAndPredicate`, Dict[required=[and]]], Union[:class:`LogicalNotPredicate`, Dict[required=[not]]], Union[:class:`LogicalOrPredicate`, Dict[required=[or]]], Union[:class:`Predicate`, Union[:class:`FieldEqualPredicate`, Dict[required=[equal, field]]], Union[:class:`FieldGTEPredicate`, Dict[required=[field, gte]]], Union[:class:`FieldGTPredicate`, Dict[required=[field, gt]]], Union[:class:`FieldLTEPredicate`, Dict[required=[field, lte]]], Union[:class:`FieldLTPredicate`, Dict[required=[field, lt]]], Union[:class:`FieldOneOfPredicate`, Dict[required=[field, oneOf]]], Union[:class:`FieldRangePredicate`, Dict[required=[field, range]]], Union[:class:`FieldValidPredicate`, Dict[required=[field, valid]]], Union[:class:`ParameterPredicate`, Dict[required=[param]]], str]]
        Predicate for triggering the condition
    value : Union[None, Union[:class:`ExprRef`, Dict[required=[expr]]], Union[:class:`Gradient`, Union[:class:`LinearGradient`, Dict[required=[gradient, stops]]], Union[:class:`RadialGradient`, Dict[required=[gradient, stops]]]], str]
        A constant value in visual domain (e.g., ``"red"`` / ``"#0099ff"`` / `gradient
        definition <https://vega.github.io/vega-lite/docs/types.html#gradient>`__ for color,
        values between ``0`` to ``1`` for opacity).
    """

    _schema = {
        "$ref": "#/definitions/ConditionalPredicate<ValueDef<(Gradient|string|null|ExprRef)>>"
    }

    def __init__(
        self,
        test: Union[
            Union[
                "PredicateComposition",
                Union["LogicalAndPredicate", dict],
                Union["LogicalNotPredicate", dict],
                Union["LogicalOrPredicate", dict],
                Union[
                    "Predicate",
                    Union["FieldEqualPredicate", dict],
                    Union["FieldGTEPredicate", dict],
                    Union["FieldGTPredicate", dict],
                    Union["FieldLTEPredicate", dict],
                    Union["FieldLTPredicate", dict],
                    Union["FieldOneOfPredicate", dict],
                    Union["FieldRangePredicate", dict],
                    Union["FieldValidPredicate", dict],
                    Union["ParameterPredicate", dict],
                    str,
                ],
            ],
            UndefinedType,
        ] = Undefined,
        value: Union[
            Union[
                None,
                Union["ExprRef", "_ParameterProtocol", dict],
                Union[
                    "Gradient",
                    Union["LinearGradient", dict],
                    Union["RadialGradient", dict],
                ],
                str,
            ],
            UndefinedType,
        ] = Undefined,
        **kwds
    ):
        super(ConditionalPredicateValueDefGradientstringnullExprRef, self).__init__(
            test=test, value=value, **kwds
        )


class ConditionalValueDefTextExprRef(VegaLiteSchema):
    """ConditionalValueDefTextExprRef schema wrapper

    Union[:class:`ConditionalValueDefTextExprRef`,
    Union[:class:`ConditionalParameterValueDefTextExprRef`, Dict[required=[param, value]]],
    Union[:class:`ConditionalPredicateValueDefTextExprRef`, Dict[required=[test, value]]]]
    """

    _schema = {"$ref": "#/definitions/ConditionalValueDef<(Text|ExprRef)>"}

    def __init__(self, *args, **kwds):
        super(ConditionalValueDefTextExprRef, self).__init__(*args, **kwds)


class ConditionalParameterValueDefTextExprRef(ConditionalValueDefTextExprRef):
    """ConditionalParameterValueDefTextExprRef schema wrapper

    Union[:class:`ConditionalParameterValueDefTextExprRef`, Dict[required=[param, value]]]

    Parameters
    ----------

    param : Union[:class:`ParameterName`, str]
        Filter using a parameter name.
    value : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], Union[:class:`Text`, List[str], str]]
        A constant value in visual domain (e.g., ``"red"`` / ``"#0099ff"`` / `gradient
        definition <https://vega.github.io/vega-lite/docs/types.html#gradient>`__ for color,
        values between ``0`` to ``1`` for opacity).
    empty : bool
        For selection parameters, the predicate of empty selections returns true by default.
        Override this behavior, by setting this property ``empty: false``.
    """

    _schema = {"$ref": "#/definitions/ConditionalParameter<ValueDef<(Text|ExprRef)>>"}

    def __init__(
        self,
        param: Union[Union["ParameterName", str], UndefinedType] = Undefined,
        value: Union[
            Union[
                Union["ExprRef", "_ParameterProtocol", dict],
                Union["Text", List[str], str],
            ],
            UndefinedType,
        ] = Undefined,
        empty: Union[bool, UndefinedType] = Undefined,
        **kwds
    ):
        super(ConditionalParameterValueDefTextExprRef, self).__init__(
            param=param, value=value, empty=empty, **kwds
        )


class ConditionalPredicateValueDefTextExprRef(ConditionalValueDefTextExprRef):
    """ConditionalPredicateValueDefTextExprRef schema wrapper

    Union[:class:`ConditionalPredicateValueDefTextExprRef`, Dict[required=[test, value]]]

    Parameters
    ----------

    test : Union[:class:`PredicateComposition`, Union[:class:`LogicalAndPredicate`, Dict[required=[and]]], Union[:class:`LogicalNotPredicate`, Dict[required=[not]]], Union[:class:`LogicalOrPredicate`, Dict[required=[or]]], Union[:class:`Predicate`, Union[:class:`FieldEqualPredicate`, Dict[required=[equal, field]]], Union[:class:`FieldGTEPredicate`, Dict[required=[field, gte]]], Union[:class:`FieldGTPredicate`, Dict[required=[field, gt]]], Union[:class:`FieldLTEPredicate`, Dict[required=[field, lte]]], Union[:class:`FieldLTPredicate`, Dict[required=[field, lt]]], Union[:class:`FieldOneOfPredicate`, Dict[required=[field, oneOf]]], Union[:class:`FieldRangePredicate`, Dict[required=[field, range]]], Union[:class:`FieldValidPredicate`, Dict[required=[field, valid]]], Union[:class:`ParameterPredicate`, Dict[required=[param]]], str]]
        Predicate for triggering the condition
    value : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], Union[:class:`Text`, List[str], str]]
        A constant value in visual domain (e.g., ``"red"`` / ``"#0099ff"`` / `gradient
        definition <https://vega.github.io/vega-lite/docs/types.html#gradient>`__ for color,
        values between ``0`` to ``1`` for opacity).
    """

    _schema = {"$ref": "#/definitions/ConditionalPredicate<ValueDef<(Text|ExprRef)>>"}

    def __init__(
        self,
        test: Union[
            Union[
                "PredicateComposition",
                Union["LogicalAndPredicate", dict],
                Union["LogicalNotPredicate", dict],
                Union["LogicalOrPredicate", dict],
                Union[
                    "Predicate",
                    Union["FieldEqualPredicate", dict],
                    Union["FieldGTEPredicate", dict],
                    Union["FieldGTPredicate", dict],
                    Union["FieldLTEPredicate", dict],
                    Union["FieldLTPredicate", dict],
                    Union["FieldOneOfPredicate", dict],
                    Union["FieldRangePredicate", dict],
                    Union["FieldValidPredicate", dict],
                    Union["ParameterPredicate", dict],
                    str,
                ],
            ],
            UndefinedType,
        ] = Undefined,
        value: Union[
            Union[
                Union["ExprRef", "_ParameterProtocol", dict],
                Union["Text", List[str], str],
            ],
            UndefinedType,
        ] = Undefined,
        **kwds
    ):
        super(ConditionalPredicateValueDefTextExprRef, self).__init__(
            test=test, value=value, **kwds
        )


class ConditionalValueDefnumber(VegaLiteSchema):
    """ConditionalValueDefnumber schema wrapper

    Union[:class:`ConditionalValueDefnumber`, Union[:class:`ConditionalParameterValueDefnumber`,
    Dict[required=[param, value]]], Union[:class:`ConditionalPredicateValueDefnumber`,
    Dict[required=[test, value]]]]
    """

    _schema = {"$ref": "#/definitions/ConditionalValueDef<number>"}

    def __init__(self, *args, **kwds):
        super(ConditionalValueDefnumber, self).__init__(*args, **kwds)


class ConditionalParameterValueDefnumber(ConditionalValueDefnumber):
    """ConditionalParameterValueDefnumber schema wrapper

    Union[:class:`ConditionalParameterValueDefnumber`, Dict[required=[param, value]]]

    Parameters
    ----------

    param : Union[:class:`ParameterName`, str]
        Filter using a parameter name.
    value : float
        A constant value in visual domain (e.g., ``"red"`` / ``"#0099ff"`` / `gradient
        definition <https://vega.github.io/vega-lite/docs/types.html#gradient>`__ for color,
        values between ``0`` to ``1`` for opacity).
    empty : bool
        For selection parameters, the predicate of empty selections returns true by default.
        Override this behavior, by setting this property ``empty: false``.
    """

    _schema = {"$ref": "#/definitions/ConditionalParameter<ValueDef<number>>"}

    def __init__(
        self,
        param: Union[Union["ParameterName", str], UndefinedType] = Undefined,
        value: Union[float, UndefinedType] = Undefined,
        empty: Union[bool, UndefinedType] = Undefined,
        **kwds
    ):
        super(ConditionalParameterValueDefnumber, self).__init__(
            param=param, value=value, empty=empty, **kwds
        )


class ConditionalPredicateValueDefnumber(ConditionalValueDefnumber):
    """ConditionalPredicateValueDefnumber schema wrapper

    Union[:class:`ConditionalPredicateValueDefnumber`, Dict[required=[test, value]]]

    Parameters
    ----------

    test : Union[:class:`PredicateComposition`, Union[:class:`LogicalAndPredicate`, Dict[required=[and]]], Union[:class:`LogicalNotPredicate`, Dict[required=[not]]], Union[:class:`LogicalOrPredicate`, Dict[required=[or]]], Union[:class:`Predicate`, Union[:class:`FieldEqualPredicate`, Dict[required=[equal, field]]], Union[:class:`FieldGTEPredicate`, Dict[required=[field, gte]]], Union[:class:`FieldGTPredicate`, Dict[required=[field, gt]]], Union[:class:`FieldLTEPredicate`, Dict[required=[field, lte]]], Union[:class:`FieldLTPredicate`, Dict[required=[field, lt]]], Union[:class:`FieldOneOfPredicate`, Dict[required=[field, oneOf]]], Union[:class:`FieldRangePredicate`, Dict[required=[field, range]]], Union[:class:`FieldValidPredicate`, Dict[required=[field, valid]]], Union[:class:`ParameterPredicate`, Dict[required=[param]]], str]]
        Predicate for triggering the condition
    value : float
        A constant value in visual domain (e.g., ``"red"`` / ``"#0099ff"`` / `gradient
        definition <https://vega.github.io/vega-lite/docs/types.html#gradient>`__ for color,
        values between ``0`` to ``1`` for opacity).
    """

    _schema = {"$ref": "#/definitions/ConditionalPredicate<ValueDef<number>>"}

    def __init__(
        self,
        test: Union[
            Union[
                "PredicateComposition",
                Union["LogicalAndPredicate", dict],
                Union["LogicalNotPredicate", dict],
                Union["LogicalOrPredicate", dict],
                Union[
                    "Predicate",
                    Union["FieldEqualPredicate", dict],
                    Union["FieldGTEPredicate", dict],
                    Union["FieldGTPredicate", dict],
                    Union["FieldLTEPredicate", dict],
                    Union["FieldLTPredicate", dict],
                    Union["FieldOneOfPredicate", dict],
                    Union["FieldRangePredicate", dict],
                    Union["FieldValidPredicate", dict],
                    Union["ParameterPredicate", dict],
                    str,
                ],
            ],
            UndefinedType,
        ] = Undefined,
        value: Union[float, UndefinedType] = Undefined,
        **kwds
    ):
        super(ConditionalPredicateValueDefnumber, self).__init__(
            test=test, value=value, **kwds
        )


class ConditionalValueDefnumberArrayExprRef(VegaLiteSchema):
    """ConditionalValueDefnumberArrayExprRef schema wrapper

    Union[:class:`ConditionalValueDefnumberArrayExprRef`,
    Union[:class:`ConditionalParameterValueDefnumberArrayExprRef`, Dict[required=[param,
    value]]], Union[:class:`ConditionalPredicateValueDefnumberArrayExprRef`,
    Dict[required=[test, value]]]]
    """

    _schema = {"$ref": "#/definitions/ConditionalValueDef<(number[]|ExprRef)>"}

    def __init__(self, *args, **kwds):
        super(ConditionalValueDefnumberArrayExprRef, self).__init__(*args, **kwds)


class ConditionalParameterValueDefnumberArrayExprRef(
    ConditionalValueDefnumberArrayExprRef
):
    """ConditionalParameterValueDefnumberArrayExprRef schema wrapper

    Union[:class:`ConditionalParameterValueDefnumberArrayExprRef`, Dict[required=[param,
    value]]]

    Parameters
    ----------

    param : Union[:class:`ParameterName`, str]
        Filter using a parameter name.
    value : Union[List[float], Union[:class:`ExprRef`, Dict[required=[expr]]]]
        A constant value in visual domain (e.g., ``"red"`` / ``"#0099ff"`` / `gradient
        definition <https://vega.github.io/vega-lite/docs/types.html#gradient>`__ for color,
        values between ``0`` to ``1`` for opacity).
    empty : bool
        For selection parameters, the predicate of empty selections returns true by default.
        Override this behavior, by setting this property ``empty: false``.
    """

    _schema = {
        "$ref": "#/definitions/ConditionalParameter<ValueDef<(number[]|ExprRef)>>"
    }

    def __init__(
        self,
        param: Union[Union["ParameterName", str], UndefinedType] = Undefined,
        value: Union[
            Union[List[float], Union["ExprRef", "_ParameterProtocol", dict]],
            UndefinedType,
        ] = Undefined,
        empty: Union[bool, UndefinedType] = Undefined,
        **kwds
    ):
        super(ConditionalParameterValueDefnumberArrayExprRef, self).__init__(
            param=param, value=value, empty=empty, **kwds
        )


class ConditionalPredicateValueDefnumberArrayExprRef(
    ConditionalValueDefnumberArrayExprRef
):
    """ConditionalPredicateValueDefnumberArrayExprRef schema wrapper

    Union[:class:`ConditionalPredicateValueDefnumberArrayExprRef`, Dict[required=[test, value]]]

    Parameters
    ----------

    test : Union[:class:`PredicateComposition`, Union[:class:`LogicalAndPredicate`, Dict[required=[and]]], Union[:class:`LogicalNotPredicate`, Dict[required=[not]]], Union[:class:`LogicalOrPredicate`, Dict[required=[or]]], Union[:class:`Predicate`, Union[:class:`FieldEqualPredicate`, Dict[required=[equal, field]]], Union[:class:`FieldGTEPredicate`, Dict[required=[field, gte]]], Union[:class:`FieldGTPredicate`, Dict[required=[field, gt]]], Union[:class:`FieldLTEPredicate`, Dict[required=[field, lte]]], Union[:class:`FieldLTPredicate`, Dict[required=[field, lt]]], Union[:class:`FieldOneOfPredicate`, Dict[required=[field, oneOf]]], Union[:class:`FieldRangePredicate`, Dict[required=[field, range]]], Union[:class:`FieldValidPredicate`, Dict[required=[field, valid]]], Union[:class:`ParameterPredicate`, Dict[required=[param]]], str]]
        Predicate for triggering the condition
    value : Union[List[float], Union[:class:`ExprRef`, Dict[required=[expr]]]]
        A constant value in visual domain (e.g., ``"red"`` / ``"#0099ff"`` / `gradient
        definition <https://vega.github.io/vega-lite/docs/types.html#gradient>`__ for color,
        values between ``0`` to ``1`` for opacity).
    """

    _schema = {
        "$ref": "#/definitions/ConditionalPredicate<ValueDef<(number[]|ExprRef)>>"
    }

    def __init__(
        self,
        test: Union[
            Union[
                "PredicateComposition",
                Union["LogicalAndPredicate", dict],
                Union["LogicalNotPredicate", dict],
                Union["LogicalOrPredicate", dict],
                Union[
                    "Predicate",
                    Union["FieldEqualPredicate", dict],
                    Union["FieldGTEPredicate", dict],
                    Union["FieldGTPredicate", dict],
                    Union["FieldLTEPredicate", dict],
                    Union["FieldLTPredicate", dict],
                    Union["FieldOneOfPredicate", dict],
                    Union["FieldRangePredicate", dict],
                    Union["FieldValidPredicate", dict],
                    Union["ParameterPredicate", dict],
                    str,
                ],
            ],
            UndefinedType,
        ] = Undefined,
        value: Union[
            Union[List[float], Union["ExprRef", "_ParameterProtocol", dict]],
            UndefinedType,
        ] = Undefined,
        **kwds
    ):
        super(ConditionalPredicateValueDefnumberArrayExprRef, self).__init__(
            test=test, value=value, **kwds
        )


class ConditionalValueDefnumberExprRef(VegaLiteSchema):
    """ConditionalValueDefnumberExprRef schema wrapper

    Union[:class:`ConditionalValueDefnumberExprRef`,
    Union[:class:`ConditionalParameterValueDefnumberExprRef`, Dict[required=[param, value]]],
    Union[:class:`ConditionalPredicateValueDefnumberExprRef`, Dict[required=[test, value]]]]
    """

    _schema = {"$ref": "#/definitions/ConditionalValueDef<(number|ExprRef)>"}

    def __init__(self, *args, **kwds):
        super(ConditionalValueDefnumberExprRef, self).__init__(*args, **kwds)


class ConditionalParameterValueDefnumberExprRef(ConditionalValueDefnumberExprRef):
    """ConditionalParameterValueDefnumberExprRef schema wrapper

    Union[:class:`ConditionalParameterValueDefnumberExprRef`, Dict[required=[param, value]]]

    Parameters
    ----------

    param : Union[:class:`ParameterName`, str]
        Filter using a parameter name.
    value : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], float]
        A constant value in visual domain (e.g., ``"red"`` / ``"#0099ff"`` / `gradient
        definition <https://vega.github.io/vega-lite/docs/types.html#gradient>`__ for color,
        values between ``0`` to ``1`` for opacity).
    empty : bool
        For selection parameters, the predicate of empty selections returns true by default.
        Override this behavior, by setting this property ``empty: false``.
    """

    _schema = {"$ref": "#/definitions/ConditionalParameter<ValueDef<(number|ExprRef)>>"}

    def __init__(
        self,
        param: Union[Union["ParameterName", str], UndefinedType] = Undefined,
        value: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], float], UndefinedType
        ] = Undefined,
        empty: Union[bool, UndefinedType] = Undefined,
        **kwds
    ):
        super(ConditionalParameterValueDefnumberExprRef, self).__init__(
            param=param, value=value, empty=empty, **kwds
        )


class ConditionalPredicateValueDefnumberExprRef(ConditionalValueDefnumberExprRef):
    """ConditionalPredicateValueDefnumberExprRef schema wrapper

    Union[:class:`ConditionalPredicateValueDefnumberExprRef`, Dict[required=[test, value]]]

    Parameters
    ----------

    test : Union[:class:`PredicateComposition`, Union[:class:`LogicalAndPredicate`, Dict[required=[and]]], Union[:class:`LogicalNotPredicate`, Dict[required=[not]]], Union[:class:`LogicalOrPredicate`, Dict[required=[or]]], Union[:class:`Predicate`, Union[:class:`FieldEqualPredicate`, Dict[required=[equal, field]]], Union[:class:`FieldGTEPredicate`, Dict[required=[field, gte]]], Union[:class:`FieldGTPredicate`, Dict[required=[field, gt]]], Union[:class:`FieldLTEPredicate`, Dict[required=[field, lte]]], Union[:class:`FieldLTPredicate`, Dict[required=[field, lt]]], Union[:class:`FieldOneOfPredicate`, Dict[required=[field, oneOf]]], Union[:class:`FieldRangePredicate`, Dict[required=[field, range]]], Union[:class:`FieldValidPredicate`, Dict[required=[field, valid]]], Union[:class:`ParameterPredicate`, Dict[required=[param]]], str]]
        Predicate for triggering the condition
    value : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], float]
        A constant value in visual domain (e.g., ``"red"`` / ``"#0099ff"`` / `gradient
        definition <https://vega.github.io/vega-lite/docs/types.html#gradient>`__ for color,
        values between ``0`` to ``1`` for opacity).
    """

    _schema = {"$ref": "#/definitions/ConditionalPredicate<ValueDef<(number|ExprRef)>>"}

    def __init__(
        self,
        test: Union[
            Union[
                "PredicateComposition",
                Union["LogicalAndPredicate", dict],
                Union["LogicalNotPredicate", dict],
                Union["LogicalOrPredicate", dict],
                Union[
                    "Predicate",
                    Union["FieldEqualPredicate", dict],
                    Union["FieldGTEPredicate", dict],
                    Union["FieldGTPredicate", dict],
                    Union["FieldLTEPredicate", dict],
                    Union["FieldLTPredicate", dict],
                    Union["FieldOneOfPredicate", dict],
                    Union["FieldRangePredicate", dict],
                    Union["FieldValidPredicate", dict],
                    Union["ParameterPredicate", dict],
                    str,
                ],
            ],
            UndefinedType,
        ] = Undefined,
        value: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], float], UndefinedType
        ] = Undefined,
        **kwds
    ):
        super(ConditionalPredicateValueDefnumberExprRef, self).__init__(
            test=test, value=value, **kwds
        )


class ConditionalValueDefstringExprRef(VegaLiteSchema):
    """ConditionalValueDefstringExprRef schema wrapper

    Union[:class:`ConditionalValueDefstringExprRef`,
    Union[:class:`ConditionalParameterValueDefstringExprRef`, Dict[required=[param, value]]],
    Union[:class:`ConditionalPredicateValueDefstringExprRef`, Dict[required=[test, value]]]]
    """

    _schema = {"$ref": "#/definitions/ConditionalValueDef<(string|ExprRef)>"}

    def __init__(self, *args, **kwds):
        super(ConditionalValueDefstringExprRef, self).__init__(*args, **kwds)


class ConditionalParameterValueDefstringExprRef(ConditionalValueDefstringExprRef):
    """ConditionalParameterValueDefstringExprRef schema wrapper

    Union[:class:`ConditionalParameterValueDefstringExprRef`, Dict[required=[param, value]]]

    Parameters
    ----------

    param : Union[:class:`ParameterName`, str]
        Filter using a parameter name.
    value : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], str]
        A constant value in visual domain (e.g., ``"red"`` / ``"#0099ff"`` / `gradient
        definition <https://vega.github.io/vega-lite/docs/types.html#gradient>`__ for color,
        values between ``0`` to ``1`` for opacity).
    empty : bool
        For selection parameters, the predicate of empty selections returns true by default.
        Override this behavior, by setting this property ``empty: false``.
    """

    _schema = {"$ref": "#/definitions/ConditionalParameter<ValueDef<(string|ExprRef)>>"}

    def __init__(
        self,
        param: Union[Union["ParameterName", str], UndefinedType] = Undefined,
        value: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], str], UndefinedType
        ] = Undefined,
        empty: Union[bool, UndefinedType] = Undefined,
        **kwds
    ):
        super(ConditionalParameterValueDefstringExprRef, self).__init__(
            param=param, value=value, empty=empty, **kwds
        )


class ConditionalPredicateValueDefstringExprRef(ConditionalValueDefstringExprRef):
    """ConditionalPredicateValueDefstringExprRef schema wrapper

    Union[:class:`ConditionalPredicateValueDefstringExprRef`, Dict[required=[test, value]]]

    Parameters
    ----------

    test : Union[:class:`PredicateComposition`, Union[:class:`LogicalAndPredicate`, Dict[required=[and]]], Union[:class:`LogicalNotPredicate`, Dict[required=[not]]], Union[:class:`LogicalOrPredicate`, Dict[required=[or]]], Union[:class:`Predicate`, Union[:class:`FieldEqualPredicate`, Dict[required=[equal, field]]], Union[:class:`FieldGTEPredicate`, Dict[required=[field, gte]]], Union[:class:`FieldGTPredicate`, Dict[required=[field, gt]]], Union[:class:`FieldLTEPredicate`, Dict[required=[field, lte]]], Union[:class:`FieldLTPredicate`, Dict[required=[field, lt]]], Union[:class:`FieldOneOfPredicate`, Dict[required=[field, oneOf]]], Union[:class:`FieldRangePredicate`, Dict[required=[field, range]]], Union[:class:`FieldValidPredicate`, Dict[required=[field, valid]]], Union[:class:`ParameterPredicate`, Dict[required=[param]]], str]]
        Predicate for triggering the condition
    value : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], str]
        A constant value in visual domain (e.g., ``"red"`` / ``"#0099ff"`` / `gradient
        definition <https://vega.github.io/vega-lite/docs/types.html#gradient>`__ for color,
        values between ``0`` to ``1`` for opacity).
    """

    _schema = {"$ref": "#/definitions/ConditionalPredicate<ValueDef<(string|ExprRef)>>"}

    def __init__(
        self,
        test: Union[
            Union[
                "PredicateComposition",
                Union["LogicalAndPredicate", dict],
                Union["LogicalNotPredicate", dict],
                Union["LogicalOrPredicate", dict],
                Union[
                    "Predicate",
                    Union["FieldEqualPredicate", dict],
                    Union["FieldGTEPredicate", dict],
                    Union["FieldGTPredicate", dict],
                    Union["FieldLTEPredicate", dict],
                    Union["FieldLTPredicate", dict],
                    Union["FieldOneOfPredicate", dict],
                    Union["FieldRangePredicate", dict],
                    Union["FieldValidPredicate", dict],
                    Union["ParameterPredicate", dict],
                    str,
                ],
            ],
            UndefinedType,
        ] = Undefined,
        value: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], str], UndefinedType
        ] = Undefined,
        **kwds
    ):
        super(ConditionalPredicateValueDefstringExprRef, self).__init__(
            test=test, value=value, **kwds
        )


class ConditionalValueDefstringnullExprRef(VegaLiteSchema):
    """ConditionalValueDefstringnullExprRef schema wrapper

    Union[:class:`ConditionalValueDefstringnullExprRef`,
    Union[:class:`ConditionalParameterValueDefstringnullExprRef`, Dict[required=[param,
    value]]], Union[:class:`ConditionalPredicateValueDefstringnullExprRef`, Dict[required=[test,
    value]]]]
    """

    _schema = {"$ref": "#/definitions/ConditionalValueDef<(string|null|ExprRef)>"}

    def __init__(self, *args, **kwds):
        super(ConditionalValueDefstringnullExprRef, self).__init__(*args, **kwds)


class ConditionalParameterValueDefstringnullExprRef(
    ConditionalValueDefstringnullExprRef
):
    """ConditionalParameterValueDefstringnullExprRef schema wrapper

    Union[:class:`ConditionalParameterValueDefstringnullExprRef`, Dict[required=[param, value]]]

    Parameters
    ----------

    param : Union[:class:`ParameterName`, str]
        Filter using a parameter name.
    value : Union[None, Union[:class:`ExprRef`, Dict[required=[expr]]], str]
        A constant value in visual domain (e.g., ``"red"`` / ``"#0099ff"`` / `gradient
        definition <https://vega.github.io/vega-lite/docs/types.html#gradient>`__ for color,
        values between ``0`` to ``1`` for opacity).
    empty : bool
        For selection parameters, the predicate of empty selections returns true by default.
        Override this behavior, by setting this property ``empty: false``.
    """

    _schema = {
        "$ref": "#/definitions/ConditionalParameter<ValueDef<(string|null|ExprRef)>>"
    }

    def __init__(
        self,
        param: Union[Union["ParameterName", str], UndefinedType] = Undefined,
        value: Union[
            Union[None, Union["ExprRef", "_ParameterProtocol", dict], str],
            UndefinedType,
        ] = Undefined,
        empty: Union[bool, UndefinedType] = Undefined,
        **kwds
    ):
        super(ConditionalParameterValueDefstringnullExprRef, self).__init__(
            param=param, value=value, empty=empty, **kwds
        )


class ConditionalPredicateValueDefstringnullExprRef(
    ConditionalValueDefstringnullExprRef
):
    """ConditionalPredicateValueDefstringnullExprRef schema wrapper

    Union[:class:`ConditionalPredicateValueDefstringnullExprRef`, Dict[required=[test, value]]]

    Parameters
    ----------

    test : Union[:class:`PredicateComposition`, Union[:class:`LogicalAndPredicate`, Dict[required=[and]]], Union[:class:`LogicalNotPredicate`, Dict[required=[not]]], Union[:class:`LogicalOrPredicate`, Dict[required=[or]]], Union[:class:`Predicate`, Union[:class:`FieldEqualPredicate`, Dict[required=[equal, field]]], Union[:class:`FieldGTEPredicate`, Dict[required=[field, gte]]], Union[:class:`FieldGTPredicate`, Dict[required=[field, gt]]], Union[:class:`FieldLTEPredicate`, Dict[required=[field, lte]]], Union[:class:`FieldLTPredicate`, Dict[required=[field, lt]]], Union[:class:`FieldOneOfPredicate`, Dict[required=[field, oneOf]]], Union[:class:`FieldRangePredicate`, Dict[required=[field, range]]], Union[:class:`FieldValidPredicate`, Dict[required=[field, valid]]], Union[:class:`ParameterPredicate`, Dict[required=[param]]], str]]
        Predicate for triggering the condition
    value : Union[None, Union[:class:`ExprRef`, Dict[required=[expr]]], str]
        A constant value in visual domain (e.g., ``"red"`` / ``"#0099ff"`` / `gradient
        definition <https://vega.github.io/vega-lite/docs/types.html#gradient>`__ for color,
        values between ``0`` to ``1`` for opacity).
    """

    _schema = {
        "$ref": "#/definitions/ConditionalPredicate<ValueDef<(string|null|ExprRef)>>"
    }

    def __init__(
        self,
        test: Union[
            Union[
                "PredicateComposition",
                Union["LogicalAndPredicate", dict],
                Union["LogicalNotPredicate", dict],
                Union["LogicalOrPredicate", dict],
                Union[
                    "Predicate",
                    Union["FieldEqualPredicate", dict],
                    Union["FieldGTEPredicate", dict],
                    Union["FieldGTPredicate", dict],
                    Union["FieldLTEPredicate", dict],
                    Union["FieldLTPredicate", dict],
                    Union["FieldOneOfPredicate", dict],
                    Union["FieldRangePredicate", dict],
                    Union["FieldValidPredicate", dict],
                    Union["ParameterPredicate", dict],
                    str,
                ],
            ],
            UndefinedType,
        ] = Undefined,
        value: Union[
            Union[None, Union["ExprRef", "_ParameterProtocol", dict], str],
            UndefinedType,
        ] = Undefined,
        **kwds
    ):
        super(ConditionalPredicateValueDefstringnullExprRef, self).__init__(
            test=test, value=value, **kwds
        )


class Config(VegaLiteSchema):
    """Config schema wrapper

    Union[:class:`Config`, Dict[required=[]]]

    Parameters
    ----------

    arc : Union[:class:`RectConfig`, Dict[required=[]]]
        Arc-specific Config
    area : Union[:class:`AreaConfig`, Dict[required=[]]]
        Area-Specific Config
    aria : bool
        A boolean flag indicating if ARIA default attributes should be included for marks
        and guides (SVG output only). If false, the ``"aria-hidden"`` attribute will be set
        for all guides, removing them from the ARIA accessibility tree and Vega-Lite will
        not generate default descriptions for marks.

        **Default value:** ``true``.
    autosize : Union[Union[:class:`AutoSizeParams`, Dict[required=[]]], Union[:class:`AutosizeType`, Literal['pad', 'none', 'fit', 'fit-x', 'fit-y']]]
        How the visualization size should be determined. If a string, should be one of
        ``"pad"``, ``"fit"`` or ``"none"``. Object values can additionally specify
        parameters for content sizing and automatic resizing.

        **Default value** : ``pad``
    axis : Union[:class:`AxisConfig`, Dict[required=[]]]
        Axis configuration, which determines default properties for all ``x`` and ``y``
        `axes <https://vega.github.io/vega-lite/docs/axis.html>`__. For a full list of axis
        configuration options, please see the `corresponding section of the axis
        documentation <https://vega.github.io/vega-lite/docs/axis.html#config>`__.
    axisBand : Union[:class:`AxisConfig`, Dict[required=[]]]
        Config for axes with "band" scales.
    axisBottom : Union[:class:`AxisConfig`, Dict[required=[]]]
        Config for x-axis along the bottom edge of the chart.
    axisDiscrete : Union[:class:`AxisConfig`, Dict[required=[]]]
        Config for axes with "point" or "band" scales.
    axisLeft : Union[:class:`AxisConfig`, Dict[required=[]]]
        Config for y-axis along the left edge of the chart.
    axisPoint : Union[:class:`AxisConfig`, Dict[required=[]]]
        Config for axes with "point" scales.
    axisQuantitative : Union[:class:`AxisConfig`, Dict[required=[]]]
        Config for quantitative axes.
    axisRight : Union[:class:`AxisConfig`, Dict[required=[]]]
        Config for y-axis along the right edge of the chart.
    axisTemporal : Union[:class:`AxisConfig`, Dict[required=[]]]
        Config for temporal axes.
    axisTop : Union[:class:`AxisConfig`, Dict[required=[]]]
        Config for x-axis along the top edge of the chart.
    axisX : Union[:class:`AxisConfig`, Dict[required=[]]]
        X-axis specific config.
    axisXBand : Union[:class:`AxisConfig`, Dict[required=[]]]
        Config for x-axes with "band" scales.
    axisXDiscrete : Union[:class:`AxisConfig`, Dict[required=[]]]
        Config for x-axes with "point" or "band" scales.
    axisXPoint : Union[:class:`AxisConfig`, Dict[required=[]]]
        Config for x-axes with "point" scales.
    axisXQuantitative : Union[:class:`AxisConfig`, Dict[required=[]]]
        Config for x-quantitative axes.
    axisXTemporal : Union[:class:`AxisConfig`, Dict[required=[]]]
        Config for x-temporal axes.
    axisY : Union[:class:`AxisConfig`, Dict[required=[]]]
        Y-axis specific config.
    axisYBand : Union[:class:`AxisConfig`, Dict[required=[]]]
        Config for y-axes with "band" scales.
    axisYDiscrete : Union[:class:`AxisConfig`, Dict[required=[]]]
        Config for y-axes with "point" or "band" scales.
    axisYPoint : Union[:class:`AxisConfig`, Dict[required=[]]]
        Config for y-axes with "point" scales.
    axisYQuantitative : Union[:class:`AxisConfig`, Dict[required=[]]]
        Config for y-quantitative axes.
    axisYTemporal : Union[:class:`AxisConfig`, Dict[required=[]]]
        Config for y-temporal axes.
    background : Union[Union[:class:`Color`, Union[:class:`ColorName`, Literal['black', 'silver', 'gray', 'white', 'maroon', 'red', 'purple', 'fuchsia', 'green', 'lime', 'olive', 'yellow', 'navy', 'blue', 'teal', 'aqua', 'orange', 'aliceblue', 'antiquewhite', 'aquamarine', 'azure', 'beige', 'bisque', 'blanchedalmond', 'blueviolet', 'brown', 'burlywood', 'cadetblue', 'chartreuse', 'chocolate', 'coral', 'cornflowerblue', 'cornsilk', 'crimson', 'cyan', 'darkblue', 'darkcyan', 'darkgoldenrod', 'darkgray', 'darkgreen', 'darkgrey', 'darkkhaki', 'darkmagenta', 'darkolivegreen', 'darkorange', 'darkorchid', 'darkred', 'darksalmon', 'darkseagreen', 'darkslateblue', 'darkslategray', 'darkslategrey', 'darkturquoise', 'darkviolet', 'deeppink', 'deepskyblue', 'dimgray', 'dimgrey', 'dodgerblue', 'firebrick', 'floralwhite', 'forestgreen', 'gainsboro', 'ghostwhite', 'gold', 'goldenrod', 'greenyellow', 'grey', 'honeydew', 'hotpink', 'indianred', 'indigo', 'ivory', 'khaki', 'lavender', 'lavenderblush', 'lawngreen', 'lemonchiffon', 'lightblue', 'lightcoral', 'lightcyan', 'lightgoldenrodyellow', 'lightgray', 'lightgreen', 'lightgrey', 'lightpink', 'lightsalmon', 'lightseagreen', 'lightskyblue', 'lightslategray', 'lightslategrey', 'lightsteelblue', 'lightyellow', 'limegreen', 'linen', 'magenta', 'mediumaquamarine', 'mediumblue', 'mediumorchid', 'mediumpurple', 'mediumseagreen', 'mediumslateblue', 'mediumspringgreen', 'mediumturquoise', 'mediumvioletred', 'midnightblue', 'mintcream', 'mistyrose', 'moccasin', 'navajowhite', 'oldlace', 'olivedrab', 'orangered', 'orchid', 'palegoldenrod', 'palegreen', 'paleturquoise', 'palevioletred', 'papayawhip', 'peachpuff', 'peru', 'pink', 'plum', 'powderblue', 'rosybrown', 'royalblue', 'saddlebrown', 'salmon', 'sandybrown', 'seagreen', 'seashell', 'sienna', 'skyblue', 'slateblue', 'slategray', 'slategrey', 'snow', 'springgreen', 'steelblue', 'tan', 'thistle', 'tomato', 'turquoise', 'violet', 'wheat', 'whitesmoke', 'yellowgreen', 'rebeccapurple']], Union[:class:`HexColor`, str], str], Union[:class:`ExprRef`, Dict[required=[expr]]]]
        CSS color property to use as the background of the entire view.

        **Default value:** ``"white"``
    bar : Union[:class:`BarConfig`, Dict[required=[]]]
        Bar-Specific Config
    boxplot : Union[:class:`BoxPlotConfig`, Dict[required=[]]]
        Box Config
    circle : Union[:class:`MarkConfig`, Dict[required=[]]]
        Circle-Specific Config
    concat : Union[:class:`CompositionConfig`, Dict[required=[]]]
        Default configuration for all concatenation and repeat view composition operators (
        ``concat``, ``hconcat``, ``vconcat``, and ``repeat`` )
    countTitle : str
        Default axis and legend title for count fields.

        **Default value:** ``'Count of Records``.
    customFormatTypes : bool
        Allow the ``formatType`` property for text marks and guides to accept a custom
        formatter function `registered as a Vega expression
        <https://vega.github.io/vega-lite/usage/compile.html#format-type>`__.
    errorband : Union[:class:`ErrorBandConfig`, Dict[required=[]]]
        ErrorBand Config
    errorbar : Union[:class:`ErrorBarConfig`, Dict[required=[]]]
        ErrorBar Config
    facet : Union[:class:`CompositionConfig`, Dict[required=[]]]
        Default configuration for the ``facet`` view composition operator
    fieldTitle : Literal['verbal', 'functional', 'plain']
        Defines how Vega-Lite generates title for fields. There are three possible styles:


        * ``"verbal"`` (Default) - displays function in a verbal style (e.g., "Sum of
          field", "Year-month of date", "field (binned)").
        * ``"function"`` - displays function using parentheses and capitalized texts (e.g.,
          "SUM(field)", "YEARMONTH(date)", "BIN(field)").
        * ``"plain"`` - displays only the field name without functions (e.g., "field",
          "date", "field").
    font : str
        Default font for all text marks, titles, and labels.
    geoshape : Union[:class:`MarkConfig`, Dict[required=[]]]
        Geoshape-Specific Config
    header : Union[:class:`HeaderConfig`, Dict[required=[]]]
        Header configuration, which determines default properties for all `headers
        <https://vega.github.io/vega-lite/docs/header.html>`__.

        For a full list of header configuration options, please see the `corresponding
        section of in the header documentation
        <https://vega.github.io/vega-lite/docs/header.html#config>`__.
    headerColumn : Union[:class:`HeaderConfig`, Dict[required=[]]]
        Header configuration, which determines default properties for column `headers
        <https://vega.github.io/vega-lite/docs/header.html>`__.

        For a full list of header configuration options, please see the `corresponding
        section of in the header documentation
        <https://vega.github.io/vega-lite/docs/header.html#config>`__.
    headerFacet : Union[:class:`HeaderConfig`, Dict[required=[]]]
        Header configuration, which determines default properties for non-row/column facet
        `headers <https://vega.github.io/vega-lite/docs/header.html>`__.

        For a full list of header configuration options, please see the `corresponding
        section of in the header documentation
        <https://vega.github.io/vega-lite/docs/header.html#config>`__.
    headerRow : Union[:class:`HeaderConfig`, Dict[required=[]]]
        Header configuration, which determines default properties for row `headers
        <https://vega.github.io/vega-lite/docs/header.html>`__.

        For a full list of header configuration options, please see the `corresponding
        section of in the header documentation
        <https://vega.github.io/vega-lite/docs/header.html#config>`__.
    image : Union[:class:`RectConfig`, Dict[required=[]]]
        Image-specific Config
    legend : Union[:class:`LegendConfig`, Dict[required=[]]]
        Legend configuration, which determines default properties for all `legends
        <https://vega.github.io/vega-lite/docs/legend.html>`__. For a full list of legend
        configuration options, please see the `corresponding section of in the legend
        documentation <https://vega.github.io/vega-lite/docs/legend.html#config>`__.
    line : Union[:class:`LineConfig`, Dict[required=[]]]
        Line-Specific Config
    lineBreak : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], str]
        A delimiter, such as a newline character, upon which to break text strings into
        multiple lines. This property provides a global default for text marks, which is
        overridden by mark or style config settings, and by the lineBreak mark encoding
        channel. If signal-valued, either string or regular expression (regexp) values are
        valid.
    locale : Union[:class:`Locale`, Dict[required=[]]]
        Locale definitions for string parsing and formatting of number and date values. The
        locale object should contain ``number`` and/or ``time`` properties with `locale
        definitions <https://vega.github.io/vega/docs/api/locale/>`__. Locale definitions
        provided in the config block may be overridden by the View constructor locale
        option.
    mark : Union[:class:`MarkConfig`, Dict[required=[]]]
        Mark Config
    normalizedNumberFormat : str
        If normalizedNumberFormatType is not specified, D3 number format for axis labels,
        text marks, and tooltips of normalized stacked fields (fields with ``stack:
        "normalize"`` ). For example ``"s"`` for SI units. Use `D3's number format pattern
        <https://github.com/d3/d3-format#locale_format>`__.

        If ``config.normalizedNumberFormatType`` is specified and
        ``config.customFormatTypes`` is ``true``, this value will be passed as ``format``
        alongside ``datum.value`` to the ``config.numberFormatType`` function. **Default
        value:** ``%``
    normalizedNumberFormatType : str
        `Custom format type
        <https://vega.github.io/vega-lite/docs/config.html#custom-format-type>`__ for
        ``config.normalizedNumberFormat``.

        **Default value:** ``undefined`` -- This is equilvalent to call D3-format, which is
        exposed as `format in Vega-Expression
        <https://vega.github.io/vega/docs/expressions/#format>`__. **Note:** You must also
        set ``customFormatTypes`` to ``true`` to use this feature.
    numberFormat : str
        If numberFormatType is not specified, D3 number format for guide labels, text marks,
        and tooltips of non-normalized fields (fields *without* ``stack: "normalize"`` ).
        For example ``"s"`` for SI units. Use `D3's number format pattern
        <https://github.com/d3/d3-format#locale_format>`__.

        If ``config.numberFormatType`` is specified and ``config.customFormatTypes`` is
        ``true``, this value will be passed as ``format`` alongside ``datum.value`` to the
        ``config.numberFormatType`` function.
    numberFormatType : str
        `Custom format type
        <https://vega.github.io/vega-lite/docs/config.html#custom-format-type>`__ for
        ``config.numberFormat``.

        **Default value:** ``undefined`` -- This is equilvalent to call D3-format, which is
        exposed as `format in Vega-Expression
        <https://vega.github.io/vega/docs/expressions/#format>`__. **Note:** You must also
        set ``customFormatTypes`` to ``true`` to use this feature.
    padding : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], Union[:class:`Padding`, Dict[required=[]], float]]
        The default visualization padding, in pixels, from the edge of the visualization
        canvas to the data rectangle. If a number, specifies padding for all sides. If an
        object, the value should have the format ``{"left": 5, "top": 5, "right": 5,
        "bottom": 5}`` to specify padding for each side of the visualization.

        **Default value** : ``5``
    params : List[Union[:class:`TopLevelParameter`, Union[:class:`TopLevelSelectionParameter`, Dict[required=[name, select]]], Union[:class:`VariableParameter`, Dict[required=[name]]]]]
        Dynamic variables or selections that parameterize a visualization.
    point : Union[:class:`MarkConfig`, Dict[required=[]]]
        Point-Specific Config
    projection : Union[:class:`ProjectionConfig`, Dict[required=[]]]
        Projection configuration, which determines default properties for all `projections
        <https://vega.github.io/vega-lite/docs/projection.html>`__. For a full list of
        projection configuration options, please see the `corresponding section of the
        projection documentation
        <https://vega.github.io/vega-lite/docs/projection.html#config>`__.
    range : Union[:class:`RangeConfig`, Dict[required=[]]]
        An object hash that defines default range arrays or schemes for using with scales.
        For a full list of scale range configuration options, please see the `corresponding
        section of the scale documentation
        <https://vega.github.io/vega-lite/docs/scale.html#config>`__.
    rect : Union[:class:`RectConfig`, Dict[required=[]]]
        Rect-Specific Config
    rule : Union[:class:`MarkConfig`, Dict[required=[]]]
        Rule-Specific Config
    scale : Union[:class:`ScaleConfig`, Dict[required=[]]]
        Scale configuration determines default properties for all `scales
        <https://vega.github.io/vega-lite/docs/scale.html>`__. For a full list of scale
        configuration options, please see the `corresponding section of the scale
        documentation <https://vega.github.io/vega-lite/docs/scale.html#config>`__.
    selection : Union[:class:`SelectionConfig`, Dict[required=[]]]
        An object hash for defining default properties for each type of selections.
    square : Union[:class:`MarkConfig`, Dict[required=[]]]
        Square-Specific Config
    style : Union[:class:`StyleConfigIndex`, Dict[required=[]]]
        An object hash that defines key-value mappings to determine default properties for
        marks with a given `style
        <https://vega.github.io/vega-lite/docs/mark.html#mark-def>`__. The keys represent
        styles names; the values have to be valid `mark configuration objects
        <https://vega.github.io/vega-lite/docs/mark.html#config>`__.
    text : Union[:class:`MarkConfig`, Dict[required=[]]]
        Text-Specific Config
    tick : Union[:class:`TickConfig`, Dict[required=[]]]
        Tick-Specific Config
    timeFormat : str
        Default time format for raw time values (without time units) in text marks, legend
        labels and header labels.

        **Default value:** ``"%b %d, %Y"`` **Note:** Axes automatically determine the format
        for each label automatically so this config does not affect axes.
    timeFormatType : str
        `Custom format type
        <https://vega.github.io/vega-lite/docs/config.html#custom-format-type>`__ for
        ``config.timeFormat``.

        **Default value:** ``undefined`` -- This is equilvalent to call D3-time-format,
        which is exposed as `timeFormat in Vega-Expression
        <https://vega.github.io/vega/docs/expressions/#timeFormat>`__. **Note:** You must
        also set ``customFormatTypes`` to ``true`` and there must *not* be a ``timeUnit``
        defined to use this feature.
    title : Union[:class:`TitleConfig`, Dict[required=[]]]
        Title configuration, which determines default properties for all `titles
        <https://vega.github.io/vega-lite/docs/title.html>`__. For a full list of title
        configuration options, please see the `corresponding section of the title
        documentation <https://vega.github.io/vega-lite/docs/title.html#config>`__.
    tooltipFormat : Union[:class:`FormatConfig`, Dict[required=[]]]
        Define `custom format configuration
        <https://vega.github.io/vega-lite/docs/config.html#format>`__ for tooltips. If
        unspecified, default format config will be applied.
    trail : Union[:class:`LineConfig`, Dict[required=[]]]
        Trail-Specific Config
    view : Union[:class:`ViewConfig`, Dict[required=[]]]
        Default properties for `single view plots
        <https://vega.github.io/vega-lite/docs/spec.html#single>`__.
    """

    _schema = {"$ref": "#/definitions/Config"}

    def __init__(
        self,
        arc: Union[Union["RectConfig", dict], UndefinedType] = Undefined,
        area: Union[Union["AreaConfig", dict], UndefinedType] = Undefined,
        aria: Union[bool, UndefinedType] = Undefined,
        autosize: Union[
            Union[
                Union["AutoSizeParams", dict],
                Union["AutosizeType", Literal["pad", "none", "fit", "fit-x", "fit-y"]],
            ],
            UndefinedType,
        ] = Undefined,
        axis: Union[Union["AxisConfig", dict], UndefinedType] = Undefined,
        axisBand: Union[Union["AxisConfig", dict], UndefinedType] = Undefined,
        axisBottom: Union[Union["AxisConfig", dict], UndefinedType] = Undefined,
        axisDiscrete: Union[Union["AxisConfig", dict], UndefinedType] = Undefined,
        axisLeft: Union[Union["AxisConfig", dict], UndefinedType] = Undefined,
        axisPoint: Union[Union["AxisConfig", dict], UndefinedType] = Undefined,
        axisQuantitative: Union[Union["AxisConfig", dict], UndefinedType] = Undefined,
        axisRight: Union[Union["AxisConfig", dict], UndefinedType] = Undefined,
        axisTemporal: Union[Union["AxisConfig", dict], UndefinedType] = Undefined,
        axisTop: Union[Union["AxisConfig", dict], UndefinedType] = Undefined,
        axisX: Union[Union["AxisConfig", dict], UndefinedType] = Undefined,
        axisXBand: Union[Union["AxisConfig", dict], UndefinedType] = Undefined,
        axisXDiscrete: Union[Union["AxisConfig", dict], UndefinedType] = Undefined,
        axisXPoint: Union[Union["AxisConfig", dict], UndefinedType] = Undefined,
        axisXQuantitative: Union[Union["AxisConfig", dict], UndefinedType] = Undefined,
        axisXTemporal: Union[Union["AxisConfig", dict], UndefinedType] = Undefined,
        axisY: Union[Union["AxisConfig", dict], UndefinedType] = Undefined,
        axisYBand: Union[Union["AxisConfig", dict], UndefinedType] = Undefined,
        axisYDiscrete: Union[Union["AxisConfig", dict], UndefinedType] = Undefined,
        axisYPoint: Union[Union["AxisConfig", dict], UndefinedType] = Undefined,
        axisYQuantitative: Union[Union["AxisConfig", dict], UndefinedType] = Undefined,
        axisYTemporal: Union[Union["AxisConfig", dict], UndefinedType] = Undefined,
        background: Union[
            Union[
                Union[
                    "Color",
                    Union[
                        "ColorName",
                        Literal[
                            "black",
                            "silver",
                            "gray",
                            "white",
                            "maroon",
                            "red",
                            "purple",
                            "fuchsia",
                            "green",
                            "lime",
                            "olive",
                            "yellow",
                            "navy",
                            "blue",
                            "teal",
                            "aqua",
                            "orange",
                            "aliceblue",
                            "antiquewhite",
                            "aquamarine",
                            "azure",
                            "beige",
                            "bisque",
                            "blanchedalmond",
                            "blueviolet",
                            "brown",
                            "burlywood",
                            "cadetblue",
                            "chartreuse",
                            "chocolate",
                            "coral",
                            "cornflowerblue",
                            "cornsilk",
                            "crimson",
                            "cyan",
                            "darkblue",
                            "darkcyan",
                            "darkgoldenrod",
                            "darkgray",
                            "darkgreen",
                            "darkgrey",
                            "darkkhaki",
                            "darkmagenta",
                            "darkolivegreen",
                            "darkorange",
                            "darkorchid",
                            "darkred",
                            "darksalmon",
                            "darkseagreen",
                            "darkslateblue",
                            "darkslategray",
                            "darkslategrey",
                            "darkturquoise",
                            "darkviolet",
                            "deeppink",
                            "deepskyblue",
                            "dimgray",
                            "dimgrey",
                            "dodgerblue",
                            "firebrick",
                            "floralwhite",
                            "forestgreen",
                            "gainsboro",
                            "ghostwhite",
                            "gold",
                            "goldenrod",
                            "greenyellow",
                            "grey",
                            "honeydew",
                            "hotpink",
                            "indianred",
                            "indigo",
                            "ivory",
                            "khaki",
                            "lavender",
                            "lavenderblush",
                            "lawngreen",
                            "lemonchiffon",
                            "lightblue",
                            "lightcoral",
                            "lightcyan",
                            "lightgoldenrodyellow",
                            "lightgray",
                            "lightgreen",
                            "lightgrey",
                            "lightpink",
                            "lightsalmon",
                            "lightseagreen",
                            "lightskyblue",
                            "lightslategray",
                            "lightslategrey",
                            "lightsteelblue",
                            "lightyellow",
                            "limegreen",
                            "linen",
                            "magenta",
                            "mediumaquamarine",
                            "mediumblue",
                            "mediumorchid",
                            "mediumpurple",
                            "mediumseagreen",
                            "mediumslateblue",
                            "mediumspringgreen",
                            "mediumturquoise",
                            "mediumvioletred",
                            "midnightblue",
                            "mintcream",
                            "mistyrose",
                            "moccasin",
                            "navajowhite",
                            "oldlace",
                            "olivedrab",
                            "orangered",
                            "orchid",
                            "palegoldenrod",
                            "palegreen",
                            "paleturquoise",
                            "palevioletred",
                            "papayawhip",
                            "peachpuff",
                            "peru",
                            "pink",
                            "plum",
                            "powderblue",
                            "rosybrown",
                            "royalblue",
                            "saddlebrown",
                            "salmon",
                            "sandybrown",
                            "seagreen",
                            "seashell",
                            "sienna",
                            "skyblue",
                            "slateblue",
                            "slategray",
                            "slategrey",
                            "snow",
                            "springgreen",
                            "steelblue",
                            "tan",
                            "thistle",
                            "tomato",
                            "turquoise",
                            "violet",
                            "wheat",
                            "whitesmoke",
                            "yellowgreen",
                            "rebeccapurple",
                        ],
                    ],
                    Union["HexColor", str],
                    str,
                ],
                Union["ExprRef", "_ParameterProtocol", dict],
            ],
            UndefinedType,
        ] = Undefined,
        bar: Union[Union["BarConfig", dict], UndefinedType] = Undefined,
        boxplot: Union[Union["BoxPlotConfig", dict], UndefinedType] = Undefined,
        circle: Union[Union["MarkConfig", dict], UndefinedType] = Undefined,
        concat: Union[Union["CompositionConfig", dict], UndefinedType] = Undefined,
        countTitle: Union[str, UndefinedType] = Undefined,
        customFormatTypes: Union[bool, UndefinedType] = Undefined,
        errorband: Union[Union["ErrorBandConfig", dict], UndefinedType] = Undefined,
        errorbar: Union[Union["ErrorBarConfig", dict], UndefinedType] = Undefined,
        facet: Union[Union["CompositionConfig", dict], UndefinedType] = Undefined,
        fieldTitle: Union[
            Literal["verbal", "functional", "plain"], UndefinedType
        ] = Undefined,
        font: Union[str, UndefinedType] = Undefined,
        geoshape: Union[Union["MarkConfig", dict], UndefinedType] = Undefined,
        header: Union[Union["HeaderConfig", dict], UndefinedType] = Undefined,
        headerColumn: Union[Union["HeaderConfig", dict], UndefinedType] = Undefined,
        headerFacet: Union[Union["HeaderConfig", dict], UndefinedType] = Undefined,
        headerRow: Union[Union["HeaderConfig", dict], UndefinedType] = Undefined,
        image: Union[Union["RectConfig", dict], UndefinedType] = Undefined,
        legend: Union[Union["LegendConfig", dict], UndefinedType] = Undefined,
        line: Union[Union["LineConfig", dict], UndefinedType] = Undefined,
        lineBreak: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], str], UndefinedType
        ] = Undefined,
        locale: Union[Union["Locale", dict], UndefinedType] = Undefined,
        mark: Union[Union["MarkConfig", dict], UndefinedType] = Undefined,
        normalizedNumberFormat: Union[str, UndefinedType] = Undefined,
        normalizedNumberFormatType: Union[str, UndefinedType] = Undefined,
        numberFormat: Union[str, UndefinedType] = Undefined,
        numberFormatType: Union[str, UndefinedType] = Undefined,
        padding: Union[
            Union[
                Union["ExprRef", "_ParameterProtocol", dict],
                Union["Padding", dict, float],
            ],
            UndefinedType,
        ] = Undefined,
        params: Union[
            Union[
                List["TopLevelParameter"],
                List[Union["TopLevelSelectionParameter", dict]],
                List[Union["VariableParameter", dict]],
            ],
            UndefinedType,
        ] = Undefined,
        point: Union[Union["MarkConfig", dict], UndefinedType] = Undefined,
        projection: Union[Union["ProjectionConfig", dict], UndefinedType] = Undefined,
        range: Union[Union["RangeConfig", dict], UndefinedType] = Undefined,
        rect: Union[Union["RectConfig", dict], UndefinedType] = Undefined,
        rule: Union[Union["MarkConfig", dict], UndefinedType] = Undefined,
        scale: Union[Union["ScaleConfig", dict], UndefinedType] = Undefined,
        selection: Union[Union["SelectionConfig", dict], UndefinedType] = Undefined,
        square: Union[Union["MarkConfig", dict], UndefinedType] = Undefined,
        style: Union[Union["StyleConfigIndex", dict], UndefinedType] = Undefined,
        text: Union[Union["MarkConfig", dict], UndefinedType] = Undefined,
        tick: Union[Union["TickConfig", dict], UndefinedType] = Undefined,
        timeFormat: Union[str, UndefinedType] = Undefined,
        timeFormatType: Union[str, UndefinedType] = Undefined,
        title: Union[Union["TitleConfig", dict], UndefinedType] = Undefined,
        tooltipFormat: Union[Union["FormatConfig", dict], UndefinedType] = Undefined,
        trail: Union[Union["LineConfig", dict], UndefinedType] = Undefined,
        view: Union[Union["ViewConfig", dict], UndefinedType] = Undefined,
        **kwds
    ):
        super(Config, self).__init__(
            arc=arc,
            area=area,
            aria=aria,
            autosize=autosize,
            axis=axis,
            axisBand=axisBand,
            axisBottom=axisBottom,
            axisDiscrete=axisDiscrete,
            axisLeft=axisLeft,
            axisPoint=axisPoint,
            axisQuantitative=axisQuantitative,
            axisRight=axisRight,
            axisTemporal=axisTemporal,
            axisTop=axisTop,
            axisX=axisX,
            axisXBand=axisXBand,
            axisXDiscrete=axisXDiscrete,
            axisXPoint=axisXPoint,
            axisXQuantitative=axisXQuantitative,
            axisXTemporal=axisXTemporal,
            axisY=axisY,
            axisYBand=axisYBand,
            axisYDiscrete=axisYDiscrete,
            axisYPoint=axisYPoint,
            axisYQuantitative=axisYQuantitative,
            axisYTemporal=axisYTemporal,
            background=background,
            bar=bar,
            boxplot=boxplot,
            circle=circle,
            concat=concat,
            countTitle=countTitle,
            customFormatTypes=customFormatTypes,
            errorband=errorband,
            errorbar=errorbar,
            facet=facet,
            fieldTitle=fieldTitle,
            font=font,
            geoshape=geoshape,
            header=header,
            headerColumn=headerColumn,
            headerFacet=headerFacet,
            headerRow=headerRow,
            image=image,
            legend=legend,
            line=line,
            lineBreak=lineBreak,
            locale=locale,
            mark=mark,
            normalizedNumberFormat=normalizedNumberFormat,
            normalizedNumberFormatType=normalizedNumberFormatType,
            numberFormat=numberFormat,
            numberFormatType=numberFormatType,
            padding=padding,
            params=params,
            point=point,
            projection=projection,
            range=range,
            rect=rect,
            rule=rule,
            scale=scale,
            selection=selection,
            square=square,
            style=style,
            text=text,
            tick=tick,
            timeFormat=timeFormat,
            timeFormatType=timeFormatType,
            title=title,
            tooltipFormat=tooltipFormat,
            trail=trail,
            view=view,
            **kwds
        )


class Cursor(VegaLiteSchema):
    """Cursor schema wrapper

    Union[:class:`Cursor`, Literal['auto', 'default', 'none', 'context-menu', 'help', 'pointer',
    'progress', 'wait', 'cell', 'crosshair', 'text', 'vertical-text', 'alias', 'copy', 'move',
    'no-drop', 'not-allowed', 'e-resize', 'n-resize', 'ne-resize', 'nw-resize', 's-resize',
    'se-resize', 'sw-resize', 'w-resize', 'ew-resize', 'ns-resize', 'nesw-resize',
    'nwse-resize', 'col-resize', 'row-resize', 'all-scroll', 'zoom-in', 'zoom-out', 'grab',
    'grabbing']]
    """

    _schema = {"$ref": "#/definitions/Cursor"}

    def __init__(self, *args):
        super(Cursor, self).__init__(*args)


class Cyclical(ColorScheme):
    """Cyclical schema wrapper

    Union[:class:`Cyclical`, Literal['rainbow', 'sinebow']]
    """

    _schema = {"$ref": "#/definitions/Cyclical"}

    def __init__(self, *args):
        super(Cyclical, self).__init__(*args)


class Data(VegaLiteSchema):
    """Data schema wrapper

    Union[:class:`Data`, Union[:class:`DataSource`, Union[:class:`InlineData`,
    Dict[required=[values]]], Union[:class:`NamedData`, Dict[required=[name]]],
    Union[:class:`UrlData`, Dict[required=[url]]]], Union[:class:`Generator`,
    Union[:class:`GraticuleGenerator`, Dict[required=[graticule]]],
    Union[:class:`SequenceGenerator`, Dict[required=[sequence]]],
    Union[:class:`SphereGenerator`, Dict[required=[sphere]]]]]
    """

    _schema = {"$ref": "#/definitions/Data"}

    def __init__(self, *args, **kwds):
        super(Data, self).__init__(*args, **kwds)


class DataFormat(VegaLiteSchema):
    """DataFormat schema wrapper

    Union[:class:`DataFormat`, Union[:class:`CsvDataFormat`, Dict[required=[]]],
    Union[:class:`DsvDataFormat`, Dict[required=[delimiter]]], Union[:class:`JsonDataFormat`,
    Dict[required=[]]], Union[:class:`TopoDataFormat`, Dict[required=[]]]]
    """

    _schema = {"$ref": "#/definitions/DataFormat"}

    def __init__(self, *args, **kwds):
        super(DataFormat, self).__init__(*args, **kwds)


class CsvDataFormat(DataFormat):
    """CsvDataFormat schema wrapper

    Union[:class:`CsvDataFormat`, Dict[required=[]]]

    Parameters
    ----------

    parse : Union[None, Union[:class:`Parse`, Dict[required=[]]]]
        If set to ``null``, disable type inference based on the spec and only use type
        inference based on the data. Alternatively, a parsing directive object can be
        provided for explicit data types. Each property of the object corresponds to a field
        name, and the value to the desired data type (one of ``"number"``, ``"boolean"``,
        ``"date"``, or null (do not parse the field)). For example, ``"parse":
        {"modified_on": "date"}`` parses the ``modified_on`` field in each input record a
        Date value.

        For ``"date"``, we parse data based using JavaScript's `Date.parse()
        <https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/parse>`__.
        For Specific date formats can be provided (e.g., ``{foo: "date:'%m%d%Y'"}`` ), using
        the `d3-time-format syntax <https://github.com/d3/d3-time-format#locale_format>`__.
        UTC date format parsing is supported similarly (e.g., ``{foo: "utc:'%m%d%Y'"}`` ).
        See more about `UTC time
        <https://vega.github.io/vega-lite/docs/timeunit.html#utc>`__
    type : Literal['csv', 'tsv']
        Type of input data: ``"json"``, ``"csv"``, ``"tsv"``, ``"dsv"``.

        **Default value:**  The default format type is determined by the extension of the
        file URL. If no extension is detected, ``"json"`` will be used by default.
    """

    _schema = {"$ref": "#/definitions/CsvDataFormat"}

    def __init__(
        self,
        parse: Union[Union[None, Union["Parse", dict]], UndefinedType] = Undefined,
        type: Union[Literal["csv", "tsv"], UndefinedType] = Undefined,
        **kwds
    ):
        super(CsvDataFormat, self).__init__(parse=parse, type=type, **kwds)


class DataSource(Data):
    """DataSource schema wrapper

    Union[:class:`DataSource`, Union[:class:`InlineData`, Dict[required=[values]]],
    Union[:class:`NamedData`, Dict[required=[name]]], Union[:class:`UrlData`,
    Dict[required=[url]]]]
    """

    _schema = {"$ref": "#/definitions/DataSource"}

    def __init__(self, *args, **kwds):
        super(DataSource, self).__init__(*args, **kwds)


class Datasets(VegaLiteSchema):
    """Datasets schema wrapper

    Union[:class:`Datasets`, Dict[required=[]]]
    """

    _schema = {"$ref": "#/definitions/Datasets"}

    def __init__(self, **kwds):
        super(Datasets, self).__init__(**kwds)


class Day(VegaLiteSchema):
    """Day schema wrapper

    Union[:class:`Day`, float]
    """

    _schema = {"$ref": "#/definitions/Day"}

    def __init__(self, *args):
        super(Day, self).__init__(*args)


class Dict(VegaLiteSchema):
    """Dict schema wrapper

    Union[:class:`Dict`, Dict[required=[]]]
    """

    _schema = {"$ref": "#/definitions/Dict"}

    def __init__(self, **kwds):
        super(Dict, self).__init__(**kwds)


class DictInlineDataset(VegaLiteSchema):
    """DictInlineDataset schema wrapper

    Union[:class:`DictInlineDataset`, Dict[required=[]]]
    """

    _schema = {"$ref": "#/definitions/Dict<InlineDataset>"}

    def __init__(self, **kwds):
        super(DictInlineDataset, self).__init__(**kwds)


class DictSelectionInit(VegaLiteSchema):
    """DictSelectionInit schema wrapper

    Union[:class:`DictSelectionInit`, Dict[required=[]]]
    """

    _schema = {"$ref": "#/definitions/Dict<SelectionInit>"}

    def __init__(self, **kwds):
        super(DictSelectionInit, self).__init__(**kwds)


class DictSelectionInitInterval(VegaLiteSchema):
    """DictSelectionInitInterval schema wrapper

    Union[:class:`DictSelectionInitInterval`, Dict[required=[]]]
    """

    _schema = {"$ref": "#/definitions/Dict<SelectionInitInterval>"}

    def __init__(self, **kwds):
        super(DictSelectionInitInterval, self).__init__(**kwds)


class Diverging(ColorScheme):
    """Diverging schema wrapper

    Union[:class:`Diverging`, Literal['blueorange', 'blueorange-3', 'blueorange-4',
    'blueorange-5', 'blueorange-6', 'blueorange-7', 'blueorange-8', 'blueorange-9',
    'blueorange-10', 'blueorange-11', 'brownbluegreen', 'brownbluegreen-3', 'brownbluegreen-4',
    'brownbluegreen-5', 'brownbluegreen-6', 'brownbluegreen-7', 'brownbluegreen-8',
    'brownbluegreen-9', 'brownbluegreen-10', 'brownbluegreen-11', 'purplegreen',
    'purplegreen-3', 'purplegreen-4', 'purplegreen-5', 'purplegreen-6', 'purplegreen-7',
    'purplegreen-8', 'purplegreen-9', 'purplegreen-10', 'purplegreen-11', 'pinkyellowgreen',
    'pinkyellowgreen-3', 'pinkyellowgreen-4', 'pinkyellowgreen-5', 'pinkyellowgreen-6',
    'pinkyellowgreen-7', 'pinkyellowgreen-8', 'pinkyellowgreen-9', 'pinkyellowgreen-10',
    'pinkyellowgreen-11', 'purpleorange', 'purpleorange-3', 'purpleorange-4', 'purpleorange-5',
    'purpleorange-6', 'purpleorange-7', 'purpleorange-8', 'purpleorange-9', 'purpleorange-10',
    'purpleorange-11', 'redblue', 'redblue-3', 'redblue-4', 'redblue-5', 'redblue-6',
    'redblue-7', 'redblue-8', 'redblue-9', 'redblue-10', 'redblue-11', 'redgrey', 'redgrey-3',
    'redgrey-4', 'redgrey-5', 'redgrey-6', 'redgrey-7', 'redgrey-8', 'redgrey-9', 'redgrey-10',
    'redgrey-11', 'redyellowblue', 'redyellowblue-3', 'redyellowblue-4', 'redyellowblue-5',
    'redyellowblue-6', 'redyellowblue-7', 'redyellowblue-8', 'redyellowblue-9',
    'redyellowblue-10', 'redyellowblue-11', 'redyellowgreen', 'redyellowgreen-3',
    'redyellowgreen-4', 'redyellowgreen-5', 'redyellowgreen-6', 'redyellowgreen-7',
    'redyellowgreen-8', 'redyellowgreen-9', 'redyellowgreen-10', 'redyellowgreen-11',
    'spectral', 'spectral-3', 'spectral-4', 'spectral-5', 'spectral-6', 'spectral-7',
    'spectral-8', 'spectral-9', 'spectral-10', 'spectral-11']]
    """

    _schema = {"$ref": "#/definitions/Diverging"}

    def __init__(self, *args):
        super(Diverging, self).__init__(*args)


class DomainUnionWith(VegaLiteSchema):
    """DomainUnionWith schema wrapper

    Union[:class:`DomainUnionWith`, Dict[required=[unionWith]]]

    Parameters
    ----------

    unionWith : Union[List[Union[:class:`DateTime`, Dict[required=[]]]], List[bool], List[float], List[str]]
        Customized domain values to be union with the field's values or explicitly defined
        domain. Should be an array of valid scale domain values.
    """

    _schema = {"$ref": "#/definitions/DomainUnionWith"}

    def __init__(
        self,
        unionWith: Union[
            Union[
                List[bool], List[float], List[str], Union[List["DateTime"], List[dict]]
            ],
            UndefinedType,
        ] = Undefined,
        **kwds
    ):
        super(DomainUnionWith, self).__init__(unionWith=unionWith, **kwds)


class DsvDataFormat(DataFormat):
    """DsvDataFormat schema wrapper

    Union[:class:`DsvDataFormat`, Dict[required=[delimiter]]]

    Parameters
    ----------

    delimiter : str
        The delimiter between records. The delimiter must be a single character (i.e., a
        single 16-bit code unit); so, ASCII delimiters are fine, but emoji delimiters are
        not.
    parse : Union[None, Union[:class:`Parse`, Dict[required=[]]]]
        If set to ``null``, disable type inference based on the spec and only use type
        inference based on the data. Alternatively, a parsing directive object can be
        provided for explicit data types. Each property of the object corresponds to a field
        name, and the value to the desired data type (one of ``"number"``, ``"boolean"``,
        ``"date"``, or null (do not parse the field)). For example, ``"parse":
        {"modified_on": "date"}`` parses the ``modified_on`` field in each input record a
        Date value.

        For ``"date"``, we parse data based using JavaScript's `Date.parse()
        <https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/parse>`__.
        For Specific date formats can be provided (e.g., ``{foo: "date:'%m%d%Y'"}`` ), using
        the `d3-time-format syntax <https://github.com/d3/d3-time-format#locale_format>`__.
        UTC date format parsing is supported similarly (e.g., ``{foo: "utc:'%m%d%Y'"}`` ).
        See more about `UTC time
        <https://vega.github.io/vega-lite/docs/timeunit.html#utc>`__
    type : str
        Type of input data: ``"json"``, ``"csv"``, ``"tsv"``, ``"dsv"``.

        **Default value:**  The default format type is determined by the extension of the
        file URL. If no extension is detected, ``"json"`` will be used by default.
    """

    _schema = {"$ref": "#/definitions/DsvDataFormat"}

    def __init__(
        self,
        delimiter: Union[str, UndefinedType] = Undefined,
        parse: Union[Union[None, Union["Parse", dict]], UndefinedType] = Undefined,
        type: Union[str, UndefinedType] = Undefined,
        **kwds
    ):
        super(DsvDataFormat, self).__init__(
            delimiter=delimiter, parse=parse, type=type, **kwds
        )


class Element(VegaLiteSchema):
    """Element schema wrapper

    Union[:class:`Element`, str]
    """

    _schema = {"$ref": "#/definitions/Element"}

    def __init__(self, *args):
        super(Element, self).__init__(*args)


class Encoding(VegaLiteSchema):
    """Encoding schema wrapper

    Union[:class:`Encoding`, Dict[required=[]]]

    Parameters
    ----------

    angle : Union[:class:`NumericMarkPropDef`, Union[:class:`FieldOrDatumDefWithConditionDatumDefnumber`, Dict[required=[]]], Union[:class:`FieldOrDatumDefWithConditionMarkPropFieldDefnumber`, Dict[required=[]]], Union[:class:`ValueDefWithConditionMarkPropFieldOrDatumDefnumber`, Dict[required=[]]]]
        Rotation angle of point and text marks.
    color : Union[:class:`ColorDef`, Union[:class:`FieldOrDatumDefWithConditionDatumDefGradientstringnull`, Dict[required=[]]], Union[:class:`FieldOrDatumDefWithConditionMarkPropFieldDefGradientstringnull`, Dict[required=[]]], Union[:class:`ValueDefWithConditionMarkPropFieldOrDatumDefGradientstringnull`, Dict[required=[]]]]
        Color of the marks – either fill or stroke color based on  the ``filled`` property
        of mark definition. By default, ``color`` represents fill color for ``"area"``,
        ``"bar"``, ``"tick"``, ``"text"``, ``"trail"``, ``"circle"``, and ``"square"`` /
        stroke color for ``"line"`` and ``"point"``.

        **Default value:** If undefined, the default color depends on `mark config
        <https://vega.github.io/vega-lite/docs/config.html#mark-config>`__ 's ``color``
        property.

        *Note:* 1) For fine-grained control over both fill and stroke colors of the marks,
        please use the ``fill`` and ``stroke`` channels. The ``fill`` or ``stroke``
        encodings have higher precedence than ``color``, thus may override the ``color``
        encoding if conflicting encodings are specified. 2) See the scale documentation for
        more information about customizing `color scheme
        <https://vega.github.io/vega-lite/docs/scale.html#scheme>`__.
    description : Union[Union[:class:`StringFieldDefWithCondition`, Dict[required=[]]], Union[:class:`StringValueDefWithCondition`, Dict[required=[]]]]
        A text description of this mark for ARIA accessibility (SVG output only). For SVG
        output the ``"aria-label"`` attribute will be set to this description.
    detail : Union[List[Union[:class:`FieldDefWithoutScale`, Dict[required=[]]]], Union[:class:`FieldDefWithoutScale`, Dict[required=[]]]]
        Additional levels of detail for grouping data in aggregate views and in line, trail,
        and area marks without mapping data to a specific visual channel.
    fill : Union[:class:`ColorDef`, Union[:class:`FieldOrDatumDefWithConditionDatumDefGradientstringnull`, Dict[required=[]]], Union[:class:`FieldOrDatumDefWithConditionMarkPropFieldDefGradientstringnull`, Dict[required=[]]], Union[:class:`ValueDefWithConditionMarkPropFieldOrDatumDefGradientstringnull`, Dict[required=[]]]]
        Fill color of the marks. **Default value:** If undefined, the default color depends
        on `mark config <https://vega.github.io/vega-lite/docs/config.html#mark-config>`__
        's ``color`` property.

        *Note:* The ``fill`` encoding has higher precedence than ``color``, thus may
        override the ``color`` encoding if conflicting encodings are specified.
    fillOpacity : Union[:class:`NumericMarkPropDef`, Union[:class:`FieldOrDatumDefWithConditionDatumDefnumber`, Dict[required=[]]], Union[:class:`FieldOrDatumDefWithConditionMarkPropFieldDefnumber`, Dict[required=[]]], Union[:class:`ValueDefWithConditionMarkPropFieldOrDatumDefnumber`, Dict[required=[]]]]
        Fill opacity of the marks.

        **Default value:** If undefined, the default opacity depends on `mark config
        <https://vega.github.io/vega-lite/docs/config.html#mark-config>`__ 's
        ``fillOpacity`` property.
    href : Union[Union[:class:`StringFieldDefWithCondition`, Dict[required=[]]], Union[:class:`StringValueDefWithCondition`, Dict[required=[]]]]
        A URL to load upon mouse click.
    key : Union[:class:`FieldDefWithoutScale`, Dict[required=[]]]
        A data field to use as a unique key for data binding. When a visualization’s data is
        updated, the key value will be used to match data elements to existing mark
        instances. Use a key channel to enable object constancy for transitions over dynamic
        data.
    latitude : Union[:class:`LatLongDef`, Union[:class:`DatumDef`, Dict[required=[]]], Union[:class:`LatLongFieldDef`, Dict[required=[]]]]
        Latitude position of geographically projected marks.
    latitude2 : Union[:class:`Position2Def`, Union[:class:`DatumDef`, Dict[required=[]]], Union[:class:`PositionValueDef`, Dict[required=[value]]], Union[:class:`SecondaryFieldDef`, Dict[required=[]]]]
        Latitude-2 position for geographically projected ranged ``"area"``, ``"bar"``,
        ``"rect"``, and  ``"rule"``.
    longitude : Union[:class:`LatLongDef`, Union[:class:`DatumDef`, Dict[required=[]]], Union[:class:`LatLongFieldDef`, Dict[required=[]]]]
        Longitude position of geographically projected marks.
    longitude2 : Union[:class:`Position2Def`, Union[:class:`DatumDef`, Dict[required=[]]], Union[:class:`PositionValueDef`, Dict[required=[value]]], Union[:class:`SecondaryFieldDef`, Dict[required=[]]]]
        Longitude-2 position for geographically projected ranged ``"area"``, ``"bar"``,
        ``"rect"``, and  ``"rule"``.
    opacity : Union[:class:`NumericMarkPropDef`, Union[:class:`FieldOrDatumDefWithConditionDatumDefnumber`, Dict[required=[]]], Union[:class:`FieldOrDatumDefWithConditionMarkPropFieldDefnumber`, Dict[required=[]]], Union[:class:`ValueDefWithConditionMarkPropFieldOrDatumDefnumber`, Dict[required=[]]]]
        Opacity of the marks.

        **Default value:** If undefined, the default opacity depends on `mark config
        <https://vega.github.io/vega-lite/docs/config.html#mark-config>`__ 's ``opacity``
        property.
    order : Union[List[Union[:class:`OrderFieldDef`, Dict[required=[]]]], Union[:class:`OrderFieldDef`, Dict[required=[]]], Union[:class:`OrderOnlyDef`, Dict[required=[]]], Union[:class:`OrderValueDef`, Dict[required=[value]]]]
        Order of the marks.


        * For stacked marks, this ``order`` channel encodes `stack order
          <https://vega.github.io/vega-lite/docs/stack.html#order>`__.
        * For line and trail marks, this ``order`` channel encodes order of data points in
          the lines. This can be useful for creating `a connected scatterplot
          <https://vega.github.io/vega-lite/examples/connected_scatterplot.html>`__. Setting
          ``order`` to ``{"value": null}`` makes the line marks use the original order in
          the data sources.
        * Otherwise, this ``order`` channel encodes layer order of the marks.

        **Note** : In aggregate plots, ``order`` field should be ``aggregate`` d to avoid
        creating additional aggregation grouping.
    radius : Union[:class:`PolarDef`, Union[:class:`PositionDatumDefBase`, Dict[required=[]]], Union[:class:`PositionFieldDefBase`, Dict[required=[]]], Union[:class:`PositionValueDef`, Dict[required=[value]]]]
        The outer radius in pixels of arc marks.
    radius2 : Union[:class:`Position2Def`, Union[:class:`DatumDef`, Dict[required=[]]], Union[:class:`PositionValueDef`, Dict[required=[value]]], Union[:class:`SecondaryFieldDef`, Dict[required=[]]]]
        The inner radius in pixels of arc marks.
    shape : Union[:class:`ShapeDef`, Union[:class:`FieldOrDatumDefWithConditionDatumDefstringnull`, Dict[required=[]]], Union[:class:`FieldOrDatumDefWithConditionMarkPropFieldDefTypeForShapestringnull`, Dict[required=[]]], Union[:class:`ValueDefWithConditionMarkPropFieldOrDatumDefTypeForShapestringnull`, Dict[required=[]]]]
        Shape of the mark.


        #.
        For ``point`` marks the supported values include:   - plotting shapes: ``"circle"``,
        ``"square"``, ``"cross"``, ``"diamond"``, ``"triangle-up"``, ``"triangle-down"``,
        ``"triangle-right"``, or ``"triangle-left"``.   - the line symbol ``"stroke"``   -
        centered directional shapes ``"arrow"``, ``"wedge"``, or ``"triangle"``   - a custom
        `SVG path string
        <https://developer.mozilla.org/en-US/docs/Web/SVG/Tutorial/Paths>`__ (For correct
        sizing, custom shape paths should be defined within a square bounding box with
        coordinates ranging from -1 to 1 along both the x and y dimensions.)

        #.
        For ``geoshape`` marks it should be a field definition of the geojson data

        **Default value:** If undefined, the default shape depends on `mark config
        <https://vega.github.io/vega-lite/docs/config.html#point-config>`__ 's ``shape``
        property. ( ``"circle"`` if unset.)
    size : Union[:class:`NumericMarkPropDef`, Union[:class:`FieldOrDatumDefWithConditionDatumDefnumber`, Dict[required=[]]], Union[:class:`FieldOrDatumDefWithConditionMarkPropFieldDefnumber`, Dict[required=[]]], Union[:class:`ValueDefWithConditionMarkPropFieldOrDatumDefnumber`, Dict[required=[]]]]
        Size of the mark.


        * For ``"point"``, ``"square"`` and ``"circle"``, – the symbol size, or pixel area
          of the mark.
        * For ``"bar"`` and ``"tick"`` – the bar and tick's size.
        * For ``"text"`` – the text's font size.
        * Size is unsupported for ``"line"``, ``"area"``, and ``"rect"``. (Use ``"trail"``
          instead of line with varying size)
    stroke : Union[:class:`ColorDef`, Union[:class:`FieldOrDatumDefWithConditionDatumDefGradientstringnull`, Dict[required=[]]], Union[:class:`FieldOrDatumDefWithConditionMarkPropFieldDefGradientstringnull`, Dict[required=[]]], Union[:class:`ValueDefWithConditionMarkPropFieldOrDatumDefGradientstringnull`, Dict[required=[]]]]
        Stroke color of the marks. **Default value:** If undefined, the default color
        depends on `mark config
        <https://vega.github.io/vega-lite/docs/config.html#mark-config>`__ 's ``color``
        property.

        *Note:* The ``stroke`` encoding has higher precedence than ``color``, thus may
        override the ``color`` encoding if conflicting encodings are specified.
    strokeDash : Union[:class:`NumericArrayMarkPropDef`, Union[:class:`FieldOrDatumDefWithConditionDatumDefnumberArray`, Dict[required=[]]], Union[:class:`FieldOrDatumDefWithConditionMarkPropFieldDefnumberArray`, Dict[required=[]]], Union[:class:`ValueDefWithConditionMarkPropFieldOrDatumDefnumberArray`, Dict[required=[]]]]
        Stroke dash of the marks.

        **Default value:** ``[1,0]`` (No dash).
    strokeOpacity : Union[:class:`NumericMarkPropDef`, Union[:class:`FieldOrDatumDefWithConditionDatumDefnumber`, Dict[required=[]]], Union[:class:`FieldOrDatumDefWithConditionMarkPropFieldDefnumber`, Dict[required=[]]], Union[:class:`ValueDefWithConditionMarkPropFieldOrDatumDefnumber`, Dict[required=[]]]]
        Stroke opacity of the marks.

        **Default value:** If undefined, the default opacity depends on `mark config
        <https://vega.github.io/vega-lite/docs/config.html#mark-config>`__ 's
        ``strokeOpacity`` property.
    strokeWidth : Union[:class:`NumericMarkPropDef`, Union[:class:`FieldOrDatumDefWithConditionDatumDefnumber`, Dict[required=[]]], Union[:class:`FieldOrDatumDefWithConditionMarkPropFieldDefnumber`, Dict[required=[]]], Union[:class:`ValueDefWithConditionMarkPropFieldOrDatumDefnumber`, Dict[required=[]]]]
        Stroke width of the marks.

        **Default value:** If undefined, the default stroke width depends on `mark config
        <https://vega.github.io/vega-lite/docs/config.html#mark-config>`__ 's
        ``strokeWidth`` property.
    text : Union[:class:`TextDef`, Union[:class:`FieldOrDatumDefWithConditionStringDatumDefText`, Dict[required=[]]], Union[:class:`FieldOrDatumDefWithConditionStringFieldDefText`, Dict[required=[]]], Union[:class:`ValueDefWithConditionStringFieldDefText`, Dict[required=[]]]]
        Text of the ``text`` mark.
    theta : Union[:class:`PolarDef`, Union[:class:`PositionDatumDefBase`, Dict[required=[]]], Union[:class:`PositionFieldDefBase`, Dict[required=[]]], Union[:class:`PositionValueDef`, Dict[required=[value]]]]
        For arc marks, the arc length in radians if theta2 is not specified, otherwise the
        start arc angle. (A value of 0 indicates up or “north”, increasing values proceed
        clockwise.)

        For text marks, polar coordinate angle in radians.
    theta2 : Union[:class:`Position2Def`, Union[:class:`DatumDef`, Dict[required=[]]], Union[:class:`PositionValueDef`, Dict[required=[value]]], Union[:class:`SecondaryFieldDef`, Dict[required=[]]]]
        The end angle of arc marks in radians. A value of 0 indicates up or “north”,
        increasing values proceed clockwise.
    tooltip : Union[List[Union[:class:`StringFieldDef`, Dict[required=[]]]], None, Union[:class:`StringFieldDefWithCondition`, Dict[required=[]]], Union[:class:`StringValueDefWithCondition`, Dict[required=[]]]]
        The tooltip text to show upon mouse hover. Specifying ``tooltip`` encoding overrides
        `the tooltip property in the mark definition
        <https://vega.github.io/vega-lite/docs/mark.html#mark-def>`__.

        See the `tooltip <https://vega.github.io/vega-lite/docs/tooltip.html>`__
        documentation for a detailed discussion about tooltip in Vega-Lite.
    url : Union[Union[:class:`StringFieldDefWithCondition`, Dict[required=[]]], Union[:class:`StringValueDefWithCondition`, Dict[required=[]]]]
        The URL of an image mark.
    x : Union[:class:`PositionDef`, Union[:class:`PositionDatumDef`, Dict[required=[]]], Union[:class:`PositionFieldDef`, Dict[required=[]]], Union[:class:`PositionValueDef`, Dict[required=[value]]]]
        X coordinates of the marks, or width of horizontal ``"bar"`` and ``"area"`` without
        specified ``x2`` or ``width``.

        The ``value`` of this channel can be a number or a string ``"width"`` for the width
        of the plot.
    x2 : Union[:class:`Position2Def`, Union[:class:`DatumDef`, Dict[required=[]]], Union[:class:`PositionValueDef`, Dict[required=[value]]], Union[:class:`SecondaryFieldDef`, Dict[required=[]]]]
        X2 coordinates for ranged ``"area"``, ``"bar"``, ``"rect"``, and  ``"rule"``.

        The ``value`` of this channel can be a number or a string ``"width"`` for the width
        of the plot.
    xError : Union[Union[:class:`SecondaryFieldDef`, Dict[required=[]]], Union[:class:`ValueDefnumber`, Dict[required=[value]]]]
        Error value of x coordinates for error specified ``"errorbar"`` and ``"errorband"``.
    xError2 : Union[Union[:class:`SecondaryFieldDef`, Dict[required=[]]], Union[:class:`ValueDefnumber`, Dict[required=[value]]]]
        Secondary error value of x coordinates for error specified ``"errorbar"`` and
        ``"errorband"``.
    xOffset : Union[:class:`OffsetDef`, Union[:class:`ScaleDatumDef`, Dict[required=[]]], Union[:class:`ScaleFieldDef`, Dict[required=[]]], Union[:class:`ValueDefnumber`, Dict[required=[value]]]]
        Offset of x-position of the marks
    y : Union[:class:`PositionDef`, Union[:class:`PositionDatumDef`, Dict[required=[]]], Union[:class:`PositionFieldDef`, Dict[required=[]]], Union[:class:`PositionValueDef`, Dict[required=[value]]]]
        Y coordinates of the marks, or height of vertical ``"bar"`` and ``"area"`` without
        specified ``y2`` or ``height``.

        The ``value`` of this channel can be a number or a string ``"height"`` for the
        height of the plot.
    y2 : Union[:class:`Position2Def`, Union[:class:`DatumDef`, Dict[required=[]]], Union[:class:`PositionValueDef`, Dict[required=[value]]], Union[:class:`SecondaryFieldDef`, Dict[required=[]]]]
        Y2 coordinates for ranged ``"area"``, ``"bar"``, ``"rect"``, and  ``"rule"``.

        The ``value`` of this channel can be a number or a string ``"height"`` for the
        height of the plot.
    yError : Union[Union[:class:`SecondaryFieldDef`, Dict[required=[]]], Union[:class:`ValueDefnumber`, Dict[required=[value]]]]
        Error value of y coordinates for error specified ``"errorbar"`` and ``"errorband"``.
    yError2 : Union[Union[:class:`SecondaryFieldDef`, Dict[required=[]]], Union[:class:`ValueDefnumber`, Dict[required=[value]]]]
        Secondary error value of y coordinates for error specified ``"errorbar"`` and
        ``"errorband"``.
    yOffset : Union[:class:`OffsetDef`, Union[:class:`ScaleDatumDef`, Dict[required=[]]], Union[:class:`ScaleFieldDef`, Dict[required=[]]], Union[:class:`ValueDefnumber`, Dict[required=[value]]]]
        Offset of y-position of the marks
    """

    _schema = {"$ref": "#/definitions/Encoding"}

    def __init__(
        self,
        angle: Union[
            Union[
                "NumericMarkPropDef",
                Union["FieldOrDatumDefWithConditionDatumDefnumber", dict],
                Union["FieldOrDatumDefWithConditionMarkPropFieldDefnumber", dict],
                Union["ValueDefWithConditionMarkPropFieldOrDatumDefnumber", dict],
            ],
            UndefinedType,
        ] = Undefined,
        color: Union[
            Union[
                "ColorDef",
                Union["FieldOrDatumDefWithConditionDatumDefGradientstringnull", dict],
                Union[
                    "FieldOrDatumDefWithConditionMarkPropFieldDefGradientstringnull",
                    dict,
                ],
                Union[
                    "ValueDefWithConditionMarkPropFieldOrDatumDefGradientstringnull",
                    dict,
                ],
            ],
            UndefinedType,
        ] = Undefined,
        description: Union[
            Union[
                Union["StringFieldDefWithCondition", dict],
                Union["StringValueDefWithCondition", dict],
            ],
            UndefinedType,
        ] = Undefined,
        detail: Union[
            Union[
                Union["FieldDefWithoutScale", dict],
                Union[List["FieldDefWithoutScale"], List[dict]],
            ],
            UndefinedType,
        ] = Undefined,
        fill: Union[
            Union[
                "ColorDef",
                Union["FieldOrDatumDefWithConditionDatumDefGradientstringnull", dict],
                Union[
                    "FieldOrDatumDefWithConditionMarkPropFieldDefGradientstringnull",
                    dict,
                ],
                Union[
                    "ValueDefWithConditionMarkPropFieldOrDatumDefGradientstringnull",
                    dict,
                ],
            ],
            UndefinedType,
        ] = Undefined,
        fillOpacity: Union[
            Union[
                "NumericMarkPropDef",
                Union["FieldOrDatumDefWithConditionDatumDefnumber", dict],
                Union["FieldOrDatumDefWithConditionMarkPropFieldDefnumber", dict],
                Union["ValueDefWithConditionMarkPropFieldOrDatumDefnumber", dict],
            ],
            UndefinedType,
        ] = Undefined,
        href: Union[
            Union[
                Union["StringFieldDefWithCondition", dict],
                Union["StringValueDefWithCondition", dict],
            ],
            UndefinedType,
        ] = Undefined,
        key: Union[Union["FieldDefWithoutScale", dict], UndefinedType] = Undefined,
        latitude: Union[
            Union[
                "LatLongDef", Union["DatumDef", dict], Union["LatLongFieldDef", dict]
            ],
            UndefinedType,
        ] = Undefined,
        latitude2: Union[
            Union[
                "Position2Def",
                Union["DatumDef", dict],
                Union["PositionValueDef", dict],
                Union["SecondaryFieldDef", dict],
            ],
            UndefinedType,
        ] = Undefined,
        longitude: Union[
            Union[
                "LatLongDef", Union["DatumDef", dict], Union["LatLongFieldDef", dict]
            ],
            UndefinedType,
        ] = Undefined,
        longitude2: Union[
            Union[
                "Position2Def",
                Union["DatumDef", dict],
                Union["PositionValueDef", dict],
                Union["SecondaryFieldDef", dict],
            ],
            UndefinedType,
        ] = Undefined,
        opacity: Union[
            Union[
                "NumericMarkPropDef",
                Union["FieldOrDatumDefWithConditionDatumDefnumber", dict],
                Union["FieldOrDatumDefWithConditionMarkPropFieldDefnumber", dict],
                Union["ValueDefWithConditionMarkPropFieldOrDatumDefnumber", dict],
            ],
            UndefinedType,
        ] = Undefined,
        order: Union[
            Union[
                Union["OrderFieldDef", dict],
                Union["OrderOnlyDef", dict],
                Union["OrderValueDef", dict],
                Union[List["OrderFieldDef"], List[dict]],
            ],
            UndefinedType,
        ] = Undefined,
        radius: Union[
            Union[
                "PolarDef",
                Union["PositionDatumDefBase", dict],
                Union["PositionFieldDefBase", dict],
                Union["PositionValueDef", dict],
            ],
            UndefinedType,
        ] = Undefined,
        radius2: Union[
            Union[
                "Position2Def",
                Union["DatumDef", dict],
                Union["PositionValueDef", dict],
                Union["SecondaryFieldDef", dict],
            ],
            UndefinedType,
        ] = Undefined,
        shape: Union[
            Union[
                "ShapeDef",
                Union["FieldOrDatumDefWithConditionDatumDefstringnull", dict],
                Union[
                    "FieldOrDatumDefWithConditionMarkPropFieldDefTypeForShapestringnull",
                    dict,
                ],
                Union[
                    "ValueDefWithConditionMarkPropFieldOrDatumDefTypeForShapestringnull",
                    dict,
                ],
            ],
            UndefinedType,
        ] = Undefined,
        size: Union[
            Union[
                "NumericMarkPropDef",
                Union["FieldOrDatumDefWithConditionDatumDefnumber", dict],
                Union["FieldOrDatumDefWithConditionMarkPropFieldDefnumber", dict],
                Union["ValueDefWithConditionMarkPropFieldOrDatumDefnumber", dict],
            ],
            UndefinedType,
        ] = Undefined,
        stroke: Union[
            Union[
                "ColorDef",
                Union["FieldOrDatumDefWithConditionDatumDefGradientstringnull", dict],
                Union[
                    "FieldOrDatumDefWithConditionMarkPropFieldDefGradientstringnull",
                    dict,
                ],
                Union[
                    "ValueDefWithConditionMarkPropFieldOrDatumDefGradientstringnull",
                    dict,
                ],
            ],
            UndefinedType,
        ] = Undefined,
        strokeDash: Union[
            Union[
                "NumericArrayMarkPropDef",
                Union["FieldOrDatumDefWithConditionDatumDefnumberArray", dict],
                Union["FieldOrDatumDefWithConditionMarkPropFieldDefnumberArray", dict],
                Union["ValueDefWithConditionMarkPropFieldOrDatumDefnumberArray", dict],
            ],
            UndefinedType,
        ] = Undefined,
        strokeOpacity: Union[
            Union[
                "NumericMarkPropDef",
                Union["FieldOrDatumDefWithConditionDatumDefnumber", dict],
                Union["FieldOrDatumDefWithConditionMarkPropFieldDefnumber", dict],
                Union["ValueDefWithConditionMarkPropFieldOrDatumDefnumber", dict],
            ],
            UndefinedType,
        ] = Undefined,
        strokeWidth: Union[
            Union[
                "NumericMarkPropDef",
                Union["FieldOrDatumDefWithConditionDatumDefnumber", dict],
                Union["FieldOrDatumDefWithConditionMarkPropFieldDefnumber", dict],
                Union["ValueDefWithConditionMarkPropFieldOrDatumDefnumber", dict],
            ],
            UndefinedType,
        ] = Undefined,
        text: Union[
            Union[
                "TextDef",
                Union["FieldOrDatumDefWithConditionStringDatumDefText", dict],
                Union["FieldOrDatumDefWithConditionStringFieldDefText", dict],
                Union["ValueDefWithConditionStringFieldDefText", dict],
            ],
            UndefinedType,
        ] = Undefined,
        theta: Union[
            Union[
                "PolarDef",
                Union["PositionDatumDefBase", dict],
                Union["PositionFieldDefBase", dict],
                Union["PositionValueDef", dict],
            ],
            UndefinedType,
        ] = Undefined,
        theta2: Union[
            Union[
                "Position2Def",
                Union["DatumDef", dict],
                Union["PositionValueDef", dict],
                Union["SecondaryFieldDef", dict],
            ],
            UndefinedType,
        ] = Undefined,
        tooltip: Union[
            Union[
                None,
                Union["StringFieldDefWithCondition", dict],
                Union["StringValueDefWithCondition", dict],
                Union[List["StringFieldDef"], List[dict]],
            ],
            UndefinedType,
        ] = Undefined,
        url: Union[
            Union[
                Union["StringFieldDefWithCondition", dict],
                Union["StringValueDefWithCondition", dict],
            ],
            UndefinedType,
        ] = Undefined,
        x: Union[
            Union[
                "PositionDef",
                Union["PositionDatumDef", dict],
                Union["PositionFieldDef", dict],
                Union["PositionValueDef", dict],
            ],
            UndefinedType,
        ] = Undefined,
        x2: Union[
            Union[
                "Position2Def",
                Union["DatumDef", dict],
                Union["PositionValueDef", dict],
                Union["SecondaryFieldDef", dict],
            ],
            UndefinedType,
        ] = Undefined,
        xError: Union[
            Union[Union["SecondaryFieldDef", dict], Union["ValueDefnumber", dict]],
            UndefinedType,
        ] = Undefined,
        xError2: Union[
            Union[Union["SecondaryFieldDef", dict], Union["ValueDefnumber", dict]],
            UndefinedType,
        ] = Undefined,
        xOffset: Union[
            Union[
                "OffsetDef",
                Union["ScaleDatumDef", dict],
                Union["ScaleFieldDef", dict],
                Union["ValueDefnumber", dict],
            ],
            UndefinedType,
        ] = Undefined,
        y: Union[
            Union[
                "PositionDef",
                Union["PositionDatumDef", dict],
                Union["PositionFieldDef", dict],
                Union["PositionValueDef", dict],
            ],
            UndefinedType,
        ] = Undefined,
        y2: Union[
            Union[
                "Position2Def",
                Union["DatumDef", dict],
                Union["PositionValueDef", dict],
                Union["SecondaryFieldDef", dict],
            ],
            UndefinedType,
        ] = Undefined,
        yError: Union[
            Union[Union["SecondaryFieldDef", dict], Union["ValueDefnumber", dict]],
            UndefinedType,
        ] = Undefined,
        yError2: Union[
            Union[Union["SecondaryFieldDef", dict], Union["ValueDefnumber", dict]],
            UndefinedType,
        ] = Undefined,
        yOffset: Union[
            Union[
                "OffsetDef",
                Union["ScaleDatumDef", dict],
                Union["ScaleFieldDef", dict],
                Union["ValueDefnumber", dict],
            ],
            UndefinedType,
        ] = Undefined,
        **kwds
    ):
        super(Encoding, self).__init__(
            angle=angle,
            color=color,
            description=description,
            detail=detail,
            fill=fill,
            fillOpacity=fillOpacity,
            href=href,
            key=key,
            latitude=latitude,
            latitude2=latitude2,
            longitude=longitude,
            longitude2=longitude2,
            opacity=opacity,
            order=order,
            radius=radius,
            radius2=radius2,
            shape=shape,
            size=size,
            stroke=stroke,
            strokeDash=strokeDash,
            strokeOpacity=strokeOpacity,
            strokeWidth=strokeWidth,
            text=text,
            theta=theta,
            theta2=theta2,
            tooltip=tooltip,
            url=url,
            x=x,
            x2=x2,
            xError=xError,
            xError2=xError2,
            xOffset=xOffset,
            y=y,
            y2=y2,
            yError=yError,
            yError2=yError2,
            yOffset=yOffset,
            **kwds
        )


class ErrorBand(CompositeMark):
    """ErrorBand schema wrapper

    Union[:class:`ErrorBand`, str]
    """

    _schema = {"$ref": "#/definitions/ErrorBand"}

    def __init__(self, *args):
        super(ErrorBand, self).__init__(*args)


class ErrorBandConfig(VegaLiteSchema):
    """ErrorBandConfig schema wrapper

    Union[:class:`ErrorBandConfig`, Dict[required=[]]]

    Parameters
    ----------

    band : Union[Union[:class:`AnyMarkConfig`, Union[:class:`AreaConfig`, Dict[required=[]]], Union[:class:`BarConfig`, Dict[required=[]]], Union[:class:`LineConfig`, Dict[required=[]]], Union[:class:`MarkConfig`, Dict[required=[]]], Union[:class:`RectConfig`, Dict[required=[]]], Union[:class:`TickConfig`, Dict[required=[]]]], bool]

    borders : Union[Union[:class:`AnyMarkConfig`, Union[:class:`AreaConfig`, Dict[required=[]]], Union[:class:`BarConfig`, Dict[required=[]]], Union[:class:`LineConfig`, Dict[required=[]]], Union[:class:`MarkConfig`, Dict[required=[]]], Union[:class:`RectConfig`, Dict[required=[]]], Union[:class:`TickConfig`, Dict[required=[]]]], bool]

    extent : Union[:class:`ErrorBarExtent`, Literal['ci', 'iqr', 'stderr', 'stdev']]
        The extent of the band. Available options include:


        * ``"ci"`` : Extend the band to the confidence interval of the mean.
        * ``"stderr"`` : The size of band are set to the value of standard error, extending
          from the mean.
        * ``"stdev"`` : The size of band are set to the value of standard deviation,
          extending from the mean.
        * ``"iqr"`` : Extend the band to the q1 and q3.

        **Default value:** ``"stderr"``.
    interpolate : Union[:class:`Interpolate`, Literal['basis', 'basis-open', 'basis-closed', 'bundle', 'cardinal', 'cardinal-open', 'cardinal-closed', 'catmull-rom', 'linear', 'linear-closed', 'monotone', 'natural', 'step', 'step-before', 'step-after']]
        The line interpolation method for the error band. One of the following:


        * ``"linear"`` : piecewise linear segments, as in a polyline.
        * ``"linear-closed"`` : close the linear segments to form a polygon.
        * ``"step"`` : a piecewise constant function (a step function) consisting of
          alternating horizontal and vertical lines. The y-value changes at the midpoint of
          each pair of adjacent x-values.
        * ``"step-before"`` : a piecewise constant function (a step function) consisting of
          alternating horizontal and vertical lines. The y-value changes before the x-value.
        * ``"step-after"`` : a piecewise constant function (a step function) consisting of
          alternating horizontal and vertical lines. The y-value changes after the x-value.
        * ``"basis"`` : a B-spline, with control point duplication on the ends.
        * ``"basis-open"`` : an open B-spline; may not intersect the start or end.
        * ``"basis-closed"`` : a closed B-spline, as in a loop.
        * ``"cardinal"`` : a Cardinal spline, with control point duplication on the ends.
        * ``"cardinal-open"`` : an open Cardinal spline; may not intersect the start or end,
          but will intersect other control points.
        * ``"cardinal-closed"`` : a closed Cardinal spline, as in a loop.
        * ``"bundle"`` : equivalent to basis, except the tension parameter is used to
          straighten the spline.
        * ``"monotone"`` : cubic interpolation that preserves monotonicity in y.
    tension : float
        The tension parameter for the interpolation type of the error band.
    """

    _schema = {"$ref": "#/definitions/ErrorBandConfig"}

    def __init__(
        self,
        band: Union[
            Union[
                Union[
                    "AnyMarkConfig",
                    Union["AreaConfig", dict],
                    Union["BarConfig", dict],
                    Union["LineConfig", dict],
                    Union["MarkConfig", dict],
                    Union["RectConfig", dict],
                    Union["TickConfig", dict],
                ],
                bool,
            ],
            UndefinedType,
        ] = Undefined,
        borders: Union[
            Union[
                Union[
                    "AnyMarkConfig",
                    Union["AreaConfig", dict],
                    Union["BarConfig", dict],
                    Union["LineConfig", dict],
                    Union["MarkConfig", dict],
                    Union["RectConfig", dict],
                    Union["TickConfig", dict],
                ],
                bool,
            ],
            UndefinedType,
        ] = Undefined,
        extent: Union[
            Union["ErrorBarExtent", Literal["ci", "iqr", "stderr", "stdev"]],
            UndefinedType,
        ] = Undefined,
        interpolate: Union[
            Union[
                "Interpolate",
                Literal[
                    "basis",
                    "basis-open",
                    "basis-closed",
                    "bundle",
                    "cardinal",
                    "cardinal-open",
                    "cardinal-closed",
                    "catmull-rom",
                    "linear",
                    "linear-closed",
                    "monotone",
                    "natural",
                    "step",
                    "step-before",
                    "step-after",
                ],
            ],
            UndefinedType,
        ] = Undefined,
        tension: Union[float, UndefinedType] = Undefined,
        **kwds
    ):
        super(ErrorBandConfig, self).__init__(
            band=band,
            borders=borders,
            extent=extent,
            interpolate=interpolate,
            tension=tension,
            **kwds
        )


class ErrorBandDef(CompositeMarkDef):
    """ErrorBandDef schema wrapper

    Union[:class:`ErrorBandDef`, Dict[required=[type]]]

    Parameters
    ----------

    type : Union[:class:`ErrorBand`, str]
        The mark type. This could a primitive mark type (one of ``"bar"``, ``"circle"``,
        ``"square"``, ``"tick"``, ``"line"``, ``"area"``, ``"point"``, ``"geoshape"``,
        ``"rule"``, and ``"text"`` ) or a composite mark type ( ``"boxplot"``,
        ``"errorband"``, ``"errorbar"`` ).
    band : Union[Union[:class:`AnyMarkConfig`, Union[:class:`AreaConfig`, Dict[required=[]]], Union[:class:`BarConfig`, Dict[required=[]]], Union[:class:`LineConfig`, Dict[required=[]]], Union[:class:`MarkConfig`, Dict[required=[]]], Union[:class:`RectConfig`, Dict[required=[]]], Union[:class:`TickConfig`, Dict[required=[]]]], bool]

    borders : Union[Union[:class:`AnyMarkConfig`, Union[:class:`AreaConfig`, Dict[required=[]]], Union[:class:`BarConfig`, Dict[required=[]]], Union[:class:`LineConfig`, Dict[required=[]]], Union[:class:`MarkConfig`, Dict[required=[]]], Union[:class:`RectConfig`, Dict[required=[]]], Union[:class:`TickConfig`, Dict[required=[]]]], bool]

    clip : bool
        Whether a composite mark be clipped to the enclosing group’s width and height.
    color : Union[Union[:class:`Color`, Union[:class:`ColorName`, Literal['black', 'silver', 'gray', 'white', 'maroon', 'red', 'purple', 'fuchsia', 'green', 'lime', 'olive', 'yellow', 'navy', 'blue', 'teal', 'aqua', 'orange', 'aliceblue', 'antiquewhite', 'aquamarine', 'azure', 'beige', 'bisque', 'blanchedalmond', 'blueviolet', 'brown', 'burlywood', 'cadetblue', 'chartreuse', 'chocolate', 'coral', 'cornflowerblue', 'cornsilk', 'crimson', 'cyan', 'darkblue', 'darkcyan', 'darkgoldenrod', 'darkgray', 'darkgreen', 'darkgrey', 'darkkhaki', 'darkmagenta', 'darkolivegreen', 'darkorange', 'darkorchid', 'darkred', 'darksalmon', 'darkseagreen', 'darkslateblue', 'darkslategray', 'darkslategrey', 'darkturquoise', 'darkviolet', 'deeppink', 'deepskyblue', 'dimgray', 'dimgrey', 'dodgerblue', 'firebrick', 'floralwhite', 'forestgreen', 'gainsboro', 'ghostwhite', 'gold', 'goldenrod', 'greenyellow', 'grey', 'honeydew', 'hotpink', 'indianred', 'indigo', 'ivory', 'khaki', 'lavender', 'lavenderblush', 'lawngreen', 'lemonchiffon', 'lightblue', 'lightcoral', 'lightcyan', 'lightgoldenrodyellow', 'lightgray', 'lightgreen', 'lightgrey', 'lightpink', 'lightsalmon', 'lightseagreen', 'lightskyblue', 'lightslategray', 'lightslategrey', 'lightsteelblue', 'lightyellow', 'limegreen', 'linen', 'magenta', 'mediumaquamarine', 'mediumblue', 'mediumorchid', 'mediumpurple', 'mediumseagreen', 'mediumslateblue', 'mediumspringgreen', 'mediumturquoise', 'mediumvioletred', 'midnightblue', 'mintcream', 'mistyrose', 'moccasin', 'navajowhite', 'oldlace', 'olivedrab', 'orangered', 'orchid', 'palegoldenrod', 'palegreen', 'paleturquoise', 'palevioletred', 'papayawhip', 'peachpuff', 'peru', 'pink', 'plum', 'powderblue', 'rosybrown', 'royalblue', 'saddlebrown', 'salmon', 'sandybrown', 'seagreen', 'seashell', 'sienna', 'skyblue', 'slateblue', 'slategray', 'slategrey', 'snow', 'springgreen', 'steelblue', 'tan', 'thistle', 'tomato', 'turquoise', 'violet', 'wheat', 'whitesmoke', 'yellowgreen', 'rebeccapurple']], Union[:class:`HexColor`, str], str], Union[:class:`ExprRef`, Dict[required=[expr]]], Union[:class:`Gradient`, Union[:class:`LinearGradient`, Dict[required=[gradient, stops]]], Union[:class:`RadialGradient`, Dict[required=[gradient, stops]]]]]
        Default color.

        **Default value:** :raw-html:`<span style="color: #4682b4;">&#9632;</span>`
        ``"#4682b4"``

        **Note:**


        * This property cannot be used in a `style config
          <https://vega.github.io/vega-lite/docs/mark.html#style-config>`__.
        * The ``fill`` and ``stroke`` properties have higher precedence than ``color`` and
          will override ``color``.
    extent : Union[:class:`ErrorBarExtent`, Literal['ci', 'iqr', 'stderr', 'stdev']]
        The extent of the band. Available options include:


        * ``"ci"`` : Extend the band to the confidence interval of the mean.
        * ``"stderr"`` : The size of band are set to the value of standard error, extending
          from the mean.
        * ``"stdev"`` : The size of band are set to the value of standard deviation,
          extending from the mean.
        * ``"iqr"`` : Extend the band to the q1 and q3.

        **Default value:** ``"stderr"``.
    interpolate : Union[:class:`Interpolate`, Literal['basis', 'basis-open', 'basis-closed', 'bundle', 'cardinal', 'cardinal-open', 'cardinal-closed', 'catmull-rom', 'linear', 'linear-closed', 'monotone', 'natural', 'step', 'step-before', 'step-after']]
        The line interpolation method for the error band. One of the following:


        * ``"linear"`` : piecewise linear segments, as in a polyline.
        * ``"linear-closed"`` : close the linear segments to form a polygon.
        * ``"step"`` : a piecewise constant function (a step function) consisting of
          alternating horizontal and vertical lines. The y-value changes at the midpoint of
          each pair of adjacent x-values.
        * ``"step-before"`` : a piecewise constant function (a step function) consisting of
          alternating horizontal and vertical lines. The y-value changes before the x-value.
        * ``"step-after"`` : a piecewise constant function (a step function) consisting of
          alternating horizontal and vertical lines. The y-value changes after the x-value.
        * ``"basis"`` : a B-spline, with control point duplication on the ends.
        * ``"basis-open"`` : an open B-spline; may not intersect the start or end.
        * ``"basis-closed"`` : a closed B-spline, as in a loop.
        * ``"cardinal"`` : a Cardinal spline, with control point duplication on the ends.
        * ``"cardinal-open"`` : an open Cardinal spline; may not intersect the start or end,
          but will intersect other control points.
        * ``"cardinal-closed"`` : a closed Cardinal spline, as in a loop.
        * ``"bundle"`` : equivalent to basis, except the tension parameter is used to
          straighten the spline.
        * ``"monotone"`` : cubic interpolation that preserves monotonicity in y.
    opacity : float
        The opacity (value between [0,1]) of the mark.
    orient : Union[:class:`Orientation`, Literal['horizontal', 'vertical']]
        Orientation of the error band. This is normally automatically determined, but can be
        specified when the orientation is ambiguous and cannot be automatically determined.
    tension : float
        The tension parameter for the interpolation type of the error band.
    """

    _schema = {"$ref": "#/definitions/ErrorBandDef"}

    def __init__(
        self,
        type: Union[Union["ErrorBand", str], UndefinedType] = Undefined,
        band: Union[
            Union[
                Union[
                    "AnyMarkConfig",
                    Union["AreaConfig", dict],
                    Union["BarConfig", dict],
                    Union["LineConfig", dict],
                    Union["MarkConfig", dict],
                    Union["RectConfig", dict],
                    Union["TickConfig", dict],
                ],
                bool,
            ],
            UndefinedType,
        ] = Undefined,
        borders: Union[
            Union[
                Union[
                    "AnyMarkConfig",
                    Union["AreaConfig", dict],
                    Union["BarConfig", dict],
                    Union["LineConfig", dict],
                    Union["MarkConfig", dict],
                    Union["RectConfig", dict],
                    Union["TickConfig", dict],
                ],
                bool,
            ],
            UndefinedType,
        ] = Undefined,
        clip: Union[bool, UndefinedType] = Undefined,
        color: Union[
            Union[
                Union[
                    "Color",
                    Union[
                        "ColorName",
                        Literal[
                            "black",
                            "silver",
                            "gray",
                            "white",
                            "maroon",
                            "red",
                            "purple",
                            "fuchsia",
                            "green",
                            "lime",
                            "olive",
                            "yellow",
                            "navy",
                            "blue",
                            "teal",
                            "aqua",
                            "orange",
                            "aliceblue",
                            "antiquewhite",
                            "aquamarine",
                            "azure",
                            "beige",
                            "bisque",
                            "blanchedalmond",
                            "blueviolet",
                            "brown",
                            "burlywood",
                            "cadetblue",
                            "chartreuse",
                            "chocolate",
                            "coral",
                            "cornflowerblue",
                            "cornsilk",
                            "crimson",
                            "cyan",
                            "darkblue",
                            "darkcyan",
                            "darkgoldenrod",
                            "darkgray",
                            "darkgreen",
                            "darkgrey",
                            "darkkhaki",
                            "darkmagenta",
                            "darkolivegreen",
                            "darkorange",
                            "darkorchid",
                            "darkred",
                            "darksalmon",
                            "darkseagreen",
                            "darkslateblue",
                            "darkslategray",
                            "darkslategrey",
                            "darkturquoise",
                            "darkviolet",
                            "deeppink",
                            "deepskyblue",
                            "dimgray",
                            "dimgrey",
                            "dodgerblue",
                            "firebrick",
                            "floralwhite",
                            "forestgreen",
                            "gainsboro",
                            "ghostwhite",
                            "gold",
                            "goldenrod",
                            "greenyellow",
                            "grey",
                            "honeydew",
                            "hotpink",
                            "indianred",
                            "indigo",
                            "ivory",
                            "khaki",
                            "lavender",
                            "lavenderblush",
                            "lawngreen",
                            "lemonchiffon",
                            "lightblue",
                            "lightcoral",
                            "lightcyan",
                            "lightgoldenrodyellow",
                            "lightgray",
                            "lightgreen",
                            "lightgrey",
                            "lightpink",
                            "lightsalmon",
                            "lightseagreen",
                            "lightskyblue",
                            "lightslategray",
                            "lightslategrey",
                            "lightsteelblue",
                            "lightyellow",
                            "limegreen",
                            "linen",
                            "magenta",
                            "mediumaquamarine",
                            "mediumblue",
                            "mediumorchid",
                            "mediumpurple",
                            "mediumseagreen",
                            "mediumslateblue",
                            "mediumspringgreen",
                            "mediumturquoise",
                            "mediumvioletred",
                            "midnightblue",
                            "mintcream",
                            "mistyrose",
                            "moccasin",
                            "navajowhite",
                            "oldlace",
                            "olivedrab",
                            "orangered",
                            "orchid",
                            "palegoldenrod",
                            "palegreen",
                            "paleturquoise",
                            "palevioletred",
                            "papayawhip",
                            "peachpuff",
                            "peru",
                            "pink",
                            "plum",
                            "powderblue",
                            "rosybrown",
                            "royalblue",
                            "saddlebrown",
                            "salmon",
                            "sandybrown",
                            "seagreen",
                            "seashell",
                            "sienna",
                            "skyblue",
                            "slateblue",
                            "slategray",
                            "slategrey",
                            "snow",
                            "springgreen",
                            "steelblue",
                            "tan",
                            "thistle",
                            "tomato",
                            "turquoise",
                            "violet",
                            "wheat",
                            "whitesmoke",
                            "yellowgreen",
                            "rebeccapurple",
                        ],
                    ],
                    Union["HexColor", str],
                    str,
                ],
                Union["ExprRef", "_ParameterProtocol", dict],
                Union[
                    "Gradient",
                    Union["LinearGradient", dict],
                    Union["RadialGradient", dict],
                ],
            ],
            UndefinedType,
        ] = Undefined,
        extent: Union[
            Union["ErrorBarExtent", Literal["ci", "iqr", "stderr", "stdev"]],
            UndefinedType,
        ] = Undefined,
        interpolate: Union[
            Union[
                "Interpolate",
                Literal[
                    "basis",
                    "basis-open",
                    "basis-closed",
                    "bundle",
                    "cardinal",
                    "cardinal-open",
                    "cardinal-closed",
                    "catmull-rom",
                    "linear",
                    "linear-closed",
                    "monotone",
                    "natural",
                    "step",
                    "step-before",
                    "step-after",
                ],
            ],
            UndefinedType,
        ] = Undefined,
        opacity: Union[float, UndefinedType] = Undefined,
        orient: Union[
            Union["Orientation", Literal["horizontal", "vertical"]], UndefinedType
        ] = Undefined,
        tension: Union[float, UndefinedType] = Undefined,
        **kwds
    ):
        super(ErrorBandDef, self).__init__(
            type=type,
            band=band,
            borders=borders,
            clip=clip,
            color=color,
            extent=extent,
            interpolate=interpolate,
            opacity=opacity,
            orient=orient,
            tension=tension,
            **kwds
        )


class ErrorBar(CompositeMark):
    """ErrorBar schema wrapper

    Union[:class:`ErrorBar`, str]
    """

    _schema = {"$ref": "#/definitions/ErrorBar"}

    def __init__(self, *args):
        super(ErrorBar, self).__init__(*args)


class ErrorBarConfig(VegaLiteSchema):
    """ErrorBarConfig schema wrapper

    Union[:class:`ErrorBarConfig`, Dict[required=[]]]

    Parameters
    ----------

    extent : Union[:class:`ErrorBarExtent`, Literal['ci', 'iqr', 'stderr', 'stdev']]
        The extent of the rule. Available options include:


        * ``"ci"`` : Extend the rule to the confidence interval of the mean.
        * ``"stderr"`` : The size of rule are set to the value of standard error, extending
          from the mean.
        * ``"stdev"`` : The size of rule are set to the value of standard deviation,
          extending from the mean.
        * ``"iqr"`` : Extend the rule to the q1 and q3.

        **Default value:** ``"stderr"``.
    rule : Union[Union[:class:`AnyMarkConfig`, Union[:class:`AreaConfig`, Dict[required=[]]], Union[:class:`BarConfig`, Dict[required=[]]], Union[:class:`LineConfig`, Dict[required=[]]], Union[:class:`MarkConfig`, Dict[required=[]]], Union[:class:`RectConfig`, Dict[required=[]]], Union[:class:`TickConfig`, Dict[required=[]]]], bool]

    size : float
        Size of the ticks of an error bar
    thickness : float
        Thickness of the ticks and the bar of an error bar
    ticks : Union[Union[:class:`AnyMarkConfig`, Union[:class:`AreaConfig`, Dict[required=[]]], Union[:class:`BarConfig`, Dict[required=[]]], Union[:class:`LineConfig`, Dict[required=[]]], Union[:class:`MarkConfig`, Dict[required=[]]], Union[:class:`RectConfig`, Dict[required=[]]], Union[:class:`TickConfig`, Dict[required=[]]]], bool]

    """

    _schema = {"$ref": "#/definitions/ErrorBarConfig"}

    def __init__(
        self,
        extent: Union[
            Union["ErrorBarExtent", Literal["ci", "iqr", "stderr", "stdev"]],
            UndefinedType,
        ] = Undefined,
        rule: Union[
            Union[
                Union[
                    "AnyMarkConfig",
                    Union["AreaConfig", dict],
                    Union["BarConfig", dict],
                    Union["LineConfig", dict],
                    Union["MarkConfig", dict],
                    Union["RectConfig", dict],
                    Union["TickConfig", dict],
                ],
                bool,
            ],
            UndefinedType,
        ] = Undefined,
        size: Union[float, UndefinedType] = Undefined,
        thickness: Union[float, UndefinedType] = Undefined,
        ticks: Union[
            Union[
                Union[
                    "AnyMarkConfig",
                    Union["AreaConfig", dict],
                    Union["BarConfig", dict],
                    Union["LineConfig", dict],
                    Union["MarkConfig", dict],
                    Union["RectConfig", dict],
                    Union["TickConfig", dict],
                ],
                bool,
            ],
            UndefinedType,
        ] = Undefined,
        **kwds
    ):
        super(ErrorBarConfig, self).__init__(
            extent=extent,
            rule=rule,
            size=size,
            thickness=thickness,
            ticks=ticks,
            **kwds
        )


class ErrorBarDef(CompositeMarkDef):
    """ErrorBarDef schema wrapper

    Union[:class:`ErrorBarDef`, Dict[required=[type]]]

    Parameters
    ----------

    type : Union[:class:`ErrorBar`, str]
        The mark type. This could a primitive mark type (one of ``"bar"``, ``"circle"``,
        ``"square"``, ``"tick"``, ``"line"``, ``"area"``, ``"point"``, ``"geoshape"``,
        ``"rule"``, and ``"text"`` ) or a composite mark type ( ``"boxplot"``,
        ``"errorband"``, ``"errorbar"`` ).
    clip : bool
        Whether a composite mark be clipped to the enclosing group’s width and height.
    color : Union[Union[:class:`Color`, Union[:class:`ColorName`, Literal['black', 'silver', 'gray', 'white', 'maroon', 'red', 'purple', 'fuchsia', 'green', 'lime', 'olive', 'yellow', 'navy', 'blue', 'teal', 'aqua', 'orange', 'aliceblue', 'antiquewhite', 'aquamarine', 'azure', 'beige', 'bisque', 'blanchedalmond', 'blueviolet', 'brown', 'burlywood', 'cadetblue', 'chartreuse', 'chocolate', 'coral', 'cornflowerblue', 'cornsilk', 'crimson', 'cyan', 'darkblue', 'darkcyan', 'darkgoldenrod', 'darkgray', 'darkgreen', 'darkgrey', 'darkkhaki', 'darkmagenta', 'darkolivegreen', 'darkorange', 'darkorchid', 'darkred', 'darksalmon', 'darkseagreen', 'darkslateblue', 'darkslategray', 'darkslategrey', 'darkturquoise', 'darkviolet', 'deeppink', 'deepskyblue', 'dimgray', 'dimgrey', 'dodgerblue', 'firebrick', 'floralwhite', 'forestgreen', 'gainsboro', 'ghostwhite', 'gold', 'goldenrod', 'greenyellow', 'grey', 'honeydew', 'hotpink', 'indianred', 'indigo', 'ivory', 'khaki', 'lavender', 'lavenderblush', 'lawngreen', 'lemonchiffon', 'lightblue', 'lightcoral', 'lightcyan', 'lightgoldenrodyellow', 'lightgray', 'lightgreen', 'lightgrey', 'lightpink', 'lightsalmon', 'lightseagreen', 'lightskyblue', 'lightslategray', 'lightslategrey', 'lightsteelblue', 'lightyellow', 'limegreen', 'linen', 'magenta', 'mediumaquamarine', 'mediumblue', 'mediumorchid', 'mediumpurple', 'mediumseagreen', 'mediumslateblue', 'mediumspringgreen', 'mediumturquoise', 'mediumvioletred', 'midnightblue', 'mintcream', 'mistyrose', 'moccasin', 'navajowhite', 'oldlace', 'olivedrab', 'orangered', 'orchid', 'palegoldenrod', 'palegreen', 'paleturquoise', 'palevioletred', 'papayawhip', 'peachpuff', 'peru', 'pink', 'plum', 'powderblue', 'rosybrown', 'royalblue', 'saddlebrown', 'salmon', 'sandybrown', 'seagreen', 'seashell', 'sienna', 'skyblue', 'slateblue', 'slategray', 'slategrey', 'snow', 'springgreen', 'steelblue', 'tan', 'thistle', 'tomato', 'turquoise', 'violet', 'wheat', 'whitesmoke', 'yellowgreen', 'rebeccapurple']], Union[:class:`HexColor`, str], str], Union[:class:`ExprRef`, Dict[required=[expr]]], Union[:class:`Gradient`, Union[:class:`LinearGradient`, Dict[required=[gradient, stops]]], Union[:class:`RadialGradient`, Dict[required=[gradient, stops]]]]]
        Default color.

        **Default value:** :raw-html:`<span style="color: #4682b4;">&#9632;</span>`
        ``"#4682b4"``

        **Note:**


        * This property cannot be used in a `style config
          <https://vega.github.io/vega-lite/docs/mark.html#style-config>`__.
        * The ``fill`` and ``stroke`` properties have higher precedence than ``color`` and
          will override ``color``.
    extent : Union[:class:`ErrorBarExtent`, Literal['ci', 'iqr', 'stderr', 'stdev']]
        The extent of the rule. Available options include:


        * ``"ci"`` : Extend the rule to the confidence interval of the mean.
        * ``"stderr"`` : The size of rule are set to the value of standard error, extending
          from the mean.
        * ``"stdev"`` : The size of rule are set to the value of standard deviation,
          extending from the mean.
        * ``"iqr"`` : Extend the rule to the q1 and q3.

        **Default value:** ``"stderr"``.
    opacity : float
        The opacity (value between [0,1]) of the mark.
    orient : Union[:class:`Orientation`, Literal['horizontal', 'vertical']]
        Orientation of the error bar. This is normally automatically determined, but can be
        specified when the orientation is ambiguous and cannot be automatically determined.
    rule : Union[Union[:class:`AnyMarkConfig`, Union[:class:`AreaConfig`, Dict[required=[]]], Union[:class:`BarConfig`, Dict[required=[]]], Union[:class:`LineConfig`, Dict[required=[]]], Union[:class:`MarkConfig`, Dict[required=[]]], Union[:class:`RectConfig`, Dict[required=[]]], Union[:class:`TickConfig`, Dict[required=[]]]], bool]

    size : float
        Size of the ticks of an error bar
    thickness : float
        Thickness of the ticks and the bar of an error bar
    ticks : Union[Union[:class:`AnyMarkConfig`, Union[:class:`AreaConfig`, Dict[required=[]]], Union[:class:`BarConfig`, Dict[required=[]]], Union[:class:`LineConfig`, Dict[required=[]]], Union[:class:`MarkConfig`, Dict[required=[]]], Union[:class:`RectConfig`, Dict[required=[]]], Union[:class:`TickConfig`, Dict[required=[]]]], bool]

    """

    _schema = {"$ref": "#/definitions/ErrorBarDef"}

    def __init__(
        self,
        type: Union[Union["ErrorBar", str], UndefinedType] = Undefined,
        clip: Union[bool, UndefinedType] = Undefined,
        color: Union[
            Union[
                Union[
                    "Color",
                    Union[
                        "ColorName",
                        Literal[
                            "black",
                            "silver",
                            "gray",
                            "white",
                            "maroon",
                            "red",
                            "purple",
                            "fuchsia",
                            "green",
                            "lime",
                            "olive",
                            "yellow",
                            "navy",
                            "blue",
                            "teal",
                            "aqua",
                            "orange",
                            "aliceblue",
                            "antiquewhite",
                            "aquamarine",
                            "azure",
                            "beige",
                            "bisque",
                            "blanchedalmond",
                            "blueviolet",
                            "brown",
                            "burlywood",
                            "cadetblue",
                            "chartreuse",
                            "chocolate",
                            "coral",
                            "cornflowerblue",
                            "cornsilk",
                            "crimson",
                            "cyan",
                            "darkblue",
                            "darkcyan",
                            "darkgoldenrod",
                            "darkgray",
                            "darkgreen",
                            "darkgrey",
                            "darkkhaki",
                            "darkmagenta",
                            "darkolivegreen",
                            "darkorange",
                            "darkorchid",
                            "darkred",
                            "darksalmon",
                            "darkseagreen",
                            "darkslateblue",
                            "darkslategray",
                            "darkslategrey",
                            "darkturquoise",
                            "darkviolet",
                            "deeppink",
                            "deepskyblue",
                            "dimgray",
                            "dimgrey",
                            "dodgerblue",
                            "firebrick",
                            "floralwhite",
                            "forestgreen",
                            "gainsboro",
                            "ghostwhite",
                            "gold",
                            "goldenrod",
                            "greenyellow",
                            "grey",
                            "honeydew",
                            "hotpink",
                            "indianred",
                            "indigo",
                            "ivory",
                            "khaki",
                            "lavender",
                            "lavenderblush",
                            "lawngreen",
                            "lemonchiffon",
                            "lightblue",
                            "lightcoral",
                            "lightcyan",
                            "lightgoldenrodyellow",
                            "lightgray",
                            "lightgreen",
                            "lightgrey",
                            "lightpink",
                            "lightsalmon",
                            "lightseagreen",
                            "lightskyblue",
                            "lightslategray",
                            "lightslategrey",
                            "lightsteelblue",
                            "lightyellow",
                            "limegreen",
                            "linen",
                            "magenta",
                            "mediumaquamarine",
                            "mediumblue",
                            "mediumorchid",
                            "mediumpurple",
                            "mediumseagreen",
                            "mediumslateblue",
                            "mediumspringgreen",
                            "mediumturquoise",
                            "mediumvioletred",
                            "midnightblue",
                            "mintcream",
                            "mistyrose",
                            "moccasin",
                            "navajowhite",
                            "oldlace",
                            "olivedrab",
                            "orangered",
                            "orchid",
                            "palegoldenrod",
                            "palegreen",
                            "paleturquoise",
                            "palevioletred",
                            "papayawhip",
                            "peachpuff",
                            "peru",
                            "pink",
                            "plum",
                            "powderblue",
                            "rosybrown",
                            "royalblue",
                            "saddlebrown",
                            "salmon",
                            "sandybrown",
                            "seagreen",
                            "seashell",
                            "sienna",
                            "skyblue",
                            "slateblue",
                            "slategray",
                            "slategrey",
                            "snow",
                            "springgreen",
                            "steelblue",
                            "tan",
                            "thistle",
                            "tomato",
                            "turquoise",
                            "violet",
                            "wheat",
                            "whitesmoke",
                            "yellowgreen",
                            "rebeccapurple",
                        ],
                    ],
                    Union["HexColor", str],
                    str,
                ],
                Union["ExprRef", "_ParameterProtocol", dict],
                Union[
                    "Gradient",
                    Union["LinearGradient", dict],
                    Union["RadialGradient", dict],
                ],
            ],
            UndefinedType,
        ] = Undefined,
        extent: Union[
            Union["ErrorBarExtent", Literal["ci", "iqr", "stderr", "stdev"]],
            UndefinedType,
        ] = Undefined,
        opacity: Union[float, UndefinedType] = Undefined,
        orient: Union[
            Union["Orientation", Literal["horizontal", "vertical"]], UndefinedType
        ] = Undefined,
        rule: Union[
            Union[
                Union[
                    "AnyMarkConfig",
                    Union["AreaConfig", dict],
                    Union["BarConfig", dict],
                    Union["LineConfig", dict],
                    Union["MarkConfig", dict],
                    Union["RectConfig", dict],
                    Union["TickConfig", dict],
                ],
                bool,
            ],
            UndefinedType,
        ] = Undefined,
        size: Union[float, UndefinedType] = Undefined,
        thickness: Union[float, UndefinedType] = Undefined,
        ticks: Union[
            Union[
                Union[
                    "AnyMarkConfig",
                    Union["AreaConfig", dict],
                    Union["BarConfig", dict],
                    Union["LineConfig", dict],
                    Union["MarkConfig", dict],
                    Union["RectConfig", dict],
                    Union["TickConfig", dict],
                ],
                bool,
            ],
            UndefinedType,
        ] = Undefined,
        **kwds
    ):
        super(ErrorBarDef, self).__init__(
            type=type,
            clip=clip,
            color=color,
            extent=extent,
            opacity=opacity,
            orient=orient,
            rule=rule,
            size=size,
            thickness=thickness,
            ticks=ticks,
            **kwds
        )


class ErrorBarExtent(VegaLiteSchema):
    """ErrorBarExtent schema wrapper

    Union[:class:`ErrorBarExtent`, Literal['ci', 'iqr', 'stderr', 'stdev']]
    """

    _schema = {"$ref": "#/definitions/ErrorBarExtent"}

    def __init__(self, *args):
        super(ErrorBarExtent, self).__init__(*args)


class Expr(VegaLiteSchema):
    """Expr schema wrapper

    Union[:class:`Expr`, str]
    """

    _schema = {"$ref": "#/definitions/Expr"}

    def __init__(self, *args):
        super(Expr, self).__init__(*args)


class ExprRef(VegaLiteSchema):
    """ExprRef schema wrapper

    Union[:class:`ExprRef`, Dict[required=[expr]]]

    Parameters
    ----------

    expr : str
        Vega expression (which can refer to Vega-Lite parameters).
    """

    _schema = {"$ref": "#/definitions/ExprRef"}

    def __init__(self, expr: Union[str, UndefinedType] = Undefined, **kwds):
        super(ExprRef, self).__init__(expr=expr, **kwds)


class FacetEncodingFieldDef(VegaLiteSchema):
    """FacetEncodingFieldDef schema wrapper

    Union[:class:`FacetEncodingFieldDef`, Dict[required=[]]]

    Parameters
    ----------

    aggregate : Union[:class:`Aggregate`, Union[:class:`ArgmaxDef`, Dict[required=[argmax]]], Union[:class:`ArgminDef`, Dict[required=[argmin]]], Union[:class:`NonArgAggregateOp`, Literal['average', 'count', 'distinct', 'max', 'mean', 'median', 'min', 'missing', 'product', 'q1', 'q3', 'ci0', 'ci1', 'stderr', 'stdev', 'stdevp', 'sum', 'valid', 'values', 'variance', 'variancep']]]
        Aggregation function for the field (e.g., ``"mean"``, ``"sum"``, ``"median"``,
        ``"min"``, ``"max"``, ``"count"`` ).

        **Default value:** ``undefined`` (None)

        **See also:** `aggregate <https://vega.github.io/vega-lite/docs/aggregate.html>`__
        documentation.
    align : Union[Union[:class:`LayoutAlign`, Literal['all', 'each', 'none']], Union[:class:`RowColLayoutAlign`, Dict[required=[]]]]
        The alignment to apply to grid rows and columns. The supported string values are
        ``"all"``, ``"each"``, and ``"none"``.


        * For ``"none"``, a flow layout will be used, in which adjacent subviews are simply
          placed one after the other.
        * For ``"each"``, subviews will be aligned into a clean grid structure, but each row
          or column may be of variable size.
        * For ``"all"``, subviews will be aligned and each row or column will be sized
          identically based on the maximum observed size. String values for this property
          will be applied to both grid rows and columns.

        Alternatively, an object value of the form ``{"row": string, "column": string}`` can
        be used to supply different alignments for rows and columns.

        **Default value:** ``"all"``.
    bandPosition : float
        Relative position on a band of a stacked, binned, time unit, or band scale. For
        example, the marks will be positioned at the beginning of the band if set to ``0``,
        and at the middle of the band if set to ``0.5``.
    bin : Union[None, Union[:class:`BinParams`, Dict[required=[]]], bool]
        A flag for binning a ``quantitative`` field, `an object defining binning parameters
        <https://vega.github.io/vega-lite/docs/bin.html#bin-parameters>`__, or indicating
        that the data for ``x`` or ``y`` channel are binned before they are imported into
        Vega-Lite ( ``"binned"`` ).


        If ``true``, default `binning parameters
        <https://vega.github.io/vega-lite/docs/bin.html#bin-parameters>`__ will be applied.

        If ``"binned"``, this indicates that the data for the ``x`` (or ``y`` ) channel are
        already binned. You can map the bin-start field to ``x`` (or ``y`` ) and the bin-end
        field to ``x2`` (or ``y2`` ). The scale and axis will be formatted similar to
        binning in Vega-Lite.  To adjust the axis ticks based on the bin step, you can also
        set the axis's `tickMinStep
        <https://vega.github.io/vega-lite/docs/axis.html#ticks>`__ property.

        **Default value:** ``false``

        **See also:** `bin <https://vega.github.io/vega-lite/docs/bin.html>`__
        documentation.
    bounds : Literal['full', 'flush']
        The bounds calculation method to use for determining the extent of a sub-plot. One
        of ``full`` (the default) or ``flush``.


        * If set to ``full``, the entire calculated bounds (including axes, title, and
          legend) will be used.
        * If set to ``flush``, only the specified width and height values for the sub-view
          will be used. The ``flush`` setting can be useful when attempting to place
          sub-plots without axes or legends into a uniform grid structure.

        **Default value:** ``"full"``
    center : Union[Union[:class:`RowColboolean`, Dict[required=[]]], bool]
        Boolean flag indicating if subviews should be centered relative to their respective
        rows or columns.

        An object value of the form ``{"row": boolean, "column": boolean}`` can be used to
        supply different centering values for rows and columns.

        **Default value:** ``false``
    columns : float
        The number of columns to include in the view composition layout.

        **Default value** : ``undefined`` -- An infinite number of columns (a single row)
        will be assumed. This is equivalent to ``hconcat`` (for ``concat`` ) and to using
        the ``column`` channel (for ``facet`` and ``repeat`` ).

        **Note** :

        1) This property is only for:


        * the general (wrappable) ``concat`` operator (not ``hconcat`` / ``vconcat`` )
        * the ``facet`` and ``repeat`` operator with one field/repetition definition
          (without row/column nesting)

        2) Setting the ``columns`` to ``1`` is equivalent to ``vconcat`` (for ``concat`` )
        and to using the ``row`` channel (for ``facet`` and ``repeat`` ).
    field : Union[:class:`Field`, Union[:class:`FieldName`, str], Union[:class:`RepeatRef`, Dict[required=[repeat]]]]
        **Required.** A string defining the name of the field from which to pull a data
        value or an object defining iterated values from the `repeat
        <https://vega.github.io/vega-lite/docs/repeat.html>`__ operator.

        **See also:** `field <https://vega.github.io/vega-lite/docs/field.html>`__
        documentation.

        **Notes:** 1)  Dots ( ``.`` ) and brackets ( ``[`` and ``]`` ) can be used to access
        nested objects (e.g., ``"field": "foo.bar"`` and ``"field": "foo['bar']"`` ). If
        field names contain dots or brackets but are not nested, you can use ``\\`` to
        escape dots and brackets (e.g., ``"a\\.b"`` and ``"a\\[0\\]"`` ). See more details
        about escaping in the `field documentation
        <https://vega.github.io/vega-lite/docs/field.html>`__. 2) ``field`` is not required
        if ``aggregate`` is ``count``.
    header : Union[None, Union[:class:`Header`, Dict[required=[]]]]
        An object defining properties of a facet's header.
    sort : Union[None, Union[:class:`EncodingSortField`, Dict[required=[]]], Union[:class:`SortArray`, List[Union[:class:`DateTime`, Dict[required=[]]]], List[bool], List[float], List[str]], Union[:class:`SortOrder`, Literal['ascending', 'descending']]]
        Sort order for the encoded field.

        For continuous fields (quantitative or temporal), ``sort`` can be either
        ``"ascending"`` or ``"descending"``.

        For discrete fields, ``sort`` can be one of the following:


        * ``"ascending"`` or ``"descending"`` -- for sorting by the values' natural order in
          JavaScript.
        * `A sort field definition
          <https://vega.github.io/vega-lite/docs/sort.html#sort-field>`__ for sorting by
          another field.
        * `An array specifying the field values in preferred order
          <https://vega.github.io/vega-lite/docs/sort.html#sort-array>`__. In this case, the
          sort order will obey the values in the array, followed by any unspecified values
          in their original order. For discrete time field, values in the sort array can be
          `date-time definition objects
          <https://vega.github.io/vega-lite/docs/datetime.html>`__. In addition, for time
          units ``"month"`` and ``"day"``, the values can be the month or day names (case
          insensitive) or their 3-letter initials (e.g., ``"Mon"``, ``"Tue"`` ).
        * ``null`` indicating no sort.

        **Default value:** ``"ascending"``

        **Note:** ``null`` is not supported for ``row`` and ``column``.
    spacing : Union[Union[:class:`RowColnumber`, Dict[required=[]]], float]
        The spacing in pixels between sub-views of the composition operator. An object of
        the form ``{"row": number, "column": number}`` can be used to set different spacing
        values for rows and columns.

        **Default value** : Depends on ``"spacing"`` property of `the view composition
        configuration <https://vega.github.io/vega-lite/docs/config.html#view-config>`__ (
        ``20`` by default)
    timeUnit : Union[Union[:class:`BinnedTimeUnit`, Literal['binnedutcyear', 'binnedutcyearquarter', 'binnedutcyearquartermonth', 'binnedutcyearmonth', 'binnedutcyearmonthdate', 'binnedutcyearmonthdatehours', 'binnedutcyearmonthdatehoursminutes', 'binnedutcyearmonthdatehoursminutesseconds', 'binnedutcyearweek', 'binnedutcyearweekday', 'binnedutcyearweekdayhours', 'binnedutcyearweekdayhoursminutes', 'binnedutcyearweekdayhoursminutesseconds', 'binnedutcyeardayofyear'], Literal['binnedyear', 'binnedyearquarter', 'binnedyearquartermonth', 'binnedyearmonth', 'binnedyearmonthdate', 'binnedyearmonthdatehours', 'binnedyearmonthdatehoursminutes', 'binnedyearmonthdatehoursminutesseconds', 'binnedyearweek', 'binnedyearweekday', 'binnedyearweekdayhours', 'binnedyearweekdayhoursminutes', 'binnedyearweekdayhoursminutesseconds', 'binnedyeardayofyear']], Union[:class:`TimeUnitParams`, Dict[required=[]]], Union[:class:`TimeUnit`, Union[:class:`MultiTimeUnit`, Union[:class:`LocalMultiTimeUnit`, Literal['yearquarter', 'yearquartermonth', 'yearmonth', 'yearmonthdate', 'yearmonthdatehours', 'yearmonthdatehoursminutes', 'yearmonthdatehoursminutesseconds', 'yearweek', 'yearweekday', 'yearweekdayhours', 'yearweekdayhoursminutes', 'yearweekdayhoursminutesseconds', 'yeardayofyear', 'quartermonth', 'monthdate', 'monthdatehours', 'monthdatehoursminutes', 'monthdatehoursminutesseconds', 'weekday', 'weeksdayhours', 'weekdayhoursminutes', 'weekdayhoursminutesseconds', 'dayhours', 'dayhoursminutes', 'dayhoursminutesseconds', 'hoursminutes', 'hoursminutesseconds', 'minutesseconds', 'secondsmilliseconds']], Union[:class:`UtcMultiTimeUnit`, Literal['utcyearquarter', 'utcyearquartermonth', 'utcyearmonth', 'utcyearmonthdate', 'utcyearmonthdatehours', 'utcyearmonthdatehoursminutes', 'utcyearmonthdatehoursminutesseconds', 'utcyearweek', 'utcyearweekday', 'utcyearweekdayhours', 'utcyearweekdayhoursminutes', 'utcyearweekdayhoursminutesseconds', 'utcyeardayofyear', 'utcquartermonth', 'utcmonthdate', 'utcmonthdatehours', 'utcmonthdatehoursminutes', 'utcmonthdatehoursminutesseconds', 'utcweekday', 'utcweeksdayhours', 'utcweekdayhoursminutes', 'utcweekdayhoursminutesseconds', 'utcdayhours', 'utcdayhoursminutes', 'utcdayhoursminutesseconds', 'utchoursminutes', 'utchoursminutesseconds', 'utcminutesseconds', 'utcsecondsmilliseconds']]], Union[:class:`SingleTimeUnit`, Union[:class:`LocalSingleTimeUnit`, Literal['year', 'quarter', 'month', 'week', 'day', 'dayofyear', 'date', 'hours', 'minutes', 'seconds', 'milliseconds']], Union[:class:`UtcSingleTimeUnit`, Literal['utcyear', 'utcquarter', 'utcmonth', 'utcweek', 'utcday', 'utcdayofyear', 'utcdate', 'utchours', 'utcminutes', 'utcseconds', 'utcmilliseconds']]]]]
        Time unit (e.g., ``year``, ``yearmonth``, ``month``, ``hours`` ) for a temporal
        field. or `a temporal field that gets casted as ordinal
        <https://vega.github.io/vega-lite/docs/type.html#cast>`__.

        **Default value:** ``undefined`` (None)

        **See also:** `timeUnit <https://vega.github.io/vega-lite/docs/timeunit.html>`__
        documentation.
    title : Union[None, Union[:class:`Text`, List[str], str]]
        A title for the field. If ``null``, the title will be removed.

        **Default value:**  derived from the field's name and transformation function (
        ``aggregate``, ``bin`` and ``timeUnit`` ). If the field has an aggregate function,
        the function is displayed as part of the title (e.g., ``"Sum of Profit"`` ). If the
        field is binned or has a time unit applied, the applied function is shown in
        parentheses (e.g., ``"Profit (binned)"``, ``"Transaction Date (year-month)"`` ).
        Otherwise, the title is simply the field name.

        **Notes** :

        1) You can customize the default field title format by providing the `fieldTitle
        <https://vega.github.io/vega-lite/docs/config.html#top-level-config>`__ property in
        the `config <https://vega.github.io/vega-lite/docs/config.html>`__ or `fieldTitle
        function via the compile function's options
        <https://vega.github.io/vega-lite/usage/compile.html#field-title>`__.

        2) If both field definition's ``title`` and axis, header, or legend ``title`` are
        defined, axis/header/legend title will be used.
    type : Union[:class:`StandardType`, Literal['quantitative', 'ordinal', 'temporal', 'nominal']]
        The type of measurement ( ``"quantitative"``, ``"temporal"``, ``"ordinal"``, or
        ``"nominal"`` ) for the encoded field or constant value ( ``datum`` ). It can also
        be a ``"geojson"`` type for encoding `'geoshape'
        <https://vega.github.io/vega-lite/docs/geoshape.html>`__.

        Vega-Lite automatically infers data types in many cases as discussed below. However,
        type is required for a field if: (1) the field is not nominal and the field encoding
        has no specified ``aggregate`` (except ``argmin`` and ``argmax`` ), ``bin``, scale
        type, custom ``sort`` order, nor ``timeUnit`` or (2) if you wish to use an ordinal
        scale for a field with ``bin`` or ``timeUnit``.

        **Default value:**

        1) For a data ``field``, ``"nominal"`` is the default data type unless the field
        encoding has ``aggregate``, ``channel``, ``bin``, scale type, ``sort``, or
        ``timeUnit`` that satisfies the following criteria:


        * ``"quantitative"`` is the default type if (1) the encoded field contains ``bin``
          or ``aggregate`` except ``"argmin"`` and ``"argmax"``, (2) the encoding channel is
          ``latitude`` or ``longitude`` channel or (3) if the specified scale type is `a
          quantitative scale <https://vega.github.io/vega-lite/docs/scale.html#type>`__.
        * ``"temporal"`` is the default type if (1) the encoded field contains ``timeUnit``
          or (2) the specified scale type is a time or utc scale
        * ``"ordinal"`` is the default type if (1) the encoded field contains a `custom sort
          order
          <https://vega.github.io/vega-lite/docs/sort.html#specifying-custom-sort-order>`__,
          (2) the specified scale type is an ordinal/point/band scale, or (3) the encoding
          channel is ``order``.

        2) For a constant value in data domain ( ``datum`` ):


        * ``"quantitative"`` if the datum is a number
        * ``"nominal"`` if the datum is a string
        * ``"temporal"`` if the datum is `a date time object
          <https://vega.github.io/vega-lite/docs/datetime.html>`__

        **Note:**


        * Data ``type`` describes the semantics of the data rather than the primitive data
          types (number, string, etc.). The same primitive data type can have different
          types of measurement. For example, numeric data can represent quantitative,
          ordinal, or nominal data.
        * Data values for a temporal field can be either a date-time string (e.g.,
          ``"2015-03-07 12:32:17"``, ``"17:01"``, ``"2015-03-16"``. ``"2015"`` ) or a
          timestamp number (e.g., ``1552199579097`` ).
        * When using with `bin <https://vega.github.io/vega-lite/docs/bin.html>`__, the
          ``type`` property can be either ``"quantitative"`` (for using a linear bin scale)
          or `"ordinal" (for using an ordinal bin scale)
          <https://vega.github.io/vega-lite/docs/type.html#cast-bin>`__.
        * When using with `timeUnit
          <https://vega.github.io/vega-lite/docs/timeunit.html>`__, the ``type`` property
          can be either ``"temporal"`` (default, for using a temporal scale) or `"ordinal"
          (for using an ordinal scale)
          <https://vega.github.io/vega-lite/docs/type.html#cast-bin>`__.
        * When using with `aggregate
          <https://vega.github.io/vega-lite/docs/aggregate.html>`__, the ``type`` property
          refers to the post-aggregation data type. For example, we can calculate count
          ``distinct`` of a categorical field ``"cat"`` using ``{"aggregate": "distinct",
          "field": "cat"}``. The ``"type"`` of the aggregate output is ``"quantitative"``.
        * Secondary channels (e.g., ``x2``, ``y2``, ``xError``, ``yError`` ) do not have
          ``type`` as they must have exactly the same type as their primary channels (e.g.,
          ``x``, ``y`` ).

        **See also:** `type <https://vega.github.io/vega-lite/docs/type.html>`__
        documentation.
    """

    _schema = {"$ref": "#/definitions/FacetEncodingFieldDef"}

    def __init__(
        self,
        aggregate: Union[
            Union[
                "Aggregate",
                Union["ArgmaxDef", dict],
                Union["ArgminDef", dict],
                Union[
                    "NonArgAggregateOp",
                    Literal[
                        "average",
                        "count",
                        "distinct",
                        "max",
                        "mean",
                        "median",
                        "min",
                        "missing",
                        "product",
                        "q1",
                        "q3",
                        "ci0",
                        "ci1",
                        "stderr",
                        "stdev",
                        "stdevp",
                        "sum",
                        "valid",
                        "values",
                        "variance",
                        "variancep",
                    ],
                ],
            ],
            UndefinedType,
        ] = Undefined,
        align: Union[
            Union[
                Union["LayoutAlign", Literal["all", "each", "none"]],
                Union["RowColLayoutAlign", dict],
            ],
            UndefinedType,
        ] = Undefined,
        bandPosition: Union[float, UndefinedType] = Undefined,
        bin: Union[
            Union[None, Union["BinParams", dict], bool], UndefinedType
        ] = Undefined,
        bounds: Union[Literal["full", "flush"], UndefinedType] = Undefined,
        center: Union[
            Union[Union["RowColboolean", dict], bool], UndefinedType
        ] = Undefined,
        columns: Union[float, UndefinedType] = Undefined,
        field: Union[
            Union["Field", Union["FieldName", str], Union["RepeatRef", dict]],
            UndefinedType,
        ] = Undefined,
        header: Union[Union[None, Union["Header", dict]], UndefinedType] = Undefined,
        sort: Union[
            Union[
                None,
                Union["EncodingSortField", dict],
                Union[
                    "SortArray",
                    List[bool],
                    List[float],
                    List[str],
                    Union[List["DateTime"], List[dict]],
                ],
                Union["SortOrder", Literal["ascending", "descending"]],
            ],
            UndefinedType,
        ] = Undefined,
        spacing: Union[
            Union[Union["RowColnumber", dict], float], UndefinedType
        ] = Undefined,
        timeUnit: Union[
            Union[
                Union[
                    "BinnedTimeUnit",
                    Literal[
                        "binnedutcyear",
                        "binnedutcyearquarter",
                        "binnedutcyearquartermonth",
                        "binnedutcyearmonth",
                        "binnedutcyearmonthdate",
                        "binnedutcyearmonthdatehours",
                        "binnedutcyearmonthdatehoursminutes",
                        "binnedutcyearmonthdatehoursminutesseconds",
                        "binnedutcyearweek",
                        "binnedutcyearweekday",
                        "binnedutcyearweekdayhours",
                        "binnedutcyearweekdayhoursminutes",
                        "binnedutcyearweekdayhoursminutesseconds",
                        "binnedutcyeardayofyear",
                    ],
                    Literal[
                        "binnedyear",
                        "binnedyearquarter",
                        "binnedyearquartermonth",
                        "binnedyearmonth",
                        "binnedyearmonthdate",
                        "binnedyearmonthdatehours",
                        "binnedyearmonthdatehoursminutes",
                        "binnedyearmonthdatehoursminutesseconds",
                        "binnedyearweek",
                        "binnedyearweekday",
                        "binnedyearweekdayhours",
                        "binnedyearweekdayhoursminutes",
                        "binnedyearweekdayhoursminutesseconds",
                        "binnedyeardayofyear",
                    ],
                ],
                Union[
                    "TimeUnit",
                    Union[
                        "MultiTimeUnit",
                        Union[
                            "LocalMultiTimeUnit",
                            Literal[
                                "yearquarter",
                                "yearquartermonth",
                                "yearmonth",
                                "yearmonthdate",
                                "yearmonthdatehours",
                                "yearmonthdatehoursminutes",
                                "yearmonthdatehoursminutesseconds",
                                "yearweek",
                                "yearweekday",
                                "yearweekdayhours",
                                "yearweekdayhoursminutes",
                                "yearweekdayhoursminutesseconds",
                                "yeardayofyear",
                                "quartermonth",
                                "monthdate",
                                "monthdatehours",
                                "monthdatehoursminutes",
                                "monthdatehoursminutesseconds",
                                "weekday",
                                "weeksdayhours",
                                "weekdayhoursminutes",
                                "weekdayhoursminutesseconds",
                                "dayhours",
                                "dayhoursminutes",
                                "dayhoursminutesseconds",
                                "hoursminutes",
                                "hoursminutesseconds",
                                "minutesseconds",
                                "secondsmilliseconds",
                            ],
                        ],
                        Union[
                            "UtcMultiTimeUnit",
                            Literal[
                                "utcyearquarter",
                                "utcyearquartermonth",
                                "utcyearmonth",
                                "utcyearmonthdate",
                                "utcyearmonthdatehours",
                                "utcyearmonthdatehoursminutes",
                                "utcyearmonthdatehoursminutesseconds",
                                "utcyearweek",
                                "utcyearweekday",
                                "utcyearweekdayhours",
                                "utcyearweekdayhoursminutes",
                                "utcyearweekdayhoursminutesseconds",
                                "utcyeardayofyear",
                                "utcquartermonth",
                                "utcmonthdate",
                                "utcmonthdatehours",
                                "utcmonthdatehoursminutes",
                                "utcmonthdatehoursminutesseconds",
                                "utcweekday",
                                "utcweeksdayhours",
                                "utcweekdayhoursminutes",
                                "utcweekdayhoursminutesseconds",
                                "utcdayhours",
                                "utcdayhoursminutes",
                                "utcdayhoursminutesseconds",
                                "utchoursminutes",
                                "utchoursminutesseconds",
                                "utcminutesseconds",
                                "utcsecondsmilliseconds",
                            ],
                        ],
                    ],
                    Union[
                        "SingleTimeUnit",
                        Union[
                            "LocalSingleTimeUnit",
                            Literal[
                                "year",
                                "quarter",
                                "month",
                                "week",
                                "day",
                                "dayofyear",
                                "date",
                                "hours",
                                "minutes",
                                "seconds",
                                "milliseconds",
                            ],
                        ],
                        Union[
                            "UtcSingleTimeUnit",
                            Literal[
                                "utcyear",
                                "utcquarter",
                                "utcmonth",
                                "utcweek",
                                "utcday",
                                "utcdayofyear",
                                "utcdate",
                                "utchours",
                                "utcminutes",
                                "utcseconds",
                                "utcmilliseconds",
                            ],
                        ],
                    ],
                ],
                Union["TimeUnitParams", dict],
            ],
            UndefinedType,
        ] = Undefined,
        title: Union[
            Union[None, Union["Text", List[str], str]], UndefinedType
        ] = Undefined,
        type: Union[
            Union[
                "StandardType",
                Literal["quantitative", "ordinal", "temporal", "nominal"],
            ],
            UndefinedType,
        ] = Undefined,
        **kwds
    ):
        super(FacetEncodingFieldDef, self).__init__(
            aggregate=aggregate,
            align=align,
            bandPosition=bandPosition,
            bin=bin,
            bounds=bounds,
            center=center,
            columns=columns,
            field=field,
            header=header,
            sort=sort,
            spacing=spacing,
            timeUnit=timeUnit,
            title=title,
            type=type,
            **kwds
        )


class FacetFieldDef(VegaLiteSchema):
    """FacetFieldDef schema wrapper

    Union[:class:`FacetFieldDef`, Dict[required=[]]]

    Parameters
    ----------

    aggregate : Union[:class:`Aggregate`, Union[:class:`ArgmaxDef`, Dict[required=[argmax]]], Union[:class:`ArgminDef`, Dict[required=[argmin]]], Union[:class:`NonArgAggregateOp`, Literal['average', 'count', 'distinct', 'max', 'mean', 'median', 'min', 'missing', 'product', 'q1', 'q3', 'ci0', 'ci1', 'stderr', 'stdev', 'stdevp', 'sum', 'valid', 'values', 'variance', 'variancep']]]
        Aggregation function for the field (e.g., ``"mean"``, ``"sum"``, ``"median"``,
        ``"min"``, ``"max"``, ``"count"`` ).

        **Default value:** ``undefined`` (None)

        **See also:** `aggregate <https://vega.github.io/vega-lite/docs/aggregate.html>`__
        documentation.
    bandPosition : float
        Relative position on a band of a stacked, binned, time unit, or band scale. For
        example, the marks will be positioned at the beginning of the band if set to ``0``,
        and at the middle of the band if set to ``0.5``.
    bin : Union[None, Union[:class:`BinParams`, Dict[required=[]]], bool]
        A flag for binning a ``quantitative`` field, `an object defining binning parameters
        <https://vega.github.io/vega-lite/docs/bin.html#bin-parameters>`__, or indicating
        that the data for ``x`` or ``y`` channel are binned before they are imported into
        Vega-Lite ( ``"binned"`` ).


        If ``true``, default `binning parameters
        <https://vega.github.io/vega-lite/docs/bin.html#bin-parameters>`__ will be applied.

        If ``"binned"``, this indicates that the data for the ``x`` (or ``y`` ) channel are
        already binned. You can map the bin-start field to ``x`` (or ``y`` ) and the bin-end
        field to ``x2`` (or ``y2`` ). The scale and axis will be formatted similar to
        binning in Vega-Lite.  To adjust the axis ticks based on the bin step, you can also
        set the axis's `tickMinStep
        <https://vega.github.io/vega-lite/docs/axis.html#ticks>`__ property.

        **Default value:** ``false``

        **See also:** `bin <https://vega.github.io/vega-lite/docs/bin.html>`__
        documentation.
    field : Union[:class:`Field`, Union[:class:`FieldName`, str], Union[:class:`RepeatRef`, Dict[required=[repeat]]]]
        **Required.** A string defining the name of the field from which to pull a data
        value or an object defining iterated values from the `repeat
        <https://vega.github.io/vega-lite/docs/repeat.html>`__ operator.

        **See also:** `field <https://vega.github.io/vega-lite/docs/field.html>`__
        documentation.

        **Notes:** 1)  Dots ( ``.`` ) and brackets ( ``[`` and ``]`` ) can be used to access
        nested objects (e.g., ``"field": "foo.bar"`` and ``"field": "foo['bar']"`` ). If
        field names contain dots or brackets but are not nested, you can use ``\\`` to
        escape dots and brackets (e.g., ``"a\\.b"`` and ``"a\\[0\\]"`` ). See more details
        about escaping in the `field documentation
        <https://vega.github.io/vega-lite/docs/field.html>`__. 2) ``field`` is not required
        if ``aggregate`` is ``count``.
    header : Union[None, Union[:class:`Header`, Dict[required=[]]]]
        An object defining properties of a facet's header.
    sort : Union[None, Union[:class:`EncodingSortField`, Dict[required=[]]], Union[:class:`SortArray`, List[Union[:class:`DateTime`, Dict[required=[]]]], List[bool], List[float], List[str]], Union[:class:`SortOrder`, Literal['ascending', 'descending']]]
        Sort order for the encoded field.

        For continuous fields (quantitative or temporal), ``sort`` can be either
        ``"ascending"`` or ``"descending"``.

        For discrete fields, ``sort`` can be one of the following:


        * ``"ascending"`` or ``"descending"`` -- for sorting by the values' natural order in
          JavaScript.
        * `A sort field definition
          <https://vega.github.io/vega-lite/docs/sort.html#sort-field>`__ for sorting by
          another field.
        * `An array specifying the field values in preferred order
          <https://vega.github.io/vega-lite/docs/sort.html#sort-array>`__. In this case, the
          sort order will obey the values in the array, followed by any unspecified values
          in their original order. For discrete time field, values in the sort array can be
          `date-time definition objects
          <https://vega.github.io/vega-lite/docs/datetime.html>`__. In addition, for time
          units ``"month"`` and ``"day"``, the values can be the month or day names (case
          insensitive) or their 3-letter initials (e.g., ``"Mon"``, ``"Tue"`` ).
        * ``null`` indicating no sort.

        **Default value:** ``"ascending"``

        **Note:** ``null`` is not supported for ``row`` and ``column``.
    timeUnit : Union[Union[:class:`BinnedTimeUnit`, Literal['binnedutcyear', 'binnedutcyearquarter', 'binnedutcyearquartermonth', 'binnedutcyearmonth', 'binnedutcyearmonthdate', 'binnedutcyearmonthdatehours', 'binnedutcyearmonthdatehoursminutes', 'binnedutcyearmonthdatehoursminutesseconds', 'binnedutcyearweek', 'binnedutcyearweekday', 'binnedutcyearweekdayhours', 'binnedutcyearweekdayhoursminutes', 'binnedutcyearweekdayhoursminutesseconds', 'binnedutcyeardayofyear'], Literal['binnedyear', 'binnedyearquarter', 'binnedyearquartermonth', 'binnedyearmonth', 'binnedyearmonthdate', 'binnedyearmonthdatehours', 'binnedyearmonthdatehoursminutes', 'binnedyearmonthdatehoursminutesseconds', 'binnedyearweek', 'binnedyearweekday', 'binnedyearweekdayhours', 'binnedyearweekdayhoursminutes', 'binnedyearweekdayhoursminutesseconds', 'binnedyeardayofyear']], Union[:class:`TimeUnitParams`, Dict[required=[]]], Union[:class:`TimeUnit`, Union[:class:`MultiTimeUnit`, Union[:class:`LocalMultiTimeUnit`, Literal['yearquarter', 'yearquartermonth', 'yearmonth', 'yearmonthdate', 'yearmonthdatehours', 'yearmonthdatehoursminutes', 'yearmonthdatehoursminutesseconds', 'yearweek', 'yearweekday', 'yearweekdayhours', 'yearweekdayhoursminutes', 'yearweekdayhoursminutesseconds', 'yeardayofyear', 'quartermonth', 'monthdate', 'monthdatehours', 'monthdatehoursminutes', 'monthdatehoursminutesseconds', 'weekday', 'weeksdayhours', 'weekdayhoursminutes', 'weekdayhoursminutesseconds', 'dayhours', 'dayhoursminutes', 'dayhoursminutesseconds', 'hoursminutes', 'hoursminutesseconds', 'minutesseconds', 'secondsmilliseconds']], Union[:class:`UtcMultiTimeUnit`, Literal['utcyearquarter', 'utcyearquartermonth', 'utcyearmonth', 'utcyearmonthdate', 'utcyearmonthdatehours', 'utcyearmonthdatehoursminutes', 'utcyearmonthdatehoursminutesseconds', 'utcyearweek', 'utcyearweekday', 'utcyearweekdayhours', 'utcyearweekdayhoursminutes', 'utcyearweekdayhoursminutesseconds', 'utcyeardayofyear', 'utcquartermonth', 'utcmonthdate', 'utcmonthdatehours', 'utcmonthdatehoursminutes', 'utcmonthdatehoursminutesseconds', 'utcweekday', 'utcweeksdayhours', 'utcweekdayhoursminutes', 'utcweekdayhoursminutesseconds', 'utcdayhours', 'utcdayhoursminutes', 'utcdayhoursminutesseconds', 'utchoursminutes', 'utchoursminutesseconds', 'utcminutesseconds', 'utcsecondsmilliseconds']]], Union[:class:`SingleTimeUnit`, Union[:class:`LocalSingleTimeUnit`, Literal['year', 'quarter', 'month', 'week', 'day', 'dayofyear', 'date', 'hours', 'minutes', 'seconds', 'milliseconds']], Union[:class:`UtcSingleTimeUnit`, Literal['utcyear', 'utcquarter', 'utcmonth', 'utcweek', 'utcday', 'utcdayofyear', 'utcdate', 'utchours', 'utcminutes', 'utcseconds', 'utcmilliseconds']]]]]
        Time unit (e.g., ``year``, ``yearmonth``, ``month``, ``hours`` ) for a temporal
        field. or `a temporal field that gets casted as ordinal
        <https://vega.github.io/vega-lite/docs/type.html#cast>`__.

        **Default value:** ``undefined`` (None)

        **See also:** `timeUnit <https://vega.github.io/vega-lite/docs/timeunit.html>`__
        documentation.
    title : Union[None, Union[:class:`Text`, List[str], str]]
        A title for the field. If ``null``, the title will be removed.

        **Default value:**  derived from the field's name and transformation function (
        ``aggregate``, ``bin`` and ``timeUnit`` ). If the field has an aggregate function,
        the function is displayed as part of the title (e.g., ``"Sum of Profit"`` ). If the
        field is binned or has a time unit applied, the applied function is shown in
        parentheses (e.g., ``"Profit (binned)"``, ``"Transaction Date (year-month)"`` ).
        Otherwise, the title is simply the field name.

        **Notes** :

        1) You can customize the default field title format by providing the `fieldTitle
        <https://vega.github.io/vega-lite/docs/config.html#top-level-config>`__ property in
        the `config <https://vega.github.io/vega-lite/docs/config.html>`__ or `fieldTitle
        function via the compile function's options
        <https://vega.github.io/vega-lite/usage/compile.html#field-title>`__.

        2) If both field definition's ``title`` and axis, header, or legend ``title`` are
        defined, axis/header/legend title will be used.
    type : Union[:class:`StandardType`, Literal['quantitative', 'ordinal', 'temporal', 'nominal']]
        The type of measurement ( ``"quantitative"``, ``"temporal"``, ``"ordinal"``, or
        ``"nominal"`` ) for the encoded field or constant value ( ``datum`` ). It can also
        be a ``"geojson"`` type for encoding `'geoshape'
        <https://vega.github.io/vega-lite/docs/geoshape.html>`__.

        Vega-Lite automatically infers data types in many cases as discussed below. However,
        type is required for a field if: (1) the field is not nominal and the field encoding
        has no specified ``aggregate`` (except ``argmin`` and ``argmax`` ), ``bin``, scale
        type, custom ``sort`` order, nor ``timeUnit`` or (2) if you wish to use an ordinal
        scale for a field with ``bin`` or ``timeUnit``.

        **Default value:**

        1) For a data ``field``, ``"nominal"`` is the default data type unless the field
        encoding has ``aggregate``, ``channel``, ``bin``, scale type, ``sort``, or
        ``timeUnit`` that satisfies the following criteria:


        * ``"quantitative"`` is the default type if (1) the encoded field contains ``bin``
          or ``aggregate`` except ``"argmin"`` and ``"argmax"``, (2) the encoding channel is
          ``latitude`` or ``longitude`` channel or (3) if the specified scale type is `a
          quantitative scale <https://vega.github.io/vega-lite/docs/scale.html#type>`__.
        * ``"temporal"`` is the default type if (1) the encoded field contains ``timeUnit``
          or (2) the specified scale type is a time or utc scale
        * ``"ordinal"`` is the default type if (1) the encoded field contains a `custom sort
          order
          <https://vega.github.io/vega-lite/docs/sort.html#specifying-custom-sort-order>`__,
          (2) the specified scale type is an ordinal/point/band scale, or (3) the encoding
          channel is ``order``.

        2) For a constant value in data domain ( ``datum`` ):


        * ``"quantitative"`` if the datum is a number
        * ``"nominal"`` if the datum is a string
        * ``"temporal"`` if the datum is `a date time object
          <https://vega.github.io/vega-lite/docs/datetime.html>`__

        **Note:**


        * Data ``type`` describes the semantics of the data rather than the primitive data
          types (number, string, etc.). The same primitive data type can have different
          types of measurement. For example, numeric data can represent quantitative,
          ordinal, or nominal data.
        * Data values for a temporal field can be either a date-time string (e.g.,
          ``"2015-03-07 12:32:17"``, ``"17:01"``, ``"2015-03-16"``. ``"2015"`` ) or a
          timestamp number (e.g., ``1552199579097`` ).
        * When using with `bin <https://vega.github.io/vega-lite/docs/bin.html>`__, the
          ``type`` property can be either ``"quantitative"`` (for using a linear bin scale)
          or `"ordinal" (for using an ordinal bin scale)
          <https://vega.github.io/vega-lite/docs/type.html#cast-bin>`__.
        * When using with `timeUnit
          <https://vega.github.io/vega-lite/docs/timeunit.html>`__, the ``type`` property
          can be either ``"temporal"`` (default, for using a temporal scale) or `"ordinal"
          (for using an ordinal scale)
          <https://vega.github.io/vega-lite/docs/type.html#cast-bin>`__.
        * When using with `aggregate
          <https://vega.github.io/vega-lite/docs/aggregate.html>`__, the ``type`` property
          refers to the post-aggregation data type. For example, we can calculate count
          ``distinct`` of a categorical field ``"cat"`` using ``{"aggregate": "distinct",
          "field": "cat"}``. The ``"type"`` of the aggregate output is ``"quantitative"``.
        * Secondary channels (e.g., ``x2``, ``y2``, ``xError``, ``yError`` ) do not have
          ``type`` as they must have exactly the same type as their primary channels (e.g.,
          ``x``, ``y`` ).

        **See also:** `type <https://vega.github.io/vega-lite/docs/type.html>`__
        documentation.
    """

    _schema = {"$ref": "#/definitions/FacetFieldDef"}

    def __init__(
        self,
        aggregate: Union[
            Union[
                "Aggregate",
                Union["ArgmaxDef", dict],
                Union["ArgminDef", dict],
                Union[
                    "NonArgAggregateOp",
                    Literal[
                        "average",
                        "count",
                        "distinct",
                        "max",
                        "mean",
                        "median",
                        "min",
                        "missing",
                        "product",
                        "q1",
                        "q3",
                        "ci0",
                        "ci1",
                        "stderr",
                        "stdev",
                        "stdevp",
                        "sum",
                        "valid",
                        "values",
                        "variance",
                        "variancep",
                    ],
                ],
            ],
            UndefinedType,
        ] = Undefined,
        bandPosition: Union[float, UndefinedType] = Undefined,
        bin: Union[
            Union[None, Union["BinParams", dict], bool], UndefinedType
        ] = Undefined,
        field: Union[
            Union["Field", Union["FieldName", str], Union["RepeatRef", dict]],
            UndefinedType,
        ] = Undefined,
        header: Union[Union[None, Union["Header", dict]], UndefinedType] = Undefined,
        sort: Union[
            Union[
                None,
                Union["EncodingSortField", dict],
                Union[
                    "SortArray",
                    List[bool],
                    List[float],
                    List[str],
                    Union[List["DateTime"], List[dict]],
                ],
                Union["SortOrder", Literal["ascending", "descending"]],
            ],
            UndefinedType,
        ] = Undefined,
        timeUnit: Union[
            Union[
                Union[
                    "BinnedTimeUnit",
                    Literal[
                        "binnedutcyear",
                        "binnedutcyearquarter",
                        "binnedutcyearquartermonth",
                        "binnedutcyearmonth",
                        "binnedutcyearmonthdate",
                        "binnedutcyearmonthdatehours",
                        "binnedutcyearmonthdatehoursminutes",
                        "binnedutcyearmonthdatehoursminutesseconds",
                        "binnedutcyearweek",
                        "binnedutcyearweekday",
                        "binnedutcyearweekdayhours",
                        "binnedutcyearweekdayhoursminutes",
                        "binnedutcyearweekdayhoursminutesseconds",
                        "binnedutcyeardayofyear",
                    ],
                    Literal[
                        "binnedyear",
                        "binnedyearquarter",
                        "binnedyearquartermonth",
                        "binnedyearmonth",
                        "binnedyearmonthdate",
                        "binnedyearmonthdatehours",
                        "binnedyearmonthdatehoursminutes",
                        "binnedyearmonthdatehoursminutesseconds",
                        "binnedyearweek",
                        "binnedyearweekday",
                        "binnedyearweekdayhours",
                        "binnedyearweekdayhoursminutes",
                        "binnedyearweekdayhoursminutesseconds",
                        "binnedyeardayofyear",
                    ],
                ],
                Union[
                    "TimeUnit",
                    Union[
                        "MultiTimeUnit",
                        Union[
                            "LocalMultiTimeUnit",
                            Literal[
                                "yearquarter",
                                "yearquartermonth",
                                "yearmonth",
                                "yearmonthdate",
                                "yearmonthdatehours",
                                "yearmonthdatehoursminutes",
                                "yearmonthdatehoursminutesseconds",
                                "yearweek",
                                "yearweekday",
                                "yearweekdayhours",
                                "yearweekdayhoursminutes",
                                "yearweekdayhoursminutesseconds",
                                "yeardayofyear",
                                "quartermonth",
                                "monthdate",
                                "monthdatehours",
                                "monthdatehoursminutes",
                                "monthdatehoursminutesseconds",
                                "weekday",
                                "weeksdayhours",
                                "weekdayhoursminutes",
                                "weekdayhoursminutesseconds",
                                "dayhours",
                                "dayhoursminutes",
                                "dayhoursminutesseconds",
                                "hoursminutes",
                                "hoursminutesseconds",
                                "minutesseconds",
                                "secondsmilliseconds",
                            ],
                        ],
                        Union[
                            "UtcMultiTimeUnit",
                            Literal[
                                "utcyearquarter",
                                "utcyearquartermonth",
                                "utcyearmonth",
                                "utcyearmonthdate",
                                "utcyearmonthdatehours",
                                "utcyearmonthdatehoursminutes",
                                "utcyearmonthdatehoursminutesseconds",
                                "utcyearweek",
                                "utcyearweekday",
                                "utcyearweekdayhours",
                                "utcyearweekdayhoursminutes",
                                "utcyearweekdayhoursminutesseconds",
                                "utcyeardayofyear",
                                "utcquartermonth",
                                "utcmonthdate",
                                "utcmonthdatehours",
                                "utcmonthdatehoursminutes",
                                "utcmonthdatehoursminutesseconds",
                                "utcweekday",
                                "utcweeksdayhours",
                                "utcweekdayhoursminutes",
                                "utcweekdayhoursminutesseconds",
                                "utcdayhours",
                                "utcdayhoursminutes",
                                "utcdayhoursminutesseconds",
                                "utchoursminutes",
                                "utchoursminutesseconds",
                                "utcminutesseconds",
                                "utcsecondsmilliseconds",
                            ],
                        ],
                    ],
                    Union[
                        "SingleTimeUnit",
                        Union[
                            "LocalSingleTimeUnit",
                            Literal[
                                "year",
                                "quarter",
                                "month",
                                "week",
                                "day",
                                "dayofyear",
                                "date",
                                "hours",
                                "minutes",
                                "seconds",
                                "milliseconds",
                            ],
                        ],
                        Union[
                            "UtcSingleTimeUnit",
                            Literal[
                                "utcyear",
                                "utcquarter",
                                "utcmonth",
                                "utcweek",
                                "utcday",
                                "utcdayofyear",
                                "utcdate",
                                "utchours",
                                "utcminutes",
                                "utcseconds",
                                "utcmilliseconds",
                            ],
                        ],
                    ],
                ],
                Union["TimeUnitParams", dict],
            ],
            UndefinedType,
        ] = Undefined,
        title: Union[
            Union[None, Union["Text", List[str], str]], UndefinedType
        ] = Undefined,
        type: Union[
            Union[
                "StandardType",
                Literal["quantitative", "ordinal", "temporal", "nominal"],
            ],
            UndefinedType,
        ] = Undefined,
        **kwds
    ):
        super(FacetFieldDef, self).__init__(
            aggregate=aggregate,
            bandPosition=bandPosition,
            bin=bin,
            field=field,
            header=header,
            sort=sort,
            timeUnit=timeUnit,
            title=title,
            type=type,
            **kwds
        )


class FacetMapping(VegaLiteSchema):
    """FacetMapping schema wrapper

    Union[:class:`FacetMapping`, Dict[required=[]]]

    Parameters
    ----------

    column : Union[:class:`FacetFieldDef`, Dict[required=[]]]
        A field definition for the horizontal facet of trellis plots.
    row : Union[:class:`FacetFieldDef`, Dict[required=[]]]
        A field definition for the vertical facet of trellis plots.
    """

    _schema = {"$ref": "#/definitions/FacetMapping"}

    def __init__(
        self,
        column: Union[Union["FacetFieldDef", dict], UndefinedType] = Undefined,
        row: Union[Union["FacetFieldDef", dict], UndefinedType] = Undefined,
        **kwds
    ):
        super(FacetMapping, self).__init__(column=column, row=row, **kwds)


class FacetedEncoding(VegaLiteSchema):
    """FacetedEncoding schema wrapper

    Union[:class:`FacetedEncoding`, Dict[required=[]]]

    Parameters
    ----------

    angle : Union[:class:`NumericMarkPropDef`, Union[:class:`FieldOrDatumDefWithConditionDatumDefnumber`, Dict[required=[]]], Union[:class:`FieldOrDatumDefWithConditionMarkPropFieldDefnumber`, Dict[required=[]]], Union[:class:`ValueDefWithConditionMarkPropFieldOrDatumDefnumber`, Dict[required=[]]]]
        Rotation angle of point and text marks.
    color : Union[:class:`ColorDef`, Union[:class:`FieldOrDatumDefWithConditionDatumDefGradientstringnull`, Dict[required=[]]], Union[:class:`FieldOrDatumDefWithConditionMarkPropFieldDefGradientstringnull`, Dict[required=[]]], Union[:class:`ValueDefWithConditionMarkPropFieldOrDatumDefGradientstringnull`, Dict[required=[]]]]
        Color of the marks – either fill or stroke color based on  the ``filled`` property
        of mark definition. By default, ``color`` represents fill color for ``"area"``,
        ``"bar"``, ``"tick"``, ``"text"``, ``"trail"``, ``"circle"``, and ``"square"`` /
        stroke color for ``"line"`` and ``"point"``.

        **Default value:** If undefined, the default color depends on `mark config
        <https://vega.github.io/vega-lite/docs/config.html#mark-config>`__ 's ``color``
        property.

        *Note:* 1) For fine-grained control over both fill and stroke colors of the marks,
        please use the ``fill`` and ``stroke`` channels. The ``fill`` or ``stroke``
        encodings have higher precedence than ``color``, thus may override the ``color``
        encoding if conflicting encodings are specified. 2) See the scale documentation for
        more information about customizing `color scheme
        <https://vega.github.io/vega-lite/docs/scale.html#scheme>`__.
    column : Union[:class:`RowColumnEncodingFieldDef`, Dict[required=[]]]
        A field definition for the horizontal facet of trellis plots.
    description : Union[Union[:class:`StringFieldDefWithCondition`, Dict[required=[]]], Union[:class:`StringValueDefWithCondition`, Dict[required=[]]]]
        A text description of this mark for ARIA accessibility (SVG output only). For SVG
        output the ``"aria-label"`` attribute will be set to this description.
    detail : Union[List[Union[:class:`FieldDefWithoutScale`, Dict[required=[]]]], Union[:class:`FieldDefWithoutScale`, Dict[required=[]]]]
        Additional levels of detail for grouping data in aggregate views and in line, trail,
        and area marks without mapping data to a specific visual channel.
    facet : Union[:class:`FacetEncodingFieldDef`, Dict[required=[]]]
        A field definition for the (flexible) facet of trellis plots.

        If either ``row`` or ``column`` is specified, this channel will be ignored.
    fill : Union[:class:`ColorDef`, Union[:class:`FieldOrDatumDefWithConditionDatumDefGradientstringnull`, Dict[required=[]]], Union[:class:`FieldOrDatumDefWithConditionMarkPropFieldDefGradientstringnull`, Dict[required=[]]], Union[:class:`ValueDefWithConditionMarkPropFieldOrDatumDefGradientstringnull`, Dict[required=[]]]]
        Fill color of the marks. **Default value:** If undefined, the default color depends
        on `mark config <https://vega.github.io/vega-lite/docs/config.html#mark-config>`__
        's ``color`` property.

        *Note:* The ``fill`` encoding has higher precedence than ``color``, thus may
        override the ``color`` encoding if conflicting encodings are specified.
    fillOpacity : Union[:class:`NumericMarkPropDef`, Union[:class:`FieldOrDatumDefWithConditionDatumDefnumber`, Dict[required=[]]], Union[:class:`FieldOrDatumDefWithConditionMarkPropFieldDefnumber`, Dict[required=[]]], Union[:class:`ValueDefWithConditionMarkPropFieldOrDatumDefnumber`, Dict[required=[]]]]
        Fill opacity of the marks.

        **Default value:** If undefined, the default opacity depends on `mark config
        <https://vega.github.io/vega-lite/docs/config.html#mark-config>`__ 's
        ``fillOpacity`` property.
    href : Union[Union[:class:`StringFieldDefWithCondition`, Dict[required=[]]], Union[:class:`StringValueDefWithCondition`, Dict[required=[]]]]
        A URL to load upon mouse click.
    key : Union[:class:`FieldDefWithoutScale`, Dict[required=[]]]
        A data field to use as a unique key for data binding. When a visualization’s data is
        updated, the key value will be used to match data elements to existing mark
        instances. Use a key channel to enable object constancy for transitions over dynamic
        data.
    latitude : Union[:class:`LatLongDef`, Union[:class:`DatumDef`, Dict[required=[]]], Union[:class:`LatLongFieldDef`, Dict[required=[]]]]
        Latitude position of geographically projected marks.
    latitude2 : Union[:class:`Position2Def`, Union[:class:`DatumDef`, Dict[required=[]]], Union[:class:`PositionValueDef`, Dict[required=[value]]], Union[:class:`SecondaryFieldDef`, Dict[required=[]]]]
        Latitude-2 position for geographically projected ranged ``"area"``, ``"bar"``,
        ``"rect"``, and  ``"rule"``.
    longitude : Union[:class:`LatLongDef`, Union[:class:`DatumDef`, Dict[required=[]]], Union[:class:`LatLongFieldDef`, Dict[required=[]]]]
        Longitude position of geographically projected marks.
    longitude2 : Union[:class:`Position2Def`, Union[:class:`DatumDef`, Dict[required=[]]], Union[:class:`PositionValueDef`, Dict[required=[value]]], Union[:class:`SecondaryFieldDef`, Dict[required=[]]]]
        Longitude-2 position for geographically projected ranged ``"area"``, ``"bar"``,
        ``"rect"``, and  ``"rule"``.
    opacity : Union[:class:`NumericMarkPropDef`, Union[:class:`FieldOrDatumDefWithConditionDatumDefnumber`, Dict[required=[]]], Union[:class:`FieldOrDatumDefWithConditionMarkPropFieldDefnumber`, Dict[required=[]]], Union[:class:`ValueDefWithConditionMarkPropFieldOrDatumDefnumber`, Dict[required=[]]]]
        Opacity of the marks.

        **Default value:** If undefined, the default opacity depends on `mark config
        <https://vega.github.io/vega-lite/docs/config.html#mark-config>`__ 's ``opacity``
        property.
    order : Union[List[Union[:class:`OrderFieldDef`, Dict[required=[]]]], Union[:class:`OrderFieldDef`, Dict[required=[]]], Union[:class:`OrderOnlyDef`, Dict[required=[]]], Union[:class:`OrderValueDef`, Dict[required=[value]]]]
        Order of the marks.


        * For stacked marks, this ``order`` channel encodes `stack order
          <https://vega.github.io/vega-lite/docs/stack.html#order>`__.
        * For line and trail marks, this ``order`` channel encodes order of data points in
          the lines. This can be useful for creating `a connected scatterplot
          <https://vega.github.io/vega-lite/examples/connected_scatterplot.html>`__. Setting
          ``order`` to ``{"value": null}`` makes the line marks use the original order in
          the data sources.
        * Otherwise, this ``order`` channel encodes layer order of the marks.

        **Note** : In aggregate plots, ``order`` field should be ``aggregate`` d to avoid
        creating additional aggregation grouping.
    radius : Union[:class:`PolarDef`, Union[:class:`PositionDatumDefBase`, Dict[required=[]]], Union[:class:`PositionFieldDefBase`, Dict[required=[]]], Union[:class:`PositionValueDef`, Dict[required=[value]]]]
        The outer radius in pixels of arc marks.
    radius2 : Union[:class:`Position2Def`, Union[:class:`DatumDef`, Dict[required=[]]], Union[:class:`PositionValueDef`, Dict[required=[value]]], Union[:class:`SecondaryFieldDef`, Dict[required=[]]]]
        The inner radius in pixels of arc marks.
    row : Union[:class:`RowColumnEncodingFieldDef`, Dict[required=[]]]
        A field definition for the vertical facet of trellis plots.
    shape : Union[:class:`ShapeDef`, Union[:class:`FieldOrDatumDefWithConditionDatumDefstringnull`, Dict[required=[]]], Union[:class:`FieldOrDatumDefWithConditionMarkPropFieldDefTypeForShapestringnull`, Dict[required=[]]], Union[:class:`ValueDefWithConditionMarkPropFieldOrDatumDefTypeForShapestringnull`, Dict[required=[]]]]
        Shape of the mark.


        #.
        For ``point`` marks the supported values include:   - plotting shapes: ``"circle"``,
        ``"square"``, ``"cross"``, ``"diamond"``, ``"triangle-up"``, ``"triangle-down"``,
        ``"triangle-right"``, or ``"triangle-left"``.   - the line symbol ``"stroke"``   -
        centered directional shapes ``"arrow"``, ``"wedge"``, or ``"triangle"``   - a custom
        `SVG path string
        <https://developer.mozilla.org/en-US/docs/Web/SVG/Tutorial/Paths>`__ (For correct
        sizing, custom shape paths should be defined within a square bounding box with
        coordinates ranging from -1 to 1 along both the x and y dimensions.)

        #.
        For ``geoshape`` marks it should be a field definition of the geojson data

        **Default value:** If undefined, the default shape depends on `mark config
        <https://vega.github.io/vega-lite/docs/config.html#point-config>`__ 's ``shape``
        property. ( ``"circle"`` if unset.)
    size : Union[:class:`NumericMarkPropDef`, Union[:class:`FieldOrDatumDefWithConditionDatumDefnumber`, Dict[required=[]]], Union[:class:`FieldOrDatumDefWithConditionMarkPropFieldDefnumber`, Dict[required=[]]], Union[:class:`ValueDefWithConditionMarkPropFieldOrDatumDefnumber`, Dict[required=[]]]]
        Size of the mark.


        * For ``"point"``, ``"square"`` and ``"circle"``, – the symbol size, or pixel area
          of the mark.
        * For ``"bar"`` and ``"tick"`` – the bar and tick's size.
        * For ``"text"`` – the text's font size.
        * Size is unsupported for ``"line"``, ``"area"``, and ``"rect"``. (Use ``"trail"``
          instead of line with varying size)
    stroke : Union[:class:`ColorDef`, Union[:class:`FieldOrDatumDefWithConditionDatumDefGradientstringnull`, Dict[required=[]]], Union[:class:`FieldOrDatumDefWithConditionMarkPropFieldDefGradientstringnull`, Dict[required=[]]], Union[:class:`ValueDefWithConditionMarkPropFieldOrDatumDefGradientstringnull`, Dict[required=[]]]]
        Stroke color of the marks. **Default value:** If undefined, the default color
        depends on `mark config
        <https://vega.github.io/vega-lite/docs/config.html#mark-config>`__ 's ``color``
        property.

        *Note:* The ``stroke`` encoding has higher precedence than ``color``, thus may
        override the ``color`` encoding if conflicting encodings are specified.
    strokeDash : Union[:class:`NumericArrayMarkPropDef`, Union[:class:`FieldOrDatumDefWithConditionDatumDefnumberArray`, Dict[required=[]]], Union[:class:`FieldOrDatumDefWithConditionMarkPropFieldDefnumberArray`, Dict[required=[]]], Union[:class:`ValueDefWithConditionMarkPropFieldOrDatumDefnumberArray`, Dict[required=[]]]]
        Stroke dash of the marks.

        **Default value:** ``[1,0]`` (No dash).
    strokeOpacity : Union[:class:`NumericMarkPropDef`, Union[:class:`FieldOrDatumDefWithConditionDatumDefnumber`, Dict[required=[]]], Union[:class:`FieldOrDatumDefWithConditionMarkPropFieldDefnumber`, Dict[required=[]]], Union[:class:`ValueDefWithConditionMarkPropFieldOrDatumDefnumber`, Dict[required=[]]]]
        Stroke opacity of the marks.

        **Default value:** If undefined, the default opacity depends on `mark config
        <https://vega.github.io/vega-lite/docs/config.html#mark-config>`__ 's
        ``strokeOpacity`` property.
    strokeWidth : Union[:class:`NumericMarkPropDef`, Union[:class:`FieldOrDatumDefWithConditionDatumDefnumber`, Dict[required=[]]], Union[:class:`FieldOrDatumDefWithConditionMarkPropFieldDefnumber`, Dict[required=[]]], Union[:class:`ValueDefWithConditionMarkPropFieldOrDatumDefnumber`, Dict[required=[]]]]
        Stroke width of the marks.

        **Default value:** If undefined, the default stroke width depends on `mark config
        <https://vega.github.io/vega-lite/docs/config.html#mark-config>`__ 's
        ``strokeWidth`` property.
    text : Union[:class:`TextDef`, Union[:class:`FieldOrDatumDefWithConditionStringDatumDefText`, Dict[required=[]]], Union[:class:`FieldOrDatumDefWithConditionStringFieldDefText`, Dict[required=[]]], Union[:class:`ValueDefWithConditionStringFieldDefText`, Dict[required=[]]]]
        Text of the ``text`` mark.
    theta : Union[:class:`PolarDef`, Union[:class:`PositionDatumDefBase`, Dict[required=[]]], Union[:class:`PositionFieldDefBase`, Dict[required=[]]], Union[:class:`PositionValueDef`, Dict[required=[value]]]]
        For arc marks, the arc length in radians if theta2 is not specified, otherwise the
        start arc angle. (A value of 0 indicates up or “north”, increasing values proceed
        clockwise.)

        For text marks, polar coordinate angle in radians.
    theta2 : Union[:class:`Position2Def`, Union[:class:`DatumDef`, Dict[required=[]]], Union[:class:`PositionValueDef`, Dict[required=[value]]], Union[:class:`SecondaryFieldDef`, Dict[required=[]]]]
        The end angle of arc marks in radians. A value of 0 indicates up or “north”,
        increasing values proceed clockwise.
    tooltip : Union[List[Union[:class:`StringFieldDef`, Dict[required=[]]]], None, Union[:class:`StringFieldDefWithCondition`, Dict[required=[]]], Union[:class:`StringValueDefWithCondition`, Dict[required=[]]]]
        The tooltip text to show upon mouse hover. Specifying ``tooltip`` encoding overrides
        `the tooltip property in the mark definition
        <https://vega.github.io/vega-lite/docs/mark.html#mark-def>`__.

        See the `tooltip <https://vega.github.io/vega-lite/docs/tooltip.html>`__
        documentation for a detailed discussion about tooltip in Vega-Lite.
    url : Union[Union[:class:`StringFieldDefWithCondition`, Dict[required=[]]], Union[:class:`StringValueDefWithCondition`, Dict[required=[]]]]
        The URL of an image mark.
    x : Union[:class:`PositionDef`, Union[:class:`PositionDatumDef`, Dict[required=[]]], Union[:class:`PositionFieldDef`, Dict[required=[]]], Union[:class:`PositionValueDef`, Dict[required=[value]]]]
        X coordinates of the marks, or width of horizontal ``"bar"`` and ``"area"`` without
        specified ``x2`` or ``width``.

        The ``value`` of this channel can be a number or a string ``"width"`` for the width
        of the plot.
    x2 : Union[:class:`Position2Def`, Union[:class:`DatumDef`, Dict[required=[]]], Union[:class:`PositionValueDef`, Dict[required=[value]]], Union[:class:`SecondaryFieldDef`, Dict[required=[]]]]
        X2 coordinates for ranged ``"area"``, ``"bar"``, ``"rect"``, and  ``"rule"``.

        The ``value`` of this channel can be a number or a string ``"width"`` for the width
        of the plot.
    xError : Union[Union[:class:`SecondaryFieldDef`, Dict[required=[]]], Union[:class:`ValueDefnumber`, Dict[required=[value]]]]
        Error value of x coordinates for error specified ``"errorbar"`` and ``"errorband"``.
    xError2 : Union[Union[:class:`SecondaryFieldDef`, Dict[required=[]]], Union[:class:`ValueDefnumber`, Dict[required=[value]]]]
        Secondary error value of x coordinates for error specified ``"errorbar"`` and
        ``"errorband"``.
    xOffset : Union[:class:`OffsetDef`, Union[:class:`ScaleDatumDef`, Dict[required=[]]], Union[:class:`ScaleFieldDef`, Dict[required=[]]], Union[:class:`ValueDefnumber`, Dict[required=[value]]]]
        Offset of x-position of the marks
    y : Union[:class:`PositionDef`, Union[:class:`PositionDatumDef`, Dict[required=[]]], Union[:class:`PositionFieldDef`, Dict[required=[]]], Union[:class:`PositionValueDef`, Dict[required=[value]]]]
        Y coordinates of the marks, or height of vertical ``"bar"`` and ``"area"`` without
        specified ``y2`` or ``height``.

        The ``value`` of this channel can be a number or a string ``"height"`` for the
        height of the plot.
    y2 : Union[:class:`Position2Def`, Union[:class:`DatumDef`, Dict[required=[]]], Union[:class:`PositionValueDef`, Dict[required=[value]]], Union[:class:`SecondaryFieldDef`, Dict[required=[]]]]
        Y2 coordinates for ranged ``"area"``, ``"bar"``, ``"rect"``, and  ``"rule"``.

        The ``value`` of this channel can be a number or a string ``"height"`` for the
        height of the plot.
    yError : Union[Union[:class:`SecondaryFieldDef`, Dict[required=[]]], Union[:class:`ValueDefnumber`, Dict[required=[value]]]]
        Error value of y coordinates for error specified ``"errorbar"`` and ``"errorband"``.
    yError2 : Union[Union[:class:`SecondaryFieldDef`, Dict[required=[]]], Union[:class:`ValueDefnumber`, Dict[required=[value]]]]
        Secondary error value of y coordinates for error specified ``"errorbar"`` and
        ``"errorband"``.
    yOffset : Union[:class:`OffsetDef`, Union[:class:`ScaleDatumDef`, Dict[required=[]]], Union[:class:`ScaleFieldDef`, Dict[required=[]]], Union[:class:`ValueDefnumber`, Dict[required=[value]]]]
        Offset of y-position of the marks
    """

    _schema = {"$ref": "#/definitions/FacetedEncoding"}

    def __init__(
        self,
        angle: Union[
            Union[
                "NumericMarkPropDef",
                Union["FieldOrDatumDefWithConditionDatumDefnumber", dict],
                Union["FieldOrDatumDefWithConditionMarkPropFieldDefnumber", dict],
                Union["ValueDefWithConditionMarkPropFieldOrDatumDefnumber", dict],
            ],
            UndefinedType,
        ] = Undefined,
        color: Union[
            Union[
                "ColorDef",
                Union["FieldOrDatumDefWithConditionDatumDefGradientstringnull", dict],
                Union[
                    "FieldOrDatumDefWithConditionMarkPropFieldDefGradientstringnull",
                    dict,
                ],
                Union[
                    "ValueDefWithConditionMarkPropFieldOrDatumDefGradientstringnull",
                    dict,
                ],
            ],
            UndefinedType,
        ] = Undefined,
        column: Union[
            Union["RowColumnEncodingFieldDef", dict], UndefinedType
        ] = Undefined,
        description: Union[
            Union[
                Union["StringFieldDefWithCondition", dict],
                Union["StringValueDefWithCondition", dict],
            ],
            UndefinedType,
        ] = Undefined,
        detail: Union[
            Union[
                Union["FieldDefWithoutScale", dict],
                Union[List["FieldDefWithoutScale"], List[dict]],
            ],
            UndefinedType,
        ] = Undefined,
        facet: Union[Union["FacetEncodingFieldDef", dict], UndefinedType] = Undefined,
        fill: Union[
            Union[
                "ColorDef",
                Union["FieldOrDatumDefWithConditionDatumDefGradientstringnull", dict],
                Union[
                    "FieldOrDatumDefWithConditionMarkPropFieldDefGradientstringnull",
                    dict,
                ],
                Union[
                    "ValueDefWithConditionMarkPropFieldOrDatumDefGradientstringnull",
                    dict,
                ],
            ],
            UndefinedType,
        ] = Undefined,
        fillOpacity: Union[
            Union[
                "NumericMarkPropDef",
                Union["FieldOrDatumDefWithConditionDatumDefnumber", dict],
                Union["FieldOrDatumDefWithConditionMarkPropFieldDefnumber", dict],
                Union["ValueDefWithConditionMarkPropFieldOrDatumDefnumber", dict],
            ],
            UndefinedType,
        ] = Undefined,
        href: Union[
            Union[
                Union["StringFieldDefWithCondition", dict],
                Union["StringValueDefWithCondition", dict],
            ],
            UndefinedType,
        ] = Undefined,
        key: Union[Union["FieldDefWithoutScale", dict], UndefinedType] = Undefined,
        latitude: Union[
            Union[
                "LatLongDef", Union["DatumDef", dict], Union["LatLongFieldDef", dict]
            ],
            UndefinedType,
        ] = Undefined,
        latitude2: Union[
            Union[
                "Position2Def",
                Union["DatumDef", dict],
                Union["PositionValueDef", dict],
                Union["SecondaryFieldDef", dict],
            ],
            UndefinedType,
        ] = Undefined,
        longitude: Union[
            Union[
                "LatLongDef", Union["DatumDef", dict], Union["LatLongFieldDef", dict]
            ],
            UndefinedType,
        ] = Undefined,
        longitude2: Union[
            Union[
                "Position2Def",
                Union["DatumDef", dict],
                Union["PositionValueDef", dict],
                Union["SecondaryFieldDef", dict],
            ],
            UndefinedType,
        ] = Undefined,
        opacity: Union[
            Union[
                "NumericMarkPropDef",
                Union["FieldOrDatumDefWithConditionDatumDefnumber", dict],
                Union["FieldOrDatumDefWithConditionMarkPropFieldDefnumber", dict],
                Union["ValueDefWithConditionMarkPropFieldOrDatumDefnumber", dict],
            ],
            UndefinedType,
        ] = Undefined,
        order: Union[
            Union[
                Union["OrderFieldDef", dict],
                Union["OrderOnlyDef", dict],
                Union["OrderValueDef", dict],
                Union[List["OrderFieldDef"], List[dict]],
            ],
            UndefinedType,
        ] = Undefined,
        radius: Union[
            Union[
                "PolarDef",
                Union["PositionDatumDefBase", dict],
                Union["PositionFieldDefBase", dict],
                Union["PositionValueDef", dict],
            ],
            UndefinedType,
        ] = Undefined,
        radius2: Union[
            Union[
                "Position2Def",
                Union["DatumDef", dict],
                Union["PositionValueDef", dict],
                Union["SecondaryFieldDef", dict],
            ],
            UndefinedType,
        ] = Undefined,
        row: Union[Union["RowColumnEncodingFieldDef", dict], UndefinedType] = Undefined,
        shape: Union[
            Union[
                "ShapeDef",
                Union["FieldOrDatumDefWithConditionDatumDefstringnull", dict],
                Union[
                    "FieldOrDatumDefWithConditionMarkPropFieldDefTypeForShapestringnull",
                    dict,
                ],
                Union[
                    "ValueDefWithConditionMarkPropFieldOrDatumDefTypeForShapestringnull",
                    dict,
                ],
            ],
            UndefinedType,
        ] = Undefined,
        size: Union[
            Union[
                "NumericMarkPropDef",
                Union["FieldOrDatumDefWithConditionDatumDefnumber", dict],
                Union["FieldOrDatumDefWithConditionMarkPropFieldDefnumber", dict],
                Union["ValueDefWithConditionMarkPropFieldOrDatumDefnumber", dict],
            ],
            UndefinedType,
        ] = Undefined,
        stroke: Union[
            Union[
                "ColorDef",
                Union["FieldOrDatumDefWithConditionDatumDefGradientstringnull", dict],
                Union[
                    "FieldOrDatumDefWithConditionMarkPropFieldDefGradientstringnull",
                    dict,
                ],
                Union[
                    "ValueDefWithConditionMarkPropFieldOrDatumDefGradientstringnull",
                    dict,
                ],
            ],
            UndefinedType,
        ] = Undefined,
        strokeDash: Union[
            Union[
                "NumericArrayMarkPropDef",
                Union["FieldOrDatumDefWithConditionDatumDefnumberArray", dict],
                Union["FieldOrDatumDefWithConditionMarkPropFieldDefnumberArray", dict],
                Union["ValueDefWithConditionMarkPropFieldOrDatumDefnumberArray", dict],
            ],
            UndefinedType,
        ] = Undefined,
        strokeOpacity: Union[
            Union[
                "NumericMarkPropDef",
                Union["FieldOrDatumDefWithConditionDatumDefnumber", dict],
                Union["FieldOrDatumDefWithConditionMarkPropFieldDefnumber", dict],
                Union["ValueDefWithConditionMarkPropFieldOrDatumDefnumber", dict],
            ],
            UndefinedType,
        ] = Undefined,
        strokeWidth: Union[
            Union[
                "NumericMarkPropDef",
                Union["FieldOrDatumDefWithConditionDatumDefnumber", dict],
                Union["FieldOrDatumDefWithConditionMarkPropFieldDefnumber", dict],
                Union["ValueDefWithConditionMarkPropFieldOrDatumDefnumber", dict],
            ],
            UndefinedType,
        ] = Undefined,
        text: Union[
            Union[
                "TextDef",
                Union["FieldOrDatumDefWithConditionStringDatumDefText", dict],
                Union["FieldOrDatumDefWithConditionStringFieldDefText", dict],
                Union["ValueDefWithConditionStringFieldDefText", dict],
            ],
            UndefinedType,
        ] = Undefined,
        theta: Union[
            Union[
                "PolarDef",
                Union["PositionDatumDefBase", dict],
                Union["PositionFieldDefBase", dict],
                Union["PositionValueDef", dict],
            ],
            UndefinedType,
        ] = Undefined,
        theta2: Union[
            Union[
                "Position2Def",
                Union["DatumDef", dict],
                Union["PositionValueDef", dict],
                Union["SecondaryFieldDef", dict],
            ],
            UndefinedType,
        ] = Undefined,
        tooltip: Union[
            Union[
                None,
                Union["StringFieldDefWithCondition", dict],
                Union["StringValueDefWithCondition", dict],
                Union[List["StringFieldDef"], List[dict]],
            ],
            UndefinedType,
        ] = Undefined,
        url: Union[
            Union[
                Union["StringFieldDefWithCondition", dict],
                Union["StringValueDefWithCondition", dict],
            ],
            UndefinedType,
        ] = Undefined,
        x: Union[
            Union[
                "PositionDef",
                Union["PositionDatumDef", dict],
                Union["PositionFieldDef", dict],
                Union["PositionValueDef", dict],
            ],
            UndefinedType,
        ] = Undefined,
        x2: Union[
            Union[
                "Position2Def",
                Union["DatumDef", dict],
                Union["PositionValueDef", dict],
                Union["SecondaryFieldDef", dict],
            ],
            UndefinedType,
        ] = Undefined,
        xError: Union[
            Union[Union["SecondaryFieldDef", dict], Union["ValueDefnumber", dict]],
            UndefinedType,
        ] = Undefined,
        xError2: Union[
            Union[Union["SecondaryFieldDef", dict], Union["ValueDefnumber", dict]],
            UndefinedType,
        ] = Undefined,
        xOffset: Union[
            Union[
                "OffsetDef",
                Union["ScaleDatumDef", dict],
                Union["ScaleFieldDef", dict],
                Union["ValueDefnumber", dict],
            ],
            UndefinedType,
        ] = Undefined,
        y: Union[
            Union[
                "PositionDef",
                Union["PositionDatumDef", dict],
                Union["PositionFieldDef", dict],
                Union["PositionValueDef", dict],
            ],
            UndefinedType,
        ] = Undefined,
        y2: Union[
            Union[
                "Position2Def",
                Union["DatumDef", dict],
                Union["PositionValueDef", dict],
                Union["SecondaryFieldDef", dict],
            ],
            UndefinedType,
        ] = Undefined,
        yError: Union[
            Union[Union["SecondaryFieldDef", dict], Union["ValueDefnumber", dict]],
            UndefinedType,
        ] = Undefined,
        yError2: Union[
            Union[Union["SecondaryFieldDef", dict], Union["ValueDefnumber", dict]],
            UndefinedType,
        ] = Undefined,
        yOffset: Union[
            Union[
                "OffsetDef",
                Union["ScaleDatumDef", dict],
                Union["ScaleFieldDef", dict],
                Union["ValueDefnumber", dict],
            ],
            UndefinedType,
        ] = Undefined,
        **kwds
    ):
        super(FacetedEncoding, self).__init__(
            angle=angle,
            color=color,
            column=column,
            description=description,
            detail=detail,
            facet=facet,
            fill=fill,
            fillOpacity=fillOpacity,
            href=href,
            key=key,
            latitude=latitude,
            latitude2=latitude2,
            longitude=longitude,
            longitude2=longitude2,
            opacity=opacity,
            order=order,
            radius=radius,
            radius2=radius2,
            row=row,
            shape=shape,
            size=size,
            stroke=stroke,
            strokeDash=strokeDash,
            strokeOpacity=strokeOpacity,
            strokeWidth=strokeWidth,
            text=text,
            theta=theta,
            theta2=theta2,
            tooltip=tooltip,
            url=url,
            x=x,
            x2=x2,
            xError=xError,
            xError2=xError2,
            xOffset=xOffset,
            y=y,
            y2=y2,
            yError=yError,
            yError2=yError2,
            yOffset=yOffset,
            **kwds
        )


class Feature(VegaLiteSchema):
    """Feature schema wrapper

    Union[:class:`Feature`, Dict[required=[geometry, properties, type]]]
    A feature object which contains a geometry and associated properties.
    https://tools.ietf.org/html/rfc7946#section-3.2

    Parameters
    ----------

    geometry : Union[:class:`Geometry`, Union[:class:`GeometryCollection`, Dict[required=[geometries, type]]], Union[:class:`LineString`, Dict[required=[coordinates, type]]], Union[:class:`MultiLineString`, Dict[required=[coordinates, type]]], Union[:class:`MultiPoint`, Dict[required=[coordinates, type]]], Union[:class:`MultiPolygon`, Dict[required=[coordinates, type]]], Union[:class:`Point`, Dict[required=[coordinates, type]]], Union[:class:`Polygon`, Dict[required=[coordinates, type]]]]
        The feature's geometry
    properties : Union[:class:`GeoJsonProperties`, Dict[required=[]], None]
        Properties associated with this feature.
    type : str
        Specifies the type of GeoJSON object.
    bbox : Union[:class:`BBox`, List[float]]
        Bounding box of the coordinate range of the object's Geometries, Features, or
        Feature Collections. https://tools.ietf.org/html/rfc7946#section-5
    id : Union[float, str]
        A value that uniquely identifies this feature in a
        https://tools.ietf.org/html/rfc7946#section-3.2.
    """

    _schema = {"$ref": "#/definitions/Feature"}

    def __init__(
        self,
        geometry: Union[
            Union[
                "Geometry",
                Union["GeometryCollection", dict],
                Union["LineString", dict],
                Union["MultiLineString", dict],
                Union["MultiPoint", dict],
                Union["MultiPolygon", dict],
                Union["Point", dict],
                Union["Polygon", dict],
            ],
            UndefinedType,
        ] = Undefined,
        properties: Union[
            Union["GeoJsonProperties", None, dict], UndefinedType
        ] = Undefined,
        type: Union[str, UndefinedType] = Undefined,
        bbox: Union[Union["BBox", List[float]], UndefinedType] = Undefined,
        id: Union[Union[float, str], UndefinedType] = Undefined,
        **kwds
    ):
        super(Feature, self).__init__(
            geometry=geometry,
            properties=properties,
            type=type,
            bbox=bbox,
            id=id,
            **kwds
        )


class FeatureCollection(VegaLiteSchema):
    """FeatureCollection schema wrapper

    Union[:class:`FeatureCollection`, Dict[required=[features, type]]]
    A collection of feature objects.  https://tools.ietf.org/html/rfc7946#section-3.3

    Parameters
    ----------

    features : List[Union[:class:`FeatureGeometryGeoJsonProperties`, Dict[required=[geometry, properties, type]]]]

    type : str
        Specifies the type of GeoJSON object.
    bbox : Union[:class:`BBox`, List[float]]
        Bounding box of the coordinate range of the object's Geometries, Features, or
        Feature Collections. https://tools.ietf.org/html/rfc7946#section-5
    """

    _schema = {"$ref": "#/definitions/FeatureCollection"}

    def __init__(
        self,
        features: Union[
            Union[List["FeatureGeometryGeoJsonProperties"], List[dict]], UndefinedType
        ] = Undefined,
        type: Union[str, UndefinedType] = Undefined,
        bbox: Union[Union["BBox", List[float]], UndefinedType] = Undefined,
        **kwds
    ):
        super(FeatureCollection, self).__init__(
            features=features, type=type, bbox=bbox, **kwds
        )


class FeatureGeometryGeoJsonProperties(VegaLiteSchema):
    """FeatureGeometryGeoJsonProperties schema wrapper

    Union[:class:`FeatureGeometryGeoJsonProperties`, Dict[required=[geometry, properties,
    type]]]
    A feature object which contains a geometry and associated properties.
    https://tools.ietf.org/html/rfc7946#section-3.2

    Parameters
    ----------

    geometry : Union[:class:`Geometry`, Union[:class:`GeometryCollection`, Dict[required=[geometries, type]]], Union[:class:`LineString`, Dict[required=[coordinates, type]]], Union[:class:`MultiLineString`, Dict[required=[coordinates, type]]], Union[:class:`MultiPoint`, Dict[required=[coordinates, type]]], Union[:class:`MultiPolygon`, Dict[required=[coordinates, type]]], Union[:class:`Point`, Dict[required=[coordinates, type]]], Union[:class:`Polygon`, Dict[required=[coordinates, type]]]]
        The feature's geometry
    properties : Union[:class:`GeoJsonProperties`, Dict[required=[]], None]
        Properties associated with this feature.
    type : str
        Specifies the type of GeoJSON object.
    bbox : Union[:class:`BBox`, List[float]]
        Bounding box of the coordinate range of the object's Geometries, Features, or
        Feature Collections. https://tools.ietf.org/html/rfc7946#section-5
    id : Union[float, str]
        A value that uniquely identifies this feature in a
        https://tools.ietf.org/html/rfc7946#section-3.2.
    """

    _schema = {"$ref": "#/definitions/Feature<Geometry,GeoJsonProperties>"}

    def __init__(
        self,
        geometry: Union[
            Union[
                "Geometry",
                Union["GeometryCollection", dict],
                Union["LineString", dict],
                Union["MultiLineString", dict],
                Union["MultiPoint", dict],
                Union["MultiPolygon", dict],
                Union["Point", dict],
                Union["Polygon", dict],
            ],
            UndefinedType,
        ] = Undefined,
        properties: Union[
            Union["GeoJsonProperties", None, dict], UndefinedType
        ] = Undefined,
        type: Union[str, UndefinedType] = Undefined,
        bbox: Union[Union["BBox", List[float]], UndefinedType] = Undefined,
        id: Union[Union[float, str], UndefinedType] = Undefined,
        **kwds
    ):
        super(FeatureGeometryGeoJsonProperties, self).__init__(
            geometry=geometry,
            properties=properties,
            type=type,
            bbox=bbox,
            id=id,
            **kwds
        )


class Field(VegaLiteSchema):
    """Field schema wrapper

    Union[:class:`Field`, Union[:class:`FieldName`, str], Union[:class:`RepeatRef`,
    Dict[required=[repeat]]]]
    """

    _schema = {"$ref": "#/definitions/Field"}

    def __init__(self, *args, **kwds):
        super(Field, self).__init__(*args, **kwds)


class FieldDefWithoutScale(VegaLiteSchema):
    """FieldDefWithoutScale schema wrapper

    Union[:class:`FieldDefWithoutScale`, Dict[required=[]]]
    Definition object for a data field, its type and transformation of an encoding channel.

    Parameters
    ----------

    aggregate : Union[:class:`Aggregate`, Union[:class:`ArgmaxDef`, Dict[required=[argmax]]], Union[:class:`ArgminDef`, Dict[required=[argmin]]], Union[:class:`NonArgAggregateOp`, Literal['average', 'count', 'distinct', 'max', 'mean', 'median', 'min', 'missing', 'product', 'q1', 'q3', 'ci0', 'ci1', 'stderr', 'stdev', 'stdevp', 'sum', 'valid', 'values', 'variance', 'variancep']]]
        Aggregation function for the field (e.g., ``"mean"``, ``"sum"``, ``"median"``,
        ``"min"``, ``"max"``, ``"count"`` ).

        **Default value:** ``undefined`` (None)

        **See also:** `aggregate <https://vega.github.io/vega-lite/docs/aggregate.html>`__
        documentation.
    bandPosition : float
        Relative position on a band of a stacked, binned, time unit, or band scale. For
        example, the marks will be positioned at the beginning of the band if set to ``0``,
        and at the middle of the band if set to ``0.5``.
    bin : Union[None, Union[:class:`BinParams`, Dict[required=[]]], bool, str]
        A flag for binning a ``quantitative`` field, `an object defining binning parameters
        <https://vega.github.io/vega-lite/docs/bin.html#bin-parameters>`__, or indicating
        that the data for ``x`` or ``y`` channel are binned before they are imported into
        Vega-Lite ( ``"binned"`` ).


        If ``true``, default `binning parameters
        <https://vega.github.io/vega-lite/docs/bin.html#bin-parameters>`__ will be applied.

        If ``"binned"``, this indicates that the data for the ``x`` (or ``y`` ) channel are
        already binned. You can map the bin-start field to ``x`` (or ``y`` ) and the bin-end
        field to ``x2`` (or ``y2`` ). The scale and axis will be formatted similar to
        binning in Vega-Lite.  To adjust the axis ticks based on the bin step, you can also
        set the axis's `tickMinStep
        <https://vega.github.io/vega-lite/docs/axis.html#ticks>`__ property.

        **Default value:** ``false``

        **See also:** `bin <https://vega.github.io/vega-lite/docs/bin.html>`__
        documentation.
    field : Union[:class:`Field`, Union[:class:`FieldName`, str], Union[:class:`RepeatRef`, Dict[required=[repeat]]]]
        **Required.** A string defining the name of the field from which to pull a data
        value or an object defining iterated values from the `repeat
        <https://vega.github.io/vega-lite/docs/repeat.html>`__ operator.

        **See also:** `field <https://vega.github.io/vega-lite/docs/field.html>`__
        documentation.

        **Notes:** 1)  Dots ( ``.`` ) and brackets ( ``[`` and ``]`` ) can be used to access
        nested objects (e.g., ``"field": "foo.bar"`` and ``"field": "foo['bar']"`` ). If
        field names contain dots or brackets but are not nested, you can use ``\\`` to
        escape dots and brackets (e.g., ``"a\\.b"`` and ``"a\\[0\\]"`` ). See more details
        about escaping in the `field documentation
        <https://vega.github.io/vega-lite/docs/field.html>`__. 2) ``field`` is not required
        if ``aggregate`` is ``count``.
    timeUnit : Union[Union[:class:`BinnedTimeUnit`, Literal['binnedutcyear', 'binnedutcyearquarter', 'binnedutcyearquartermonth', 'binnedutcyearmonth', 'binnedutcyearmonthdate', 'binnedutcyearmonthdatehours', 'binnedutcyearmonthdatehoursminutes', 'binnedutcyearmonthdatehoursminutesseconds', 'binnedutcyearweek', 'binnedutcyearweekday', 'binnedutcyearweekdayhours', 'binnedutcyearweekdayhoursminutes', 'binnedutcyearweekdayhoursminutesseconds', 'binnedutcyeardayofyear'], Literal['binnedyear', 'binnedyearquarter', 'binnedyearquartermonth', 'binnedyearmonth', 'binnedyearmonthdate', 'binnedyearmonthdatehours', 'binnedyearmonthdatehoursminutes', 'binnedyearmonthdatehoursminutesseconds', 'binnedyearweek', 'binnedyearweekday', 'binnedyearweekdayhours', 'binnedyearweekdayhoursminutes', 'binnedyearweekdayhoursminutesseconds', 'binnedyeardayofyear']], Union[:class:`TimeUnitParams`, Dict[required=[]]], Union[:class:`TimeUnit`, Union[:class:`MultiTimeUnit`, Union[:class:`LocalMultiTimeUnit`, Literal['yearquarter', 'yearquartermonth', 'yearmonth', 'yearmonthdate', 'yearmonthdatehours', 'yearmonthdatehoursminutes', 'yearmonthdatehoursminutesseconds', 'yearweek', 'yearweekday', 'yearweekdayhours', 'yearweekdayhoursminutes', 'yearweekdayhoursminutesseconds', 'yeardayofyear', 'quartermonth', 'monthdate', 'monthdatehours', 'monthdatehoursminutes', 'monthdatehoursminutesseconds', 'weekday', 'weeksdayhours', 'weekdayhoursminutes', 'weekdayhoursminutesseconds', 'dayhours', 'dayhoursminutes', 'dayhoursminutesseconds', 'hoursminutes', 'hoursminutesseconds', 'minutesseconds', 'secondsmilliseconds']], Union[:class:`UtcMultiTimeUnit`, Literal['utcyearquarter', 'utcyearquartermonth', 'utcyearmonth', 'utcyearmonthdate', 'utcyearmonthdatehours', 'utcyearmonthdatehoursminutes', 'utcyearmonthdatehoursminutesseconds', 'utcyearweek', 'utcyearweekday', 'utcyearweekdayhours', 'utcyearweekdayhoursminutes', 'utcyearweekdayhoursminutesseconds', 'utcyeardayofyear', 'utcquartermonth', 'utcmonthdate', 'utcmonthdatehours', 'utcmonthdatehoursminutes', 'utcmonthdatehoursminutesseconds', 'utcweekday', 'utcweeksdayhours', 'utcweekdayhoursminutes', 'utcweekdayhoursminutesseconds', 'utcdayhours', 'utcdayhoursminutes', 'utcdayhoursminutesseconds', 'utchoursminutes', 'utchoursminutesseconds', 'utcminutesseconds', 'utcsecondsmilliseconds']]], Union[:class:`SingleTimeUnit`, Union[:class:`LocalSingleTimeUnit`, Literal['year', 'quarter', 'month', 'week', 'day', 'dayofyear', 'date', 'hours', 'minutes', 'seconds', 'milliseconds']], Union[:class:`UtcSingleTimeUnit`, Literal['utcyear', 'utcquarter', 'utcmonth', 'utcweek', 'utcday', 'utcdayofyear', 'utcdate', 'utchours', 'utcminutes', 'utcseconds', 'utcmilliseconds']]]]]
        Time unit (e.g., ``year``, ``yearmonth``, ``month``, ``hours`` ) for a temporal
        field. or `a temporal field that gets casted as ordinal
        <https://vega.github.io/vega-lite/docs/type.html#cast>`__.

        **Default value:** ``undefined`` (None)

        **See also:** `timeUnit <https://vega.github.io/vega-lite/docs/timeunit.html>`__
        documentation.
    title : Union[None, Union[:class:`Text`, List[str], str]]
        A title for the field. If ``null``, the title will be removed.

        **Default value:**  derived from the field's name and transformation function (
        ``aggregate``, ``bin`` and ``timeUnit`` ). If the field has an aggregate function,
        the function is displayed as part of the title (e.g., ``"Sum of Profit"`` ). If the
        field is binned or has a time unit applied, the applied function is shown in
        parentheses (e.g., ``"Profit (binned)"``, ``"Transaction Date (year-month)"`` ).
        Otherwise, the title is simply the field name.

        **Notes** :

        1) You can customize the default field title format by providing the `fieldTitle
        <https://vega.github.io/vega-lite/docs/config.html#top-level-config>`__ property in
        the `config <https://vega.github.io/vega-lite/docs/config.html>`__ or `fieldTitle
        function via the compile function's options
        <https://vega.github.io/vega-lite/usage/compile.html#field-title>`__.

        2) If both field definition's ``title`` and axis, header, or legend ``title`` are
        defined, axis/header/legend title will be used.
    type : Union[:class:`StandardType`, Literal['quantitative', 'ordinal', 'temporal', 'nominal']]
        The type of measurement ( ``"quantitative"``, ``"temporal"``, ``"ordinal"``, or
        ``"nominal"`` ) for the encoded field or constant value ( ``datum`` ). It can also
        be a ``"geojson"`` type for encoding `'geoshape'
        <https://vega.github.io/vega-lite/docs/geoshape.html>`__.

        Vega-Lite automatically infers data types in many cases as discussed below. However,
        type is required for a field if: (1) the field is not nominal and the field encoding
        has no specified ``aggregate`` (except ``argmin`` and ``argmax`` ), ``bin``, scale
        type, custom ``sort`` order, nor ``timeUnit`` or (2) if you wish to use an ordinal
        scale for a field with ``bin`` or ``timeUnit``.

        **Default value:**

        1) For a data ``field``, ``"nominal"`` is the default data type unless the field
        encoding has ``aggregate``, ``channel``, ``bin``, scale type, ``sort``, or
        ``timeUnit`` that satisfies the following criteria:


        * ``"quantitative"`` is the default type if (1) the encoded field contains ``bin``
          or ``aggregate`` except ``"argmin"`` and ``"argmax"``, (2) the encoding channel is
          ``latitude`` or ``longitude`` channel or (3) if the specified scale type is `a
          quantitative scale <https://vega.github.io/vega-lite/docs/scale.html#type>`__.
        * ``"temporal"`` is the default type if (1) the encoded field contains ``timeUnit``
          or (2) the specified scale type is a time or utc scale
        * ``"ordinal"`` is the default type if (1) the encoded field contains a `custom sort
          order
          <https://vega.github.io/vega-lite/docs/sort.html#specifying-custom-sort-order>`__,
          (2) the specified scale type is an ordinal/point/band scale, or (3) the encoding
          channel is ``order``.

        2) For a constant value in data domain ( ``datum`` ):


        * ``"quantitative"`` if the datum is a number
        * ``"nominal"`` if the datum is a string
        * ``"temporal"`` if the datum is `a date time object
          <https://vega.github.io/vega-lite/docs/datetime.html>`__

        **Note:**


        * Data ``type`` describes the semantics of the data rather than the primitive data
          types (number, string, etc.). The same primitive data type can have different
          types of measurement. For example, numeric data can represent quantitative,
          ordinal, or nominal data.
        * Data values for a temporal field can be either a date-time string (e.g.,
          ``"2015-03-07 12:32:17"``, ``"17:01"``, ``"2015-03-16"``. ``"2015"`` ) or a
          timestamp number (e.g., ``1552199579097`` ).
        * When using with `bin <https://vega.github.io/vega-lite/docs/bin.html>`__, the
          ``type`` property can be either ``"quantitative"`` (for using a linear bin scale)
          or `"ordinal" (for using an ordinal bin scale)
          <https://vega.github.io/vega-lite/docs/type.html#cast-bin>`__.
        * When using with `timeUnit
          <https://vega.github.io/vega-lite/docs/timeunit.html>`__, the ``type`` property
          can be either ``"temporal"`` (default, for using a temporal scale) or `"ordinal"
          (for using an ordinal scale)
          <https://vega.github.io/vega-lite/docs/type.html#cast-bin>`__.
        * When using with `aggregate
          <https://vega.github.io/vega-lite/docs/aggregate.html>`__, the ``type`` property
          refers to the post-aggregation data type. For example, we can calculate count
          ``distinct`` of a categorical field ``"cat"`` using ``{"aggregate": "distinct",
          "field": "cat"}``. The ``"type"`` of the aggregate output is ``"quantitative"``.
        * Secondary channels (e.g., ``x2``, ``y2``, ``xError``, ``yError`` ) do not have
          ``type`` as they must have exactly the same type as their primary channels (e.g.,
          ``x``, ``y`` ).

        **See also:** `type <https://vega.github.io/vega-lite/docs/type.html>`__
        documentation.
    """

    _schema = {"$ref": "#/definitions/FieldDefWithoutScale"}

    def __init__(
        self,
        aggregate: Union[
            Union[
                "Aggregate",
                Union["ArgmaxDef", dict],
                Union["ArgminDef", dict],
                Union[
                    "NonArgAggregateOp",
                    Literal[
                        "average",
                        "count",
                        "distinct",
                        "max",
                        "mean",
                        "median",
                        "min",
                        "missing",
                        "product",
                        "q1",
                        "q3",
                        "ci0",
                        "ci1",
                        "stderr",
                        "stdev",
                        "stdevp",
                        "sum",
                        "valid",
                        "values",
                        "variance",
                        "variancep",
                    ],
                ],
            ],
            UndefinedType,
        ] = Undefined,
        bandPosition: Union[float, UndefinedType] = Undefined,
        bin: Union[
            Union[None, Union["BinParams", dict], bool, str], UndefinedType
        ] = Undefined,
        field: Union[
            Union["Field", Union["FieldName", str], Union["RepeatRef", dict]],
            UndefinedType,
        ] = Undefined,
        timeUnit: Union[
            Union[
                Union[
                    "BinnedTimeUnit",
                    Literal[
                        "binnedutcyear",
                        "binnedutcyearquarter",
                        "binnedutcyearquartermonth",
                        "binnedutcyearmonth",
                        "binnedutcyearmonthdate",
                        "binnedutcyearmonthdatehours",
                        "binnedutcyearmonthdatehoursminutes",
                        "binnedutcyearmonthdatehoursminutesseconds",
                        "binnedutcyearweek",
                        "binnedutcyearweekday",
                        "binnedutcyearweekdayhours",
                        "binnedutcyearweekdayhoursminutes",
                        "binnedutcyearweekdayhoursminutesseconds",
                        "binnedutcyeardayofyear",
                    ],
                    Literal[
                        "binnedyear",
                        "binnedyearquarter",
                        "binnedyearquartermonth",
                        "binnedyearmonth",
                        "binnedyearmonthdate",
                        "binnedyearmonthdatehours",
                        "binnedyearmonthdatehoursminutes",
                        "binnedyearmonthdatehoursminutesseconds",
                        "binnedyearweek",
                        "binnedyearweekday",
                        "binnedyearweekdayhours",
                        "binnedyearweekdayhoursminutes",
                        "binnedyearweekdayhoursminutesseconds",
                        "binnedyeardayofyear",
                    ],
                ],
                Union[
                    "TimeUnit",
                    Union[
                        "MultiTimeUnit",
                        Union[
                            "LocalMultiTimeUnit",
                            Literal[
                                "yearquarter",
                                "yearquartermonth",
                                "yearmonth",
                                "yearmonthdate",
                                "yearmonthdatehours",
                                "yearmonthdatehoursminutes",
                                "yearmonthdatehoursminutesseconds",
                                "yearweek",
                                "yearweekday",
                                "yearweekdayhours",
                                "yearweekdayhoursminutes",
                                "yearweekdayhoursminutesseconds",
                                "yeardayofyear",
                                "quartermonth",
                                "monthdate",
                                "monthdatehours",
                                "monthdatehoursminutes",
                                "monthdatehoursminutesseconds",
                                "weekday",
                                "weeksdayhours",
                                "weekdayhoursminutes",
                                "weekdayhoursminutesseconds",
                                "dayhours",
                                "dayhoursminutes",
                                "dayhoursminutesseconds",
                                "hoursminutes",
                                "hoursminutesseconds",
                                "minutesseconds",
                                "secondsmilliseconds",
                            ],
                        ],
                        Union[
                            "UtcMultiTimeUnit",
                            Literal[
                                "utcyearquarter",
                                "utcyearquartermonth",
                                "utcyearmonth",
                                "utcyearmonthdate",
                                "utcyearmonthdatehours",
                                "utcyearmonthdatehoursminutes",
                                "utcyearmonthdatehoursminutesseconds",
                                "utcyearweek",
                                "utcyearweekday",
                                "utcyearweekdayhours",
                                "utcyearweekdayhoursminutes",
                                "utcyearweekdayhoursminutesseconds",
                                "utcyeardayofyear",
                                "utcquartermonth",
                                "utcmonthdate",
                                "utcmonthdatehours",
                                "utcmonthdatehoursminutes",
                                "utcmonthdatehoursminutesseconds",
                                "utcweekday",
                                "utcweeksdayhours",
                                "utcweekdayhoursminutes",
                                "utcweekdayhoursminutesseconds",
                                "utcdayhours",
                                "utcdayhoursminutes",
                                "utcdayhoursminutesseconds",
                                "utchoursminutes",
                                "utchoursminutesseconds",
                                "utcminutesseconds",
                                "utcsecondsmilliseconds",
                            ],
                        ],
                    ],
                    Union[
                        "SingleTimeUnit",
                        Union[
                            "LocalSingleTimeUnit",
                            Literal[
                                "year",
                                "quarter",
                                "month",
                                "week",
                                "day",
                                "dayofyear",
                                "date",
                                "hours",
                                "minutes",
                                "seconds",
                                "milliseconds",
                            ],
                        ],
                        Union[
                            "UtcSingleTimeUnit",
                            Literal[
                                "utcyear",
                                "utcquarter",
                                "utcmonth",
                                "utcweek",
                                "utcday",
                                "utcdayofyear",
                                "utcdate",
                                "utchours",
                                "utcminutes",
                                "utcseconds",
                                "utcmilliseconds",
                            ],
                        ],
                    ],
                ],
                Union["TimeUnitParams", dict],
            ],
            UndefinedType,
        ] = Undefined,
        title: Union[
            Union[None, Union["Text", List[str], str]], UndefinedType
        ] = Undefined,
        type: Union[
            Union[
                "StandardType",
                Literal["quantitative", "ordinal", "temporal", "nominal"],
            ],
            UndefinedType,
        ] = Undefined,
        **kwds
    ):
        super(FieldDefWithoutScale, self).__init__(
            aggregate=aggregate,
            bandPosition=bandPosition,
            bin=bin,
            field=field,
            timeUnit=timeUnit,
            title=title,
            type=type,
            **kwds
        )


class FieldName(Field):
    """FieldName schema wrapper

    Union[:class:`FieldName`, str]
    """

    _schema = {"$ref": "#/definitions/FieldName"}

    def __init__(self, *args):
        super(FieldName, self).__init__(*args)


class FieldOrDatumDefWithConditionStringFieldDefstring(VegaLiteSchema):
    """FieldOrDatumDefWithConditionStringFieldDefstring schema wrapper

    Union[:class:`FieldOrDatumDefWithConditionStringFieldDefstring`, Dict[required=[]]]

    Parameters
    ----------

    aggregate : Union[:class:`Aggregate`, Union[:class:`ArgmaxDef`, Dict[required=[argmax]]], Union[:class:`ArgminDef`, Dict[required=[argmin]]], Union[:class:`NonArgAggregateOp`, Literal['average', 'count', 'distinct', 'max', 'mean', 'median', 'min', 'missing', 'product', 'q1', 'q3', 'ci0', 'ci1', 'stderr', 'stdev', 'stdevp', 'sum', 'valid', 'values', 'variance', 'variancep']]]
        Aggregation function for the field (e.g., ``"mean"``, ``"sum"``, ``"median"``,
        ``"min"``, ``"max"``, ``"count"`` ).

        **Default value:** ``undefined`` (None)

        **See also:** `aggregate <https://vega.github.io/vega-lite/docs/aggregate.html>`__
        documentation.
    bandPosition : float
        Relative position on a band of a stacked, binned, time unit, or band scale. For
        example, the marks will be positioned at the beginning of the band if set to ``0``,
        and at the middle of the band if set to ``0.5``.
    bin : Union[None, Union[:class:`BinParams`, Dict[required=[]]], bool, str]
        A flag for binning a ``quantitative`` field, `an object defining binning parameters
        <https://vega.github.io/vega-lite/docs/bin.html#bin-parameters>`__, or indicating
        that the data for ``x`` or ``y`` channel are binned before they are imported into
        Vega-Lite ( ``"binned"`` ).


        If ``true``, default `binning parameters
        <https://vega.github.io/vega-lite/docs/bin.html#bin-parameters>`__ will be applied.

        If ``"binned"``, this indicates that the data for the ``x`` (or ``y`` ) channel are
        already binned. You can map the bin-start field to ``x`` (or ``y`` ) and the bin-end
        field to ``x2`` (or ``y2`` ). The scale and axis will be formatted similar to
        binning in Vega-Lite.  To adjust the axis ticks based on the bin step, you can also
        set the axis's `tickMinStep
        <https://vega.github.io/vega-lite/docs/axis.html#ticks>`__ property.

        **Default value:** ``false``

        **See also:** `bin <https://vega.github.io/vega-lite/docs/bin.html>`__
        documentation.
    condition : Union[List[Union[:class:`ConditionalValueDefstringExprRef`, Union[:class:`ConditionalParameterValueDefstringExprRef`, Dict[required=[param, value]]], Union[:class:`ConditionalPredicateValueDefstringExprRef`, Dict[required=[test, value]]]]], Union[:class:`ConditionalValueDefstringExprRef`, Union[:class:`ConditionalParameterValueDefstringExprRef`, Dict[required=[param, value]]], Union[:class:`ConditionalPredicateValueDefstringExprRef`, Dict[required=[test, value]]]]]
        One or more value definition(s) with `a parameter or a test predicate
        <https://vega.github.io/vega-lite/docs/condition.html>`__.

        **Note:** A field definition's ``condition`` property can only contain `conditional
        value definitions <https://vega.github.io/vega-lite/docs/condition.html#value>`__
        since Vega-Lite only allows at most one encoded field per encoding channel.
    field : Union[:class:`Field`, Union[:class:`FieldName`, str], Union[:class:`RepeatRef`, Dict[required=[repeat]]]]
        **Required.** A string defining the name of the field from which to pull a data
        value or an object defining iterated values from the `repeat
        <https://vega.github.io/vega-lite/docs/repeat.html>`__ operator.

        **See also:** `field <https://vega.github.io/vega-lite/docs/field.html>`__
        documentation.

        **Notes:** 1)  Dots ( ``.`` ) and brackets ( ``[`` and ``]`` ) can be used to access
        nested objects (e.g., ``"field": "foo.bar"`` and ``"field": "foo['bar']"`` ). If
        field names contain dots or brackets but are not nested, you can use ``\\`` to
        escape dots and brackets (e.g., ``"a\\.b"`` and ``"a\\[0\\]"`` ). See more details
        about escaping in the `field documentation
        <https://vega.github.io/vega-lite/docs/field.html>`__. 2) ``field`` is not required
        if ``aggregate`` is ``count``.
    format : Union[Union[:class:`Dict`, Dict[required=[]]], str]
        When used with the default ``"number"`` and ``"time"`` format type, the text
        formatting pattern for labels of guides (axes, legends, headers) and text marks.


        * If the format type is ``"number"`` (e.g., for quantitative fields), this is D3's
          `number format pattern <https://github.com/d3/d3-format#locale_format>`__.
        * If the format type is ``"time"`` (e.g., for temporal fields), this is D3's `time
          format pattern <https://github.com/d3/d3-time-format#locale_format>`__.

        See the `format documentation <https://vega.github.io/vega-lite/docs/format.html>`__
        for more examples.

        When used with a `custom formatType
        <https://vega.github.io/vega-lite/docs/config.html#custom-format-type>`__, this
        value will be passed as ``format`` alongside ``datum.value`` to the registered
        function.

        **Default value:**  Derived from `numberFormat
        <https://vega.github.io/vega-lite/docs/config.html#format>`__ config for number
        format and from `timeFormat
        <https://vega.github.io/vega-lite/docs/config.html#format>`__ config for time
        format.
    formatType : str
        The format type for labels. One of ``"number"``, ``"time"``, or a `registered custom
        format type
        <https://vega.github.io/vega-lite/docs/config.html#custom-format-type>`__.

        **Default value:**


        * ``"time"`` for temporal fields and ordinal and nominal fields with ``timeUnit``.
        * ``"number"`` for quantitative fields as well as ordinal and nominal fields without
          ``timeUnit``.
    timeUnit : Union[Union[:class:`BinnedTimeUnit`, Literal['binnedutcyear', 'binnedutcyearquarter', 'binnedutcyearquartermonth', 'binnedutcyearmonth', 'binnedutcyearmonthdate', 'binnedutcyearmonthdatehours', 'binnedutcyearmonthdatehoursminutes', 'binnedutcyearmonthdatehoursminutesseconds', 'binnedutcyearweek', 'binnedutcyearweekday', 'binnedutcyearweekdayhours', 'binnedutcyearweekdayhoursminutes', 'binnedutcyearweekdayhoursminutesseconds', 'binnedutcyeardayofyear'], Literal['binnedyear', 'binnedyearquarter', 'binnedyearquartermonth', 'binnedyearmonth', 'binnedyearmonthdate', 'binnedyearmonthdatehours', 'binnedyearmonthdatehoursminutes', 'binnedyearmonthdatehoursminutesseconds', 'binnedyearweek', 'binnedyearweekday', 'binnedyearweekdayhours', 'binnedyearweekdayhoursminutes', 'binnedyearweekdayhoursminutesseconds', 'binnedyeardayofyear']], Union[:class:`TimeUnitParams`, Dict[required=[]]], Union[:class:`TimeUnit`, Union[:class:`MultiTimeUnit`, Union[:class:`LocalMultiTimeUnit`, Literal['yearquarter', 'yearquartermonth', 'yearmonth', 'yearmonthdate', 'yearmonthdatehours', 'yearmonthdatehoursminutes', 'yearmonthdatehoursminutesseconds', 'yearweek', 'yearweekday', 'yearweekdayhours', 'yearweekdayhoursminutes', 'yearweekdayhoursminutesseconds', 'yeardayofyear', 'quartermonth', 'monthdate', 'monthdatehours', 'monthdatehoursminutes', 'monthdatehoursminutesseconds', 'weekday', 'weeksdayhours', 'weekdayhoursminutes', 'weekdayhoursminutesseconds', 'dayhours', 'dayhoursminutes', 'dayhoursminutesseconds', 'hoursminutes', 'hoursminutesseconds', 'minutesseconds', 'secondsmilliseconds']], Union[:class:`UtcMultiTimeUnit`, Literal['utcyearquarter', 'utcyearquartermonth', 'utcyearmonth', 'utcyearmonthdate', 'utcyearmonthdatehours', 'utcyearmonthdatehoursminutes', 'utcyearmonthdatehoursminutesseconds', 'utcyearweek', 'utcyearweekday', 'utcyearweekdayhours', 'utcyearweekdayhoursminutes', 'utcyearweekdayhoursminutesseconds', 'utcyeardayofyear', 'utcquartermonth', 'utcmonthdate', 'utcmonthdatehours', 'utcmonthdatehoursminutes', 'utcmonthdatehoursminutesseconds', 'utcweekday', 'utcweeksdayhours', 'utcweekdayhoursminutes', 'utcweekdayhoursminutesseconds', 'utcdayhours', 'utcdayhoursminutes', 'utcdayhoursminutesseconds', 'utchoursminutes', 'utchoursminutesseconds', 'utcminutesseconds', 'utcsecondsmilliseconds']]], Union[:class:`SingleTimeUnit`, Union[:class:`LocalSingleTimeUnit`, Literal['year', 'quarter', 'month', 'week', 'day', 'dayofyear', 'date', 'hours', 'minutes', 'seconds', 'milliseconds']], Union[:class:`UtcSingleTimeUnit`, Literal['utcyear', 'utcquarter', 'utcmonth', 'utcweek', 'utcday', 'utcdayofyear', 'utcdate', 'utchours', 'utcminutes', 'utcseconds', 'utcmilliseconds']]]]]
        Time unit (e.g., ``year``, ``yearmonth``, ``month``, ``hours`` ) for a temporal
        field. or `a temporal field that gets casted as ordinal
        <https://vega.github.io/vega-lite/docs/type.html#cast>`__.

        **Default value:** ``undefined`` (None)

        **See also:** `timeUnit <https://vega.github.io/vega-lite/docs/timeunit.html>`__
        documentation.
    title : Union[None, Union[:class:`Text`, List[str], str]]
        A title for the field. If ``null``, the title will be removed.

        **Default value:**  derived from the field's name and transformation function (
        ``aggregate``, ``bin`` and ``timeUnit`` ). If the field has an aggregate function,
        the function is displayed as part of the title (e.g., ``"Sum of Profit"`` ). If the
        field is binned or has a time unit applied, the applied function is shown in
        parentheses (e.g., ``"Profit (binned)"``, ``"Transaction Date (year-month)"`` ).
        Otherwise, the title is simply the field name.

        **Notes** :

        1) You can customize the default field title format by providing the `fieldTitle
        <https://vega.github.io/vega-lite/docs/config.html#top-level-config>`__ property in
        the `config <https://vega.github.io/vega-lite/docs/config.html>`__ or `fieldTitle
        function via the compile function's options
        <https://vega.github.io/vega-lite/usage/compile.html#field-title>`__.

        2) If both field definition's ``title`` and axis, header, or legend ``title`` are
        defined, axis/header/legend title will be used.
    type : Union[:class:`StandardType`, Literal['quantitative', 'ordinal', 'temporal', 'nominal']]
        The type of measurement ( ``"quantitative"``, ``"temporal"``, ``"ordinal"``, or
        ``"nominal"`` ) for the encoded field or constant value ( ``datum`` ). It can also
        be a ``"geojson"`` type for encoding `'geoshape'
        <https://vega.github.io/vega-lite/docs/geoshape.html>`__.

        Vega-Lite automatically infers data types in many cases as discussed below. However,
        type is required for a field if: (1) the field is not nominal and the field encoding
        has no specified ``aggregate`` (except ``argmin`` and ``argmax`` ), ``bin``, scale
        type, custom ``sort`` order, nor ``timeUnit`` or (2) if you wish to use an ordinal
        scale for a field with ``bin`` or ``timeUnit``.

        **Default value:**

        1) For a data ``field``, ``"nominal"`` is the default data type unless the field
        encoding has ``aggregate``, ``channel``, ``bin``, scale type, ``sort``, or
        ``timeUnit`` that satisfies the following criteria:


        * ``"quantitative"`` is the default type if (1) the encoded field contains ``bin``
          or ``aggregate`` except ``"argmin"`` and ``"argmax"``, (2) the encoding channel is
          ``latitude`` or ``longitude`` channel or (3) if the specified scale type is `a
          quantitative scale <https://vega.github.io/vega-lite/docs/scale.html#type>`__.
        * ``"temporal"`` is the default type if (1) the encoded field contains ``timeUnit``
          or (2) the specified scale type is a time or utc scale
        * ``"ordinal"`` is the default type if (1) the encoded field contains a `custom sort
          order
          <https://vega.github.io/vega-lite/docs/sort.html#specifying-custom-sort-order>`__,
          (2) the specified scale type is an ordinal/point/band scale, or (3) the encoding
          channel is ``order``.

        2) For a constant value in data domain ( ``datum`` ):


        * ``"quantitative"`` if the datum is a number
        * ``"nominal"`` if the datum is a string
        * ``"temporal"`` if the datum is `a date time object
          <https://vega.github.io/vega-lite/docs/datetime.html>`__

        **Note:**


        * Data ``type`` describes the semantics of the data rather than the primitive data
          types (number, string, etc.). The same primitive data type can have different
          types of measurement. For example, numeric data can represent quantitative,
          ordinal, or nominal data.
        * Data values for a temporal field can be either a date-time string (e.g.,
          ``"2015-03-07 12:32:17"``, ``"17:01"``, ``"2015-03-16"``. ``"2015"`` ) or a
          timestamp number (e.g., ``1552199579097`` ).
        * When using with `bin <https://vega.github.io/vega-lite/docs/bin.html>`__, the
          ``type`` property can be either ``"quantitative"`` (for using a linear bin scale)
          or `"ordinal" (for using an ordinal bin scale)
          <https://vega.github.io/vega-lite/docs/type.html#cast-bin>`__.
        * When using with `timeUnit
          <https://vega.github.io/vega-lite/docs/timeunit.html>`__, the ``type`` property
          can be either ``"temporal"`` (default, for using a temporal scale) or `"ordinal"
          (for using an ordinal scale)
          <https://vega.github.io/vega-lite/docs/type.html#cast-bin>`__.
        * When using with `aggregate
          <https://vega.github.io/vega-lite/docs/aggregate.html>`__, the ``type`` property
          refers to the post-aggregation data type. For example, we can calculate count
          ``distinct`` of a categorical field ``"cat"`` using ``{"aggregate": "distinct",
          "field": "cat"}``. The ``"type"`` of the aggregate output is ``"quantitative"``.
        * Secondary channels (e.g., ``x2``, ``y2``, ``xError``, ``yError`` ) do not have
          ``type`` as they must have exactly the same type as their primary channels (e.g.,
          ``x``, ``y`` ).

        **See also:** `type <https://vega.github.io/vega-lite/docs/type.html>`__
        documentation.
    """

    _schema = {
        "$ref": "#/definitions/FieldOrDatumDefWithCondition<StringFieldDef,string>"
    }

    def __init__(
        self,
        aggregate: Union[
            Union[
                "Aggregate",
                Union["ArgmaxDef", dict],
                Union["ArgminDef", dict],
                Union[
                    "NonArgAggregateOp",
                    Literal[
                        "average",
                        "count",
                        "distinct",
                        "max",
                        "mean",
                        "median",
                        "min",
                        "missing",
                        "product",
                        "q1",
                        "q3",
                        "ci0",
                        "ci1",
                        "stderr",
                        "stdev",
                        "stdevp",
                        "sum",
                        "valid",
                        "values",
                        "variance",
                        "variancep",
                    ],
                ],
            ],
            UndefinedType,
        ] = Undefined,
        bandPosition: Union[float, UndefinedType] = Undefined,
        bin: Union[
            Union[None, Union["BinParams", dict], bool, str], UndefinedType
        ] = Undefined,
        condition: Union[
            Union[
                Union[
                    "ConditionalValueDefstringExprRef",
                    Union["ConditionalParameterValueDefstringExprRef", dict],
                    Union["ConditionalPredicateValueDefstringExprRef", dict],
                ],
                Union[
                    List["ConditionalValueDefstringExprRef"],
                    List[Union["ConditionalParameterValueDefstringExprRef", dict]],
                    List[Union["ConditionalPredicateValueDefstringExprRef", dict]],
                ],
            ],
            UndefinedType,
        ] = Undefined,
        field: Union[
            Union["Field", Union["FieldName", str], Union["RepeatRef", dict]],
            UndefinedType,
        ] = Undefined,
        format: Union[Union[Union["Dict", dict], str], UndefinedType] = Undefined,
        formatType: Union[str, UndefinedType] = Undefined,
        timeUnit: Union[
            Union[
                Union[
                    "BinnedTimeUnit",
                    Literal[
                        "binnedutcyear",
                        "binnedutcyearquarter",
                        "binnedutcyearquartermonth",
                        "binnedutcyearmonth",
                        "binnedutcyearmonthdate",
                        "binnedutcyearmonthdatehours",
                        "binnedutcyearmonthdatehoursminutes",
                        "binnedutcyearmonthdatehoursminutesseconds",
                        "binnedutcyearweek",
                        "binnedutcyearweekday",
                        "binnedutcyearweekdayhours",
                        "binnedutcyearweekdayhoursminutes",
                        "binnedutcyearweekdayhoursminutesseconds",
                        "binnedutcyeardayofyear",
                    ],
                    Literal[
                        "binnedyear",
                        "binnedyearquarter",
                        "binnedyearquartermonth",
                        "binnedyearmonth",
                        "binnedyearmonthdate",
                        "binnedyearmonthdatehours",
                        "binnedyearmonthdatehoursminutes",
                        "binnedyearmonthdatehoursminutesseconds",
                        "binnedyearweek",
                        "binnedyearweekday",
                        "binnedyearweekdayhours",
                        "binnedyearweekdayhoursminutes",
                        "binnedyearweekdayhoursminutesseconds",
                        "binnedyeardayofyear",
                    ],
                ],
                Union[
                    "TimeUnit",
                    Union[
                        "MultiTimeUnit",
                        Union[
                            "LocalMultiTimeUnit",
                            Literal[
                                "yearquarter",
                                "yearquartermonth",
                                "yearmonth",
                                "yearmonthdate",
                                "yearmonthdatehours",
                                "yearmonthdatehoursminutes",
                                "yearmonthdatehoursminutesseconds",
                                "yearweek",
                                "yearweekday",
                                "yearweekdayhours",
                                "yearweekdayhoursminutes",
                                "yearweekdayhoursminutesseconds",
                                "yeardayofyear",
                                "quartermonth",
                                "monthdate",
                                "monthdatehours",
                                "monthdatehoursminutes",
                                "monthdatehoursminutesseconds",
                                "weekday",
                                "weeksdayhours",
                                "weekdayhoursminutes",
                                "weekdayhoursminutesseconds",
                                "dayhours",
                                "dayhoursminutes",
                                "dayhoursminutesseconds",
                                "hoursminutes",
                                "hoursminutesseconds",
                                "minutesseconds",
                                "secondsmilliseconds",
                            ],
                        ],
                        Union[
                            "UtcMultiTimeUnit",
                            Literal[
                                "utcyearquarter",
                                "utcyearquartermonth",
                                "utcyearmonth",
                                "utcyearmonthdate",
                                "utcyearmonthdatehours",
                                "utcyearmonthdatehoursminutes",
                                "utcyearmonthdatehoursminutesseconds",
                                "utcyearweek",
                                "utcyearweekday",
                                "utcyearweekdayhours",
                                "utcyearweekdayhoursminutes",
                                "utcyearweekdayhoursminutesseconds",
                                "utcyeardayofyear",
                                "utcquartermonth",
                                "utcmonthdate",
                                "utcmonthdatehours",
                                "utcmonthdatehoursminutes",
                                "utcmonthdatehoursminutesseconds",
                                "utcweekday",
                                "utcweeksdayhours",
                                "utcweekdayhoursminutes",
                                "utcweekdayhoursminutesseconds",
                                "utcdayhours",
                                "utcdayhoursminutes",
                                "utcdayhoursminutesseconds",
                                "utchoursminutes",
                                "utchoursminutesseconds",
                                "utcminutesseconds",
                                "utcsecondsmilliseconds",
                            ],
                        ],
                    ],
                    Union[
                        "SingleTimeUnit",
                        Union[
                            "LocalSingleTimeUnit",
                            Literal[
                                "year",
                                "quarter",
                                "month",
                                "week",
                                "day",
                                "dayofyear",
                                "date",
                                "hours",
                                "minutes",
                                "seconds",
                                "milliseconds",
                            ],
                        ],
                        Union[
                            "UtcSingleTimeUnit",
                            Literal[
                                "utcyear",
                                "utcquarter",
                                "utcmonth",
                                "utcweek",
                                "utcday",
                                "utcdayofyear",
                                "utcdate",
                                "utchours",
                                "utcminutes",
                                "utcseconds",
                                "utcmilliseconds",
                            ],
                        ],
                    ],
                ],
                Union["TimeUnitParams", dict],
            ],
            UndefinedType,
        ] = Undefined,
        title: Union[
            Union[None, Union["Text", List[str], str]], UndefinedType
        ] = Undefined,
        type: Union[
            Union[
                "StandardType",
                Literal["quantitative", "ordinal", "temporal", "nominal"],
            ],
            UndefinedType,
        ] = Undefined,
        **kwds
    ):
        super(FieldOrDatumDefWithConditionStringFieldDefstring, self).__init__(
            aggregate=aggregate,
            bandPosition=bandPosition,
            bin=bin,
            condition=condition,
            field=field,
            format=format,
            formatType=formatType,
            timeUnit=timeUnit,
            title=title,
            type=type,
            **kwds
        )


class FieldRange(VegaLiteSchema):
    """FieldRange schema wrapper

    Union[:class:`FieldRange`, Dict[required=[field]]]

    Parameters
    ----------

    field : str

    """

    _schema = {"$ref": "#/definitions/FieldRange"}

    def __init__(self, field: Union[str, UndefinedType] = Undefined, **kwds):
        super(FieldRange, self).__init__(field=field, **kwds)


class Fit(VegaLiteSchema):
    """Fit schema wrapper

    Union[:class:`Fit`, List[Union[:class:`GeoJsonFeature`, Dict[required=[geometry, properties,
    type]]]], Union[:class:`GeoJsonFeatureCollection`, Dict[required=[features, type]]],
    Union[:class:`GeoJsonFeature`, Dict[required=[geometry, properties, type]]]]
    """

    _schema = {"$ref": "#/definitions/Fit"}

    def __init__(self, *args, **kwds):
        super(Fit, self).__init__(*args, **kwds)


class FontStyle(VegaLiteSchema):
    """FontStyle schema wrapper

    Union[:class:`FontStyle`, str]
    """

    _schema = {"$ref": "#/definitions/FontStyle"}

    def __init__(self, *args):
        super(FontStyle, self).__init__(*args)


class FontWeight(VegaLiteSchema):
    """FontWeight schema wrapper

    Union[:class:`FontWeight`, Literal['normal', 'bold', 'lighter', 'bolder', 100, 200, 300,
    400, 500, 600, 700, 800, 900]]
    """

    _schema = {"$ref": "#/definitions/FontWeight"}

    def __init__(self, *args):
        super(FontWeight, self).__init__(*args)


class FormatConfig(VegaLiteSchema):
    """FormatConfig schema wrapper

    Union[:class:`FormatConfig`, Dict[required=[]]]

    Parameters
    ----------

    normalizedNumberFormat : str
        If normalizedNumberFormatType is not specified, D3 number format for axis labels,
        text marks, and tooltips of normalized stacked fields (fields with ``stack:
        "normalize"`` ). For example ``"s"`` for SI units. Use `D3's number format pattern
        <https://github.com/d3/d3-format#locale_format>`__.

        If ``config.normalizedNumberFormatType`` is specified and
        ``config.customFormatTypes`` is ``true``, this value will be passed as ``format``
        alongside ``datum.value`` to the ``config.numberFormatType`` function. **Default
        value:** ``%``
    normalizedNumberFormatType : str
        `Custom format type
        <https://vega.github.io/vega-lite/docs/config.html#custom-format-type>`__ for
        ``config.normalizedNumberFormat``.

        **Default value:** ``undefined`` -- This is equilvalent to call D3-format, which is
        exposed as `format in Vega-Expression
        <https://vega.github.io/vega/docs/expressions/#format>`__. **Note:** You must also
        set ``customFormatTypes`` to ``true`` to use this feature.
    numberFormat : str
        If numberFormatType is not specified, D3 number format for guide labels, text marks,
        and tooltips of non-normalized fields (fields *without* ``stack: "normalize"`` ).
        For example ``"s"`` for SI units. Use `D3's number format pattern
        <https://github.com/d3/d3-format#locale_format>`__.

        If ``config.numberFormatType`` is specified and ``config.customFormatTypes`` is
        ``true``, this value will be passed as ``format`` alongside ``datum.value`` to the
        ``config.numberFormatType`` function.
    numberFormatType : str
        `Custom format type
        <https://vega.github.io/vega-lite/docs/config.html#custom-format-type>`__ for
        ``config.numberFormat``.

        **Default value:** ``undefined`` -- This is equilvalent to call D3-format, which is
        exposed as `format in Vega-Expression
        <https://vega.github.io/vega/docs/expressions/#format>`__. **Note:** You must also
        set ``customFormatTypes`` to ``true`` to use this feature.
    timeFormat : str
        Default time format for raw time values (without time units) in text marks, legend
        labels and header labels.

        **Default value:** ``"%b %d, %Y"`` **Note:** Axes automatically determine the format
        for each label automatically so this config does not affect axes.
    timeFormatType : str
        `Custom format type
        <https://vega.github.io/vega-lite/docs/config.html#custom-format-type>`__ for
        ``config.timeFormat``.

        **Default value:** ``undefined`` -- This is equilvalent to call D3-time-format,
        which is exposed as `timeFormat in Vega-Expression
        <https://vega.github.io/vega/docs/expressions/#timeFormat>`__. **Note:** You must
        also set ``customFormatTypes`` to ``true`` and there must *not* be a ``timeUnit``
        defined to use this feature.
    """

    _schema = {"$ref": "#/definitions/FormatConfig"}

    def __init__(
        self,
        normalizedNumberFormat: Union[str, UndefinedType] = Undefined,
        normalizedNumberFormatType: Union[str, UndefinedType] = Undefined,
        numberFormat: Union[str, UndefinedType] = Undefined,
        numberFormatType: Union[str, UndefinedType] = Undefined,
        timeFormat: Union[str, UndefinedType] = Undefined,
        timeFormatType: Union[str, UndefinedType] = Undefined,
        **kwds
    ):
        super(FormatConfig, self).__init__(
            normalizedNumberFormat=normalizedNumberFormat,
            normalizedNumberFormatType=normalizedNumberFormatType,
            numberFormat=numberFormat,
            numberFormatType=numberFormatType,
            timeFormat=timeFormat,
            timeFormatType=timeFormatType,
            **kwds
        )


class Generator(Data):
    """Generator schema wrapper

    Union[:class:`Generator`, Union[:class:`GraticuleGenerator`, Dict[required=[graticule]]],
    Union[:class:`SequenceGenerator`, Dict[required=[sequence]]],
    Union[:class:`SphereGenerator`, Dict[required=[sphere]]]]
    """

    _schema = {"$ref": "#/definitions/Generator"}

    def __init__(self, *args, **kwds):
        super(Generator, self).__init__(*args, **kwds)


class GenericUnitSpecEncodingAnyMark(VegaLiteSchema):
    """GenericUnitSpecEncodingAnyMark schema wrapper

    Union[:class:`GenericUnitSpecEncodingAnyMark`, Dict[required=[mark]]]
    Base interface for a unit (single-view) specification.

    Parameters
    ----------

    mark : Union[:class:`AnyMark`, Union[:class:`CompositeMarkDef`, Union[:class:`BoxPlotDef`, Dict[required=[type]]], Union[:class:`ErrorBandDef`, Dict[required=[type]]], Union[:class:`ErrorBarDef`, Dict[required=[type]]]], Union[:class:`CompositeMark`, Union[:class:`BoxPlot`, str], Union[:class:`ErrorBand`, str], Union[:class:`ErrorBar`, str]], Union[:class:`MarkDef`, Dict[required=[type]]], Union[:class:`Mark`, Literal['arc', 'area', 'bar', 'image', 'line', 'point', 'rect', 'rule', 'text', 'tick', 'trail', 'circle', 'square', 'geoshape']]]
        A string describing the mark type (one of ``"bar"``, ``"circle"``, ``"square"``,
        ``"tick"``, ``"line"``, ``"area"``, ``"point"``, ``"rule"``, ``"geoshape"``, and
        ``"text"`` ) or a `mark definition object
        <https://vega.github.io/vega-lite/docs/mark.html#mark-def>`__.
    data : Union[None, Union[:class:`Data`, Union[:class:`DataSource`, Union[:class:`InlineData`, Dict[required=[values]]], Union[:class:`NamedData`, Dict[required=[name]]], Union[:class:`UrlData`, Dict[required=[url]]]], Union[:class:`Generator`, Union[:class:`GraticuleGenerator`, Dict[required=[graticule]]], Union[:class:`SequenceGenerator`, Dict[required=[sequence]]], Union[:class:`SphereGenerator`, Dict[required=[sphere]]]]]]
        An object describing the data source. Set to ``null`` to ignore the parent's data
        source. If no data is set, it is derived from the parent.
    description : str
        Description of this mark for commenting purpose.
    encoding : Union[:class:`Encoding`, Dict[required=[]]]
        A key-value mapping between encoding channels and definition of fields.
    name : str
        Name of the visualization for later reference.
    params : List[Union[:class:`SelectionParameter`, Dict[required=[name, select]]]]
        An array of parameters that may either be simple variables, or more complex
        selections that map user input to data queries.
    projection : Union[:class:`Projection`, Dict[required=[]]]
        An object defining properties of geographic projection, which will be applied to
        ``shape`` path for ``"geoshape"`` marks and to ``latitude`` and ``"longitude"``
        channels for other marks.
    title : Union[Union[:class:`Text`, List[str], str], Union[:class:`TitleParams`, Dict[required=[text]]]]
        Title for the plot.
    transform : List[Union[:class:`Transform`, Union[:class:`AggregateTransform`, Dict[required=[aggregate]]], Union[:class:`BinTransform`, Dict[required=[bin, field, as]]], Union[:class:`CalculateTransform`, Dict[required=[calculate, as]]], Union[:class:`DensityTransform`, Dict[required=[density]]], Union[:class:`ExtentTransform`, Dict[required=[extent, param]]], Union[:class:`FilterTransform`, Dict[required=[filter]]], Union[:class:`FlattenTransform`, Dict[required=[flatten]]], Union[:class:`FoldTransform`, Dict[required=[fold]]], Union[:class:`ImputeTransform`, Dict[required=[impute, key]]], Union[:class:`JoinAggregateTransform`, Dict[required=[joinaggregate]]], Union[:class:`LoessTransform`, Dict[required=[loess, on]]], Union[:class:`LookupTransform`, Dict[required=[lookup, from]]], Union[:class:`PivotTransform`, Dict[required=[pivot, value]]], Union[:class:`QuantileTransform`, Dict[required=[quantile]]], Union[:class:`RegressionTransform`, Dict[required=[regression, on]]], Union[:class:`SampleTransform`, Dict[required=[sample]]], Union[:class:`StackTransform`, Dict[required=[stack, groupby, as]]], Union[:class:`TimeUnitTransform`, Dict[required=[timeUnit, field, as]]], Union[:class:`WindowTransform`, Dict[required=[window]]]]]
        An array of data transformations such as filter and new field calculation.
    """

    _schema = {"$ref": "#/definitions/GenericUnitSpec<Encoding,AnyMark>"}

    def __init__(
        self,
        mark: Union[
            Union[
                "AnyMark",
                Union[
                    "CompositeMark",
                    Union["BoxPlot", str],
                    Union["ErrorBand", str],
                    Union["ErrorBar", str],
                ],
                Union[
                    "CompositeMarkDef",
                    Union["BoxPlotDef", dict],
                    Union["ErrorBandDef", dict],
                    Union["ErrorBarDef", dict],
                ],
                Union[
                    "Mark",
                    Literal[
                        "arc",
                        "area",
                        "bar",
                        "image",
                        "line",
                        "point",
                        "rect",
                        "rule",
                        "text",
                        "tick",
                        "trail",
                        "circle",
                        "square",
                        "geoshape",
                    ],
                ],
                Union["MarkDef", dict],
            ],
            UndefinedType,
        ] = Undefined,
        data: Union[
            Union[
                None,
                Union[
                    "Data",
                    Union[
                        "DataSource",
                        Union["InlineData", dict],
                        Union["NamedData", dict],
                        Union["UrlData", dict],
                    ],
                    Union[
                        "Generator",
                        Union["GraticuleGenerator", dict],
                        Union["SequenceGenerator", dict],
                        Union["SphereGenerator", dict],
                    ],
                ],
            ],
            UndefinedType,
        ] = Undefined,
        description: Union[str, UndefinedType] = Undefined,
        encoding: Union[Union["Encoding", dict], UndefinedType] = Undefined,
        name: Union[str, UndefinedType] = Undefined,
        params: Union[
            Union[List["SelectionParameter"], List[dict]], UndefinedType
        ] = Undefined,
        projection: Union[Union["Projection", dict], UndefinedType] = Undefined,
        title: Union[
            Union[Union["Text", List[str], str], Union["TitleParams", dict]],
            UndefinedType,
        ] = Undefined,
        transform: Union[
            Union[
                List["Transform"],
                List[Union["AggregateTransform", dict]],
                List[Union["BinTransform", dict]],
                List[Union["CalculateTransform", dict]],
                List[Union["DensityTransform", dict]],
                List[Union["ExtentTransform", dict]],
                List[Union["FilterTransform", dict]],
                List[Union["FlattenTransform", dict]],
                List[Union["FoldTransform", dict]],
                List[Union["ImputeTransform", dict]],
                List[Union["JoinAggregateTransform", dict]],
                List[Union["LoessTransform", dict]],
                List[Union["LookupTransform", dict]],
                List[Union["PivotTransform", dict]],
                List[Union["QuantileTransform", dict]],
                List[Union["RegressionTransform", dict]],
                List[Union["SampleTransform", dict]],
                List[Union["StackTransform", dict]],
                List[Union["TimeUnitTransform", dict]],
                List[Union["WindowTransform", dict]],
            ],
            UndefinedType,
        ] = Undefined,
        **kwds
    ):
        super(GenericUnitSpecEncodingAnyMark, self).__init__(
            mark=mark,
            data=data,
            description=description,
            encoding=encoding,
            name=name,
            params=params,
            projection=projection,
            title=title,
            transform=transform,
            **kwds
        )


class GeoJsonFeature(Fit):
    """GeoJsonFeature schema wrapper

    Union[:class:`GeoJsonFeature`, Dict[required=[geometry, properties, type]]]
    A feature object which contains a geometry and associated properties.
    https://tools.ietf.org/html/rfc7946#section-3.2

    Parameters
    ----------

    geometry : Union[:class:`Geometry`, Union[:class:`GeometryCollection`, Dict[required=[geometries, type]]], Union[:class:`LineString`, Dict[required=[coordinates, type]]], Union[:class:`MultiLineString`, Dict[required=[coordinates, type]]], Union[:class:`MultiPoint`, Dict[required=[coordinates, type]]], Union[:class:`MultiPolygon`, Dict[required=[coordinates, type]]], Union[:class:`Point`, Dict[required=[coordinates, type]]], Union[:class:`Polygon`, Dict[required=[coordinates, type]]]]
        The feature's geometry
    properties : Union[:class:`GeoJsonProperties`, Dict[required=[]], None]
        Properties associated with this feature.
    type : str
        Specifies the type of GeoJSON object.
    bbox : Union[:class:`BBox`, List[float]]
        Bounding box of the coordinate range of the object's Geometries, Features, or
        Feature Collections. https://tools.ietf.org/html/rfc7946#section-5
    id : Union[float, str]
        A value that uniquely identifies this feature in a
        https://tools.ietf.org/html/rfc7946#section-3.2.
    """

    _schema = {"$ref": "#/definitions/GeoJsonFeature"}

    def __init__(
        self,
        geometry: Union[
            Union[
                "Geometry",
                Union["GeometryCollection", dict],
                Union["LineString", dict],
                Union["MultiLineString", dict],
                Union["MultiPoint", dict],
                Union["MultiPolygon", dict],
                Union["Point", dict],
                Union["Polygon", dict],
            ],
            UndefinedType,
        ] = Undefined,
        properties: Union[
            Union["GeoJsonProperties", None, dict], UndefinedType
        ] = Undefined,
        type: Union[str, UndefinedType] = Undefined,
        bbox: Union[Union["BBox", List[float]], UndefinedType] = Undefined,
        id: Union[Union[float, str], UndefinedType] = Undefined,
        **kwds
    ):
        super(GeoJsonFeature, self).__init__(
            geometry=geometry,
            properties=properties,
            type=type,
            bbox=bbox,
            id=id,
            **kwds
        )


class GeoJsonFeatureCollection(Fit):
    """GeoJsonFeatureCollection schema wrapper

    Union[:class:`GeoJsonFeatureCollection`, Dict[required=[features, type]]]
    A collection of feature objects.  https://tools.ietf.org/html/rfc7946#section-3.3

    Parameters
    ----------

    features : List[Union[:class:`FeatureGeometryGeoJsonProperties`, Dict[required=[geometry, properties, type]]]]

    type : str
        Specifies the type of GeoJSON object.
    bbox : Union[:class:`BBox`, List[float]]
        Bounding box of the coordinate range of the object's Geometries, Features, or
        Feature Collections. https://tools.ietf.org/html/rfc7946#section-5
    """

    _schema = {"$ref": "#/definitions/GeoJsonFeatureCollection"}

    def __init__(
        self,
        features: Union[
            Union[List["FeatureGeometryGeoJsonProperties"], List[dict]], UndefinedType
        ] = Undefined,
        type: Union[str, UndefinedType] = Undefined,
        bbox: Union[Union["BBox", List[float]], UndefinedType] = Undefined,
        **kwds
    ):
        super(GeoJsonFeatureCollection, self).__init__(
            features=features, type=type, bbox=bbox, **kwds
        )


class GeoJsonProperties(VegaLiteSchema):
    """GeoJsonProperties schema wrapper

    Union[:class:`GeoJsonProperties`, Dict[required=[]], None]
    """

    _schema = {"$ref": "#/definitions/GeoJsonProperties"}

    def __init__(self, *args, **kwds):
        super(GeoJsonProperties, self).__init__(*args, **kwds)


class Geometry(VegaLiteSchema):
    """Geometry schema wrapper

    Union[:class:`Geometry`, Union[:class:`GeometryCollection`, Dict[required=[geometries,
    type]]], Union[:class:`LineString`, Dict[required=[coordinates, type]]],
    Union[:class:`MultiLineString`, Dict[required=[coordinates, type]]],
    Union[:class:`MultiPoint`, Dict[required=[coordinates, type]]], Union[:class:`MultiPolygon`,
    Dict[required=[coordinates, type]]], Union[:class:`Point`, Dict[required=[coordinates,
    type]]], Union[:class:`Polygon`, Dict[required=[coordinates, type]]]]
    Union of geometry objects. https://tools.ietf.org/html/rfc7946#section-3
    """

    _schema = {"$ref": "#/definitions/Geometry"}

    def __init__(self, *args, **kwds):
        super(Geometry, self).__init__(*args, **kwds)


class GeometryCollection(Geometry):
    """GeometryCollection schema wrapper

    Union[:class:`GeometryCollection`, Dict[required=[geometries, type]]]
    Geometry Collection https://tools.ietf.org/html/rfc7946#section-3.1.8

    Parameters
    ----------

    geometries : List[Union[:class:`Geometry`, Union[:class:`GeometryCollection`, Dict[required=[geometries, type]]], Union[:class:`LineString`, Dict[required=[coordinates, type]]], Union[:class:`MultiLineString`, Dict[required=[coordinates, type]]], Union[:class:`MultiPoint`, Dict[required=[coordinates, type]]], Union[:class:`MultiPolygon`, Dict[required=[coordinates, type]]], Union[:class:`Point`, Dict[required=[coordinates, type]]], Union[:class:`Polygon`, Dict[required=[coordinates, type]]]]]

    type : str
        Specifies the type of GeoJSON object.
    bbox : Union[:class:`BBox`, List[float]]
        Bounding box of the coordinate range of the object's Geometries, Features, or
        Feature Collections. https://tools.ietf.org/html/rfc7946#section-5
    """

    _schema = {"$ref": "#/definitions/GeometryCollection"}

    def __init__(
        self,
        geometries: Union[
            Union[
                List["Geometry"],
                List[Union["GeometryCollection", dict]],
                List[Union["LineString", dict]],
                List[Union["MultiLineString", dict]],
                List[Union["MultiPoint", dict]],
                List[Union["MultiPolygon", dict]],
                List[Union["Point", dict]],
                List[Union["Polygon", dict]],
            ],
            UndefinedType,
        ] = Undefined,
        type: Union[str, UndefinedType] = Undefined,
        bbox: Union[Union["BBox", List[float]], UndefinedType] = Undefined,
        **kwds
    ):
        super(GeometryCollection, self).__init__(
            geometries=geometries, type=type, bbox=bbox, **kwds
        )


class Gradient(VegaLiteSchema):
    """Gradient schema wrapper

    Union[:class:`Gradient`, Union[:class:`LinearGradient`, Dict[required=[gradient, stops]]],
    Union[:class:`RadialGradient`, Dict[required=[gradient, stops]]]]
    """

    _schema = {"$ref": "#/definitions/Gradient"}

    def __init__(self, *args, **kwds):
        super(Gradient, self).__init__(*args, **kwds)


class GradientStop(VegaLiteSchema):
    """GradientStop schema wrapper

    Union[:class:`GradientStop`, Dict[required=[offset, color]]]

    Parameters
    ----------

    color : Union[:class:`Color`, Union[:class:`ColorName`, Literal['black', 'silver', 'gray', 'white', 'maroon', 'red', 'purple', 'fuchsia', 'green', 'lime', 'olive', 'yellow', 'navy', 'blue', 'teal', 'aqua', 'orange', 'aliceblue', 'antiquewhite', 'aquamarine', 'azure', 'beige', 'bisque', 'blanchedalmond', 'blueviolet', 'brown', 'burlywood', 'cadetblue', 'chartreuse', 'chocolate', 'coral', 'cornflowerblue', 'cornsilk', 'crimson', 'cyan', 'darkblue', 'darkcyan', 'darkgoldenrod', 'darkgray', 'darkgreen', 'darkgrey', 'darkkhaki', 'darkmagenta', 'darkolivegreen', 'darkorange', 'darkorchid', 'darkred', 'darksalmon', 'darkseagreen', 'darkslateblue', 'darkslategray', 'darkslategrey', 'darkturquoise', 'darkviolet', 'deeppink', 'deepskyblue', 'dimgray', 'dimgrey', 'dodgerblue', 'firebrick', 'floralwhite', 'forestgreen', 'gainsboro', 'ghostwhite', 'gold', 'goldenrod', 'greenyellow', 'grey', 'honeydew', 'hotpink', 'indianred', 'indigo', 'ivory', 'khaki', 'lavender', 'lavenderblush', 'lawngreen', 'lemonchiffon', 'lightblue', 'lightcoral', 'lightcyan', 'lightgoldenrodyellow', 'lightgray', 'lightgreen', 'lightgrey', 'lightpink', 'lightsalmon', 'lightseagreen', 'lightskyblue', 'lightslategray', 'lightslategrey', 'lightsteelblue', 'lightyellow', 'limegreen', 'linen', 'magenta', 'mediumaquamarine', 'mediumblue', 'mediumorchid', 'mediumpurple', 'mediumseagreen', 'mediumslateblue', 'mediumspringgreen', 'mediumturquoise', 'mediumvioletred', 'midnightblue', 'mintcream', 'mistyrose', 'moccasin', 'navajowhite', 'oldlace', 'olivedrab', 'orangered', 'orchid', 'palegoldenrod', 'palegreen', 'paleturquoise', 'palevioletred', 'papayawhip', 'peachpuff', 'peru', 'pink', 'plum', 'powderblue', 'rosybrown', 'royalblue', 'saddlebrown', 'salmon', 'sandybrown', 'seagreen', 'seashell', 'sienna', 'skyblue', 'slateblue', 'slategray', 'slategrey', 'snow', 'springgreen', 'steelblue', 'tan', 'thistle', 'tomato', 'turquoise', 'violet', 'wheat', 'whitesmoke', 'yellowgreen', 'rebeccapurple']], Union[:class:`HexColor`, str], str]
        The color value at this point in the gradient.
    offset : float
        The offset fraction for the color stop, indicating its position within the gradient.
    """

    _schema = {"$ref": "#/definitions/GradientStop"}

    def __init__(
        self,
        color: Union[
            Union[
                "Color",
                Union[
                    "ColorName",
                    Literal[
                        "black",
                        "silver",
                        "gray",
                        "white",
                        "maroon",
                        "red",
                        "purple",
                        "fuchsia",
                        "green",
                        "lime",
                        "olive",
                        "yellow",
                        "navy",
                        "blue",
                        "teal",
                        "aqua",
                        "orange",
                        "aliceblue",
                        "antiquewhite",
                        "aquamarine",
                        "azure",
                        "beige",
                        "bisque",
                        "blanchedalmond",
                        "blueviolet",
                        "brown",
                        "burlywood",
                        "cadetblue",
                        "chartreuse",
                        "chocolate",
                        "coral",
                        "cornflowerblue",
                        "cornsilk",
                        "crimson",
                        "cyan",
                        "darkblue",
                        "darkcyan",
                        "darkgoldenrod",
                        "darkgray",
                        "darkgreen",
                        "darkgrey",
                        "darkkhaki",
                        "darkmagenta",
                        "darkolivegreen",
                        "darkorange",
                        "darkorchid",
                        "darkred",
                        "darksalmon",
                        "darkseagreen",
                        "darkslateblue",
                        "darkslategray",
                        "darkslategrey",
                        "darkturquoise",
                        "darkviolet",
                        "deeppink",
                        "deepskyblue",
                        "dimgray",
                        "dimgrey",
                        "dodgerblue",
                        "firebrick",
                        "floralwhite",
                        "forestgreen",
                        "gainsboro",
                        "ghostwhite",
                        "gold",
                        "goldenrod",
                        "greenyellow",
                        "grey",
                        "honeydew",
                        "hotpink",
                        "indianred",
                        "indigo",
                        "ivory",
                        "khaki",
                        "lavender",
                        "lavenderblush",
                        "lawngreen",
                        "lemonchiffon",
                        "lightblue",
                        "lightcoral",
                        "lightcyan",
                        "lightgoldenrodyellow",
                        "lightgray",
                        "lightgreen",
                        "lightgrey",
                        "lightpink",
                        "lightsalmon",
                        "lightseagreen",
                        "lightskyblue",
                        "lightslategray",
                        "lightslategrey",
                        "lightsteelblue",
                        "lightyellow",
                        "limegreen",
                        "linen",
                        "magenta",
                        "mediumaquamarine",
                        "mediumblue",
                        "mediumorchid",
                        "mediumpurple",
                        "mediumseagreen",
                        "mediumslateblue",
                        "mediumspringgreen",
                        "mediumturquoise",
                        "mediumvioletred",
                        "midnightblue",
                        "mintcream",
                        "mistyrose",
                        "moccasin",
                        "navajowhite",
                        "oldlace",
                        "olivedrab",
                        "orangered",
                        "orchid",
                        "palegoldenrod",
                        "palegreen",
                        "paleturquoise",
                        "palevioletred",
                        "papayawhip",
                        "peachpuff",
                        "peru",
                        "pink",
                        "plum",
                        "powderblue",
                        "rosybrown",
                        "royalblue",
                        "saddlebrown",
                        "salmon",
                        "sandybrown",
                        "seagreen",
                        "seashell",
                        "sienna",
                        "skyblue",
                        "slateblue",
                        "slategray",
                        "slategrey",
                        "snow",
                        "springgreen",
                        "steelblue",
                        "tan",
                        "thistle",
                        "tomato",
                        "turquoise",
                        "violet",
                        "wheat",
                        "whitesmoke",
                        "yellowgreen",
                        "rebeccapurple",
                    ],
                ],
                Union["HexColor", str],
                str,
            ],
            UndefinedType,
        ] = Undefined,
        offset: Union[float, UndefinedType] = Undefined,
        **kwds
    ):
        super(GradientStop, self).__init__(color=color, offset=offset, **kwds)


class GraticuleGenerator(Generator):
    """GraticuleGenerator schema wrapper

    Union[:class:`GraticuleGenerator`, Dict[required=[graticule]]]

    Parameters
    ----------

    graticule : Union[Union[:class:`GraticuleParams`, Dict[required=[]]], bool]
        Generate graticule GeoJSON data for geographic reference lines.
    name : str
        Provide a placeholder name and bind data at runtime.
    """

    _schema = {"$ref": "#/definitions/GraticuleGenerator"}

    def __init__(
        self,
        graticule: Union[
            Union[Union["GraticuleParams", dict], bool], UndefinedType
        ] = Undefined,
        name: Union[str, UndefinedType] = Undefined,
        **kwds
    ):
        super(GraticuleGenerator, self).__init__(graticule=graticule, name=name, **kwds)


class GraticuleParams(VegaLiteSchema):
    """GraticuleParams schema wrapper

    Union[:class:`GraticuleParams`, Dict[required=[]]]

    Parameters
    ----------

    extent : Union[:class:`Vector2Vector2number`, List[Union[:class:`Vector2number`, List[float]]]]
        Sets both the major and minor extents to the same values.
    extentMajor : Union[:class:`Vector2Vector2number`, List[Union[:class:`Vector2number`, List[float]]]]
        The major extent of the graticule as a two-element array of coordinates.
    extentMinor : Union[:class:`Vector2Vector2number`, List[Union[:class:`Vector2number`, List[float]]]]
        The minor extent of the graticule as a two-element array of coordinates.
    precision : float
        The precision of the graticule in degrees.

        **Default value:** ``2.5``
    step : Union[:class:`Vector2number`, List[float]]
        Sets both the major and minor step angles to the same values.
    stepMajor : Union[:class:`Vector2number`, List[float]]
        The major step angles of the graticule.

        **Default value:** ``[90, 360]``
    stepMinor : Union[:class:`Vector2number`, List[float]]
        The minor step angles of the graticule.

        **Default value:** ``[10, 10]``
    """

    _schema = {"$ref": "#/definitions/GraticuleParams"}

    def __init__(
        self,
        extent: Union[
            Union["Vector2Vector2number", List["Vector2number"], List[List[float]]],
            UndefinedType,
        ] = Undefined,
        extentMajor: Union[
            Union["Vector2Vector2number", List["Vector2number"], List[List[float]]],
            UndefinedType,
        ] = Undefined,
        extentMinor: Union[
            Union["Vector2Vector2number", List["Vector2number"], List[List[float]]],
            UndefinedType,
        ] = Undefined,
        precision: Union[float, UndefinedType] = Undefined,
        step: Union[Union["Vector2number", List[float]], UndefinedType] = Undefined,
        stepMajor: Union[
            Union["Vector2number", List[float]], UndefinedType
        ] = Undefined,
        stepMinor: Union[
            Union["Vector2number", List[float]], UndefinedType
        ] = Undefined,
        **kwds
    ):
        super(GraticuleParams, self).__init__(
            extent=extent,
            extentMajor=extentMajor,
            extentMinor=extentMinor,
            precision=precision,
            step=step,
            stepMajor=stepMajor,
            stepMinor=stepMinor,
            **kwds
        )


class Header(VegaLiteSchema):
    """Header schema wrapper

    Union[:class:`Header`, Dict[required=[]]]
    Headers of row / column channels for faceted plots.

    Parameters
    ----------

    format : Union[Union[:class:`Dict`, Dict[required=[]]], str]
        When used with the default ``"number"`` and ``"time"`` format type, the text
        formatting pattern for labels of guides (axes, legends, headers) and text marks.


        * If the format type is ``"number"`` (e.g., for quantitative fields), this is D3's
          `number format pattern <https://github.com/d3/d3-format#locale_format>`__.
        * If the format type is ``"time"`` (e.g., for temporal fields), this is D3's `time
          format pattern <https://github.com/d3/d3-time-format#locale_format>`__.

        See the `format documentation <https://vega.github.io/vega-lite/docs/format.html>`__
        for more examples.

        When used with a `custom formatType
        <https://vega.github.io/vega-lite/docs/config.html#custom-format-type>`__, this
        value will be passed as ``format`` alongside ``datum.value`` to the registered
        function.

        **Default value:**  Derived from `numberFormat
        <https://vega.github.io/vega-lite/docs/config.html#format>`__ config for number
        format and from `timeFormat
        <https://vega.github.io/vega-lite/docs/config.html#format>`__ config for time
        format.
    formatType : str
        The format type for labels. One of ``"number"``, ``"time"``, or a `registered custom
        format type
        <https://vega.github.io/vega-lite/docs/config.html#custom-format-type>`__.

        **Default value:**


        * ``"time"`` for temporal fields and ordinal and nominal fields with ``timeUnit``.
        * ``"number"`` for quantitative fields as well as ordinal and nominal fields without
          ``timeUnit``.
    labelAlign : Union[Union[:class:`Align`, Literal['left', 'center', 'right']], Union[:class:`ExprRef`, Dict[required=[expr]]]]
        Horizontal text alignment of header labels. One of ``"left"``, ``"center"``, or
        ``"right"``.
    labelAnchor : Union[:class:`TitleAnchor`, Literal[None, 'start', 'middle', 'end']]
        The anchor position for placing the labels. One of ``"start"``, ``"middle"``, or
        ``"end"``. For example, with a label orientation of top these anchor positions map
        to a left-, center-, or right-aligned label.
    labelAngle : float
        The rotation angle of the header labels.

        **Default value:** ``0`` for column header, ``-90`` for row header.
    labelBaseline : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], Union[:class:`TextBaseline`, Union[:class:`Baseline`, Literal['top', 'middle', 'bottom']], str]]
        The vertical text baseline for the header labels. One of ``"alphabetic"`` (default),
        ``"top"``, ``"middle"``, ``"bottom"``, ``"line-top"``, or ``"line-bottom"``. The
        ``"line-top"`` and ``"line-bottom"`` values operate similarly to ``"top"`` and
        ``"bottom"``, but are calculated relative to the ``titleLineHeight`` rather than
        ``titleFontSize`` alone.
    labelColor : Union[Union[:class:`Color`, Union[:class:`ColorName`, Literal['black', 'silver', 'gray', 'white', 'maroon', 'red', 'purple', 'fuchsia', 'green', 'lime', 'olive', 'yellow', 'navy', 'blue', 'teal', 'aqua', 'orange', 'aliceblue', 'antiquewhite', 'aquamarine', 'azure', 'beige', 'bisque', 'blanchedalmond', 'blueviolet', 'brown', 'burlywood', 'cadetblue', 'chartreuse', 'chocolate', 'coral', 'cornflowerblue', 'cornsilk', 'crimson', 'cyan', 'darkblue', 'darkcyan', 'darkgoldenrod', 'darkgray', 'darkgreen', 'darkgrey', 'darkkhaki', 'darkmagenta', 'darkolivegreen', 'darkorange', 'darkorchid', 'darkred', 'darksalmon', 'darkseagreen', 'darkslateblue', 'darkslategray', 'darkslategrey', 'darkturquoise', 'darkviolet', 'deeppink', 'deepskyblue', 'dimgray', 'dimgrey', 'dodgerblue', 'firebrick', 'floralwhite', 'forestgreen', 'gainsboro', 'ghostwhite', 'gold', 'goldenrod', 'greenyellow', 'grey', 'honeydew', 'hotpink', 'indianred', 'indigo', 'ivory', 'khaki', 'lavender', 'lavenderblush', 'lawngreen', 'lemonchiffon', 'lightblue', 'lightcoral', 'lightcyan', 'lightgoldenrodyellow', 'lightgray', 'lightgreen', 'lightgrey', 'lightpink', 'lightsalmon', 'lightseagreen', 'lightskyblue', 'lightslategray', 'lightslategrey', 'lightsteelblue', 'lightyellow', 'limegreen', 'linen', 'magenta', 'mediumaquamarine', 'mediumblue', 'mediumorchid', 'mediumpurple', 'mediumseagreen', 'mediumslateblue', 'mediumspringgreen', 'mediumturquoise', 'mediumvioletred', 'midnightblue', 'mintcream', 'mistyrose', 'moccasin', 'navajowhite', 'oldlace', 'olivedrab', 'orangered', 'orchid', 'palegoldenrod', 'palegreen', 'paleturquoise', 'palevioletred', 'papayawhip', 'peachpuff', 'peru', 'pink', 'plum', 'powderblue', 'rosybrown', 'royalblue', 'saddlebrown', 'salmon', 'sandybrown', 'seagreen', 'seashell', 'sienna', 'skyblue', 'slateblue', 'slategray', 'slategrey', 'snow', 'springgreen', 'steelblue', 'tan', 'thistle', 'tomato', 'turquoise', 'violet', 'wheat', 'whitesmoke', 'yellowgreen', 'rebeccapurple']], Union[:class:`HexColor`, str], str], Union[:class:`ExprRef`, Dict[required=[expr]]]]
        The color of the header label, can be in hex color code or regular color name.
    labelExpr : str
        `Vega expression <https://vega.github.io/vega/docs/expressions/>`__ for customizing
        labels.

        **Note:** The label text and value can be assessed via the ``label`` and ``value``
        properties of the header's backing ``datum`` object.
    labelFont : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], str]
        The font of the header label.
    labelFontSize : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], float]
        The font size of the header label, in pixels.
    labelFontStyle : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], Union[:class:`FontStyle`, str]]
        The font style of the header label.
    labelFontWeight : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], Union[:class:`FontWeight`, Literal['normal', 'bold', 'lighter', 'bolder', 100, 200, 300, 400, 500, 600, 700, 800, 900]]]
        The font weight of the header label.
    labelLimit : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], float]
        The maximum length of the header label in pixels. The text value will be
        automatically truncated if the rendered size exceeds the limit.

        **Default value:** ``0``, indicating no limit
    labelLineHeight : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], float]
        Line height in pixels for multi-line header labels or title text with ``"line-top"``
        or ``"line-bottom"`` baseline.
    labelOrient : Union[:class:`Orient`, Literal['left', 'right', 'top', 'bottom']]
        The orientation of the header label. One of ``"top"``, ``"bottom"``, ``"left"`` or
        ``"right"``.
    labelPadding : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], float]
        The padding, in pixel, between facet header's label and the plot.

        **Default value:** ``10``
    labels : bool
        A boolean flag indicating if labels should be included as part of the header.

        **Default value:** ``true``.
    orient : Union[:class:`Orient`, Literal['left', 'right', 'top', 'bottom']]
        Shortcut for setting both labelOrient and titleOrient.
    title : Union[None, Union[:class:`Text`, List[str], str]]
        A title for the field. If ``null``, the title will be removed.

        **Default value:**  derived from the field's name and transformation function (
        ``aggregate``, ``bin`` and ``timeUnit`` ). If the field has an aggregate function,
        the function is displayed as part of the title (e.g., ``"Sum of Profit"`` ). If the
        field is binned or has a time unit applied, the applied function is shown in
        parentheses (e.g., ``"Profit (binned)"``, ``"Transaction Date (year-month)"`` ).
        Otherwise, the title is simply the field name.

        **Notes** :

        1) You can customize the default field title format by providing the `fieldTitle
        <https://vega.github.io/vega-lite/docs/config.html#top-level-config>`__ property in
        the `config <https://vega.github.io/vega-lite/docs/config.html>`__ or `fieldTitle
        function via the compile function's options
        <https://vega.github.io/vega-lite/usage/compile.html#field-title>`__.

        2) If both field definition's ``title`` and axis, header, or legend ``title`` are
        defined, axis/header/legend title will be used.
    titleAlign : Union[Union[:class:`Align`, Literal['left', 'center', 'right']], Union[:class:`ExprRef`, Dict[required=[expr]]]]
        Horizontal text alignment (to the anchor) of header titles.
    titleAnchor : Union[:class:`TitleAnchor`, Literal[None, 'start', 'middle', 'end']]
        The anchor position for placing the title. One of ``"start"``, ``"middle"``, or
        ``"end"``. For example, with an orientation of top these anchor positions map to a
        left-, center-, or right-aligned title.
    titleAngle : float
        The rotation angle of the header title.

        **Default value:** ``0``.
    titleBaseline : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], Union[:class:`TextBaseline`, Union[:class:`Baseline`, Literal['top', 'middle', 'bottom']], str]]
        The vertical text baseline for the header title. One of ``"alphabetic"`` (default),
        ``"top"``, ``"middle"``, ``"bottom"``, ``"line-top"``, or ``"line-bottom"``. The
        ``"line-top"`` and ``"line-bottom"`` values operate similarly to ``"top"`` and
        ``"bottom"``, but are calculated relative to the ``titleLineHeight`` rather than
        ``titleFontSize`` alone.

        **Default value:** ``"middle"``
    titleColor : Union[Union[:class:`Color`, Union[:class:`ColorName`, Literal['black', 'silver', 'gray', 'white', 'maroon', 'red', 'purple', 'fuchsia', 'green', 'lime', 'olive', 'yellow', 'navy', 'blue', 'teal', 'aqua', 'orange', 'aliceblue', 'antiquewhite', 'aquamarine', 'azure', 'beige', 'bisque', 'blanchedalmond', 'blueviolet', 'brown', 'burlywood', 'cadetblue', 'chartreuse', 'chocolate', 'coral', 'cornflowerblue', 'cornsilk', 'crimson', 'cyan', 'darkblue', 'darkcyan', 'darkgoldenrod', 'darkgray', 'darkgreen', 'darkgrey', 'darkkhaki', 'darkmagenta', 'darkolivegreen', 'darkorange', 'darkorchid', 'darkred', 'darksalmon', 'darkseagreen', 'darkslateblue', 'darkslategray', 'darkslategrey', 'darkturquoise', 'darkviolet', 'deeppink', 'deepskyblue', 'dimgray', 'dimgrey', 'dodgerblue', 'firebrick', 'floralwhite', 'forestgreen', 'gainsboro', 'ghostwhite', 'gold', 'goldenrod', 'greenyellow', 'grey', 'honeydew', 'hotpink', 'indianred', 'indigo', 'ivory', 'khaki', 'lavender', 'lavenderblush', 'lawngreen', 'lemonchiffon', 'lightblue', 'lightcoral', 'lightcyan', 'lightgoldenrodyellow', 'lightgray', 'lightgreen', 'lightgrey', 'lightpink', 'lightsalmon', 'lightseagreen', 'lightskyblue', 'lightslategray', 'lightslategrey', 'lightsteelblue', 'lightyellow', 'limegreen', 'linen', 'magenta', 'mediumaquamarine', 'mediumblue', 'mediumorchid', 'mediumpurple', 'mediumseagreen', 'mediumslateblue', 'mediumspringgreen', 'mediumturquoise', 'mediumvioletred', 'midnightblue', 'mintcream', 'mistyrose', 'moccasin', 'navajowhite', 'oldlace', 'olivedrab', 'orangered', 'orchid', 'palegoldenrod', 'palegreen', 'paleturquoise', 'palevioletred', 'papayawhip', 'peachpuff', 'peru', 'pink', 'plum', 'powderblue', 'rosybrown', 'royalblue', 'saddlebrown', 'salmon', 'sandybrown', 'seagreen', 'seashell', 'sienna', 'skyblue', 'slateblue', 'slategray', 'slategrey', 'snow', 'springgreen', 'steelblue', 'tan', 'thistle', 'tomato', 'turquoise', 'violet', 'wheat', 'whitesmoke', 'yellowgreen', 'rebeccapurple']], Union[:class:`HexColor`, str], str], Union[:class:`ExprRef`, Dict[required=[expr]]]]
        Color of the header title, can be in hex color code or regular color name.
    titleFont : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], str]
        Font of the header title. (e.g., ``"Helvetica Neue"`` ).
    titleFontSize : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], float]
        Font size of the header title.
    titleFontStyle : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], Union[:class:`FontStyle`, str]]
        The font style of the header title.
    titleFontWeight : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], Union[:class:`FontWeight`, Literal['normal', 'bold', 'lighter', 'bolder', 100, 200, 300, 400, 500, 600, 700, 800, 900]]]
        Font weight of the header title. This can be either a string (e.g ``"bold"``,
        ``"normal"`` ) or a number ( ``100``, ``200``, ``300``, ..., ``900`` where
        ``"normal"`` = ``400`` and ``"bold"`` = ``700`` ).
    titleLimit : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], float]
        The maximum length of the header title in pixels. The text value will be
        automatically truncated if the rendered size exceeds the limit.

        **Default value:** ``0``, indicating no limit
    titleLineHeight : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], float]
        Line height in pixels for multi-line header title text or title text with
        ``"line-top"`` or ``"line-bottom"`` baseline.
    titleOrient : Union[:class:`Orient`, Literal['left', 'right', 'top', 'bottom']]
        The orientation of the header title. One of ``"top"``, ``"bottom"``, ``"left"`` or
        ``"right"``.
    titlePadding : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], float]
        The padding, in pixel, between facet header's title and the label.

        **Default value:** ``10``
    """

    _schema = {"$ref": "#/definitions/Header"}

    def __init__(
        self,
        format: Union[Union[Union["Dict", dict], str], UndefinedType] = Undefined,
        formatType: Union[str, UndefinedType] = Undefined,
        labelAlign: Union[
            Union[
                Union["Align", Literal["left", "center", "right"]],
                Union["ExprRef", "_ParameterProtocol", dict],
            ],
            UndefinedType,
        ] = Undefined,
        labelAnchor: Union[
            Union["TitleAnchor", Literal[None, "start", "middle", "end"]], UndefinedType
        ] = Undefined,
        labelAngle: Union[float, UndefinedType] = Undefined,
        labelBaseline: Union[
            Union[
                Union["ExprRef", "_ParameterProtocol", dict],
                Union[
                    "TextBaseline",
                    Union["Baseline", Literal["top", "middle", "bottom"]],
                    str,
                ],
            ],
            UndefinedType,
        ] = Undefined,
        labelColor: Union[
            Union[
                Union[
                    "Color",
                    Union[
                        "ColorName",
                        Literal[
                            "black",
                            "silver",
                            "gray",
                            "white",
                            "maroon",
                            "red",
                            "purple",
                            "fuchsia",
                            "green",
                            "lime",
                            "olive",
                            "yellow",
                            "navy",
                            "blue",
                            "teal",
                            "aqua",
                            "orange",
                            "aliceblue",
                            "antiquewhite",
                            "aquamarine",
                            "azure",
                            "beige",
                            "bisque",
                            "blanchedalmond",
                            "blueviolet",
                            "brown",
                            "burlywood",
                            "cadetblue",
                            "chartreuse",
                            "chocolate",
                            "coral",
                            "cornflowerblue",
                            "cornsilk",
                            "crimson",
                            "cyan",
                            "darkblue",
                            "darkcyan",
                            "darkgoldenrod",
                            "darkgray",
                            "darkgreen",
                            "darkgrey",
                            "darkkhaki",
                            "darkmagenta",
                            "darkolivegreen",
                            "darkorange",
                            "darkorchid",
                            "darkred",
                            "darksalmon",
                            "darkseagreen",
                            "darkslateblue",
                            "darkslategray",
                            "darkslategrey",
                            "darkturquoise",
                            "darkviolet",
                            "deeppink",
                            "deepskyblue",
                            "dimgray",
                            "dimgrey",
                            "dodgerblue",
                            "firebrick",
                            "floralwhite",
                            "forestgreen",
                            "gainsboro",
                            "ghostwhite",
                            "gold",
                            "goldenrod",
                            "greenyellow",
                            "grey",
                            "honeydew",
                            "hotpink",
                            "indianred",
                            "indigo",
                            "ivory",
                            "khaki",
                            "lavender",
                            "lavenderblush",
                            "lawngreen",
                            "lemonchiffon",
                            "lightblue",
                            "lightcoral",
                            "lightcyan",
                            "lightgoldenrodyellow",
                            "lightgray",
                            "lightgreen",
                            "lightgrey",
                            "lightpink",
                            "lightsalmon",
                            "lightseagreen",
                            "lightskyblue",
                            "lightslategray",
                            "lightslategrey",
                            "lightsteelblue",
                            "lightyellow",
                            "limegreen",
                            "linen",
                            "magenta",
                            "mediumaquamarine",
                            "mediumblue",
                            "mediumorchid",
                            "mediumpurple",
                            "mediumseagreen",
                            "mediumslateblue",
                            "mediumspringgreen",
                            "mediumturquoise",
                            "mediumvioletred",
                            "midnightblue",
                            "mintcream",
                            "mistyrose",
                            "moccasin",
                            "navajowhite",
                            "oldlace",
                            "olivedrab",
                            "orangered",
                            "orchid",
                            "palegoldenrod",
                            "palegreen",
                            "paleturquoise",
                            "palevioletred",
                            "papayawhip",
                            "peachpuff",
                            "peru",
                            "pink",
                            "plum",
                            "powderblue",
                            "rosybrown",
                            "royalblue",
                            "saddlebrown",
                            "salmon",
                            "sandybrown",
                            "seagreen",
                            "seashell",
                            "sienna",
                            "skyblue",
                            "slateblue",
                            "slategray",
                            "slategrey",
                            "snow",
                            "springgreen",
                            "steelblue",
                            "tan",
                            "thistle",
                            "tomato",
                            "turquoise",
                            "violet",
                            "wheat",
                            "whitesmoke",
                            "yellowgreen",
                            "rebeccapurple",
                        ],
                    ],
                    Union["HexColor", str],
                    str,
                ],
                Union["ExprRef", "_ParameterProtocol", dict],
            ],
            UndefinedType,
        ] = Undefined,
        labelExpr: Union[str, UndefinedType] = Undefined,
        labelFont: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], str], UndefinedType
        ] = Undefined,
        labelFontSize: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], float], UndefinedType
        ] = Undefined,
        labelFontStyle: Union[
            Union[
                Union["ExprRef", "_ParameterProtocol", dict], Union["FontStyle", str]
            ],
            UndefinedType,
        ] = Undefined,
        labelFontWeight: Union[
            Union[
                Union["ExprRef", "_ParameterProtocol", dict],
                Union[
                    "FontWeight",
                    Literal[
                        "normal",
                        "bold",
                        "lighter",
                        "bolder",
                        100,
                        200,
                        300,
                        400,
                        500,
                        600,
                        700,
                        800,
                        900,
                    ],
                ],
            ],
            UndefinedType,
        ] = Undefined,
        labelLimit: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], float], UndefinedType
        ] = Undefined,
        labelLineHeight: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], float], UndefinedType
        ] = Undefined,
        labelOrient: Union[
            Union["Orient", Literal["left", "right", "top", "bottom"]], UndefinedType
        ] = Undefined,
        labelPadding: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], float], UndefinedType
        ] = Undefined,
        labels: Union[bool, UndefinedType] = Undefined,
        orient: Union[
            Union["Orient", Literal["left", "right", "top", "bottom"]], UndefinedType
        ] = Undefined,
        title: Union[
            Union[None, Union["Text", List[str], str]], UndefinedType
        ] = Undefined,
        titleAlign: Union[
            Union[
                Union["Align", Literal["left", "center", "right"]],
                Union["ExprRef", "_ParameterProtocol", dict],
            ],
            UndefinedType,
        ] = Undefined,
        titleAnchor: Union[
            Union["TitleAnchor", Literal[None, "start", "middle", "end"]], UndefinedType
        ] = Undefined,
        titleAngle: Union[float, UndefinedType] = Undefined,
        titleBaseline: Union[
            Union[
                Union["ExprRef", "_ParameterProtocol", dict],
                Union[
                    "TextBaseline",
                    Union["Baseline", Literal["top", "middle", "bottom"]],
                    str,
                ],
            ],
            UndefinedType,
        ] = Undefined,
        titleColor: Union[
            Union[
                Union[
                    "Color",
                    Union[
                        "ColorName",
                        Literal[
                            "black",
                            "silver",
                            "gray",
                            "white",
                            "maroon",
                            "red",
                            "purple",
                            "fuchsia",
                            "green",
                            "lime",
                            "olive",
                            "yellow",
                            "navy",
                            "blue",
                            "teal",
                            "aqua",
                            "orange",
                            "aliceblue",
                            "antiquewhite",
                            "aquamarine",
                            "azure",
                            "beige",
                            "bisque",
                            "blanchedalmond",
                            "blueviolet",
                            "brown",
                            "burlywood",
                            "cadetblue",
                            "chartreuse",
                            "chocolate",
                            "coral",
                            "cornflowerblue",
                            "cornsilk",
                            "crimson",
                            "cyan",
                            "darkblue",
                            "darkcyan",
                            "darkgoldenrod",
                            "darkgray",
                            "darkgreen",
                            "darkgrey",
                            "darkkhaki",
                            "darkmagenta",
                            "darkolivegreen",
                            "darkorange",
                            "darkorchid",
                            "darkred",
                            "darksalmon",
                            "darkseagreen",
                            "darkslateblue",
                            "darkslategray",
                            "darkslategrey",
                            "darkturquoise",
                            "darkviolet",
                            "deeppink",
                            "deepskyblue",
                            "dimgray",
                            "dimgrey",
                            "dodgerblue",
                            "firebrick",
                            "floralwhite",
                            "forestgreen",
                            "gainsboro",
                            "ghostwhite",
                            "gold",
                            "goldenrod",
                            "greenyellow",
                            "grey",
                            "honeydew",
                            "hotpink",
                            "indianred",
                            "indigo",
                            "ivory",
                            "khaki",
                            "lavender",
                            "lavenderblush",
                            "lawngreen",
                            "lemonchiffon",
                            "lightblue",
                            "lightcoral",
                            "lightcyan",
                            "lightgoldenrodyellow",
                            "lightgray",
                            "lightgreen",
                            "lightgrey",
                            "lightpink",
                            "lightsalmon",
                            "lightseagreen",
                            "lightskyblue",
                            "lightslategray",
                            "lightslategrey",
                            "lightsteelblue",
                            "lightyellow",
                            "limegreen",
                            "linen",
                            "magenta",
                            "mediumaquamarine",
                            "mediumblue",
                            "mediumorchid",
                            "mediumpurple",
                            "mediumseagreen",
                            "mediumslateblue",
                            "mediumspringgreen",
                            "mediumturquoise",
                            "mediumvioletred",
                            "midnightblue",
                            "mintcream",
                            "mistyrose",
                            "moccasin",
                            "navajowhite",
                            "oldlace",
                            "olivedrab",
                            "orangered",
                            "orchid",
                            "palegoldenrod",
                            "palegreen",
                            "paleturquoise",
                            "palevioletred",
                            "papayawhip",
                            "peachpuff",
                            "peru",
                            "pink",
                            "plum",
                            "powderblue",
                            "rosybrown",
                            "royalblue",
                            "saddlebrown",
                            "salmon",
                            "sandybrown",
                            "seagreen",
                            "seashell",
                            "sienna",
                            "skyblue",
                            "slateblue",
                            "slategray",
                            "slategrey",
                            "snow",
                            "springgreen",
                            "steelblue",
                            "tan",
                            "thistle",
                            "tomato",
                            "turquoise",
                            "violet",
                            "wheat",
                            "whitesmoke",
                            "yellowgreen",
                            "rebeccapurple",
                        ],
                    ],
                    Union["HexColor", str],
                    str,
                ],
                Union["ExprRef", "_ParameterProtocol", dict],
            ],
            UndefinedType,
        ] = Undefined,
        titleFont: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], str], UndefinedType
        ] = Undefined,
        titleFontSize: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], float], UndefinedType
        ] = Undefined,
        titleFontStyle: Union[
            Union[
                Union["ExprRef", "_ParameterProtocol", dict], Union["FontStyle", str]
            ],
            UndefinedType,
        ] = Undefined,
        titleFontWeight: Union[
            Union[
                Union["ExprRef", "_ParameterProtocol", dict],
                Union[
                    "FontWeight",
                    Literal[
                        "normal",
                        "bold",
                        "lighter",
                        "bolder",
                        100,
                        200,
                        300,
                        400,
                        500,
                        600,
                        700,
                        800,
                        900,
                    ],
                ],
            ],
            UndefinedType,
        ] = Undefined,
        titleLimit: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], float], UndefinedType
        ] = Undefined,
        titleLineHeight: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], float], UndefinedType
        ] = Undefined,
        titleOrient: Union[
            Union["Orient", Literal["left", "right", "top", "bottom"]], UndefinedType
        ] = Undefined,
        titlePadding: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], float], UndefinedType
        ] = Undefined,
        **kwds
    ):
        super(Header, self).__init__(
            format=format,
            formatType=formatType,
            labelAlign=labelAlign,
            labelAnchor=labelAnchor,
            labelAngle=labelAngle,
            labelBaseline=labelBaseline,
            labelColor=labelColor,
            labelExpr=labelExpr,
            labelFont=labelFont,
            labelFontSize=labelFontSize,
            labelFontStyle=labelFontStyle,
            labelFontWeight=labelFontWeight,
            labelLimit=labelLimit,
            labelLineHeight=labelLineHeight,
            labelOrient=labelOrient,
            labelPadding=labelPadding,
            labels=labels,
            orient=orient,
            title=title,
            titleAlign=titleAlign,
            titleAnchor=titleAnchor,
            titleAngle=titleAngle,
            titleBaseline=titleBaseline,
            titleColor=titleColor,
            titleFont=titleFont,
            titleFontSize=titleFontSize,
            titleFontStyle=titleFontStyle,
            titleFontWeight=titleFontWeight,
            titleLimit=titleLimit,
            titleLineHeight=titleLineHeight,
            titleOrient=titleOrient,
            titlePadding=titlePadding,
            **kwds
        )


class HeaderConfig(VegaLiteSchema):
    """HeaderConfig schema wrapper

    Union[:class:`HeaderConfig`, Dict[required=[]]]

    Parameters
    ----------

    format : Union[Union[:class:`Dict`, Dict[required=[]]], str]
        When used with the default ``"number"`` and ``"time"`` format type, the text
        formatting pattern for labels of guides (axes, legends, headers) and text marks.


        * If the format type is ``"number"`` (e.g., for quantitative fields), this is D3's
          `number format pattern <https://github.com/d3/d3-format#locale_format>`__.
        * If the format type is ``"time"`` (e.g., for temporal fields), this is D3's `time
          format pattern <https://github.com/d3/d3-time-format#locale_format>`__.

        See the `format documentation <https://vega.github.io/vega-lite/docs/format.html>`__
        for more examples.

        When used with a `custom formatType
        <https://vega.github.io/vega-lite/docs/config.html#custom-format-type>`__, this
        value will be passed as ``format`` alongside ``datum.value`` to the registered
        function.

        **Default value:**  Derived from `numberFormat
        <https://vega.github.io/vega-lite/docs/config.html#format>`__ config for number
        format and from `timeFormat
        <https://vega.github.io/vega-lite/docs/config.html#format>`__ config for time
        format.
    formatType : str
        The format type for labels. One of ``"number"``, ``"time"``, or a `registered custom
        format type
        <https://vega.github.io/vega-lite/docs/config.html#custom-format-type>`__.

        **Default value:**


        * ``"time"`` for temporal fields and ordinal and nominal fields with ``timeUnit``.
        * ``"number"`` for quantitative fields as well as ordinal and nominal fields without
          ``timeUnit``.
    labelAlign : Union[Union[:class:`Align`, Literal['left', 'center', 'right']], Union[:class:`ExprRef`, Dict[required=[expr]]]]
        Horizontal text alignment of header labels. One of ``"left"``, ``"center"``, or
        ``"right"``.
    labelAnchor : Union[:class:`TitleAnchor`, Literal[None, 'start', 'middle', 'end']]
        The anchor position for placing the labels. One of ``"start"``, ``"middle"``, or
        ``"end"``. For example, with a label orientation of top these anchor positions map
        to a left-, center-, or right-aligned label.
    labelAngle : float
        The rotation angle of the header labels.

        **Default value:** ``0`` for column header, ``-90`` for row header.
    labelBaseline : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], Union[:class:`TextBaseline`, Union[:class:`Baseline`, Literal['top', 'middle', 'bottom']], str]]
        The vertical text baseline for the header labels. One of ``"alphabetic"`` (default),
        ``"top"``, ``"middle"``, ``"bottom"``, ``"line-top"``, or ``"line-bottom"``. The
        ``"line-top"`` and ``"line-bottom"`` values operate similarly to ``"top"`` and
        ``"bottom"``, but are calculated relative to the ``titleLineHeight`` rather than
        ``titleFontSize`` alone.
    labelColor : Union[Union[:class:`Color`, Union[:class:`ColorName`, Literal['black', 'silver', 'gray', 'white', 'maroon', 'red', 'purple', 'fuchsia', 'green', 'lime', 'olive', 'yellow', 'navy', 'blue', 'teal', 'aqua', 'orange', 'aliceblue', 'antiquewhite', 'aquamarine', 'azure', 'beige', 'bisque', 'blanchedalmond', 'blueviolet', 'brown', 'burlywood', 'cadetblue', 'chartreuse', 'chocolate', 'coral', 'cornflowerblue', 'cornsilk', 'crimson', 'cyan', 'darkblue', 'darkcyan', 'darkgoldenrod', 'darkgray', 'darkgreen', 'darkgrey', 'darkkhaki', 'darkmagenta', 'darkolivegreen', 'darkorange', 'darkorchid', 'darkred', 'darksalmon', 'darkseagreen', 'darkslateblue', 'darkslategray', 'darkslategrey', 'darkturquoise', 'darkviolet', 'deeppink', 'deepskyblue', 'dimgray', 'dimgrey', 'dodgerblue', 'firebrick', 'floralwhite', 'forestgreen', 'gainsboro', 'ghostwhite', 'gold', 'goldenrod', 'greenyellow', 'grey', 'honeydew', 'hotpink', 'indianred', 'indigo', 'ivory', 'khaki', 'lavender', 'lavenderblush', 'lawngreen', 'lemonchiffon', 'lightblue', 'lightcoral', 'lightcyan', 'lightgoldenrodyellow', 'lightgray', 'lightgreen', 'lightgrey', 'lightpink', 'lightsalmon', 'lightseagreen', 'lightskyblue', 'lightslategray', 'lightslategrey', 'lightsteelblue', 'lightyellow', 'limegreen', 'linen', 'magenta', 'mediumaquamarine', 'mediumblue', 'mediumorchid', 'mediumpurple', 'mediumseagreen', 'mediumslateblue', 'mediumspringgreen', 'mediumturquoise', 'mediumvioletred', 'midnightblue', 'mintcream', 'mistyrose', 'moccasin', 'navajowhite', 'oldlace', 'olivedrab', 'orangered', 'orchid', 'palegoldenrod', 'palegreen', 'paleturquoise', 'palevioletred', 'papayawhip', 'peachpuff', 'peru', 'pink', 'plum', 'powderblue', 'rosybrown', 'royalblue', 'saddlebrown', 'salmon', 'sandybrown', 'seagreen', 'seashell', 'sienna', 'skyblue', 'slateblue', 'slategray', 'slategrey', 'snow', 'springgreen', 'steelblue', 'tan', 'thistle', 'tomato', 'turquoise', 'violet', 'wheat', 'whitesmoke', 'yellowgreen', 'rebeccapurple']], Union[:class:`HexColor`, str], str], Union[:class:`ExprRef`, Dict[required=[expr]]]]
        The color of the header label, can be in hex color code or regular color name.
    labelExpr : str
        `Vega expression <https://vega.github.io/vega/docs/expressions/>`__ for customizing
        labels.

        **Note:** The label text and value can be assessed via the ``label`` and ``value``
        properties of the header's backing ``datum`` object.
    labelFont : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], str]
        The font of the header label.
    labelFontSize : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], float]
        The font size of the header label, in pixels.
    labelFontStyle : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], Union[:class:`FontStyle`, str]]
        The font style of the header label.
    labelFontWeight : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], Union[:class:`FontWeight`, Literal['normal', 'bold', 'lighter', 'bolder', 100, 200, 300, 400, 500, 600, 700, 800, 900]]]
        The font weight of the header label.
    labelLimit : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], float]
        The maximum length of the header label in pixels. The text value will be
        automatically truncated if the rendered size exceeds the limit.

        **Default value:** ``0``, indicating no limit
    labelLineHeight : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], float]
        Line height in pixels for multi-line header labels or title text with ``"line-top"``
        or ``"line-bottom"`` baseline.
    labelOrient : Union[:class:`Orient`, Literal['left', 'right', 'top', 'bottom']]
        The orientation of the header label. One of ``"top"``, ``"bottom"``, ``"left"`` or
        ``"right"``.
    labelPadding : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], float]
        The padding, in pixel, between facet header's label and the plot.

        **Default value:** ``10``
    labels : bool
        A boolean flag indicating if labels should be included as part of the header.

        **Default value:** ``true``.
    orient : Union[:class:`Orient`, Literal['left', 'right', 'top', 'bottom']]
        Shortcut for setting both labelOrient and titleOrient.
    title : None
        Set to null to disable title for the axis, legend, or header.
    titleAlign : Union[Union[:class:`Align`, Literal['left', 'center', 'right']], Union[:class:`ExprRef`, Dict[required=[expr]]]]
        Horizontal text alignment (to the anchor) of header titles.
    titleAnchor : Union[:class:`TitleAnchor`, Literal[None, 'start', 'middle', 'end']]
        The anchor position for placing the title. One of ``"start"``, ``"middle"``, or
        ``"end"``. For example, with an orientation of top these anchor positions map to a
        left-, center-, or right-aligned title.
    titleAngle : float
        The rotation angle of the header title.

        **Default value:** ``0``.
    titleBaseline : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], Union[:class:`TextBaseline`, Union[:class:`Baseline`, Literal['top', 'middle', 'bottom']], str]]
        The vertical text baseline for the header title. One of ``"alphabetic"`` (default),
        ``"top"``, ``"middle"``, ``"bottom"``, ``"line-top"``, or ``"line-bottom"``. The
        ``"line-top"`` and ``"line-bottom"`` values operate similarly to ``"top"`` and
        ``"bottom"``, but are calculated relative to the ``titleLineHeight`` rather than
        ``titleFontSize`` alone.

        **Default value:** ``"middle"``
    titleColor : Union[Union[:class:`Color`, Union[:class:`ColorName`, Literal['black', 'silver', 'gray', 'white', 'maroon', 'red', 'purple', 'fuchsia', 'green', 'lime', 'olive', 'yellow', 'navy', 'blue', 'teal', 'aqua', 'orange', 'aliceblue', 'antiquewhite', 'aquamarine', 'azure', 'beige', 'bisque', 'blanchedalmond', 'blueviolet', 'brown', 'burlywood', 'cadetblue', 'chartreuse', 'chocolate', 'coral', 'cornflowerblue', 'cornsilk', 'crimson', 'cyan', 'darkblue', 'darkcyan', 'darkgoldenrod', 'darkgray', 'darkgreen', 'darkgrey', 'darkkhaki', 'darkmagenta', 'darkolivegreen', 'darkorange', 'darkorchid', 'darkred', 'darksalmon', 'darkseagreen', 'darkslateblue', 'darkslategray', 'darkslategrey', 'darkturquoise', 'darkviolet', 'deeppink', 'deepskyblue', 'dimgray', 'dimgrey', 'dodgerblue', 'firebrick', 'floralwhite', 'forestgreen', 'gainsboro', 'ghostwhite', 'gold', 'goldenrod', 'greenyellow', 'grey', 'honeydew', 'hotpink', 'indianred', 'indigo', 'ivory', 'khaki', 'lavender', 'lavenderblush', 'lawngreen', 'lemonchiffon', 'lightblue', 'lightcoral', 'lightcyan', 'lightgoldenrodyellow', 'lightgray', 'lightgreen', 'lightgrey', 'lightpink', 'lightsalmon', 'lightseagreen', 'lightskyblue', 'lightslategray', 'lightslategrey', 'lightsteelblue', 'lightyellow', 'limegreen', 'linen', 'magenta', 'mediumaquamarine', 'mediumblue', 'mediumorchid', 'mediumpurple', 'mediumseagreen', 'mediumslateblue', 'mediumspringgreen', 'mediumturquoise', 'mediumvioletred', 'midnightblue', 'mintcream', 'mistyrose', 'moccasin', 'navajowhite', 'oldlace', 'olivedrab', 'orangered', 'orchid', 'palegoldenrod', 'palegreen', 'paleturquoise', 'palevioletred', 'papayawhip', 'peachpuff', 'peru', 'pink', 'plum', 'powderblue', 'rosybrown', 'royalblue', 'saddlebrown', 'salmon', 'sandybrown', 'seagreen', 'seashell', 'sienna', 'skyblue', 'slateblue', 'slategray', 'slategrey', 'snow', 'springgreen', 'steelblue', 'tan', 'thistle', 'tomato', 'turquoise', 'violet', 'wheat', 'whitesmoke', 'yellowgreen', 'rebeccapurple']], Union[:class:`HexColor`, str], str], Union[:class:`ExprRef`, Dict[required=[expr]]]]
        Color of the header title, can be in hex color code or regular color name.
    titleFont : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], str]
        Font of the header title. (e.g., ``"Helvetica Neue"`` ).
    titleFontSize : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], float]
        Font size of the header title.
    titleFontStyle : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], Union[:class:`FontStyle`, str]]
        The font style of the header title.
    titleFontWeight : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], Union[:class:`FontWeight`, Literal['normal', 'bold', 'lighter', 'bolder', 100, 200, 300, 400, 500, 600, 700, 800, 900]]]
        Font weight of the header title. This can be either a string (e.g ``"bold"``,
        ``"normal"`` ) or a number ( ``100``, ``200``, ``300``, ..., ``900`` where
        ``"normal"`` = ``400`` and ``"bold"`` = ``700`` ).
    titleLimit : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], float]
        The maximum length of the header title in pixels. The text value will be
        automatically truncated if the rendered size exceeds the limit.

        **Default value:** ``0``, indicating no limit
    titleLineHeight : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], float]
        Line height in pixels for multi-line header title text or title text with
        ``"line-top"`` or ``"line-bottom"`` baseline.
    titleOrient : Union[:class:`Orient`, Literal['left', 'right', 'top', 'bottom']]
        The orientation of the header title. One of ``"top"``, ``"bottom"``, ``"left"`` or
        ``"right"``.
    titlePadding : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], float]
        The padding, in pixel, between facet header's title and the label.

        **Default value:** ``10``
    """

    _schema = {"$ref": "#/definitions/HeaderConfig"}

    def __init__(
        self,
        format: Union[Union[Union["Dict", dict], str], UndefinedType] = Undefined,
        formatType: Union[str, UndefinedType] = Undefined,
        labelAlign: Union[
            Union[
                Union["Align", Literal["left", "center", "right"]],
                Union["ExprRef", "_ParameterProtocol", dict],
            ],
            UndefinedType,
        ] = Undefined,
        labelAnchor: Union[
            Union["TitleAnchor", Literal[None, "start", "middle", "end"]], UndefinedType
        ] = Undefined,
        labelAngle: Union[float, UndefinedType] = Undefined,
        labelBaseline: Union[
            Union[
                Union["ExprRef", "_ParameterProtocol", dict],
                Union[
                    "TextBaseline",
                    Union["Baseline", Literal["top", "middle", "bottom"]],
                    str,
                ],
            ],
            UndefinedType,
        ] = Undefined,
        labelColor: Union[
            Union[
                Union[
                    "Color",
                    Union[
                        "ColorName",
                        Literal[
                            "black",
                            "silver",
                            "gray",
                            "white",
                            "maroon",
                            "red",
                            "purple",
                            "fuchsia",
                            "green",
                            "lime",
                            "olive",
                            "yellow",
                            "navy",
                            "blue",
                            "teal",
                            "aqua",
                            "orange",
                            "aliceblue",
                            "antiquewhite",
                            "aquamarine",
                            "azure",
                            "beige",
                            "bisque",
                            "blanchedalmond",
                            "blueviolet",
                            "brown",
                            "burlywood",
                            "cadetblue",
                            "chartreuse",
                            "chocolate",
                            "coral",
                            "cornflowerblue",
                            "cornsilk",
                            "crimson",
                            "cyan",
                            "darkblue",
                            "darkcyan",
                            "darkgoldenrod",
                            "darkgray",
                            "darkgreen",
                            "darkgrey",
                            "darkkhaki",
                            "darkmagenta",
                            "darkolivegreen",
                            "darkorange",
                            "darkorchid",
                            "darkred",
                            "darksalmon",
                            "darkseagreen",
                            "darkslateblue",
                            "darkslategray",
                            "darkslategrey",
                            "darkturquoise",
                            "darkviolet",
                            "deeppink",
                            "deepskyblue",
                            "dimgray",
                            "dimgrey",
                            "dodgerblue",
                            "firebrick",
                            "floralwhite",
                            "forestgreen",
                            "gainsboro",
                            "ghostwhite",
                            "gold",
                            "goldenrod",
                            "greenyellow",
                            "grey",
                            "honeydew",
                            "hotpink",
                            "indianred",
                            "indigo",
                            "ivory",
                            "khaki",
                            "lavender",
                            "lavenderblush",
                            "lawngreen",
                            "lemonchiffon",
                            "lightblue",
                            "lightcoral",
                            "lightcyan",
                            "lightgoldenrodyellow",
                            "lightgray",
                            "lightgreen",
                            "lightgrey",
                            "lightpink",
                            "lightsalmon",
                            "lightseagreen",
                            "lightskyblue",
                            "lightslategray",
                            "lightslategrey",
                            "lightsteelblue",
                            "lightyellow",
                            "limegreen",
                            "linen",
                            "magenta",
                            "mediumaquamarine",
                            "mediumblue",
                            "mediumorchid",
                            "mediumpurple",
                            "mediumseagreen",
                            "mediumslateblue",
                            "mediumspringgreen",
                            "mediumturquoise",
                            "mediumvioletred",
                            "midnightblue",
                            "mintcream",
                            "mistyrose",
                            "moccasin",
                            "navajowhite",
                            "oldlace",
                            "olivedrab",
                            "orangered",
                            "orchid",
                            "palegoldenrod",
                            "palegreen",
                            "paleturquoise",
                            "palevioletred",
                            "papayawhip",
                            "peachpuff",
                            "peru",
                            "pink",
                            "plum",
                            "powderblue",
                            "rosybrown",
                            "royalblue",
                            "saddlebrown",
                            "salmon",
                            "sandybrown",
                            "seagreen",
                            "seashell",
                            "sienna",
                            "skyblue",
                            "slateblue",
                            "slategray",
                            "slategrey",
                            "snow",
                            "springgreen",
                            "steelblue",
                            "tan",
                            "thistle",
                            "tomato",
                            "turquoise",
                            "violet",
                            "wheat",
                            "whitesmoke",
                            "yellowgreen",
                            "rebeccapurple",
                        ],
                    ],
                    Union["HexColor", str],
                    str,
                ],
                Union["ExprRef", "_ParameterProtocol", dict],
            ],
            UndefinedType,
        ] = Undefined,
        labelExpr: Union[str, UndefinedType] = Undefined,
        labelFont: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], str], UndefinedType
        ] = Undefined,
        labelFontSize: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], float], UndefinedType
        ] = Undefined,
        labelFontStyle: Union[
            Union[
                Union["ExprRef", "_ParameterProtocol", dict], Union["FontStyle", str]
            ],
            UndefinedType,
        ] = Undefined,
        labelFontWeight: Union[
            Union[
                Union["ExprRef", "_ParameterProtocol", dict],
                Union[
                    "FontWeight",
                    Literal[
                        "normal",
                        "bold",
                        "lighter",
                        "bolder",
                        100,
                        200,
                        300,
                        400,
                        500,
                        600,
                        700,
                        800,
                        900,
                    ],
                ],
            ],
            UndefinedType,
        ] = Undefined,
        labelLimit: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], float], UndefinedType
        ] = Undefined,
        labelLineHeight: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], float], UndefinedType
        ] = Undefined,
        labelOrient: Union[
            Union["Orient", Literal["left", "right", "top", "bottom"]], UndefinedType
        ] = Undefined,
        labelPadding: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], float], UndefinedType
        ] = Undefined,
        labels: Union[bool, UndefinedType] = Undefined,
        orient: Union[
            Union["Orient", Literal["left", "right", "top", "bottom"]], UndefinedType
        ] = Undefined,
        title: Union[None, UndefinedType] = Undefined,
        titleAlign: Union[
            Union[
                Union["Align", Literal["left", "center", "right"]],
                Union["ExprRef", "_ParameterProtocol", dict],
            ],
            UndefinedType,
        ] = Undefined,
        titleAnchor: Union[
            Union["TitleAnchor", Literal[None, "start", "middle", "end"]], UndefinedType
        ] = Undefined,
        titleAngle: Union[float, UndefinedType] = Undefined,
        titleBaseline: Union[
            Union[
                Union["ExprRef", "_ParameterProtocol", dict],
                Union[
                    "TextBaseline",
                    Union["Baseline", Literal["top", "middle", "bottom"]],
                    str,
                ],
            ],
            UndefinedType,
        ] = Undefined,
        titleColor: Union[
            Union[
                Union[
                    "Color",
                    Union[
                        "ColorName",
                        Literal[
                            "black",
                            "silver",
                            "gray",
                            "white",
                            "maroon",
                            "red",
                            "purple",
                            "fuchsia",
                            "green",
                            "lime",
                            "olive",
                            "yellow",
                            "navy",
                            "blue",
                            "teal",
                            "aqua",
                            "orange",
                            "aliceblue",
                            "antiquewhite",
                            "aquamarine",
                            "azure",
                            "beige",
                            "bisque",
                            "blanchedalmond",
                            "blueviolet",
                            "brown",
                            "burlywood",
                            "cadetblue",
                            "chartreuse",
                            "chocolate",
                            "coral",
                            "cornflowerblue",
                            "cornsilk",
                            "crimson",
                            "cyan",
                            "darkblue",
                            "darkcyan",
                            "darkgoldenrod",
                            "darkgray",
                            "darkgreen",
                            "darkgrey",
                            "darkkhaki",
                            "darkmagenta",
                            "darkolivegreen",
                            "darkorange",
                            "darkorchid",
                            "darkred",
                            "darksalmon",
                            "darkseagreen",
                            "darkslateblue",
                            "darkslategray",
                            "darkslategrey",
                            "darkturquoise",
                            "darkviolet",
                            "deeppink",
                            "deepskyblue",
                            "dimgray",
                            "dimgrey",
                            "dodgerblue",
                            "firebrick",
                            "floralwhite",
                            "forestgreen",
                            "gainsboro",
                            "ghostwhite",
                            "gold",
                            "goldenrod",
                            "greenyellow",
                            "grey",
                            "honeydew",
                            "hotpink",
                            "indianred",
                            "indigo",
                            "ivory",
                            "khaki",
                            "lavender",
                            "lavenderblush",
                            "lawngreen",
                            "lemonchiffon",
                            "lightblue",
                            "lightcoral",
                            "lightcyan",
                            "lightgoldenrodyellow",
                            "lightgray",
                            "lightgreen",
                            "lightgrey",
                            "lightpink",
                            "lightsalmon",
                            "lightseagreen",
                            "lightskyblue",
                            "lightslategray",
                            "lightslategrey",
                            "lightsteelblue",
                            "lightyellow",
                            "limegreen",
                            "linen",
                            "magenta",
                            "mediumaquamarine",
                            "mediumblue",
                            "mediumorchid",
                            "mediumpurple",
                            "mediumseagreen",
                            "mediumslateblue",
                            "mediumspringgreen",
                            "mediumturquoise",
                            "mediumvioletred",
                            "midnightblue",
                            "mintcream",
                            "mistyrose",
                            "moccasin",
                            "navajowhite",
                            "oldlace",
                            "olivedrab",
                            "orangered",
                            "orchid",
                            "palegoldenrod",
                            "palegreen",
                            "paleturquoise",
                            "palevioletred",
                            "papayawhip",
                            "peachpuff",
                            "peru",
                            "pink",
                            "plum",
                            "powderblue",
                            "rosybrown",
                            "royalblue",
                            "saddlebrown",
                            "salmon",
                            "sandybrown",
                            "seagreen",
                            "seashell",
                            "sienna",
                            "skyblue",
                            "slateblue",
                            "slategray",
                            "slategrey",
                            "snow",
                            "springgreen",
                            "steelblue",
                            "tan",
                            "thistle",
                            "tomato",
                            "turquoise",
                            "violet",
                            "wheat",
                            "whitesmoke",
                            "yellowgreen",
                            "rebeccapurple",
                        ],
                    ],
                    Union["HexColor", str],
                    str,
                ],
                Union["ExprRef", "_ParameterProtocol", dict],
            ],
            UndefinedType,
        ] = Undefined,
        titleFont: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], str], UndefinedType
        ] = Undefined,
        titleFontSize: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], float], UndefinedType
        ] = Undefined,
        titleFontStyle: Union[
            Union[
                Union["ExprRef", "_ParameterProtocol", dict], Union["FontStyle", str]
            ],
            UndefinedType,
        ] = Undefined,
        titleFontWeight: Union[
            Union[
                Union["ExprRef", "_ParameterProtocol", dict],
                Union[
                    "FontWeight",
                    Literal[
                        "normal",
                        "bold",
                        "lighter",
                        "bolder",
                        100,
                        200,
                        300,
                        400,
                        500,
                        600,
                        700,
                        800,
                        900,
                    ],
                ],
            ],
            UndefinedType,
        ] = Undefined,
        titleLimit: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], float], UndefinedType
        ] = Undefined,
        titleLineHeight: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], float], UndefinedType
        ] = Undefined,
        titleOrient: Union[
            Union["Orient", Literal["left", "right", "top", "bottom"]], UndefinedType
        ] = Undefined,
        titlePadding: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], float], UndefinedType
        ] = Undefined,
        **kwds
    ):
        super(HeaderConfig, self).__init__(
            format=format,
            formatType=formatType,
            labelAlign=labelAlign,
            labelAnchor=labelAnchor,
            labelAngle=labelAngle,
            labelBaseline=labelBaseline,
            labelColor=labelColor,
            labelExpr=labelExpr,
            labelFont=labelFont,
            labelFontSize=labelFontSize,
            labelFontStyle=labelFontStyle,
            labelFontWeight=labelFontWeight,
            labelLimit=labelLimit,
            labelLineHeight=labelLineHeight,
            labelOrient=labelOrient,
            labelPadding=labelPadding,
            labels=labels,
            orient=orient,
            title=title,
            titleAlign=titleAlign,
            titleAnchor=titleAnchor,
            titleAngle=titleAngle,
            titleBaseline=titleBaseline,
            titleColor=titleColor,
            titleFont=titleFont,
            titleFontSize=titleFontSize,
            titleFontStyle=titleFontStyle,
            titleFontWeight=titleFontWeight,
            titleLimit=titleLimit,
            titleLineHeight=titleLineHeight,
            titleOrient=titleOrient,
            titlePadding=titlePadding,
            **kwds
        )


class HexColor(Color):
    """HexColor schema wrapper

    Union[:class:`HexColor`, str]
    """

    _schema = {"$ref": "#/definitions/HexColor"}

    def __init__(self, *args):
        super(HexColor, self).__init__(*args)


class ImputeMethod(VegaLiteSchema):
    """ImputeMethod schema wrapper

    Union[:class:`ImputeMethod`, Literal['value', 'median', 'max', 'min', 'mean']]
    """

    _schema = {"$ref": "#/definitions/ImputeMethod"}

    def __init__(self, *args):
        super(ImputeMethod, self).__init__(*args)


class ImputeParams(VegaLiteSchema):
    """ImputeParams schema wrapper

    Union[:class:`ImputeParams`, Dict[required=[]]]

    Parameters
    ----------

    frame : List[Union[None, float]]
        A frame specification as a two-element array used to control the window over which
        the specified method is applied. The array entries should either be a number
        indicating the offset from the current data object, or null to indicate unbounded
        rows preceding or following the current data object. For example, the value ``[-5,
        5]`` indicates that the window should include five objects preceding and five
        objects following the current object.

        **Default value:** :  ``[null, null]`` indicating that the window includes all
        objects.
    keyvals : Union[List[Any], Union[:class:`ImputeSequence`, Dict[required=[stop]]]]
        Defines the key values that should be considered for imputation. An array of key
        values or an object defining a `number sequence
        <https://vega.github.io/vega-lite/docs/impute.html#sequence-def>`__.

        If provided, this will be used in addition to the key values observed within the
        input data. If not provided, the values will be derived from all unique values of
        the ``key`` field. For ``impute`` in ``encoding``, the key field is the x-field if
        the y-field is imputed, or vice versa.

        If there is no impute grouping, this property *must* be specified.
    method : Union[:class:`ImputeMethod`, Literal['value', 'median', 'max', 'min', 'mean']]
        The imputation method to use for the field value of imputed data objects. One of
        ``"value"``, ``"mean"``, ``"median"``, ``"max"`` or ``"min"``.

        **Default value:**  ``"value"``
    value : Any
        The field value to use when the imputation ``method`` is ``"value"``.
    """

    _schema = {"$ref": "#/definitions/ImputeParams"}

    def __init__(
        self,
        frame: Union[Union[List[None], List[float]], UndefinedType] = Undefined,
        keyvals: Union[
            Union[List[Any], Union["ImputeSequence", dict]], UndefinedType
        ] = Undefined,
        method: Union[
            Union["ImputeMethod", Literal["value", "median", "max", "min", "mean"]],
            UndefinedType,
        ] = Undefined,
        value: Union[Any, UndefinedType] = Undefined,
        **kwds
    ):
        super(ImputeParams, self).__init__(
            frame=frame, keyvals=keyvals, method=method, value=value, **kwds
        )


class ImputeSequence(VegaLiteSchema):
    """ImputeSequence schema wrapper

    Union[:class:`ImputeSequence`, Dict[required=[stop]]]

    Parameters
    ----------

    stop : float
        The ending value(exclusive) of the sequence.
    start : float
        The starting value of the sequence. **Default value:** ``0``
    step : float
        The step value between sequence entries. **Default value:** ``1`` or ``-1`` if
        ``stop < start``
    """

    _schema = {"$ref": "#/definitions/ImputeSequence"}

    def __init__(
        self,
        stop: Union[float, UndefinedType] = Undefined,
        start: Union[float, UndefinedType] = Undefined,
        step: Union[float, UndefinedType] = Undefined,
        **kwds
    ):
        super(ImputeSequence, self).__init__(stop=stop, start=start, step=step, **kwds)


class InlineData(DataSource):
    """InlineData schema wrapper

    Union[:class:`InlineData`, Dict[required=[values]]]

    Parameters
    ----------

    values : Union[:class:`InlineDataset`, Dict[required=[]], List[Dict[required=[]]], List[bool], List[float], List[str], str]
        The full data set, included inline. This can be an array of objects or primitive
        values, an object, or a string. Arrays of primitive values are ingested as objects
        with a ``data`` property. Strings are parsed according to the specified format type.
    format : Union[:class:`DataFormat`, Union[:class:`CsvDataFormat`, Dict[required=[]]], Union[:class:`DsvDataFormat`, Dict[required=[delimiter]]], Union[:class:`JsonDataFormat`, Dict[required=[]]], Union[:class:`TopoDataFormat`, Dict[required=[]]]]
        An object that specifies the format for parsing the data.
    name : str
        Provide a placeholder name and bind data at runtime.
    """

    _schema = {"$ref": "#/definitions/InlineData"}

    def __init__(
        self,
        values: Union[
            Union[
                "InlineDataset",
                List[bool],
                List[dict],
                List[float],
                List[str],
                dict,
                str,
            ],
            UndefinedType,
        ] = Undefined,
        format: Union[
            Union[
                "DataFormat",
                Union["CsvDataFormat", dict],
                Union["DsvDataFormat", dict],
                Union["JsonDataFormat", dict],
                Union["TopoDataFormat", dict],
            ],
            UndefinedType,
        ] = Undefined,
        name: Union[str, UndefinedType] = Undefined,
        **kwds
    ):
        super(InlineData, self).__init__(
            values=values, format=format, name=name, **kwds
        )


class InlineDataset(VegaLiteSchema):
    """InlineDataset schema wrapper

    Union[:class:`InlineDataset`, Dict[required=[]], List[Dict[required=[]]], List[bool],
    List[float], List[str], str]
    """

    _schema = {"$ref": "#/definitions/InlineDataset"}

    def __init__(self, *args, **kwds):
        super(InlineDataset, self).__init__(*args, **kwds)


class Interpolate(VegaLiteSchema):
    """Interpolate schema wrapper

    Union[:class:`Interpolate`, Literal['basis', 'basis-open', 'basis-closed', 'bundle',
    'cardinal', 'cardinal-open', 'cardinal-closed', 'catmull-rom', 'linear', 'linear-closed',
    'monotone', 'natural', 'step', 'step-before', 'step-after']]
    """

    _schema = {"$ref": "#/definitions/Interpolate"}

    def __init__(self, *args):
        super(Interpolate, self).__init__(*args)


class IntervalSelectionConfig(VegaLiteSchema):
    """IntervalSelectionConfig schema wrapper

    Union[:class:`IntervalSelectionConfig`, Dict[required=[type]]]

    Parameters
    ----------

    type : str
        Determines the default event processing and data query for the selection. Vega-Lite
        currently supports two selection types:


        * ``"point"`` -- to select multiple discrete data values; the first value is
          selected on ``click`` and additional values toggled on shift-click.
        * ``"interval"`` -- to select a continuous range of data values on ``drag``.
    clear : Union[Union[:class:`Stream`, Union[:class:`DerivedStream`, Dict[required=[stream]]], Union[:class:`EventStream`, Dict[required=[source, type]], Dict[required=[type]]], Union[:class:`MergedStream`, Dict[required=[merge]]]], bool, str]
        Clears the selection, emptying it of all values. This property can be a `Event
        Stream <https://vega.github.io/vega/docs/event-streams/>`__ or ``false`` to disable
        clear.

        **Default value:** ``dblclick``.

        **See also:** `clear examples
        <https://vega.github.io/vega-lite/docs/selection.html#clear>`__ in the
        documentation.
    encodings : List[Union[:class:`SingleDefUnitChannel`, Literal['x', 'y', 'xOffset', 'yOffset', 'x2', 'y2', 'longitude', 'latitude', 'longitude2', 'latitude2', 'theta', 'theta2', 'radius', 'radius2', 'color', 'fill', 'stroke', 'opacity', 'fillOpacity', 'strokeOpacity', 'strokeWidth', 'strokeDash', 'size', 'angle', 'shape', 'key', 'text', 'href', 'url', 'description']]]
        An array of encoding channels. The corresponding data field values must match for a
        data tuple to fall within the selection.

        **See also:** The `projection with encodings and fields section
        <https://vega.github.io/vega-lite/docs/selection.html#project>`__ in the
        documentation.
    mark : Union[:class:`BrushConfig`, Dict[required=[]]]
        An interval selection also adds a rectangle mark to depict the extents of the
        interval. The ``mark`` property can be used to customize the appearance of the mark.

        **See also:** `mark examples
        <https://vega.github.io/vega-lite/docs/selection.html#mark>`__ in the documentation.
    on : Union[Union[:class:`Stream`, Union[:class:`DerivedStream`, Dict[required=[stream]]], Union[:class:`EventStream`, Dict[required=[source, type]], Dict[required=[type]]], Union[:class:`MergedStream`, Dict[required=[merge]]]], str]
        A `Vega event stream <https://vega.github.io/vega/docs/event-streams/>`__ (object or
        selector) that triggers the selection. For interval selections, the event stream
        must specify a `start and end
        <https://vega.github.io/vega/docs/event-streams/#between-filters>`__.

        **See also:** `on examples
        <https://vega.github.io/vega-lite/docs/selection.html#on>`__ in the documentation.
    resolve : Union[:class:`SelectionResolution`, Literal['global', 'union', 'intersect']]
        With layered and multi-view displays, a strategy that determines how selections'
        data queries are resolved when applied in a filter transform, conditional encoding
        rule, or scale domain.

        One of:


        * ``"global"`` -- only one brush exists for the entire SPLOM. When the user begins
          to drag, any previous brushes are cleared, and a new one is constructed.
        * ``"union"`` -- each cell contains its own brush, and points are highlighted if
          they lie within *any* of these individual brushes.
        * ``"intersect"`` -- each cell contains its own brush, and points are highlighted
          only if they fall within *all* of these individual brushes.

        **Default value:** ``global``.

        **See also:** `resolve examples
        <https://vega.github.io/vega-lite/docs/selection.html#resolve>`__ in the
        documentation.
    translate : Union[bool, str]
        When truthy, allows a user to interactively move an interval selection
        back-and-forth. Can be ``true``, ``false`` (to disable panning), or a `Vega event
        stream definition <https://vega.github.io/vega/docs/event-streams/>`__ which must
        include a start and end event to trigger continuous panning. Discrete panning (e.g.,
        pressing the left/right arrow keys) will be supported in future versions.

        **Default value:** ``true``, which corresponds to ``[mousedown, window:mouseup] >
        window:mousemove!``. This default allows users to clicks and drags within an
        interval selection to reposition it.

        **See also:** `translate examples
        <https://vega.github.io/vega-lite/docs/selection.html#translate>`__ in the
        documentation.
    zoom : Union[bool, str]
        When truthy, allows a user to interactively resize an interval selection. Can be
        ``true``, ``false`` (to disable zooming), or a `Vega event stream definition
        <https://vega.github.io/vega/docs/event-streams/>`__. Currently, only ``wheel``
        events are supported, but custom event streams can still be used to specify filters,
        debouncing, and throttling. Future versions will expand the set of events that can
        trigger this transformation.

        **Default value:** ``true``, which corresponds to ``wheel!``. This default allows
        users to use the mouse wheel to resize an interval selection.

        **See also:** `zoom examples
        <https://vega.github.io/vega-lite/docs/selection.html#zoom>`__ in the documentation.
    """

    _schema = {"$ref": "#/definitions/IntervalSelectionConfig"}

    def __init__(
        self,
        type: Union[str, UndefinedType] = Undefined,
        clear: Union[
            Union[
                Union[
                    "Stream",
                    Union["DerivedStream", dict],
                    Union["EventStream", dict],
                    Union["MergedStream", dict],
                ],
                bool,
                str,
            ],
            UndefinedType,
        ] = Undefined,
        encodings: Union[
            Union[
                List["SingleDefUnitChannel"],
                List[
                    Literal[
                        "x",
                        "y",
                        "xOffset",
                        "yOffset",
                        "x2",
                        "y2",
                        "longitude",
                        "latitude",
                        "longitude2",
                        "latitude2",
                        "theta",
                        "theta2",
                        "radius",
                        "radius2",
                        "color",
                        "fill",
                        "stroke",
                        "opacity",
                        "fillOpacity",
                        "strokeOpacity",
                        "strokeWidth",
                        "strokeDash",
                        "size",
                        "angle",
                        "shape",
                        "key",
                        "text",
                        "href",
                        "url",
                        "description",
                    ]
                ],
            ],
            UndefinedType,
        ] = Undefined,
        mark: Union[Union["BrushConfig", dict], UndefinedType] = Undefined,
        on: Union[
            Union[
                Union[
                    "Stream",
                    Union["DerivedStream", dict],
                    Union["EventStream", dict],
                    Union["MergedStream", dict],
                ],
                str,
            ],
            UndefinedType,
        ] = Undefined,
        resolve: Union[
            Union["SelectionResolution", Literal["global", "union", "intersect"]],
            UndefinedType,
        ] = Undefined,
        translate: Union[Union[bool, str], UndefinedType] = Undefined,
        zoom: Union[Union[bool, str], UndefinedType] = Undefined,
        **kwds
    ):
        super(IntervalSelectionConfig, self).__init__(
            type=type,
            clear=clear,
            encodings=encodings,
            mark=mark,
            on=on,
            resolve=resolve,
            translate=translate,
            zoom=zoom,
            **kwds
        )


class IntervalSelectionConfigWithoutType(VegaLiteSchema):
    """IntervalSelectionConfigWithoutType schema wrapper

    Union[:class:`IntervalSelectionConfigWithoutType`, Dict[required=[]]]

    Parameters
    ----------

    clear : Union[Union[:class:`Stream`, Union[:class:`DerivedStream`, Dict[required=[stream]]], Union[:class:`EventStream`, Dict[required=[source, type]], Dict[required=[type]]], Union[:class:`MergedStream`, Dict[required=[merge]]]], bool, str]
        Clears the selection, emptying it of all values. This property can be a `Event
        Stream <https://vega.github.io/vega/docs/event-streams/>`__ or ``false`` to disable
        clear.

        **Default value:** ``dblclick``.

        **See also:** `clear examples
        <https://vega.github.io/vega-lite/docs/selection.html#clear>`__ in the
        documentation.
    encodings : List[Union[:class:`SingleDefUnitChannel`, Literal['x', 'y', 'xOffset', 'yOffset', 'x2', 'y2', 'longitude', 'latitude', 'longitude2', 'latitude2', 'theta', 'theta2', 'radius', 'radius2', 'color', 'fill', 'stroke', 'opacity', 'fillOpacity', 'strokeOpacity', 'strokeWidth', 'strokeDash', 'size', 'angle', 'shape', 'key', 'text', 'href', 'url', 'description']]]
        An array of encoding channels. The corresponding data field values must match for a
        data tuple to fall within the selection.

        **See also:** The `projection with encodings and fields section
        <https://vega.github.io/vega-lite/docs/selection.html#project>`__ in the
        documentation.
    mark : Union[:class:`BrushConfig`, Dict[required=[]]]
        An interval selection also adds a rectangle mark to depict the extents of the
        interval. The ``mark`` property can be used to customize the appearance of the mark.

        **See also:** `mark examples
        <https://vega.github.io/vega-lite/docs/selection.html#mark>`__ in the documentation.
    on : Union[Union[:class:`Stream`, Union[:class:`DerivedStream`, Dict[required=[stream]]], Union[:class:`EventStream`, Dict[required=[source, type]], Dict[required=[type]]], Union[:class:`MergedStream`, Dict[required=[merge]]]], str]
        A `Vega event stream <https://vega.github.io/vega/docs/event-streams/>`__ (object or
        selector) that triggers the selection. For interval selections, the event stream
        must specify a `start and end
        <https://vega.github.io/vega/docs/event-streams/#between-filters>`__.

        **See also:** `on examples
        <https://vega.github.io/vega-lite/docs/selection.html#on>`__ in the documentation.
    resolve : Union[:class:`SelectionResolution`, Literal['global', 'union', 'intersect']]
        With layered and multi-view displays, a strategy that determines how selections'
        data queries are resolved when applied in a filter transform, conditional encoding
        rule, or scale domain.

        One of:


        * ``"global"`` -- only one brush exists for the entire SPLOM. When the user begins
          to drag, any previous brushes are cleared, and a new one is constructed.
        * ``"union"`` -- each cell contains its own brush, and points are highlighted if
          they lie within *any* of these individual brushes.
        * ``"intersect"`` -- each cell contains its own brush, and points are highlighted
          only if they fall within *all* of these individual brushes.

        **Default value:** ``global``.

        **See also:** `resolve examples
        <https://vega.github.io/vega-lite/docs/selection.html#resolve>`__ in the
        documentation.
    translate : Union[bool, str]
        When truthy, allows a user to interactively move an interval selection
        back-and-forth. Can be ``true``, ``false`` (to disable panning), or a `Vega event
        stream definition <https://vega.github.io/vega/docs/event-streams/>`__ which must
        include a start and end event to trigger continuous panning. Discrete panning (e.g.,
        pressing the left/right arrow keys) will be supported in future versions.

        **Default value:** ``true``, which corresponds to ``[mousedown, window:mouseup] >
        window:mousemove!``. This default allows users to clicks and drags within an
        interval selection to reposition it.

        **See also:** `translate examples
        <https://vega.github.io/vega-lite/docs/selection.html#translate>`__ in the
        documentation.
    zoom : Union[bool, str]
        When truthy, allows a user to interactively resize an interval selection. Can be
        ``true``, ``false`` (to disable zooming), or a `Vega event stream definition
        <https://vega.github.io/vega/docs/event-streams/>`__. Currently, only ``wheel``
        events are supported, but custom event streams can still be used to specify filters,
        debouncing, and throttling. Future versions will expand the set of events that can
        trigger this transformation.

        **Default value:** ``true``, which corresponds to ``wheel!``. This default allows
        users to use the mouse wheel to resize an interval selection.

        **See also:** `zoom examples
        <https://vega.github.io/vega-lite/docs/selection.html#zoom>`__ in the documentation.
    """

    _schema = {"$ref": "#/definitions/IntervalSelectionConfigWithoutType"}

    def __init__(
        self,
        clear: Union[
            Union[
                Union[
                    "Stream",
                    Union["DerivedStream", dict],
                    Union["EventStream", dict],
                    Union["MergedStream", dict],
                ],
                bool,
                str,
            ],
            UndefinedType,
        ] = Undefined,
        encodings: Union[
            Union[
                List["SingleDefUnitChannel"],
                List[
                    Literal[
                        "x",
                        "y",
                        "xOffset",
                        "yOffset",
                        "x2",
                        "y2",
                        "longitude",
                        "latitude",
                        "longitude2",
                        "latitude2",
                        "theta",
                        "theta2",
                        "radius",
                        "radius2",
                        "color",
                        "fill",
                        "stroke",
                        "opacity",
                        "fillOpacity",
                        "strokeOpacity",
                        "strokeWidth",
                        "strokeDash",
                        "size",
                        "angle",
                        "shape",
                        "key",
                        "text",
                        "href",
                        "url",
                        "description",
                    ]
                ],
            ],
            UndefinedType,
        ] = Undefined,
        mark: Union[Union["BrushConfig", dict], UndefinedType] = Undefined,
        on: Union[
            Union[
                Union[
                    "Stream",
                    Union["DerivedStream", dict],
                    Union["EventStream", dict],
                    Union["MergedStream", dict],
                ],
                str,
            ],
            UndefinedType,
        ] = Undefined,
        resolve: Union[
            Union["SelectionResolution", Literal["global", "union", "intersect"]],
            UndefinedType,
        ] = Undefined,
        translate: Union[Union[bool, str], UndefinedType] = Undefined,
        zoom: Union[Union[bool, str], UndefinedType] = Undefined,
        **kwds
    ):
        super(IntervalSelectionConfigWithoutType, self).__init__(
            clear=clear,
            encodings=encodings,
            mark=mark,
            on=on,
            resolve=resolve,
            translate=translate,
            zoom=zoom,
            **kwds
        )


class JoinAggregateFieldDef(VegaLiteSchema):
    """JoinAggregateFieldDef schema wrapper

    Union[:class:`JoinAggregateFieldDef`, Dict[required=[op, as]]]

    Parameters
    ----------

    op : Union[:class:`AggregateOp`, Literal['argmax', 'argmin', 'average', 'count', 'distinct', 'max', 'mean', 'median', 'min', 'missing', 'product', 'q1', 'q3', 'ci0', 'ci1', 'stderr', 'stdev', 'stdevp', 'sum', 'valid', 'values', 'variance', 'variancep']]
        The aggregation operation to apply (e.g., ``"sum"``, ``"average"`` or ``"count"`` ).
        See the list of all supported operations `here
        <https://vega.github.io/vega-lite/docs/aggregate.html#ops>`__.
    field : Union[:class:`FieldName`, str]
        The data field for which to compute the aggregate function. This can be omitted for
        functions that do not operate over a field such as ``"count"``.
    as : Union[:class:`FieldName`, str]
        The output name for the join aggregate operation.
    """

    _schema = {"$ref": "#/definitions/JoinAggregateFieldDef"}

    def __init__(
        self,
        op: Union[
            Union[
                "AggregateOp",
                Literal[
                    "argmax",
                    "argmin",
                    "average",
                    "count",
                    "distinct",
                    "max",
                    "mean",
                    "median",
                    "min",
                    "missing",
                    "product",
                    "q1",
                    "q3",
                    "ci0",
                    "ci1",
                    "stderr",
                    "stdev",
                    "stdevp",
                    "sum",
                    "valid",
                    "values",
                    "variance",
                    "variancep",
                ],
            ],
            UndefinedType,
        ] = Undefined,
        field: Union[Union["FieldName", str], UndefinedType] = Undefined,
        **kwds
    ):
        super(JoinAggregateFieldDef, self).__init__(op=op, field=field, **kwds)


class JsonDataFormat(DataFormat):
    """JsonDataFormat schema wrapper

    Union[:class:`JsonDataFormat`, Dict[required=[]]]

    Parameters
    ----------

    parse : Union[None, Union[:class:`Parse`, Dict[required=[]]]]
        If set to ``null``, disable type inference based on the spec and only use type
        inference based on the data. Alternatively, a parsing directive object can be
        provided for explicit data types. Each property of the object corresponds to a field
        name, and the value to the desired data type (one of ``"number"``, ``"boolean"``,
        ``"date"``, or null (do not parse the field)). For example, ``"parse":
        {"modified_on": "date"}`` parses the ``modified_on`` field in each input record a
        Date value.

        For ``"date"``, we parse data based using JavaScript's `Date.parse()
        <https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/parse>`__.
        For Specific date formats can be provided (e.g., ``{foo: "date:'%m%d%Y'"}`` ), using
        the `d3-time-format syntax <https://github.com/d3/d3-time-format#locale_format>`__.
        UTC date format parsing is supported similarly (e.g., ``{foo: "utc:'%m%d%Y'"}`` ).
        See more about `UTC time
        <https://vega.github.io/vega-lite/docs/timeunit.html#utc>`__
    property : str
        The JSON property containing the desired data. This parameter can be used when the
        loaded JSON file may have surrounding structure or meta-data. For example
        ``"property": "values.features"`` is equivalent to retrieving
        ``json.values.features`` from the loaded JSON object.
    type : str
        Type of input data: ``"json"``, ``"csv"``, ``"tsv"``, ``"dsv"``.

        **Default value:**  The default format type is determined by the extension of the
        file URL. If no extension is detected, ``"json"`` will be used by default.
    """

    _schema = {"$ref": "#/definitions/JsonDataFormat"}

    def __init__(
        self,
        parse: Union[Union[None, Union["Parse", dict]], UndefinedType] = Undefined,
        property: Union[str, UndefinedType] = Undefined,
        type: Union[str, UndefinedType] = Undefined,
        **kwds
    ):
        super(JsonDataFormat, self).__init__(
            parse=parse, property=property, type=type, **kwds
        )


class LabelOverlap(VegaLiteSchema):
    """LabelOverlap schema wrapper

    Union[:class:`LabelOverlap`, bool, str]
    """

    _schema = {"$ref": "#/definitions/LabelOverlap"}

    def __init__(self, *args, **kwds):
        super(LabelOverlap, self).__init__(*args, **kwds)


class LatLongDef(VegaLiteSchema):
    """LatLongDef schema wrapper

    Union[:class:`LatLongDef`, Union[:class:`DatumDef`, Dict[required=[]]],
    Union[:class:`LatLongFieldDef`, Dict[required=[]]]]
    """

    _schema = {"$ref": "#/definitions/LatLongDef"}

    def __init__(self, *args, **kwds):
        super(LatLongDef, self).__init__(*args, **kwds)


class LatLongFieldDef(LatLongDef):
    """LatLongFieldDef schema wrapper

    Union[:class:`LatLongFieldDef`, Dict[required=[]]]

    Parameters
    ----------

    aggregate : Union[:class:`Aggregate`, Union[:class:`ArgmaxDef`, Dict[required=[argmax]]], Union[:class:`ArgminDef`, Dict[required=[argmin]]], Union[:class:`NonArgAggregateOp`, Literal['average', 'count', 'distinct', 'max', 'mean', 'median', 'min', 'missing', 'product', 'q1', 'q3', 'ci0', 'ci1', 'stderr', 'stdev', 'stdevp', 'sum', 'valid', 'values', 'variance', 'variancep']]]
        Aggregation function for the field (e.g., ``"mean"``, ``"sum"``, ``"median"``,
        ``"min"``, ``"max"``, ``"count"`` ).

        **Default value:** ``undefined`` (None)

        **See also:** `aggregate <https://vega.github.io/vega-lite/docs/aggregate.html>`__
        documentation.
    bandPosition : float
        Relative position on a band of a stacked, binned, time unit, or band scale. For
        example, the marks will be positioned at the beginning of the band if set to ``0``,
        and at the middle of the band if set to ``0.5``.
    bin : None
        A flag for binning a ``quantitative`` field, `an object defining binning parameters
        <https://vega.github.io/vega-lite/docs/bin.html#bin-parameters>`__, or indicating
        that the data for ``x`` or ``y`` channel are binned before they are imported into
        Vega-Lite ( ``"binned"`` ).


        If ``true``, default `binning parameters
        <https://vega.github.io/vega-lite/docs/bin.html#bin-parameters>`__ will be applied.

        If ``"binned"``, this indicates that the data for the ``x`` (or ``y`` ) channel are
        already binned. You can map the bin-start field to ``x`` (or ``y`` ) and the bin-end
        field to ``x2`` (or ``y2`` ). The scale and axis will be formatted similar to
        binning in Vega-Lite.  To adjust the axis ticks based on the bin step, you can also
        set the axis's `tickMinStep
        <https://vega.github.io/vega-lite/docs/axis.html#ticks>`__ property.

        **Default value:** ``false``

        **See also:** `bin <https://vega.github.io/vega-lite/docs/bin.html>`__
        documentation.
    field : Union[:class:`Field`, Union[:class:`FieldName`, str], Union[:class:`RepeatRef`, Dict[required=[repeat]]]]
        **Required.** A string defining the name of the field from which to pull a data
        value or an object defining iterated values from the `repeat
        <https://vega.github.io/vega-lite/docs/repeat.html>`__ operator.

        **See also:** `field <https://vega.github.io/vega-lite/docs/field.html>`__
        documentation.

        **Notes:** 1)  Dots ( ``.`` ) and brackets ( ``[`` and ``]`` ) can be used to access
        nested objects (e.g., ``"field": "foo.bar"`` and ``"field": "foo['bar']"`` ). If
        field names contain dots or brackets but are not nested, you can use ``\\`` to
        escape dots and brackets (e.g., ``"a\\.b"`` and ``"a\\[0\\]"`` ). See more details
        about escaping in the `field documentation
        <https://vega.github.io/vega-lite/docs/field.html>`__. 2) ``field`` is not required
        if ``aggregate`` is ``count``.
    timeUnit : Union[Union[:class:`BinnedTimeUnit`, Literal['binnedutcyear', 'binnedutcyearquarter', 'binnedutcyearquartermonth', 'binnedutcyearmonth', 'binnedutcyearmonthdate', 'binnedutcyearmonthdatehours', 'binnedutcyearmonthdatehoursminutes', 'binnedutcyearmonthdatehoursminutesseconds', 'binnedutcyearweek', 'binnedutcyearweekday', 'binnedutcyearweekdayhours', 'binnedutcyearweekdayhoursminutes', 'binnedutcyearweekdayhoursminutesseconds', 'binnedutcyeardayofyear'], Literal['binnedyear', 'binnedyearquarter', 'binnedyearquartermonth', 'binnedyearmonth', 'binnedyearmonthdate', 'binnedyearmonthdatehours', 'binnedyearmonthdatehoursminutes', 'binnedyearmonthdatehoursminutesseconds', 'binnedyearweek', 'binnedyearweekday', 'binnedyearweekdayhours', 'binnedyearweekdayhoursminutes', 'binnedyearweekdayhoursminutesseconds', 'binnedyeardayofyear']], Union[:class:`TimeUnitParams`, Dict[required=[]]], Union[:class:`TimeUnit`, Union[:class:`MultiTimeUnit`, Union[:class:`LocalMultiTimeUnit`, Literal['yearquarter', 'yearquartermonth', 'yearmonth', 'yearmonthdate', 'yearmonthdatehours', 'yearmonthdatehoursminutes', 'yearmonthdatehoursminutesseconds', 'yearweek', 'yearweekday', 'yearweekdayhours', 'yearweekdayhoursminutes', 'yearweekdayhoursminutesseconds', 'yeardayofyear', 'quartermonth', 'monthdate', 'monthdatehours', 'monthdatehoursminutes', 'monthdatehoursminutesseconds', 'weekday', 'weeksdayhours', 'weekdayhoursminutes', 'weekdayhoursminutesseconds', 'dayhours', 'dayhoursminutes', 'dayhoursminutesseconds', 'hoursminutes', 'hoursminutesseconds', 'minutesseconds', 'secondsmilliseconds']], Union[:class:`UtcMultiTimeUnit`, Literal['utcyearquarter', 'utcyearquartermonth', 'utcyearmonth', 'utcyearmonthdate', 'utcyearmonthdatehours', 'utcyearmonthdatehoursminutes', 'utcyearmonthdatehoursminutesseconds', 'utcyearweek', 'utcyearweekday', 'utcyearweekdayhours', 'utcyearweekdayhoursminutes', 'utcyearweekdayhoursminutesseconds', 'utcyeardayofyear', 'utcquartermonth', 'utcmonthdate', 'utcmonthdatehours', 'utcmonthdatehoursminutes', 'utcmonthdatehoursminutesseconds', 'utcweekday', 'utcweeksdayhours', 'utcweekdayhoursminutes', 'utcweekdayhoursminutesseconds', 'utcdayhours', 'utcdayhoursminutes', 'utcdayhoursminutesseconds', 'utchoursminutes', 'utchoursminutesseconds', 'utcminutesseconds', 'utcsecondsmilliseconds']]], Union[:class:`SingleTimeUnit`, Union[:class:`LocalSingleTimeUnit`, Literal['year', 'quarter', 'month', 'week', 'day', 'dayofyear', 'date', 'hours', 'minutes', 'seconds', 'milliseconds']], Union[:class:`UtcSingleTimeUnit`, Literal['utcyear', 'utcquarter', 'utcmonth', 'utcweek', 'utcday', 'utcdayofyear', 'utcdate', 'utchours', 'utcminutes', 'utcseconds', 'utcmilliseconds']]]]]
        Time unit (e.g., ``year``, ``yearmonth``, ``month``, ``hours`` ) for a temporal
        field. or `a temporal field that gets casted as ordinal
        <https://vega.github.io/vega-lite/docs/type.html#cast>`__.

        **Default value:** ``undefined`` (None)

        **See also:** `timeUnit <https://vega.github.io/vega-lite/docs/timeunit.html>`__
        documentation.
    title : Union[None, Union[:class:`Text`, List[str], str]]
        A title for the field. If ``null``, the title will be removed.

        **Default value:**  derived from the field's name and transformation function (
        ``aggregate``, ``bin`` and ``timeUnit`` ). If the field has an aggregate function,
        the function is displayed as part of the title (e.g., ``"Sum of Profit"`` ). If the
        field is binned or has a time unit applied, the applied function is shown in
        parentheses (e.g., ``"Profit (binned)"``, ``"Transaction Date (year-month)"`` ).
        Otherwise, the title is simply the field name.

        **Notes** :

        1) You can customize the default field title format by providing the `fieldTitle
        <https://vega.github.io/vega-lite/docs/config.html#top-level-config>`__ property in
        the `config <https://vega.github.io/vega-lite/docs/config.html>`__ or `fieldTitle
        function via the compile function's options
        <https://vega.github.io/vega-lite/usage/compile.html#field-title>`__.

        2) If both field definition's ``title`` and axis, header, or legend ``title`` are
        defined, axis/header/legend title will be used.
    type : str
        The type of measurement ( ``"quantitative"``, ``"temporal"``, ``"ordinal"``, or
        ``"nominal"`` ) for the encoded field or constant value ( ``datum`` ). It can also
        be a ``"geojson"`` type for encoding `'geoshape'
        <https://vega.github.io/vega-lite/docs/geoshape.html>`__.

        Vega-Lite automatically infers data types in many cases as discussed below. However,
        type is required for a field if: (1) the field is not nominal and the field encoding
        has no specified ``aggregate`` (except ``argmin`` and ``argmax`` ), ``bin``, scale
        type, custom ``sort`` order, nor ``timeUnit`` or (2) if you wish to use an ordinal
        scale for a field with ``bin`` or ``timeUnit``.

        **Default value:**

        1) For a data ``field``, ``"nominal"`` is the default data type unless the field
        encoding has ``aggregate``, ``channel``, ``bin``, scale type, ``sort``, or
        ``timeUnit`` that satisfies the following criteria:


        * ``"quantitative"`` is the default type if (1) the encoded field contains ``bin``
          or ``aggregate`` except ``"argmin"`` and ``"argmax"``, (2) the encoding channel is
          ``latitude`` or ``longitude`` channel or (3) if the specified scale type is `a
          quantitative scale <https://vega.github.io/vega-lite/docs/scale.html#type>`__.
        * ``"temporal"`` is the default type if (1) the encoded field contains ``timeUnit``
          or (2) the specified scale type is a time or utc scale
        * ``"ordinal"`` is the default type if (1) the encoded field contains a `custom sort
          order
          <https://vega.github.io/vega-lite/docs/sort.html#specifying-custom-sort-order>`__,
          (2) the specified scale type is an ordinal/point/band scale, or (3) the encoding
          channel is ``order``.

        2) For a constant value in data domain ( ``datum`` ):


        * ``"quantitative"`` if the datum is a number
        * ``"nominal"`` if the datum is a string
        * ``"temporal"`` if the datum is `a date time object
          <https://vega.github.io/vega-lite/docs/datetime.html>`__

        **Note:**


        * Data ``type`` describes the semantics of the data rather than the primitive data
          types (number, string, etc.). The same primitive data type can have different
          types of measurement. For example, numeric data can represent quantitative,
          ordinal, or nominal data.
        * Data values for a temporal field can be either a date-time string (e.g.,
          ``"2015-03-07 12:32:17"``, ``"17:01"``, ``"2015-03-16"``. ``"2015"`` ) or a
          timestamp number (e.g., ``1552199579097`` ).
        * When using with `bin <https://vega.github.io/vega-lite/docs/bin.html>`__, the
          ``type`` property can be either ``"quantitative"`` (for using a linear bin scale)
          or `"ordinal" (for using an ordinal bin scale)
          <https://vega.github.io/vega-lite/docs/type.html#cast-bin>`__.
        * When using with `timeUnit
          <https://vega.github.io/vega-lite/docs/timeunit.html>`__, the ``type`` property
          can be either ``"temporal"`` (default, for using a temporal scale) or `"ordinal"
          (for using an ordinal scale)
          <https://vega.github.io/vega-lite/docs/type.html#cast-bin>`__.
        * When using with `aggregate
          <https://vega.github.io/vega-lite/docs/aggregate.html>`__, the ``type`` property
          refers to the post-aggregation data type. For example, we can calculate count
          ``distinct`` of a categorical field ``"cat"`` using ``{"aggregate": "distinct",
          "field": "cat"}``. The ``"type"`` of the aggregate output is ``"quantitative"``.
        * Secondary channels (e.g., ``x2``, ``y2``, ``xError``, ``yError`` ) do not have
          ``type`` as they must have exactly the same type as their primary channels (e.g.,
          ``x``, ``y`` ).

        **See also:** `type <https://vega.github.io/vega-lite/docs/type.html>`__
        documentation.
    """

    _schema = {"$ref": "#/definitions/LatLongFieldDef"}

    def __init__(
        self,
        aggregate: Union[
            Union[
                "Aggregate",
                Union["ArgmaxDef", dict],
                Union["ArgminDef", dict],
                Union[
                    "NonArgAggregateOp",
                    Literal[
                        "average",
                        "count",
                        "distinct",
                        "max",
                        "mean",
                        "median",
                        "min",
                        "missing",
                        "product",
                        "q1",
                        "q3",
                        "ci0",
                        "ci1",
                        "stderr",
                        "stdev",
                        "stdevp",
                        "sum",
                        "valid",
                        "values",
                        "variance",
                        "variancep",
                    ],
                ],
            ],
            UndefinedType,
        ] = Undefined,
        bandPosition: Union[float, UndefinedType] = Undefined,
        bin: Union[None, UndefinedType] = Undefined,
        field: Union[
            Union["Field", Union["FieldName", str], Union["RepeatRef", dict]],
            UndefinedType,
        ] = Undefined,
        timeUnit: Union[
            Union[
                Union[
                    "BinnedTimeUnit",
                    Literal[
                        "binnedutcyear",
                        "binnedutcyearquarter",
                        "binnedutcyearquartermonth",
                        "binnedutcyearmonth",
                        "binnedutcyearmonthdate",
                        "binnedutcyearmonthdatehours",
                        "binnedutcyearmonthdatehoursminutes",
                        "binnedutcyearmonthdatehoursminutesseconds",
                        "binnedutcyearweek",
                        "binnedutcyearweekday",
                        "binnedutcyearweekdayhours",
                        "binnedutcyearweekdayhoursminutes",
                        "binnedutcyearweekdayhoursminutesseconds",
                        "binnedutcyeardayofyear",
                    ],
                    Literal[
                        "binnedyear",
                        "binnedyearquarter",
                        "binnedyearquartermonth",
                        "binnedyearmonth",
                        "binnedyearmonthdate",
                        "binnedyearmonthdatehours",
                        "binnedyearmonthdatehoursminutes",
                        "binnedyearmonthdatehoursminutesseconds",
                        "binnedyearweek",
                        "binnedyearweekday",
                        "binnedyearweekdayhours",
                        "binnedyearweekdayhoursminutes",
                        "binnedyearweekdayhoursminutesseconds",
                        "binnedyeardayofyear",
                    ],
                ],
                Union[
                    "TimeUnit",
                    Union[
                        "MultiTimeUnit",
                        Union[
                            "LocalMultiTimeUnit",
                            Literal[
                                "yearquarter",
                                "yearquartermonth",
                                "yearmonth",
                                "yearmonthdate",
                                "yearmonthdatehours",
                                "yearmonthdatehoursminutes",
                                "yearmonthdatehoursminutesseconds",
                                "yearweek",
                                "yearweekday",
                                "yearweekdayhours",
                                "yearweekdayhoursminutes",
                                "yearweekdayhoursminutesseconds",
                                "yeardayofyear",
                                "quartermonth",
                                "monthdate",
                                "monthdatehours",
                                "monthdatehoursminutes",
                                "monthdatehoursminutesseconds",
                                "weekday",
                                "weeksdayhours",
                                "weekdayhoursminutes",
                                "weekdayhoursminutesseconds",
                                "dayhours",
                                "dayhoursminutes",
                                "dayhoursminutesseconds",
                                "hoursminutes",
                                "hoursminutesseconds",
                                "minutesseconds",
                                "secondsmilliseconds",
                            ],
                        ],
                        Union[
                            "UtcMultiTimeUnit",
                            Literal[
                                "utcyearquarter",
                                "utcyearquartermonth",
                                "utcyearmonth",
                                "utcyearmonthdate",
                                "utcyearmonthdatehours",
                                "utcyearmonthdatehoursminutes",
                                "utcyearmonthdatehoursminutesseconds",
                                "utcyearweek",
                                "utcyearweekday",
                                "utcyearweekdayhours",
                                "utcyearweekdayhoursminutes",
                                "utcyearweekdayhoursminutesseconds",
                                "utcyeardayofyear",
                                "utcquartermonth",
                                "utcmonthdate",
                                "utcmonthdatehours",
                                "utcmonthdatehoursminutes",
                                "utcmonthdatehoursminutesseconds",
                                "utcweekday",
                                "utcweeksdayhours",
                                "utcweekdayhoursminutes",
                                "utcweekdayhoursminutesseconds",
                                "utcdayhours",
                                "utcdayhoursminutes",
                                "utcdayhoursminutesseconds",
                                "utchoursminutes",
                                "utchoursminutesseconds",
                                "utcminutesseconds",
                                "utcsecondsmilliseconds",
                            ],
                        ],
                    ],
                    Union[
                        "SingleTimeUnit",
                        Union[
                            "LocalSingleTimeUnit",
                            Literal[
                                "year",
                                "quarter",
                                "month",
                                "week",
                                "day",
                                "dayofyear",
                                "date",
                                "hours",
                                "minutes",
                                "seconds",
                                "milliseconds",
                            ],
                        ],
                        Union[
                            "UtcSingleTimeUnit",
                            Literal[
                                "utcyear",
                                "utcquarter",
                                "utcmonth",
                                "utcweek",
                                "utcday",
                                "utcdayofyear",
                                "utcdate",
                                "utchours",
                                "utcminutes",
                                "utcseconds",
                                "utcmilliseconds",
                            ],
                        ],
                    ],
                ],
                Union["TimeUnitParams", dict],
            ],
            UndefinedType,
        ] = Undefined,
        title: Union[
            Union[None, Union["Text", List[str], str]], UndefinedType
        ] = Undefined,
        type: Union[str, UndefinedType] = Undefined,
        **kwds
    ):
        super(LatLongFieldDef, self).__init__(
            aggregate=aggregate,
            bandPosition=bandPosition,
            bin=bin,
            field=field,
            timeUnit=timeUnit,
            title=title,
            type=type,
            **kwds
        )


class LayerRepeatMapping(VegaLiteSchema):
    """LayerRepeatMapping schema wrapper

    Union[:class:`LayerRepeatMapping`, Dict[required=[layer]]]

    Parameters
    ----------

    layer : List[str]
        An array of fields to be repeated as layers.
    column : List[str]
        An array of fields to be repeated horizontally.
    row : List[str]
        An array of fields to be repeated vertically.
    """

    _schema = {"$ref": "#/definitions/LayerRepeatMapping"}

    def __init__(
        self,
        layer: Union[List[str], UndefinedType] = Undefined,
        column: Union[List[str], UndefinedType] = Undefined,
        row: Union[List[str], UndefinedType] = Undefined,
        **kwds
    ):
        super(LayerRepeatMapping, self).__init__(
            layer=layer, column=column, row=row, **kwds
        )


class LayoutAlign(VegaLiteSchema):
    """LayoutAlign schema wrapper

    Union[:class:`LayoutAlign`, Literal['all', 'each', 'none']]
    """

    _schema = {"$ref": "#/definitions/LayoutAlign"}

    def __init__(self, *args):
        super(LayoutAlign, self).__init__(*args)


class Legend(VegaLiteSchema):
    """Legend schema wrapper

    Union[:class:`Legend`, Dict[required=[]]]
    Properties of a legend or boolean flag for determining whether to show it.

    Parameters
    ----------

    aria : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], bool]
        A boolean flag indicating if `ARIA attributes
        <https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA>`__ should be
        included (SVG output only). If ``false``, the "aria-hidden" attribute will be set on
        the output SVG group, removing the legend from the ARIA accessibility tree.

        **Default value:** ``true``
    clipHeight : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], float]
        The height in pixels to clip symbol legend entries and limit their size.
    columnPadding : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], float]
        The horizontal padding in pixels between symbol legend entries.

        **Default value:** ``10``.
    columns : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], float]
        The number of columns in which to arrange symbol legend entries. A value of ``0`` or
        lower indicates a single row with one column per entry.
    cornerRadius : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], float]
        Corner radius for the full legend.
    description : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], str]
        A text description of this legend for `ARIA accessibility
        <https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA>`__ (SVG output
        only). If the ``aria`` property is true, for SVG output the `"aria-label" attribute
        <https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/ARIA_Techniques/Using_the_aria-label_attribute>`__
        will be set to this description. If the description is unspecified it will be
        automatically generated.
    direction : Union[:class:`Orientation`, Literal['horizontal', 'vertical']]
        The direction of the legend, one of ``"vertical"`` or ``"horizontal"``.

        **Default value:**


        * For top-/bottom- ``orient`` ed legends, ``"horizontal"``
        * For left-/right- ``orient`` ed legends, ``"vertical"``
        * For top/bottom-left/right- ``orient`` ed legends, ``"horizontal"`` for gradient
          legends and ``"vertical"`` for symbol legends.
    fillColor : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], Union[None, Union[:class:`Color`, Union[:class:`ColorName`, Literal['black', 'silver', 'gray', 'white', 'maroon', 'red', 'purple', 'fuchsia', 'green', 'lime', 'olive', 'yellow', 'navy', 'blue', 'teal', 'aqua', 'orange', 'aliceblue', 'antiquewhite', 'aquamarine', 'azure', 'beige', 'bisque', 'blanchedalmond', 'blueviolet', 'brown', 'burlywood', 'cadetblue', 'chartreuse', 'chocolate', 'coral', 'cornflowerblue', 'cornsilk', 'crimson', 'cyan', 'darkblue', 'darkcyan', 'darkgoldenrod', 'darkgray', 'darkgreen', 'darkgrey', 'darkkhaki', 'darkmagenta', 'darkolivegreen', 'darkorange', 'darkorchid', 'darkred', 'darksalmon', 'darkseagreen', 'darkslateblue', 'darkslategray', 'darkslategrey', 'darkturquoise', 'darkviolet', 'deeppink', 'deepskyblue', 'dimgray', 'dimgrey', 'dodgerblue', 'firebrick', 'floralwhite', 'forestgreen', 'gainsboro', 'ghostwhite', 'gold', 'goldenrod', 'greenyellow', 'grey', 'honeydew', 'hotpink', 'indianred', 'indigo', 'ivory', 'khaki', 'lavender', 'lavenderblush', 'lawngreen', 'lemonchiffon', 'lightblue', 'lightcoral', 'lightcyan', 'lightgoldenrodyellow', 'lightgray', 'lightgreen', 'lightgrey', 'lightpink', 'lightsalmon', 'lightseagreen', 'lightskyblue', 'lightslategray', 'lightslategrey', 'lightsteelblue', 'lightyellow', 'limegreen', 'linen', 'magenta', 'mediumaquamarine', 'mediumblue', 'mediumorchid', 'mediumpurple', 'mediumseagreen', 'mediumslateblue', 'mediumspringgreen', 'mediumturquoise', 'mediumvioletred', 'midnightblue', 'mintcream', 'mistyrose', 'moccasin', 'navajowhite', 'oldlace', 'olivedrab', 'orangered', 'orchid', 'palegoldenrod', 'palegreen', 'paleturquoise', 'palevioletred', 'papayawhip', 'peachpuff', 'peru', 'pink', 'plum', 'powderblue', 'rosybrown', 'royalblue', 'saddlebrown', 'salmon', 'sandybrown', 'seagreen', 'seashell', 'sienna', 'skyblue', 'slateblue', 'slategray', 'slategrey', 'snow', 'springgreen', 'steelblue', 'tan', 'thistle', 'tomato', 'turquoise', 'violet', 'wheat', 'whitesmoke', 'yellowgreen', 'rebeccapurple']], Union[:class:`HexColor`, str], str]]]
        Background fill color for the full legend.
    format : Union[Union[:class:`Dict`, Dict[required=[]]], str]
        When used with the default ``"number"`` and ``"time"`` format type, the text
        formatting pattern for labels of guides (axes, legends, headers) and text marks.


        * If the format type is ``"number"`` (e.g., for quantitative fields), this is D3's
          `number format pattern <https://github.com/d3/d3-format#locale_format>`__.
        * If the format type is ``"time"`` (e.g., for temporal fields), this is D3's `time
          format pattern <https://github.com/d3/d3-time-format#locale_format>`__.

        See the `format documentation <https://vega.github.io/vega-lite/docs/format.html>`__
        for more examples.

        When used with a `custom formatType
        <https://vega.github.io/vega-lite/docs/config.html#custom-format-type>`__, this
        value will be passed as ``format`` alongside ``datum.value`` to the registered
        function.

        **Default value:**  Derived from `numberFormat
        <https://vega.github.io/vega-lite/docs/config.html#format>`__ config for number
        format and from `timeFormat
        <https://vega.github.io/vega-lite/docs/config.html#format>`__ config for time
        format.
    formatType : str
        The format type for labels. One of ``"number"``, ``"time"``, or a `registered custom
        format type
        <https://vega.github.io/vega-lite/docs/config.html#custom-format-type>`__.

        **Default value:**


        * ``"time"`` for temporal fields and ordinal and nominal fields with ``timeUnit``.
        * ``"number"`` for quantitative fields as well as ordinal and nominal fields without
          ``timeUnit``.
    gradientLength : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], float]
        The length in pixels of the primary axis of a color gradient. This value corresponds
        to the height of a vertical gradient or the width of a horizontal gradient.

        **Default value:** ``200``.
    gradientOpacity : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], float]
        Opacity of the color gradient.
    gradientStrokeColor : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], Union[None, Union[:class:`Color`, Union[:class:`ColorName`, Literal['black', 'silver', 'gray', 'white', 'maroon', 'red', 'purple', 'fuchsia', 'green', 'lime', 'olive', 'yellow', 'navy', 'blue', 'teal', 'aqua', 'orange', 'aliceblue', 'antiquewhite', 'aquamarine', 'azure', 'beige', 'bisque', 'blanchedalmond', 'blueviolet', 'brown', 'burlywood', 'cadetblue', 'chartreuse', 'chocolate', 'coral', 'cornflowerblue', 'cornsilk', 'crimson', 'cyan', 'darkblue', 'darkcyan', 'darkgoldenrod', 'darkgray', 'darkgreen', 'darkgrey', 'darkkhaki', 'darkmagenta', 'darkolivegreen', 'darkorange', 'darkorchid', 'darkred', 'darksalmon', 'darkseagreen', 'darkslateblue', 'darkslategray', 'darkslategrey', 'darkturquoise', 'darkviolet', 'deeppink', 'deepskyblue', 'dimgray', 'dimgrey', 'dodgerblue', 'firebrick', 'floralwhite', 'forestgreen', 'gainsboro', 'ghostwhite', 'gold', 'goldenrod', 'greenyellow', 'grey', 'honeydew', 'hotpink', 'indianred', 'indigo', 'ivory', 'khaki', 'lavender', 'lavenderblush', 'lawngreen', 'lemonchiffon', 'lightblue', 'lightcoral', 'lightcyan', 'lightgoldenrodyellow', 'lightgray', 'lightgreen', 'lightgrey', 'lightpink', 'lightsalmon', 'lightseagreen', 'lightskyblue', 'lightslategray', 'lightslategrey', 'lightsteelblue', 'lightyellow', 'limegreen', 'linen', 'magenta', 'mediumaquamarine', 'mediumblue', 'mediumorchid', 'mediumpurple', 'mediumseagreen', 'mediumslateblue', 'mediumspringgreen', 'mediumturquoise', 'mediumvioletred', 'midnightblue', 'mintcream', 'mistyrose', 'moccasin', 'navajowhite', 'oldlace', 'olivedrab', 'orangered', 'orchid', 'palegoldenrod', 'palegreen', 'paleturquoise', 'palevioletred', 'papayawhip', 'peachpuff', 'peru', 'pink', 'plum', 'powderblue', 'rosybrown', 'royalblue', 'saddlebrown', 'salmon', 'sandybrown', 'seagreen', 'seashell', 'sienna', 'skyblue', 'slateblue', 'slategray', 'slategrey', 'snow', 'springgreen', 'steelblue', 'tan', 'thistle', 'tomato', 'turquoise', 'violet', 'wheat', 'whitesmoke', 'yellowgreen', 'rebeccapurple']], Union[:class:`HexColor`, str], str]]]
        The color of the gradient stroke, can be in hex color code or regular color name.

        **Default value:** ``"lightGray"``.
    gradientStrokeWidth : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], float]
        The width of the gradient stroke, in pixels.

        **Default value:** ``0``.
    gradientThickness : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], float]
        The thickness in pixels of the color gradient. This value corresponds to the width
        of a vertical gradient or the height of a horizontal gradient.

        **Default value:** ``16``.
    gridAlign : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], Union[:class:`LayoutAlign`, Literal['all', 'each', 'none']]]
        The alignment to apply to symbol legends rows and columns. The supported string
        values are ``"all"``, ``"each"`` (the default), and ``none``. For more information,
        see the `grid layout documentation <https://vega.github.io/vega/docs/layout>`__.

        **Default value:** ``"each"``.
    labelAlign : Union[Union[:class:`Align`, Literal['left', 'center', 'right']], Union[:class:`ExprRef`, Dict[required=[expr]]]]
        The alignment of the legend label, can be left, center, or right.
    labelBaseline : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], Union[:class:`TextBaseline`, Union[:class:`Baseline`, Literal['top', 'middle', 'bottom']], str]]
        The position of the baseline of legend label, can be ``"top"``, ``"middle"``,
        ``"bottom"``, or ``"alphabetic"``.

        **Default value:** ``"middle"``.
    labelColor : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], Union[None, Union[:class:`Color`, Union[:class:`ColorName`, Literal['black', 'silver', 'gray', 'white', 'maroon', 'red', 'purple', 'fuchsia', 'green', 'lime', 'olive', 'yellow', 'navy', 'blue', 'teal', 'aqua', 'orange', 'aliceblue', 'antiquewhite', 'aquamarine', 'azure', 'beige', 'bisque', 'blanchedalmond', 'blueviolet', 'brown', 'burlywood', 'cadetblue', 'chartreuse', 'chocolate', 'coral', 'cornflowerblue', 'cornsilk', 'crimson', 'cyan', 'darkblue', 'darkcyan', 'darkgoldenrod', 'darkgray', 'darkgreen', 'darkgrey', 'darkkhaki', 'darkmagenta', 'darkolivegreen', 'darkorange', 'darkorchid', 'darkred', 'darksalmon', 'darkseagreen', 'darkslateblue', 'darkslategray', 'darkslategrey', 'darkturquoise', 'darkviolet', 'deeppink', 'deepskyblue', 'dimgray', 'dimgrey', 'dodgerblue', 'firebrick', 'floralwhite', 'forestgreen', 'gainsboro', 'ghostwhite', 'gold', 'goldenrod', 'greenyellow', 'grey', 'honeydew', 'hotpink', 'indianred', 'indigo', 'ivory', 'khaki', 'lavender', 'lavenderblush', 'lawngreen', 'lemonchiffon', 'lightblue', 'lightcoral', 'lightcyan', 'lightgoldenrodyellow', 'lightgray', 'lightgreen', 'lightgrey', 'lightpink', 'lightsalmon', 'lightseagreen', 'lightskyblue', 'lightslategray', 'lightslategrey', 'lightsteelblue', 'lightyellow', 'limegreen', 'linen', 'magenta', 'mediumaquamarine', 'mediumblue', 'mediumorchid', 'mediumpurple', 'mediumseagreen', 'mediumslateblue', 'mediumspringgreen', 'mediumturquoise', 'mediumvioletred', 'midnightblue', 'mintcream', 'mistyrose', 'moccasin', 'navajowhite', 'oldlace', 'olivedrab', 'orangered', 'orchid', 'palegoldenrod', 'palegreen', 'paleturquoise', 'palevioletred', 'papayawhip', 'peachpuff', 'peru', 'pink', 'plum', 'powderblue', 'rosybrown', 'royalblue', 'saddlebrown', 'salmon', 'sandybrown', 'seagreen', 'seashell', 'sienna', 'skyblue', 'slateblue', 'slategray', 'slategrey', 'snow', 'springgreen', 'steelblue', 'tan', 'thistle', 'tomato', 'turquoise', 'violet', 'wheat', 'whitesmoke', 'yellowgreen', 'rebeccapurple']], Union[:class:`HexColor`, str], str]]]
        The color of the legend label, can be in hex color code or regular color name.
    labelExpr : str
        `Vega expression <https://vega.github.io/vega/docs/expressions/>`__ for customizing
        labels.

        **Note:** The label text and value can be assessed via the ``label`` and ``value``
        properties of the legend's backing ``datum`` object.
    labelFont : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], str]
        The font of the legend label.
    labelFontSize : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], float]
        The font size of legend label.

        **Default value:** ``10``.
    labelFontStyle : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], Union[:class:`FontStyle`, str]]
        The font style of legend label.
    labelFontWeight : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], Union[:class:`FontWeight`, Literal['normal', 'bold', 'lighter', 'bolder', 100, 200, 300, 400, 500, 600, 700, 800, 900]]]
        The font weight of legend label.
    labelLimit : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], float]
        Maximum allowed pixel width of legend tick labels.

        **Default value:** ``160``.
    labelOffset : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], float]
        The offset of the legend label.

        **Default value:** ``4``.
    labelOpacity : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], float]
        Opacity of labels.
    labelOverlap : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], Union[:class:`LabelOverlap`, bool, str]]
        The strategy to use for resolving overlap of labels in gradient legends. If
        ``false``, no overlap reduction is attempted. If set to ``true`` (default) or
        ``"parity"``, a strategy of removing every other label is used. If set to
        ``"greedy"``, a linear scan of the labels is performed, removing any label that
        overlaps with the last visible label (this often works better for log-scaled axes).

        **Default value:** ``true``.
    labelPadding : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], float]
        Padding in pixels between the legend and legend labels.
    labelSeparation : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], float]
        The minimum separation that must be between label bounding boxes for them to be
        considered non-overlapping (default ``0`` ). This property is ignored if
        *labelOverlap* resolution is not enabled.
    legendX : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], float]
        Custom x-position for legend with orient "none".
    legendY : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], float]
        Custom y-position for legend with orient "none".
    offset : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], float]
        The offset in pixels by which to displace the legend from the data rectangle and
        axes.

        **Default value:** ``18``.
    orient : Union[:class:`LegendOrient`, Literal['none', 'left', 'right', 'top', 'bottom', 'top-left', 'top-right', 'bottom-left', 'bottom-right']]
        The orientation of the legend, which determines how the legend is positioned within
        the scene. One of ``"left"``, ``"right"``, ``"top"``, ``"bottom"``, ``"top-left"``,
        ``"top-right"``, ``"bottom-left"``, ``"bottom-right"``, ``"none"``.

        **Default value:** ``"right"``
    padding : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], float]
        The padding between the border and content of the legend group.

        **Default value:** ``0``.
    rowPadding : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], float]
        The vertical padding in pixels between symbol legend entries.

        **Default value:** ``2``.
    strokeColor : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], Union[None, Union[:class:`Color`, Union[:class:`ColorName`, Literal['black', 'silver', 'gray', 'white', 'maroon', 'red', 'purple', 'fuchsia', 'green', 'lime', 'olive', 'yellow', 'navy', 'blue', 'teal', 'aqua', 'orange', 'aliceblue', 'antiquewhite', 'aquamarine', 'azure', 'beige', 'bisque', 'blanchedalmond', 'blueviolet', 'brown', 'burlywood', 'cadetblue', 'chartreuse', 'chocolate', 'coral', 'cornflowerblue', 'cornsilk', 'crimson', 'cyan', 'darkblue', 'darkcyan', 'darkgoldenrod', 'darkgray', 'darkgreen', 'darkgrey', 'darkkhaki', 'darkmagenta', 'darkolivegreen', 'darkorange', 'darkorchid', 'darkred', 'darksalmon', 'darkseagreen', 'darkslateblue', 'darkslategray', 'darkslategrey', 'darkturquoise', 'darkviolet', 'deeppink', 'deepskyblue', 'dimgray', 'dimgrey', 'dodgerblue', 'firebrick', 'floralwhite', 'forestgreen', 'gainsboro', 'ghostwhite', 'gold', 'goldenrod', 'greenyellow', 'grey', 'honeydew', 'hotpink', 'indianred', 'indigo', 'ivory', 'khaki', 'lavender', 'lavenderblush', 'lawngreen', 'lemonchiffon', 'lightblue', 'lightcoral', 'lightcyan', 'lightgoldenrodyellow', 'lightgray', 'lightgreen', 'lightgrey', 'lightpink', 'lightsalmon', 'lightseagreen', 'lightskyblue', 'lightslategray', 'lightslategrey', 'lightsteelblue', 'lightyellow', 'limegreen', 'linen', 'magenta', 'mediumaquamarine', 'mediumblue', 'mediumorchid', 'mediumpurple', 'mediumseagreen', 'mediumslateblue', 'mediumspringgreen', 'mediumturquoise', 'mediumvioletred', 'midnightblue', 'mintcream', 'mistyrose', 'moccasin', 'navajowhite', 'oldlace', 'olivedrab', 'orangered', 'orchid', 'palegoldenrod', 'palegreen', 'paleturquoise', 'palevioletred', 'papayawhip', 'peachpuff', 'peru', 'pink', 'plum', 'powderblue', 'rosybrown', 'royalblue', 'saddlebrown', 'salmon', 'sandybrown', 'seagreen', 'seashell', 'sienna', 'skyblue', 'slateblue', 'slategray', 'slategrey', 'snow', 'springgreen', 'steelblue', 'tan', 'thistle', 'tomato', 'turquoise', 'violet', 'wheat', 'whitesmoke', 'yellowgreen', 'rebeccapurple']], Union[:class:`HexColor`, str], str]]]
        Border stroke color for the full legend.
    symbolDash : Union[List[float], Union[:class:`ExprRef`, Dict[required=[expr]]]]
        An array of alternating [stroke, space] lengths for dashed symbol strokes.
    symbolDashOffset : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], float]
        The pixel offset at which to start drawing with the symbol stroke dash array.
    symbolFillColor : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], Union[None, Union[:class:`Color`, Union[:class:`ColorName`, Literal['black', 'silver', 'gray', 'white', 'maroon', 'red', 'purple', 'fuchsia', 'green', 'lime', 'olive', 'yellow', 'navy', 'blue', 'teal', 'aqua', 'orange', 'aliceblue', 'antiquewhite', 'aquamarine', 'azure', 'beige', 'bisque', 'blanchedalmond', 'blueviolet', 'brown', 'burlywood', 'cadetblue', 'chartreuse', 'chocolate', 'coral', 'cornflowerblue', 'cornsilk', 'crimson', 'cyan', 'darkblue', 'darkcyan', 'darkgoldenrod', 'darkgray', 'darkgreen', 'darkgrey', 'darkkhaki', 'darkmagenta', 'darkolivegreen', 'darkorange', 'darkorchid', 'darkred', 'darksalmon', 'darkseagreen', 'darkslateblue', 'darkslategray', 'darkslategrey', 'darkturquoise', 'darkviolet', 'deeppink', 'deepskyblue', 'dimgray', 'dimgrey', 'dodgerblue', 'firebrick', 'floralwhite', 'forestgreen', 'gainsboro', 'ghostwhite', 'gold', 'goldenrod', 'greenyellow', 'grey', 'honeydew', 'hotpink', 'indianred', 'indigo', 'ivory', 'khaki', 'lavender', 'lavenderblush', 'lawngreen', 'lemonchiffon', 'lightblue', 'lightcoral', 'lightcyan', 'lightgoldenrodyellow', 'lightgray', 'lightgreen', 'lightgrey', 'lightpink', 'lightsalmon', 'lightseagreen', 'lightskyblue', 'lightslategray', 'lightslategrey', 'lightsteelblue', 'lightyellow', 'limegreen', 'linen', 'magenta', 'mediumaquamarine', 'mediumblue', 'mediumorchid', 'mediumpurple', 'mediumseagreen', 'mediumslateblue', 'mediumspringgreen', 'mediumturquoise', 'mediumvioletred', 'midnightblue', 'mintcream', 'mistyrose', 'moccasin', 'navajowhite', 'oldlace', 'olivedrab', 'orangered', 'orchid', 'palegoldenrod', 'palegreen', 'paleturquoise', 'palevioletred', 'papayawhip', 'peachpuff', 'peru', 'pink', 'plum', 'powderblue', 'rosybrown', 'royalblue', 'saddlebrown', 'salmon', 'sandybrown', 'seagreen', 'seashell', 'sienna', 'skyblue', 'slateblue', 'slategray', 'slategrey', 'snow', 'springgreen', 'steelblue', 'tan', 'thistle', 'tomato', 'turquoise', 'violet', 'wheat', 'whitesmoke', 'yellowgreen', 'rebeccapurple']], Union[:class:`HexColor`, str], str]]]
        The color of the legend symbol,
    symbolLimit : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], float]
        The maximum number of allowed entries for a symbol legend. Additional entries will
        be dropped.
    symbolOffset : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], float]
        Horizontal pixel offset for legend symbols.

        **Default value:** ``0``.
    symbolOpacity : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], float]
        Opacity of the legend symbols.
    symbolSize : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], float]
        The size of the legend symbol, in pixels.

        **Default value:** ``100``.
    symbolStrokeColor : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], Union[None, Union[:class:`Color`, Union[:class:`ColorName`, Literal['black', 'silver', 'gray', 'white', 'maroon', 'red', 'purple', 'fuchsia', 'green', 'lime', 'olive', 'yellow', 'navy', 'blue', 'teal', 'aqua', 'orange', 'aliceblue', 'antiquewhite', 'aquamarine', 'azure', 'beige', 'bisque', 'blanchedalmond', 'blueviolet', 'brown', 'burlywood', 'cadetblue', 'chartreuse', 'chocolate', 'coral', 'cornflowerblue', 'cornsilk', 'crimson', 'cyan', 'darkblue', 'darkcyan', 'darkgoldenrod', 'darkgray', 'darkgreen', 'darkgrey', 'darkkhaki', 'darkmagenta', 'darkolivegreen', 'darkorange', 'darkorchid', 'darkred', 'darksalmon', 'darkseagreen', 'darkslateblue', 'darkslategray', 'darkslategrey', 'darkturquoise', 'darkviolet', 'deeppink', 'deepskyblue', 'dimgray', 'dimgrey', 'dodgerblue', 'firebrick', 'floralwhite', 'forestgreen', 'gainsboro', 'ghostwhite', 'gold', 'goldenrod', 'greenyellow', 'grey', 'honeydew', 'hotpink', 'indianred', 'indigo', 'ivory', 'khaki', 'lavender', 'lavenderblush', 'lawngreen', 'lemonchiffon', 'lightblue', 'lightcoral', 'lightcyan', 'lightgoldenrodyellow', 'lightgray', 'lightgreen', 'lightgrey', 'lightpink', 'lightsalmon', 'lightseagreen', 'lightskyblue', 'lightslategray', 'lightslategrey', 'lightsteelblue', 'lightyellow', 'limegreen', 'linen', 'magenta', 'mediumaquamarine', 'mediumblue', 'mediumorchid', 'mediumpurple', 'mediumseagreen', 'mediumslateblue', 'mediumspringgreen', 'mediumturquoise', 'mediumvioletred', 'midnightblue', 'mintcream', 'mistyrose', 'moccasin', 'navajowhite', 'oldlace', 'olivedrab', 'orangered', 'orchid', 'palegoldenrod', 'palegreen', 'paleturquoise', 'palevioletred', 'papayawhip', 'peachpuff', 'peru', 'pink', 'plum', 'powderblue', 'rosybrown', 'royalblue', 'saddlebrown', 'salmon', 'sandybrown', 'seagreen', 'seashell', 'sienna', 'skyblue', 'slateblue', 'slategray', 'slategrey', 'snow', 'springgreen', 'steelblue', 'tan', 'thistle', 'tomato', 'turquoise', 'violet', 'wheat', 'whitesmoke', 'yellowgreen', 'rebeccapurple']], Union[:class:`HexColor`, str], str]]]
        Stroke color for legend symbols.
    symbolStrokeWidth : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], float]
        The width of the symbol's stroke.

        **Default value:** ``1.5``.
    symbolType : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], Union[:class:`SymbolShape`, str]]
        The symbol shape. One of the plotting shapes ``circle`` (default), ``square``,
        ``cross``, ``diamond``, ``triangle-up``, ``triangle-down``, ``triangle-right``, or
        ``triangle-left``, the line symbol ``stroke``, or one of the centered directional
        shapes ``arrow``, ``wedge``, or ``triangle``. Alternatively, a custom `SVG path
        string <https://developer.mozilla.org/en-US/docs/Web/SVG/Tutorial/Paths>`__ can be
        provided. For correct sizing, custom shape paths should be defined within a square
        bounding box with coordinates ranging from -1 to 1 along both the x and y
        dimensions.

        **Default value:** ``"circle"``.
    tickCount : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], Union[:class:`TickCount`, Union[:class:`TimeIntervalStep`, Dict[required=[interval, step]]], Union[:class:`TimeInterval`, Literal['millisecond', 'second', 'minute', 'hour', 'day', 'week', 'month', 'year']], float]]
        The desired number of tick values for quantitative legends.
    tickMinStep : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], float]
        The minimum desired step between legend ticks, in terms of scale domain values. For
        example, a value of ``1`` indicates that ticks should not be less than 1 unit apart.
        If ``tickMinStep`` is specified, the ``tickCount`` value will be adjusted, if
        necessary, to enforce the minimum step value.

        **Default value** : ``undefined``
    title : Union[None, Union[:class:`Text`, List[str], str]]
        A title for the field. If ``null``, the title will be removed.

        **Default value:**  derived from the field's name and transformation function (
        ``aggregate``, ``bin`` and ``timeUnit`` ). If the field has an aggregate function,
        the function is displayed as part of the title (e.g., ``"Sum of Profit"`` ). If the
        field is binned or has a time unit applied, the applied function is shown in
        parentheses (e.g., ``"Profit (binned)"``, ``"Transaction Date (year-month)"`` ).
        Otherwise, the title is simply the field name.

        **Notes** :

        1) You can customize the default field title format by providing the `fieldTitle
        <https://vega.github.io/vega-lite/docs/config.html#top-level-config>`__ property in
        the `config <https://vega.github.io/vega-lite/docs/config.html>`__ or `fieldTitle
        function via the compile function's options
        <https://vega.github.io/vega-lite/usage/compile.html#field-title>`__.

        2) If both field definition's ``title`` and axis, header, or legend ``title`` are
        defined, axis/header/legend title will be used.
    titleAlign : Union[Union[:class:`Align`, Literal['left', 'center', 'right']], Union[:class:`ExprRef`, Dict[required=[expr]]]]
        Horizontal text alignment for legend titles.

        **Default value:** ``"left"``.
    titleAnchor : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], Union[:class:`TitleAnchor`, Literal[None, 'start', 'middle', 'end']]]
        Text anchor position for placing legend titles.
    titleBaseline : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], Union[:class:`TextBaseline`, Union[:class:`Baseline`, Literal['top', 'middle', 'bottom']], str]]
        Vertical text baseline for legend titles.  One of ``"alphabetic"`` (default),
        ``"top"``, ``"middle"``, ``"bottom"``, ``"line-top"``, or ``"line-bottom"``. The
        ``"line-top"`` and ``"line-bottom"`` values operate similarly to ``"top"`` and
        ``"bottom"``, but are calculated relative to the *lineHeight* rather than *fontSize*
        alone.

        **Default value:** ``"top"``.
    titleColor : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], Union[None, Union[:class:`Color`, Union[:class:`ColorName`, Literal['black', 'silver', 'gray', 'white', 'maroon', 'red', 'purple', 'fuchsia', 'green', 'lime', 'olive', 'yellow', 'navy', 'blue', 'teal', 'aqua', 'orange', 'aliceblue', 'antiquewhite', 'aquamarine', 'azure', 'beige', 'bisque', 'blanchedalmond', 'blueviolet', 'brown', 'burlywood', 'cadetblue', 'chartreuse', 'chocolate', 'coral', 'cornflowerblue', 'cornsilk', 'crimson', 'cyan', 'darkblue', 'darkcyan', 'darkgoldenrod', 'darkgray', 'darkgreen', 'darkgrey', 'darkkhaki', 'darkmagenta', 'darkolivegreen', 'darkorange', 'darkorchid', 'darkred', 'darksalmon', 'darkseagreen', 'darkslateblue', 'darkslategray', 'darkslategrey', 'darkturquoise', 'darkviolet', 'deeppink', 'deepskyblue', 'dimgray', 'dimgrey', 'dodgerblue', 'firebrick', 'floralwhite', 'forestgreen', 'gainsboro', 'ghostwhite', 'gold', 'goldenrod', 'greenyellow', 'grey', 'honeydew', 'hotpink', 'indianred', 'indigo', 'ivory', 'khaki', 'lavender', 'lavenderblush', 'lawngreen', 'lemonchiffon', 'lightblue', 'lightcoral', 'lightcyan', 'lightgoldenrodyellow', 'lightgray', 'lightgreen', 'lightgrey', 'lightpink', 'lightsalmon', 'lightseagreen', 'lightskyblue', 'lightslategray', 'lightslategrey', 'lightsteelblue', 'lightyellow', 'limegreen', 'linen', 'magenta', 'mediumaquamarine', 'mediumblue', 'mediumorchid', 'mediumpurple', 'mediumseagreen', 'mediumslateblue', 'mediumspringgreen', 'mediumturquoise', 'mediumvioletred', 'midnightblue', 'mintcream', 'mistyrose', 'moccasin', 'navajowhite', 'oldlace', 'olivedrab', 'orangered', 'orchid', 'palegoldenrod', 'palegreen', 'paleturquoise', 'palevioletred', 'papayawhip', 'peachpuff', 'peru', 'pink', 'plum', 'powderblue', 'rosybrown', 'royalblue', 'saddlebrown', 'salmon', 'sandybrown', 'seagreen', 'seashell', 'sienna', 'skyblue', 'slateblue', 'slategray', 'slategrey', 'snow', 'springgreen', 'steelblue', 'tan', 'thistle', 'tomato', 'turquoise', 'violet', 'wheat', 'whitesmoke', 'yellowgreen', 'rebeccapurple']], Union[:class:`HexColor`, str], str]]]
        The color of the legend title, can be in hex color code or regular color name.
    titleFont : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], str]
        The font of the legend title.
    titleFontSize : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], float]
        The font size of the legend title.
    titleFontStyle : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], Union[:class:`FontStyle`, str]]
        The font style of the legend title.
    titleFontWeight : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], Union[:class:`FontWeight`, Literal['normal', 'bold', 'lighter', 'bolder', 100, 200, 300, 400, 500, 600, 700, 800, 900]]]
        The font weight of the legend title. This can be either a string (e.g ``"bold"``,
        ``"normal"`` ) or a number ( ``100``, ``200``, ``300``, ..., ``900`` where
        ``"normal"`` = ``400`` and ``"bold"`` = ``700`` ).
    titleLimit : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], float]
        Maximum allowed pixel width of legend titles.

        **Default value:** ``180``.
    titleLineHeight : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], float]
        Line height in pixels for multi-line title text or title text with ``"line-top"`` or
        ``"line-bottom"`` baseline.
    titleOpacity : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], float]
        Opacity of the legend title.
    titleOrient : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], Union[:class:`Orient`, Literal['left', 'right', 'top', 'bottom']]]
        Orientation of the legend title.
    titlePadding : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], float]
        The padding, in pixels, between title and legend.

        **Default value:** ``5``.
    type : Literal['symbol', 'gradient']
        The type of the legend. Use ``"symbol"`` to create a discrete legend and
        ``"gradient"`` for a continuous color gradient.

        **Default value:** ``"gradient"`` for non-binned quantitative fields and temporal
        fields; ``"symbol"`` otherwise.
    values : Union[List[Union[:class:`DateTime`, Dict[required=[]]]], List[bool], List[float], List[str], Union[:class:`ExprRef`, Dict[required=[expr]]]]
        Explicitly set the visible legend values.
    zindex : float
        A non-negative integer indicating the z-index of the legend. If zindex is 0, legend
        should be drawn behind all chart elements. To put them in front, use zindex = 1.
    """

    _schema = {"$ref": "#/definitions/Legend"}

    def __init__(
        self,
        aria: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], bool], UndefinedType
        ] = Undefined,
        clipHeight: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], float], UndefinedType
        ] = Undefined,
        columnPadding: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], float], UndefinedType
        ] = Undefined,
        columns: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], float], UndefinedType
        ] = Undefined,
        cornerRadius: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], float], UndefinedType
        ] = Undefined,
        description: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], str], UndefinedType
        ] = Undefined,
        direction: Union[
            Union["Orientation", Literal["horizontal", "vertical"]], UndefinedType
        ] = Undefined,
        fillColor: Union[
            Union[
                Union["ExprRef", "_ParameterProtocol", dict],
                Union[
                    None,
                    Union[
                        "Color",
                        Union[
                            "ColorName",
                            Literal[
                                "black",
                                "silver",
                                "gray",
                                "white",
                                "maroon",
                                "red",
                                "purple",
                                "fuchsia",
                                "green",
                                "lime",
                                "olive",
                                "yellow",
                                "navy",
                                "blue",
                                "teal",
                                "aqua",
                                "orange",
                                "aliceblue",
                                "antiquewhite",
                                "aquamarine",
                                "azure",
                                "beige",
                                "bisque",
                                "blanchedalmond",
                                "blueviolet",
                                "brown",
                                "burlywood",
                                "cadetblue",
                                "chartreuse",
                                "chocolate",
                                "coral",
                                "cornflowerblue",
                                "cornsilk",
                                "crimson",
                                "cyan",
                                "darkblue",
                                "darkcyan",
                                "darkgoldenrod",
                                "darkgray",
                                "darkgreen",
                                "darkgrey",
                                "darkkhaki",
                                "darkmagenta",
                                "darkolivegreen",
                                "darkorange",
                                "darkorchid",
                                "darkred",
                                "darksalmon",
                                "darkseagreen",
                                "darkslateblue",
                                "darkslategray",
                                "darkslategrey",
                                "darkturquoise",
                                "darkviolet",
                                "deeppink",
                                "deepskyblue",
                                "dimgray",
                                "dimgrey",
                                "dodgerblue",
                                "firebrick",
                                "floralwhite",
                                "forestgreen",
                                "gainsboro",
                                "ghostwhite",
                                "gold",
                                "goldenrod",
                                "greenyellow",
                                "grey",
                                "honeydew",
                                "hotpink",
                                "indianred",
                                "indigo",
                                "ivory",
                                "khaki",
                                "lavender",
                                "lavenderblush",
                                "lawngreen",
                                "lemonchiffon",
                                "lightblue",
                                "lightcoral",
                                "lightcyan",
                                "lightgoldenrodyellow",
                                "lightgray",
                                "lightgreen",
                                "lightgrey",
                                "lightpink",
                                "lightsalmon",
                                "lightseagreen",
                                "lightskyblue",
                                "lightslategray",
                                "lightslategrey",
                                "lightsteelblue",
                                "lightyellow",
                                "limegreen",
                                "linen",
                                "magenta",
                                "mediumaquamarine",
                                "mediumblue",
                                "mediumorchid",
                                "mediumpurple",
                                "mediumseagreen",
                                "mediumslateblue",
                                "mediumspringgreen",
                                "mediumturquoise",
                                "mediumvioletred",
                                "midnightblue",
                                "mintcream",
                                "mistyrose",
                                "moccasin",
                                "navajowhite",
                                "oldlace",
                                "olivedrab",
                                "orangered",
                                "orchid",
                                "palegoldenrod",
                                "palegreen",
                                "paleturquoise",
                                "palevioletred",
                                "papayawhip",
                                "peachpuff",
                                "peru",
                                "pink",
                                "plum",
                                "powderblue",
                                "rosybrown",
                                "royalblue",
                                "saddlebrown",
                                "salmon",
                                "sandybrown",
                                "seagreen",
                                "seashell",
                                "sienna",
                                "skyblue",
                                "slateblue",
                                "slategray",
                                "slategrey",
                                "snow",
                                "springgreen",
                                "steelblue",
                                "tan",
                                "thistle",
                                "tomato",
                                "turquoise",
                                "violet",
                                "wheat",
                                "whitesmoke",
                                "yellowgreen",
                                "rebeccapurple",
                            ],
                        ],
                        Union["HexColor", str],
                        str,
                    ],
                ],
            ],
            UndefinedType,
        ] = Undefined,
        format: Union[Union[Union["Dict", dict], str], UndefinedType] = Undefined,
        formatType: Union[str, UndefinedType] = Undefined,
        gradientLength: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], float], UndefinedType
        ] = Undefined,
        gradientOpacity: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], float], UndefinedType
        ] = Undefined,
        gradientStrokeColor: Union[
            Union[
                Union["ExprRef", "_ParameterProtocol", dict],
                Union[
                    None,
                    Union[
                        "Color",
                        Union[
                            "ColorName",
                            Literal[
                                "black",
                                "silver",
                                "gray",
                                "white",
                                "maroon",
                                "red",
                                "purple",
                                "fuchsia",
                                "green",
                                "lime",
                                "olive",
                                "yellow",
                                "navy",
                                "blue",
                                "teal",
                                "aqua",
                                "orange",
                                "aliceblue",
                                "antiquewhite",
                                "aquamarine",
                                "azure",
                                "beige",
                                "bisque",
                                "blanchedalmond",
                                "blueviolet",
                                "brown",
                                "burlywood",
                                "cadetblue",
                                "chartreuse",
                                "chocolate",
                                "coral",
                                "cornflowerblue",
                                "cornsilk",
                                "crimson",
                                "cyan",
                                "darkblue",
                                "darkcyan",
                                "darkgoldenrod",
                                "darkgray",
                                "darkgreen",
                                "darkgrey",
                                "darkkhaki",
                                "darkmagenta",
                                "darkolivegreen",
                                "darkorange",
                                "darkorchid",
                                "darkred",
                                "darksalmon",
                                "darkseagreen",
                                "darkslateblue",
                                "darkslategray",
                                "darkslategrey",
                                "darkturquoise",
                                "darkviolet",
                                "deeppink",
                                "deepskyblue",
                                "dimgray",
                                "dimgrey",
                                "dodgerblue",
                                "firebrick",
                                "floralwhite",
                                "forestgreen",
                                "gainsboro",
                                "ghostwhite",
                                "gold",
                                "goldenrod",
                                "greenyellow",
                                "grey",
                                "honeydew",
                                "hotpink",
                                "indianred",
                                "indigo",
                                "ivory",
                                "khaki",
                                "lavender",
                                "lavenderblush",
                                "lawngreen",
                                "lemonchiffon",
                                "lightblue",
                                "lightcoral",
                                "lightcyan",
                                "lightgoldenrodyellow",
                                "lightgray",
                                "lightgreen",
                                "lightgrey",
                                "lightpink",
                                "lightsalmon",
                                "lightseagreen",
                                "lightskyblue",
                                "lightslategray",
                                "lightslategrey",
                                "lightsteelblue",
                                "lightyellow",
                                "limegreen",
                                "linen",
                                "magenta",
                                "mediumaquamarine",
                                "mediumblue",
                                "mediumorchid",
                                "mediumpurple",
                                "mediumseagreen",
                                "mediumslateblue",
                                "mediumspringgreen",
                                "mediumturquoise",
                                "mediumvioletred",
                                "midnightblue",
                                "mintcream",
                                "mistyrose",
                                "moccasin",
                                "navajowhite",
                                "oldlace",
                                "olivedrab",
                                "orangered",
                                "orchid",
                                "palegoldenrod",
                                "palegreen",
                                "paleturquoise",
                                "palevioletred",
                                "papayawhip",
                                "peachpuff",
                                "peru",
                                "pink",
                                "plum",
                                "powderblue",
                                "rosybrown",
                                "royalblue",
                                "saddlebrown",
                                "salmon",
                                "sandybrown",
                                "seagreen",
                                "seashell",
                                "sienna",
                                "skyblue",
                                "slateblue",
                                "slategray",
                                "slategrey",
                                "snow",
                                "springgreen",
                                "steelblue",
                                "tan",
                                "thistle",
                                "tomato",
                                "turquoise",
                                "violet",
                                "wheat",
                                "whitesmoke",
                                "yellowgreen",
                                "rebeccapurple",
                            ],
                        ],
                        Union["HexColor", str],
                        str,
                    ],
                ],
            ],
            UndefinedType,
        ] = Undefined,
        gradientStrokeWidth: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], float], UndefinedType
        ] = Undefined,
        gradientThickness: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], float], UndefinedType
        ] = Undefined,
        gridAlign: Union[
            Union[
                Union["ExprRef", "_ParameterProtocol", dict],
                Union["LayoutAlign", Literal["all", "each", "none"]],
            ],
            UndefinedType,
        ] = Undefined,
        labelAlign: Union[
            Union[
                Union["Align", Literal["left", "center", "right"]],
                Union["ExprRef", "_ParameterProtocol", dict],
            ],
            UndefinedType,
        ] = Undefined,
        labelBaseline: Union[
            Union[
                Union["ExprRef", "_ParameterProtocol", dict],
                Union[
                    "TextBaseline",
                    Union["Baseline", Literal["top", "middle", "bottom"]],
                    str,
                ],
            ],
            UndefinedType,
        ] = Undefined,
        labelColor: Union[
            Union[
                Union["ExprRef", "_ParameterProtocol", dict],
                Union[
                    None,
                    Union[
                        "Color",
                        Union[
                            "ColorName",
                            Literal[
                                "black",
                                "silver",
                                "gray",
                                "white",
                                "maroon",
                                "red",
                                "purple",
                                "fuchsia",
                                "green",
                                "lime",
                                "olive",
                                "yellow",
                                "navy",
                                "blue",
                                "teal",
                                "aqua",
                                "orange",
                                "aliceblue",
                                "antiquewhite",
                                "aquamarine",
                                "azure",
                                "beige",
                                "bisque",
                                "blanchedalmond",
                                "blueviolet",
                                "brown",
                                "burlywood",
                                "cadetblue",
                                "chartreuse",
                                "chocolate",
                                "coral",
                                "cornflowerblue",
                                "cornsilk",
                                "crimson",
                                "cyan",
                                "darkblue",
                                "darkcyan",
                                "darkgoldenrod",
                                "darkgray",
                                "darkgreen",
                                "darkgrey",
                                "darkkhaki",
                                "darkmagenta",
                                "darkolivegreen",
                                "darkorange",
                                "darkorchid",
                                "darkred",
                                "darksalmon",
                                "darkseagreen",
                                "darkslateblue",
                                "darkslategray",
                                "darkslategrey",
                                "darkturquoise",
                                "darkviolet",
                                "deeppink",
                                "deepskyblue",
                                "dimgray",
                                "dimgrey",
                                "dodgerblue",
                                "firebrick",
                                "floralwhite",
                                "forestgreen",
                                "gainsboro",
                                "ghostwhite",
                                "gold",
                                "goldenrod",
                                "greenyellow",
                                "grey",
                                "honeydew",
                                "hotpink",
                                "indianred",
                                "indigo",
                                "ivory",
                                "khaki",
                                "lavender",
                                "lavenderblush",
                                "lawngreen",
                                "lemonchiffon",
                                "lightblue",
                                "lightcoral",
                                "lightcyan",
                                "lightgoldenrodyellow",
                                "lightgray",
                                "lightgreen",
                                "lightgrey",
                                "lightpink",
                                "lightsalmon",
                                "lightseagreen",
                                "lightskyblue",
                                "lightslategray",
                                "lightslategrey",
                                "lightsteelblue",
                                "lightyellow",
                                "limegreen",
                                "linen",
                                "magenta",
                                "mediumaquamarine",
                                "mediumblue",
                                "mediumorchid",
                                "mediumpurple",
                                "mediumseagreen",
                                "mediumslateblue",
                                "mediumspringgreen",
                                "mediumturquoise",
                                "mediumvioletred",
                                "midnightblue",
                                "mintcream",
                                "mistyrose",
                                "moccasin",
                                "navajowhite",
                                "oldlace",
                                "olivedrab",
                                "orangered",
                                "orchid",
                                "palegoldenrod",
                                "palegreen",
                                "paleturquoise",
                                "palevioletred",
                                "papayawhip",
                                "peachpuff",
                                "peru",
                                "pink",
                                "plum",
                                "powderblue",
                                "rosybrown",
                                "royalblue",
                                "saddlebrown",
                                "salmon",
                                "sandybrown",
                                "seagreen",
                                "seashell",
                                "sienna",
                                "skyblue",
                                "slateblue",
                                "slategray",
                                "slategrey",
                                "snow",
                                "springgreen",
                                "steelblue",
                                "tan",
                                "thistle",
                                "tomato",
                                "turquoise",
                                "violet",
                                "wheat",
                                "whitesmoke",
                                "yellowgreen",
                                "rebeccapurple",
                            ],
                        ],
                        Union["HexColor", str],
                        str,
                    ],
                ],
            ],
            UndefinedType,
        ] = Undefined,
        labelExpr: Union[str, UndefinedType] = Undefined,
        labelFont: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], str], UndefinedType
        ] = Undefined,
        labelFontSize: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], float], UndefinedType
        ] = Undefined,
        labelFontStyle: Union[
            Union[
                Union["ExprRef", "_ParameterProtocol", dict], Union["FontStyle", str]
            ],
            UndefinedType,
        ] = Undefined,
        labelFontWeight: Union[
            Union[
                Union["ExprRef", "_ParameterProtocol", dict],
                Union[
                    "FontWeight",
                    Literal[
                        "normal",
                        "bold",
                        "lighter",
                        "bolder",
                        100,
                        200,
                        300,
                        400,
                        500,
                        600,
                        700,
                        800,
                        900,
                    ],
                ],
            ],
            UndefinedType,
        ] = Undefined,
        labelLimit: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], float], UndefinedType
        ] = Undefined,
        labelOffset: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], float], UndefinedType
        ] = Undefined,
        labelOpacity: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], float], UndefinedType
        ] = Undefined,
        labelOverlap: Union[
            Union[
                Union["ExprRef", "_ParameterProtocol", dict],
                Union["LabelOverlap", bool, str],
            ],
            UndefinedType,
        ] = Undefined,
        labelPadding: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], float], UndefinedType
        ] = Undefined,
        labelSeparation: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], float], UndefinedType
        ] = Undefined,
        legendX: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], float], UndefinedType
        ] = Undefined,
        legendY: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], float], UndefinedType
        ] = Undefined,
        offset: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], float], UndefinedType
        ] = Undefined,
        orient: Union[
            Union[
                "LegendOrient",
                Literal[
                    "none",
                    "left",
                    "right",
                    "top",
                    "bottom",
                    "top-left",
                    "top-right",
                    "bottom-left",
                    "bottom-right",
                ],
            ],
            UndefinedType,
        ] = Undefined,
        padding: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], float], UndefinedType
        ] = Undefined,
        rowPadding: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], float], UndefinedType
        ] = Undefined,
        strokeColor: Union[
            Union[
                Union["ExprRef", "_ParameterProtocol", dict],
                Union[
                    None,
                    Union[
                        "Color",
                        Union[
                            "ColorName",
                            Literal[
                                "black",
                                "silver",
                                "gray",
                                "white",
                                "maroon",
                                "red",
                                "purple",
                                "fuchsia",
                                "green",
                                "lime",
                                "olive",
                                "yellow",
                                "navy",
                                "blue",
                                "teal",
                                "aqua",
                                "orange",
                                "aliceblue",
                                "antiquewhite",
                                "aquamarine",
                                "azure",
                                "beige",
                                "bisque",
                                "blanchedalmond",
                                "blueviolet",
                                "brown",
                                "burlywood",
                                "cadetblue",
                                "chartreuse",
                                "chocolate",
                                "coral",
                                "cornflowerblue",
                                "cornsilk",
                                "crimson",
                                "cyan",
                                "darkblue",
                                "darkcyan",
                                "darkgoldenrod",
                                "darkgray",
                                "darkgreen",
                                "darkgrey",
                                "darkkhaki",
                                "darkmagenta",
                                "darkolivegreen",
                                "darkorange",
                                "darkorchid",
                                "darkred",
                                "darksalmon",
                                "darkseagreen",
                                "darkslateblue",
                                "darkslategray",
                                "darkslategrey",
                                "darkturquoise",
                                "darkviolet",
                                "deeppink",
                                "deepskyblue",
                                "dimgray",
                                "dimgrey",
                                "dodgerblue",
                                "firebrick",
                                "floralwhite",
                                "forestgreen",
                                "gainsboro",
                                "ghostwhite",
                                "gold",
                                "goldenrod",
                                "greenyellow",
                                "grey",
                                "honeydew",
                                "hotpink",
                                "indianred",
                                "indigo",
                                "ivory",
                                "khaki",
                                "lavender",
                                "lavenderblush",
                                "lawngreen",
                                "lemonchiffon",
                                "lightblue",
                                "lightcoral",
                                "lightcyan",
                                "lightgoldenrodyellow",
                                "lightgray",
                                "lightgreen",
                                "lightgrey",
                                "lightpink",
                                "lightsalmon",
                                "lightseagreen",
                                "lightskyblue",
                                "lightslategray",
                                "lightslategrey",
                                "lightsteelblue",
                                "lightyellow",
                                "limegreen",
                                "linen",
                                "magenta",
                                "mediumaquamarine",
                                "mediumblue",
                                "mediumorchid",
                                "mediumpurple",
                                "mediumseagreen",
                                "mediumslateblue",
                                "mediumspringgreen",
                                "mediumturquoise",
                                "mediumvioletred",
                                "midnightblue",
                                "mintcream",
                                "mistyrose",
                                "moccasin",
                                "navajowhite",
                                "oldlace",
                                "olivedrab",
                                "orangered",
                                "orchid",
                                "palegoldenrod",
                                "palegreen",
                                "paleturquoise",
                                "palevioletred",
                                "papayawhip",
                                "peachpuff",
                                "peru",
                                "pink",
                                "plum",
                                "powderblue",
                                "rosybrown",
                                "royalblue",
                                "saddlebrown",
                                "salmon",
                                "sandybrown",
                                "seagreen",
                                "seashell",
                                "sienna",
                                "skyblue",
                                "slateblue",
                                "slategray",
                                "slategrey",
                                "snow",
                                "springgreen",
                                "steelblue",
                                "tan",
                                "thistle",
                                "tomato",
                                "turquoise",
                                "violet",
                                "wheat",
                                "whitesmoke",
                                "yellowgreen",
                                "rebeccapurple",
                            ],
                        ],
                        Union["HexColor", str],
                        str,
                    ],
                ],
            ],
            UndefinedType,
        ] = Undefined,
        symbolDash: Union[
            Union[List[float], Union["ExprRef", "_ParameterProtocol", dict]],
            UndefinedType,
        ] = Undefined,
        symbolDashOffset: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], float], UndefinedType
        ] = Undefined,
        symbolFillColor: Union[
            Union[
                Union["ExprRef", "_ParameterProtocol", dict],
                Union[
                    None,
                    Union[
                        "Color",
                        Union[
                            "ColorName",
                            Literal[
                                "black",
                                "silver",
                                "gray",
                                "white",
                                "maroon",
                                "red",
                                "purple",
                                "fuchsia",
                                "green",
                                "lime",
                                "olive",
                                "yellow",
                                "navy",
                                "blue",
                                "teal",
                                "aqua",
                                "orange",
                                "aliceblue",
                                "antiquewhite",
                                "aquamarine",
                                "azure",
                                "beige",
                                "bisque",
                                "blanchedalmond",
                                "blueviolet",
                                "brown",
                                "burlywood",
                                "cadetblue",
                                "chartreuse",
                                "chocolate",
                                "coral",
                                "cornflowerblue",
                                "cornsilk",
                                "crimson",
                                "cyan",
                                "darkblue",
                                "darkcyan",
                                "darkgoldenrod",
                                "darkgray",
                                "darkgreen",
                                "darkgrey",
                                "darkkhaki",
                                "darkmagenta",
                                "darkolivegreen",
                                "darkorange",
                                "darkorchid",
                                "darkred",
                                "darksalmon",
                                "darkseagreen",
                                "darkslateblue",
                                "darkslategray",
                                "darkslategrey",
                                "darkturquoise",
                                "darkviolet",
                                "deeppink",
                                "deepskyblue",
                                "dimgray",
                                "dimgrey",
                                "dodgerblue",
                                "firebrick",
                                "floralwhite",
                                "forestgreen",
                                "gainsboro",
                                "ghostwhite",
                                "gold",
                                "goldenrod",
                                "greenyellow",
                                "grey",
                                "honeydew",
                                "hotpink",
                                "indianred",
                                "indigo",
                                "ivory",
                                "khaki",
                                "lavender",
                                "lavenderblush",
                                "lawngreen",
                                "lemonchiffon",
                                "lightblue",
                                "lightcoral",
                                "lightcyan",
                                "lightgoldenrodyellow",
                                "lightgray",
                                "lightgreen",
                                "lightgrey",
                                "lightpink",
                                "lightsalmon",
                                "lightseagreen",
                                "lightskyblue",
                                "lightslategray",
                                "lightslategrey",
                                "lightsteelblue",
                                "lightyellow",
                                "limegreen",
                                "linen",
                                "magenta",
                                "mediumaquamarine",
                                "mediumblue",
                                "mediumorchid",
                                "mediumpurple",
                                "mediumseagreen",
                                "mediumslateblue",
                                "mediumspringgreen",
                                "mediumturquoise",
                                "mediumvioletred",
                                "midnightblue",
                                "mintcream",
                                "mistyrose",
                                "moccasin",
                                "navajowhite",
                                "oldlace",
                                "olivedrab",
                                "orangered",
                                "orchid",
                                "palegoldenrod",
                                "palegreen",
                                "paleturquoise",
                                "palevioletred",
                                "papayawhip",
                                "peachpuff",
                                "peru",
                                "pink",
                                "plum",
                                "powderblue",
                                "rosybrown",
                                "royalblue",
                                "saddlebrown",
                                "salmon",
                                "sandybrown",
                                "seagreen",
                                "seashell",
                                "sienna",
                                "skyblue",
                                "slateblue",
                                "slategray",
                                "slategrey",
                                "snow",
                                "springgreen",
                                "steelblue",
                                "tan",
                                "thistle",
                                "tomato",
                                "turquoise",
                                "violet",
                                "wheat",
                                "whitesmoke",
                                "yellowgreen",
                                "rebeccapurple",
                            ],
                        ],
                        Union["HexColor", str],
                        str,
                    ],
                ],
            ],
            UndefinedType,
        ] = Undefined,
        symbolLimit: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], float], UndefinedType
        ] = Undefined,
        symbolOffset: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], float], UndefinedType
        ] = Undefined,
        symbolOpacity: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], float], UndefinedType
        ] = Undefined,
        symbolSize: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], float], UndefinedType
        ] = Undefined,
        symbolStrokeColor: Union[
            Union[
                Union["ExprRef", "_ParameterProtocol", dict],
                Union[
                    None,
                    Union[
                        "Color",
                        Union[
                            "ColorName",
                            Literal[
                                "black",
                                "silver",
                                "gray",
                                "white",
                                "maroon",
                                "red",
                                "purple",
                                "fuchsia",
                                "green",
                                "lime",
                                "olive",
                                "yellow",
                                "navy",
                                "blue",
                                "teal",
                                "aqua",
                                "orange",
                                "aliceblue",
                                "antiquewhite",
                                "aquamarine",
                                "azure",
                                "beige",
                                "bisque",
                                "blanchedalmond",
                                "blueviolet",
                                "brown",
                                "burlywood",
                                "cadetblue",
                                "chartreuse",
                                "chocolate",
                                "coral",
                                "cornflowerblue",
                                "cornsilk",
                                "crimson",
                                "cyan",
                                "darkblue",
                                "darkcyan",
                                "darkgoldenrod",
                                "darkgray",
                                "darkgreen",
                                "darkgrey",
                                "darkkhaki",
                                "darkmagenta",
                                "darkolivegreen",
                                "darkorange",
                                "darkorchid",
                                "darkred",
                                "darksalmon",
                                "darkseagreen",
                                "darkslateblue",
                                "darkslategray",
                                "darkslategrey",
                                "darkturquoise",
                                "darkviolet",
                                "deeppink",
                                "deepskyblue",
                                "dimgray",
                                "dimgrey",
                                "dodgerblue",
                                "firebrick",
                                "floralwhite",
                                "forestgreen",
                                "gainsboro",
                                "ghostwhite",
                                "gold",
                                "goldenrod",
                                "greenyellow",
                                "grey",
                                "honeydew",
                                "hotpink",
                                "indianred",
                                "indigo",
                                "ivory",
                                "khaki",
                                "lavender",
                                "lavenderblush",
                                "lawngreen",
                                "lemonchiffon",
                                "lightblue",
                                "lightcoral",
                                "lightcyan",
                                "lightgoldenrodyellow",
                                "lightgray",
                                "lightgreen",
                                "lightgrey",
                                "lightpink",
                                "lightsalmon",
                                "lightseagreen",
                                "lightskyblue",
                                "lightslategray",
                                "lightslategrey",
                                "lightsteelblue",
                                "lightyellow",
                                "limegreen",
                                "linen",
                                "magenta",
                                "mediumaquamarine",
                                "mediumblue",
                                "mediumorchid",
                                "mediumpurple",
                                "mediumseagreen",
                                "mediumslateblue",
                                "mediumspringgreen",
                                "mediumturquoise",
                                "mediumvioletred",
                                "midnightblue",
                                "mintcream",
                                "mistyrose",
                                "moccasin",
                                "navajowhite",
                                "oldlace",
                                "olivedrab",
                                "orangered",
                                "orchid",
                                "palegoldenrod",
                                "palegreen",
                                "paleturquoise",
                                "palevioletred",
                                "papayawhip",
                                "peachpuff",
                                "peru",
                                "pink",
                                "plum",
                                "powderblue",
                                "rosybrown",
                                "royalblue",
                                "saddlebrown",
                                "salmon",
                                "sandybrown",
                                "seagreen",
                                "seashell",
                                "sienna",
                                "skyblue",
                                "slateblue",
                                "slategray",
                                "slategrey",
                                "snow",
                                "springgreen",
                                "steelblue",
                                "tan",
                                "thistle",
                                "tomato",
                                "turquoise",
                                "violet",
                                "wheat",
                                "whitesmoke",
                                "yellowgreen",
                                "rebeccapurple",
                            ],
                        ],
                        Union["HexColor", str],
                        str,
                    ],
                ],
            ],
            UndefinedType,
        ] = Undefined,
        symbolStrokeWidth: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], float], UndefinedType
        ] = Undefined,
        symbolType: Union[
            Union[
                Union["ExprRef", "_ParameterProtocol", dict], Union["SymbolShape", str]
            ],
            UndefinedType,
        ] = Undefined,
        tickCount: Union[
            Union[
                Union["ExprRef", "_ParameterProtocol", dict],
                Union[
                    "TickCount",
                    Union[
                        "TimeInterval",
                        Literal[
                            "millisecond",
                            "second",
                            "minute",
                            "hour",
                            "day",
                            "week",
                            "month",
                            "year",
                        ],
                    ],
                    Union["TimeIntervalStep", dict],
                    float,
                ],
            ],
            UndefinedType,
        ] = Undefined,
        tickMinStep: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], float], UndefinedType
        ] = Undefined,
        title: Union[
            Union[None, Union["Text", List[str], str]], UndefinedType
        ] = Undefined,
        titleAlign: Union[
            Union[
                Union["Align", Literal["left", "center", "right"]],
                Union["ExprRef", "_ParameterProtocol", dict],
            ],
            UndefinedType,
        ] = Undefined,
        titleAnchor: Union[
            Union[
                Union["ExprRef", "_ParameterProtocol", dict],
                Union["TitleAnchor", Literal[None, "start", "middle", "end"]],
            ],
            UndefinedType,
        ] = Undefined,
        titleBaseline: Union[
            Union[
                Union["ExprRef", "_ParameterProtocol", dict],
                Union[
                    "TextBaseline",
                    Union["Baseline", Literal["top", "middle", "bottom"]],
                    str,
                ],
            ],
            UndefinedType,
        ] = Undefined,
        titleColor: Union[
            Union[
                Union["ExprRef", "_ParameterProtocol", dict],
                Union[
                    None,
                    Union[
                        "Color",
                        Union[
                            "ColorName",
                            Literal[
                                "black",
                                "silver",
                                "gray",
                                "white",
                                "maroon",
                                "red",
                                "purple",
                                "fuchsia",
                                "green",
                                "lime",
                                "olive",
                                "yellow",
                                "navy",
                                "blue",
                                "teal",
                                "aqua",
                                "orange",
                                "aliceblue",
                                "antiquewhite",
                                "aquamarine",
                                "azure",
                                "beige",
                                "bisque",
                                "blanchedalmond",
                                "blueviolet",
                                "brown",
                                "burlywood",
                                "cadetblue",
                                "chartreuse",
                                "chocolate",
                                "coral",
                                "cornflowerblue",
                                "cornsilk",
                                "crimson",
                                "cyan",
                                "darkblue",
                                "darkcyan",
                                "darkgoldenrod",
                                "darkgray",
                                "darkgreen",
                                "darkgrey",
                                "darkkhaki",
                                "darkmagenta",
                                "darkolivegreen",
                                "darkorange",
                                "darkorchid",
                                "darkred",
                                "darksalmon",
                                "darkseagreen",
                                "darkslateblue",
                                "darkslategray",
                                "darkslategrey",
                                "darkturquoise",
                                "darkviolet",
                                "deeppink",
                                "deepskyblue",
                                "dimgray",
                                "dimgrey",
                                "dodgerblue",
                                "firebrick",
                                "floralwhite",
                                "forestgreen",
                                "gainsboro",
                                "ghostwhite",
                                "gold",
                                "goldenrod",
                                "greenyellow",
                                "grey",
                                "honeydew",
                                "hotpink",
                                "indianred",
                                "indigo",
                                "ivory",
                                "khaki",
                                "lavender",
                                "lavenderblush",
                                "lawngreen",
                                "lemonchiffon",
                                "lightblue",
                                "lightcoral",
                                "lightcyan",
                                "lightgoldenrodyellow",
                                "lightgray",
                                "lightgreen",
                                "lightgrey",
                                "lightpink",
                                "lightsalmon",
                                "lightseagreen",
                                "lightskyblue",
                                "lightslategray",
                                "lightslategrey",
                                "lightsteelblue",
                                "lightyellow",
                                "limegreen",
                                "linen",
                                "magenta",
                                "mediumaquamarine",
                                "mediumblue",
                                "mediumorchid",
                                "mediumpurple",
                                "mediumseagreen",
                                "mediumslateblue",
                                "mediumspringgreen",
                                "mediumturquoise",
                                "mediumvioletred",
                                "midnightblue",
                                "mintcream",
                                "mistyrose",
                                "moccasin",
                                "navajowhite",
                                "oldlace",
                                "olivedrab",
                                "orangered",
                                "orchid",
                                "palegoldenrod",
                                "palegreen",
                                "paleturquoise",
                                "palevioletred",
                                "papayawhip",
                                "peachpuff",
                                "peru",
                                "pink",
                                "plum",
                                "powderblue",
                                "rosybrown",
                                "royalblue",
                                "saddlebrown",
                                "salmon",
                                "sandybrown",
                                "seagreen",
                                "seashell",
                                "sienna",
                                "skyblue",
                                "slateblue",
                                "slategray",
                                "slategrey",
                                "snow",
                                "springgreen",
                                "steelblue",
                                "tan",
                                "thistle",
                                "tomato",
                                "turquoise",
                                "violet",
                                "wheat",
                                "whitesmoke",
                                "yellowgreen",
                                "rebeccapurple",
                            ],
                        ],
                        Union["HexColor", str],
                        str,
                    ],
                ],
            ],
            UndefinedType,
        ] = Undefined,
        titleFont: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], str], UndefinedType
        ] = Undefined,
        titleFontSize: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], float], UndefinedType
        ] = Undefined,
        titleFontStyle: Union[
            Union[
                Union["ExprRef", "_ParameterProtocol", dict], Union["FontStyle", str]
            ],
            UndefinedType,
        ] = Undefined,
        titleFontWeight: Union[
            Union[
                Union["ExprRef", "_ParameterProtocol", dict],
                Union[
                    "FontWeight",
                    Literal[
                        "normal",
                        "bold",
                        "lighter",
                        "bolder",
                        100,
                        200,
                        300,
                        400,
                        500,
                        600,
                        700,
                        800,
                        900,
                    ],
                ],
            ],
            UndefinedType,
        ] = Undefined,
        titleLimit: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], float], UndefinedType
        ] = Undefined,
        titleLineHeight: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], float], UndefinedType
        ] = Undefined,
        titleOpacity: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], float], UndefinedType
        ] = Undefined,
        titleOrient: Union[
            Union[
                Union["ExprRef", "_ParameterProtocol", dict],
                Union["Orient", Literal["left", "right", "top", "bottom"]],
            ],
            UndefinedType,
        ] = Undefined,
        titlePadding: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], float], UndefinedType
        ] = Undefined,
        type: Union[Literal["symbol", "gradient"], UndefinedType] = Undefined,
        values: Union[
            Union[
                List[bool],
                List[float],
                List[str],
                Union["ExprRef", "_ParameterProtocol", dict],
                Union[List["DateTime"], List[dict]],
            ],
            UndefinedType,
        ] = Undefined,
        zindex: Union[float, UndefinedType] = Undefined,
        **kwds
    ):
        super(Legend, self).__init__(
            aria=aria,
            clipHeight=clipHeight,
            columnPadding=columnPadding,
            columns=columns,
            cornerRadius=cornerRadius,
            description=description,
            direction=direction,
            fillColor=fillColor,
            format=format,
            formatType=formatType,
            gradientLength=gradientLength,
            gradientOpacity=gradientOpacity,
            gradientStrokeColor=gradientStrokeColor,
            gradientStrokeWidth=gradientStrokeWidth,
            gradientThickness=gradientThickness,
            gridAlign=gridAlign,
            labelAlign=labelAlign,
            labelBaseline=labelBaseline,
            labelColor=labelColor,
            labelExpr=labelExpr,
            labelFont=labelFont,
            labelFontSize=labelFontSize,
            labelFontStyle=labelFontStyle,
            labelFontWeight=labelFontWeight,
            labelLimit=labelLimit,
            labelOffset=labelOffset,
            labelOpacity=labelOpacity,
            labelOverlap=labelOverlap,
            labelPadding=labelPadding,
            labelSeparation=labelSeparation,
            legendX=legendX,
            legendY=legendY,
            offset=offset,
            orient=orient,
            padding=padding,
            rowPadding=rowPadding,
            strokeColor=strokeColor,
            symbolDash=symbolDash,
            symbolDashOffset=symbolDashOffset,
            symbolFillColor=symbolFillColor,
            symbolLimit=symbolLimit,
            symbolOffset=symbolOffset,
            symbolOpacity=symbolOpacity,
            symbolSize=symbolSize,
            symbolStrokeColor=symbolStrokeColor,
            symbolStrokeWidth=symbolStrokeWidth,
            symbolType=symbolType,
            tickCount=tickCount,
            tickMinStep=tickMinStep,
            title=title,
            titleAlign=titleAlign,
            titleAnchor=titleAnchor,
            titleBaseline=titleBaseline,
            titleColor=titleColor,
            titleFont=titleFont,
            titleFontSize=titleFontSize,
            titleFontStyle=titleFontStyle,
            titleFontWeight=titleFontWeight,
            titleLimit=titleLimit,
            titleLineHeight=titleLineHeight,
            titleOpacity=titleOpacity,
            titleOrient=titleOrient,
            titlePadding=titlePadding,
            type=type,
            values=values,
            zindex=zindex,
            **kwds
        )


class LegendBinding(VegaLiteSchema):
    """LegendBinding schema wrapper

    Union[:class:`LegendBinding`, Union[:class:`LegendStreamBinding`, Dict[required=[legend]]],
    str]
    """

    _schema = {"$ref": "#/definitions/LegendBinding"}

    def __init__(self, *args, **kwds):
        super(LegendBinding, self).__init__(*args, **kwds)


class LegendConfig(VegaLiteSchema):
    """LegendConfig schema wrapper

    Union[:class:`LegendConfig`, Dict[required=[]]]

    Parameters
    ----------

    aria : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], bool]
        A boolean flag indicating if `ARIA attributes
        <https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA>`__ should be
        included (SVG output only). If ``false``, the "aria-hidden" attribute will be set on
        the output SVG group, removing the legend from the ARIA accessibility tree.

        **Default value:** ``true``
    clipHeight : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], float]
        The height in pixels to clip symbol legend entries and limit their size.
    columnPadding : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], float]
        The horizontal padding in pixels between symbol legend entries.

        **Default value:** ``10``.
    columns : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], float]
        The number of columns in which to arrange symbol legend entries. A value of ``0`` or
        lower indicates a single row with one column per entry.
    cornerRadius : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], float]
        Corner radius for the full legend.
    description : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], str]
        A text description of this legend for `ARIA accessibility
        <https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA>`__ (SVG output
        only). If the ``aria`` property is true, for SVG output the `"aria-label" attribute
        <https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/ARIA_Techniques/Using_the_aria-label_attribute>`__
        will be set to this description. If the description is unspecified it will be
        automatically generated.
    direction : Union[:class:`Orientation`, Literal['horizontal', 'vertical']]
        The direction of the legend, one of ``"vertical"`` or ``"horizontal"``.

        **Default value:**


        * For top-/bottom- ``orient`` ed legends, ``"horizontal"``
        * For left-/right- ``orient`` ed legends, ``"vertical"``
        * For top/bottom-left/right- ``orient`` ed legends, ``"horizontal"`` for gradient
          legends and ``"vertical"`` for symbol legends.
    disable : bool
        Disable legend by default
    fillColor : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], Union[None, Union[:class:`Color`, Union[:class:`ColorName`, Literal['black', 'silver', 'gray', 'white', 'maroon', 'red', 'purple', 'fuchsia', 'green', 'lime', 'olive', 'yellow', 'navy', 'blue', 'teal', 'aqua', 'orange', 'aliceblue', 'antiquewhite', 'aquamarine', 'azure', 'beige', 'bisque', 'blanchedalmond', 'blueviolet', 'brown', 'burlywood', 'cadetblue', 'chartreuse', 'chocolate', 'coral', 'cornflowerblue', 'cornsilk', 'crimson', 'cyan', 'darkblue', 'darkcyan', 'darkgoldenrod', 'darkgray', 'darkgreen', 'darkgrey', 'darkkhaki', 'darkmagenta', 'darkolivegreen', 'darkorange', 'darkorchid', 'darkred', 'darksalmon', 'darkseagreen', 'darkslateblue', 'darkslategray', 'darkslategrey', 'darkturquoise', 'darkviolet', 'deeppink', 'deepskyblue', 'dimgray', 'dimgrey', 'dodgerblue', 'firebrick', 'floralwhite', 'forestgreen', 'gainsboro', 'ghostwhite', 'gold', 'goldenrod', 'greenyellow', 'grey', 'honeydew', 'hotpink', 'indianred', 'indigo', 'ivory', 'khaki', 'lavender', 'lavenderblush', 'lawngreen', 'lemonchiffon', 'lightblue', 'lightcoral', 'lightcyan', 'lightgoldenrodyellow', 'lightgray', 'lightgreen', 'lightgrey', 'lightpink', 'lightsalmon', 'lightseagreen', 'lightskyblue', 'lightslategray', 'lightslategrey', 'lightsteelblue', 'lightyellow', 'limegreen', 'linen', 'magenta', 'mediumaquamarine', 'mediumblue', 'mediumorchid', 'mediumpurple', 'mediumseagreen', 'mediumslateblue', 'mediumspringgreen', 'mediumturquoise', 'mediumvioletred', 'midnightblue', 'mintcream', 'mistyrose', 'moccasin', 'navajowhite', 'oldlace', 'olivedrab', 'orangered', 'orchid', 'palegoldenrod', 'palegreen', 'paleturquoise', 'palevioletred', 'papayawhip', 'peachpuff', 'peru', 'pink', 'plum', 'powderblue', 'rosybrown', 'royalblue', 'saddlebrown', 'salmon', 'sandybrown', 'seagreen', 'seashell', 'sienna', 'skyblue', 'slateblue', 'slategray', 'slategrey', 'snow', 'springgreen', 'steelblue', 'tan', 'thistle', 'tomato', 'turquoise', 'violet', 'wheat', 'whitesmoke', 'yellowgreen', 'rebeccapurple']], Union[:class:`HexColor`, str], str]]]
        Background fill color for the full legend.
    gradientDirection : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], Union[:class:`Orientation`, Literal['horizontal', 'vertical']]]
        The default direction ( ``"horizontal"`` or ``"vertical"`` ) for gradient legends.

        **Default value:** ``"vertical"``.
    gradientHorizontalMaxLength : float
        Max legend length for a horizontal gradient when ``config.legend.gradientLength`` is
        undefined.

        **Default value:** ``200``
    gradientHorizontalMinLength : float
        Min legend length for a horizontal gradient when ``config.legend.gradientLength`` is
        undefined.

        **Default value:** ``100``
    gradientLabelLimit : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], float]
        The maximum allowed length in pixels of color ramp gradient labels.
    gradientLabelOffset : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], float]
        Vertical offset in pixels for color ramp gradient labels.

        **Default value:** ``2``.
    gradientLength : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], float]
        The length in pixels of the primary axis of a color gradient. This value corresponds
        to the height of a vertical gradient or the width of a horizontal gradient.

        **Default value:** ``200``.
    gradientOpacity : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], float]
        Opacity of the color gradient.
    gradientStrokeColor : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], Union[None, Union[:class:`Color`, Union[:class:`ColorName`, Literal['black', 'silver', 'gray', 'white', 'maroon', 'red', 'purple', 'fuchsia', 'green', 'lime', 'olive', 'yellow', 'navy', 'blue', 'teal', 'aqua', 'orange', 'aliceblue', 'antiquewhite', 'aquamarine', 'azure', 'beige', 'bisque', 'blanchedalmond', 'blueviolet', 'brown', 'burlywood', 'cadetblue', 'chartreuse', 'chocolate', 'coral', 'cornflowerblue', 'cornsilk', 'crimson', 'cyan', 'darkblue', 'darkcyan', 'darkgoldenrod', 'darkgray', 'darkgreen', 'darkgrey', 'darkkhaki', 'darkmagenta', 'darkolivegreen', 'darkorange', 'darkorchid', 'darkred', 'darksalmon', 'darkseagreen', 'darkslateblue', 'darkslategray', 'darkslategrey', 'darkturquoise', 'darkviolet', 'deeppink', 'deepskyblue', 'dimgray', 'dimgrey', 'dodgerblue', 'firebrick', 'floralwhite', 'forestgreen', 'gainsboro', 'ghostwhite', 'gold', 'goldenrod', 'greenyellow', 'grey', 'honeydew', 'hotpink', 'indianred', 'indigo', 'ivory', 'khaki', 'lavender', 'lavenderblush', 'lawngreen', 'lemonchiffon', 'lightblue', 'lightcoral', 'lightcyan', 'lightgoldenrodyellow', 'lightgray', 'lightgreen', 'lightgrey', 'lightpink', 'lightsalmon', 'lightseagreen', 'lightskyblue', 'lightslategray', 'lightslategrey', 'lightsteelblue', 'lightyellow', 'limegreen', 'linen', 'magenta', 'mediumaquamarine', 'mediumblue', 'mediumorchid', 'mediumpurple', 'mediumseagreen', 'mediumslateblue', 'mediumspringgreen', 'mediumturquoise', 'mediumvioletred', 'midnightblue', 'mintcream', 'mistyrose', 'moccasin', 'navajowhite', 'oldlace', 'olivedrab', 'orangered', 'orchid', 'palegoldenrod', 'palegreen', 'paleturquoise', 'palevioletred', 'papayawhip', 'peachpuff', 'peru', 'pink', 'plum', 'powderblue', 'rosybrown', 'royalblue', 'saddlebrown', 'salmon', 'sandybrown', 'seagreen', 'seashell', 'sienna', 'skyblue', 'slateblue', 'slategray', 'slategrey', 'snow', 'springgreen', 'steelblue', 'tan', 'thistle', 'tomato', 'turquoise', 'violet', 'wheat', 'whitesmoke', 'yellowgreen', 'rebeccapurple']], Union[:class:`HexColor`, str], str]]]
        The color of the gradient stroke, can be in hex color code or regular color name.

        **Default value:** ``"lightGray"``.
    gradientStrokeWidth : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], float]
        The width of the gradient stroke, in pixels.

        **Default value:** ``0``.
    gradientThickness : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], float]
        The thickness in pixels of the color gradient. This value corresponds to the width
        of a vertical gradient or the height of a horizontal gradient.

        **Default value:** ``16``.
    gradientVerticalMaxLength : float
        Max legend length for a vertical gradient when ``config.legend.gradientLength`` is
        undefined.

        **Default value:** ``200``
    gradientVerticalMinLength : float
        Min legend length for a vertical gradient when ``config.legend.gradientLength`` is
        undefined.

        **Default value:** ``100``
    gridAlign : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], Union[:class:`LayoutAlign`, Literal['all', 'each', 'none']]]
        The alignment to apply to symbol legends rows and columns. The supported string
        values are ``"all"``, ``"each"`` (the default), and ``none``. For more information,
        see the `grid layout documentation <https://vega.github.io/vega/docs/layout>`__.

        **Default value:** ``"each"``.
    labelAlign : Union[Union[:class:`Align`, Literal['left', 'center', 'right']], Union[:class:`ExprRef`, Dict[required=[expr]]]]
        The alignment of the legend label, can be left, center, or right.
    labelBaseline : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], Union[:class:`TextBaseline`, Union[:class:`Baseline`, Literal['top', 'middle', 'bottom']], str]]
        The position of the baseline of legend label, can be ``"top"``, ``"middle"``,
        ``"bottom"``, or ``"alphabetic"``.

        **Default value:** ``"middle"``.
    labelColor : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], Union[None, Union[:class:`Color`, Union[:class:`ColorName`, Literal['black', 'silver', 'gray', 'white', 'maroon', 'red', 'purple', 'fuchsia', 'green', 'lime', 'olive', 'yellow', 'navy', 'blue', 'teal', 'aqua', 'orange', 'aliceblue', 'antiquewhite', 'aquamarine', 'azure', 'beige', 'bisque', 'blanchedalmond', 'blueviolet', 'brown', 'burlywood', 'cadetblue', 'chartreuse', 'chocolate', 'coral', 'cornflowerblue', 'cornsilk', 'crimson', 'cyan', 'darkblue', 'darkcyan', 'darkgoldenrod', 'darkgray', 'darkgreen', 'darkgrey', 'darkkhaki', 'darkmagenta', 'darkolivegreen', 'darkorange', 'darkorchid', 'darkred', 'darksalmon', 'darkseagreen', 'darkslateblue', 'darkslategray', 'darkslategrey', 'darkturquoise', 'darkviolet', 'deeppink', 'deepskyblue', 'dimgray', 'dimgrey', 'dodgerblue', 'firebrick', 'floralwhite', 'forestgreen', 'gainsboro', 'ghostwhite', 'gold', 'goldenrod', 'greenyellow', 'grey', 'honeydew', 'hotpink', 'indianred', 'indigo', 'ivory', 'khaki', 'lavender', 'lavenderblush', 'lawngreen', 'lemonchiffon', 'lightblue', 'lightcoral', 'lightcyan', 'lightgoldenrodyellow', 'lightgray', 'lightgreen', 'lightgrey', 'lightpink', 'lightsalmon', 'lightseagreen', 'lightskyblue', 'lightslategray', 'lightslategrey', 'lightsteelblue', 'lightyellow', 'limegreen', 'linen', 'magenta', 'mediumaquamarine', 'mediumblue', 'mediumorchid', 'mediumpurple', 'mediumseagreen', 'mediumslateblue', 'mediumspringgreen', 'mediumturquoise', 'mediumvioletred', 'midnightblue', 'mintcream', 'mistyrose', 'moccasin', 'navajowhite', 'oldlace', 'olivedrab', 'orangered', 'orchid', 'palegoldenrod', 'palegreen', 'paleturquoise', 'palevioletred', 'papayawhip', 'peachpuff', 'peru', 'pink', 'plum', 'powderblue', 'rosybrown', 'royalblue', 'saddlebrown', 'salmon', 'sandybrown', 'seagreen', 'seashell', 'sienna', 'skyblue', 'slateblue', 'slategray', 'slategrey', 'snow', 'springgreen', 'steelblue', 'tan', 'thistle', 'tomato', 'turquoise', 'violet', 'wheat', 'whitesmoke', 'yellowgreen', 'rebeccapurple']], Union[:class:`HexColor`, str], str]]]
        The color of the legend label, can be in hex color code or regular color name.
    labelFont : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], str]
        The font of the legend label.
    labelFontSize : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], float]
        The font size of legend label.

        **Default value:** ``10``.
    labelFontStyle : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], Union[:class:`FontStyle`, str]]
        The font style of legend label.
    labelFontWeight : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], Union[:class:`FontWeight`, Literal['normal', 'bold', 'lighter', 'bolder', 100, 200, 300, 400, 500, 600, 700, 800, 900]]]
        The font weight of legend label.
    labelLimit : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], float]
        Maximum allowed pixel width of legend tick labels.

        **Default value:** ``160``.
    labelOffset : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], float]
        The offset of the legend label.

        **Default value:** ``4``.
    labelOpacity : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], float]
        Opacity of labels.
    labelOverlap : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], Union[:class:`LabelOverlap`, bool, str]]
        The strategy to use for resolving overlap of labels in gradient legends. If
        ``false``, no overlap reduction is attempted. If set to ``true`` or ``"parity"``, a
        strategy of removing every other label is used. If set to ``"greedy"``, a linear
        scan of the labels is performed, removing any label that overlaps with the last
        visible label (this often works better for log-scaled axes).

        **Default value:** ``"greedy"`` for ``log scales otherwise`` true`.
    labelPadding : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], float]
        Padding in pixels between the legend and legend labels.
    labelSeparation : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], float]
        The minimum separation that must be between label bounding boxes for them to be
        considered non-overlapping (default ``0`` ). This property is ignored if
        *labelOverlap* resolution is not enabled.
    layout : Union[:class:`ExprRef`, Dict[required=[expr]]]

    legendX : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], float]
        Custom x-position for legend with orient "none".
    legendY : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], float]
        Custom y-position for legend with orient "none".
    offset : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], float]
        The offset in pixels by which to displace the legend from the data rectangle and
        axes.

        **Default value:** ``18``.
    orient : Union[:class:`LegendOrient`, Literal['none', 'left', 'right', 'top', 'bottom', 'top-left', 'top-right', 'bottom-left', 'bottom-right']]
        The orientation of the legend, which determines how the legend is positioned within
        the scene. One of ``"left"``, ``"right"``, ``"top"``, ``"bottom"``, ``"top-left"``,
        ``"top-right"``, ``"bottom-left"``, ``"bottom-right"``, ``"none"``.

        **Default value:** ``"right"``
    padding : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], float]
        The padding between the border and content of the legend group.

        **Default value:** ``0``.
    rowPadding : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], float]
        The vertical padding in pixels between symbol legend entries.

        **Default value:** ``2``.
    strokeColor : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], Union[None, Union[:class:`Color`, Union[:class:`ColorName`, Literal['black', 'silver', 'gray', 'white', 'maroon', 'red', 'purple', 'fuchsia', 'green', 'lime', 'olive', 'yellow', 'navy', 'blue', 'teal', 'aqua', 'orange', 'aliceblue', 'antiquewhite', 'aquamarine', 'azure', 'beige', 'bisque', 'blanchedalmond', 'blueviolet', 'brown', 'burlywood', 'cadetblue', 'chartreuse', 'chocolate', 'coral', 'cornflowerblue', 'cornsilk', 'crimson', 'cyan', 'darkblue', 'darkcyan', 'darkgoldenrod', 'darkgray', 'darkgreen', 'darkgrey', 'darkkhaki', 'darkmagenta', 'darkolivegreen', 'darkorange', 'darkorchid', 'darkred', 'darksalmon', 'darkseagreen', 'darkslateblue', 'darkslategray', 'darkslategrey', 'darkturquoise', 'darkviolet', 'deeppink', 'deepskyblue', 'dimgray', 'dimgrey', 'dodgerblue', 'firebrick', 'floralwhite', 'forestgreen', 'gainsboro', 'ghostwhite', 'gold', 'goldenrod', 'greenyellow', 'grey', 'honeydew', 'hotpink', 'indianred', 'indigo', 'ivory', 'khaki', 'lavender', 'lavenderblush', 'lawngreen', 'lemonchiffon', 'lightblue', 'lightcoral', 'lightcyan', 'lightgoldenrodyellow', 'lightgray', 'lightgreen', 'lightgrey', 'lightpink', 'lightsalmon', 'lightseagreen', 'lightskyblue', 'lightslategray', 'lightslategrey', 'lightsteelblue', 'lightyellow', 'limegreen', 'linen', 'magenta', 'mediumaquamarine', 'mediumblue', 'mediumorchid', 'mediumpurple', 'mediumseagreen', 'mediumslateblue', 'mediumspringgreen', 'mediumturquoise', 'mediumvioletred', 'midnightblue', 'mintcream', 'mistyrose', 'moccasin', 'navajowhite', 'oldlace', 'olivedrab', 'orangered', 'orchid', 'palegoldenrod', 'palegreen', 'paleturquoise', 'palevioletred', 'papayawhip', 'peachpuff', 'peru', 'pink', 'plum', 'powderblue', 'rosybrown', 'royalblue', 'saddlebrown', 'salmon', 'sandybrown', 'seagreen', 'seashell', 'sienna', 'skyblue', 'slateblue', 'slategray', 'slategrey', 'snow', 'springgreen', 'steelblue', 'tan', 'thistle', 'tomato', 'turquoise', 'violet', 'wheat', 'whitesmoke', 'yellowgreen', 'rebeccapurple']], Union[:class:`HexColor`, str], str]]]
        Border stroke color for the full legend.
    strokeDash : Union[List[float], Union[:class:`ExprRef`, Dict[required=[expr]]]]
        Border stroke dash pattern for the full legend.
    strokeWidth : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], float]
        Border stroke width for the full legend.
    symbolBaseFillColor : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], Union[None, Union[:class:`Color`, Union[:class:`ColorName`, Literal['black', 'silver', 'gray', 'white', 'maroon', 'red', 'purple', 'fuchsia', 'green', 'lime', 'olive', 'yellow', 'navy', 'blue', 'teal', 'aqua', 'orange', 'aliceblue', 'antiquewhite', 'aquamarine', 'azure', 'beige', 'bisque', 'blanchedalmond', 'blueviolet', 'brown', 'burlywood', 'cadetblue', 'chartreuse', 'chocolate', 'coral', 'cornflowerblue', 'cornsilk', 'crimson', 'cyan', 'darkblue', 'darkcyan', 'darkgoldenrod', 'darkgray', 'darkgreen', 'darkgrey', 'darkkhaki', 'darkmagenta', 'darkolivegreen', 'darkorange', 'darkorchid', 'darkred', 'darksalmon', 'darkseagreen', 'darkslateblue', 'darkslategray', 'darkslategrey', 'darkturquoise', 'darkviolet', 'deeppink', 'deepskyblue', 'dimgray', 'dimgrey', 'dodgerblue', 'firebrick', 'floralwhite', 'forestgreen', 'gainsboro', 'ghostwhite', 'gold', 'goldenrod', 'greenyellow', 'grey', 'honeydew', 'hotpink', 'indianred', 'indigo', 'ivory', 'khaki', 'lavender', 'lavenderblush', 'lawngreen', 'lemonchiffon', 'lightblue', 'lightcoral', 'lightcyan', 'lightgoldenrodyellow', 'lightgray', 'lightgreen', 'lightgrey', 'lightpink', 'lightsalmon', 'lightseagreen', 'lightskyblue', 'lightslategray', 'lightslategrey', 'lightsteelblue', 'lightyellow', 'limegreen', 'linen', 'magenta', 'mediumaquamarine', 'mediumblue', 'mediumorchid', 'mediumpurple', 'mediumseagreen', 'mediumslateblue', 'mediumspringgreen', 'mediumturquoise', 'mediumvioletred', 'midnightblue', 'mintcream', 'mistyrose', 'moccasin', 'navajowhite', 'oldlace', 'olivedrab', 'orangered', 'orchid', 'palegoldenrod', 'palegreen', 'paleturquoise', 'palevioletred', 'papayawhip', 'peachpuff', 'peru', 'pink', 'plum', 'powderblue', 'rosybrown', 'royalblue', 'saddlebrown', 'salmon', 'sandybrown', 'seagreen', 'seashell', 'sienna', 'skyblue', 'slateblue', 'slategray', 'slategrey', 'snow', 'springgreen', 'steelblue', 'tan', 'thistle', 'tomato', 'turquoise', 'violet', 'wheat', 'whitesmoke', 'yellowgreen', 'rebeccapurple']], Union[:class:`HexColor`, str], str]]]
        Default fill color for legend symbols. Only applied if there is no ``"fill"`` scale
        color encoding for the legend.

        **Default value:** ``"transparent"``.
    symbolBaseStrokeColor : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], Union[None, Union[:class:`Color`, Union[:class:`ColorName`, Literal['black', 'silver', 'gray', 'white', 'maroon', 'red', 'purple', 'fuchsia', 'green', 'lime', 'olive', 'yellow', 'navy', 'blue', 'teal', 'aqua', 'orange', 'aliceblue', 'antiquewhite', 'aquamarine', 'azure', 'beige', 'bisque', 'blanchedalmond', 'blueviolet', 'brown', 'burlywood', 'cadetblue', 'chartreuse', 'chocolate', 'coral', 'cornflowerblue', 'cornsilk', 'crimson', 'cyan', 'darkblue', 'darkcyan', 'darkgoldenrod', 'darkgray', 'darkgreen', 'darkgrey', 'darkkhaki', 'darkmagenta', 'darkolivegreen', 'darkorange', 'darkorchid', 'darkred', 'darksalmon', 'darkseagreen', 'darkslateblue', 'darkslategray', 'darkslategrey', 'darkturquoise', 'darkviolet', 'deeppink', 'deepskyblue', 'dimgray', 'dimgrey', 'dodgerblue', 'firebrick', 'floralwhite', 'forestgreen', 'gainsboro', 'ghostwhite', 'gold', 'goldenrod', 'greenyellow', 'grey', 'honeydew', 'hotpink', 'indianred', 'indigo', 'ivory', 'khaki', 'lavender', 'lavenderblush', 'lawngreen', 'lemonchiffon', 'lightblue', 'lightcoral', 'lightcyan', 'lightgoldenrodyellow', 'lightgray', 'lightgreen', 'lightgrey', 'lightpink', 'lightsalmon', 'lightseagreen', 'lightskyblue', 'lightslategray', 'lightslategrey', 'lightsteelblue', 'lightyellow', 'limegreen', 'linen', 'magenta', 'mediumaquamarine', 'mediumblue', 'mediumorchid', 'mediumpurple', 'mediumseagreen', 'mediumslateblue', 'mediumspringgreen', 'mediumturquoise', 'mediumvioletred', 'midnightblue', 'mintcream', 'mistyrose', 'moccasin', 'navajowhite', 'oldlace', 'olivedrab', 'orangered', 'orchid', 'palegoldenrod', 'palegreen', 'paleturquoise', 'palevioletred', 'papayawhip', 'peachpuff', 'peru', 'pink', 'plum', 'powderblue', 'rosybrown', 'royalblue', 'saddlebrown', 'salmon', 'sandybrown', 'seagreen', 'seashell', 'sienna', 'skyblue', 'slateblue', 'slategray', 'slategrey', 'snow', 'springgreen', 'steelblue', 'tan', 'thistle', 'tomato', 'turquoise', 'violet', 'wheat', 'whitesmoke', 'yellowgreen', 'rebeccapurple']], Union[:class:`HexColor`, str], str]]]
        Default stroke color for legend symbols. Only applied if there is no ``"fill"``
        scale color encoding for the legend.

        **Default value:** ``"gray"``.
    symbolDash : Union[List[float], Union[:class:`ExprRef`, Dict[required=[expr]]]]
        An array of alternating [stroke, space] lengths for dashed symbol strokes.
    symbolDashOffset : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], float]
        The pixel offset at which to start drawing with the symbol stroke dash array.
    symbolDirection : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], Union[:class:`Orientation`, Literal['horizontal', 'vertical']]]
        The default direction ( ``"horizontal"`` or ``"vertical"`` ) for symbol legends.

        **Default value:** ``"vertical"``.
    symbolFillColor : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], Union[None, Union[:class:`Color`, Union[:class:`ColorName`, Literal['black', 'silver', 'gray', 'white', 'maroon', 'red', 'purple', 'fuchsia', 'green', 'lime', 'olive', 'yellow', 'navy', 'blue', 'teal', 'aqua', 'orange', 'aliceblue', 'antiquewhite', 'aquamarine', 'azure', 'beige', 'bisque', 'blanchedalmond', 'blueviolet', 'brown', 'burlywood', 'cadetblue', 'chartreuse', 'chocolate', 'coral', 'cornflowerblue', 'cornsilk', 'crimson', 'cyan', 'darkblue', 'darkcyan', 'darkgoldenrod', 'darkgray', 'darkgreen', 'darkgrey', 'darkkhaki', 'darkmagenta', 'darkolivegreen', 'darkorange', 'darkorchid', 'darkred', 'darksalmon', 'darkseagreen', 'darkslateblue', 'darkslategray', 'darkslategrey', 'darkturquoise', 'darkviolet', 'deeppink', 'deepskyblue', 'dimgray', 'dimgrey', 'dodgerblue', 'firebrick', 'floralwhite', 'forestgreen', 'gainsboro', 'ghostwhite', 'gold', 'goldenrod', 'greenyellow', 'grey', 'honeydew', 'hotpink', 'indianred', 'indigo', 'ivory', 'khaki', 'lavender', 'lavenderblush', 'lawngreen', 'lemonchiffon', 'lightblue', 'lightcoral', 'lightcyan', 'lightgoldenrodyellow', 'lightgray', 'lightgreen', 'lightgrey', 'lightpink', 'lightsalmon', 'lightseagreen', 'lightskyblue', 'lightslategray', 'lightslategrey', 'lightsteelblue', 'lightyellow', 'limegreen', 'linen', 'magenta', 'mediumaquamarine', 'mediumblue', 'mediumorchid', 'mediumpurple', 'mediumseagreen', 'mediumslateblue', 'mediumspringgreen', 'mediumturquoise', 'mediumvioletred', 'midnightblue', 'mintcream', 'mistyrose', 'moccasin', 'navajowhite', 'oldlace', 'olivedrab', 'orangered', 'orchid', 'palegoldenrod', 'palegreen', 'paleturquoise', 'palevioletred', 'papayawhip', 'peachpuff', 'peru', 'pink', 'plum', 'powderblue', 'rosybrown', 'royalblue', 'saddlebrown', 'salmon', 'sandybrown', 'seagreen', 'seashell', 'sienna', 'skyblue', 'slateblue', 'slategray', 'slategrey', 'snow', 'springgreen', 'steelblue', 'tan', 'thistle', 'tomato', 'turquoise', 'violet', 'wheat', 'whitesmoke', 'yellowgreen', 'rebeccapurple']], Union[:class:`HexColor`, str], str]]]
        The color of the legend symbol,
    symbolLimit : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], float]
        The maximum number of allowed entries for a symbol legend. Additional entries will
        be dropped.
    symbolOffset : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], float]
        Horizontal pixel offset for legend symbols.

        **Default value:** ``0``.
    symbolOpacity : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], float]
        Opacity of the legend symbols.
    symbolSize : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], float]
        The size of the legend symbol, in pixels.

        **Default value:** ``100``.
    symbolStrokeColor : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], Union[None, Union[:class:`Color`, Union[:class:`ColorName`, Literal['black', 'silver', 'gray', 'white', 'maroon', 'red', 'purple', 'fuchsia', 'green', 'lime', 'olive', 'yellow', 'navy', 'blue', 'teal', 'aqua', 'orange', 'aliceblue', 'antiquewhite', 'aquamarine', 'azure', 'beige', 'bisque', 'blanchedalmond', 'blueviolet', 'brown', 'burlywood', 'cadetblue', 'chartreuse', 'chocolate', 'coral', 'cornflowerblue', 'cornsilk', 'crimson', 'cyan', 'darkblue', 'darkcyan', 'darkgoldenrod', 'darkgray', 'darkgreen', 'darkgrey', 'darkkhaki', 'darkmagenta', 'darkolivegreen', 'darkorange', 'darkorchid', 'darkred', 'darksalmon', 'darkseagreen', 'darkslateblue', 'darkslategray', 'darkslategrey', 'darkturquoise', 'darkviolet', 'deeppink', 'deepskyblue', 'dimgray', 'dimgrey', 'dodgerblue', 'firebrick', 'floralwhite', 'forestgreen', 'gainsboro', 'ghostwhite', 'gold', 'goldenrod', 'greenyellow', 'grey', 'honeydew', 'hotpink', 'indianred', 'indigo', 'ivory', 'khaki', 'lavender', 'lavenderblush', 'lawngreen', 'lemonchiffon', 'lightblue', 'lightcoral', 'lightcyan', 'lightgoldenrodyellow', 'lightgray', 'lightgreen', 'lightgrey', 'lightpink', 'lightsalmon', 'lightseagreen', 'lightskyblue', 'lightslategray', 'lightslategrey', 'lightsteelblue', 'lightyellow', 'limegreen', 'linen', 'magenta', 'mediumaquamarine', 'mediumblue', 'mediumorchid', 'mediumpurple', 'mediumseagreen', 'mediumslateblue', 'mediumspringgreen', 'mediumturquoise', 'mediumvioletred', 'midnightblue', 'mintcream', 'mistyrose', 'moccasin', 'navajowhite', 'oldlace', 'olivedrab', 'orangered', 'orchid', 'palegoldenrod', 'palegreen', 'paleturquoise', 'palevioletred', 'papayawhip', 'peachpuff', 'peru', 'pink', 'plum', 'powderblue', 'rosybrown', 'royalblue', 'saddlebrown', 'salmon', 'sandybrown', 'seagreen', 'seashell', 'sienna', 'skyblue', 'slateblue', 'slategray', 'slategrey', 'snow', 'springgreen', 'steelblue', 'tan', 'thistle', 'tomato', 'turquoise', 'violet', 'wheat', 'whitesmoke', 'yellowgreen', 'rebeccapurple']], Union[:class:`HexColor`, str], str]]]
        Stroke color for legend symbols.
    symbolStrokeWidth : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], float]
        The width of the symbol's stroke.

        **Default value:** ``1.5``.
    symbolType : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], Union[:class:`SymbolShape`, str]]
        The symbol shape. One of the plotting shapes ``circle`` (default), ``square``,
        ``cross``, ``diamond``, ``triangle-up``, ``triangle-down``, ``triangle-right``, or
        ``triangle-left``, the line symbol ``stroke``, or one of the centered directional
        shapes ``arrow``, ``wedge``, or ``triangle``. Alternatively, a custom `SVG path
        string <https://developer.mozilla.org/en-US/docs/Web/SVG/Tutorial/Paths>`__ can be
        provided. For correct sizing, custom shape paths should be defined within a square
        bounding box with coordinates ranging from -1 to 1 along both the x and y
        dimensions.

        **Default value:** ``"circle"``.
    tickCount : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], Union[:class:`TickCount`, Union[:class:`TimeIntervalStep`, Dict[required=[interval, step]]], Union[:class:`TimeInterval`, Literal['millisecond', 'second', 'minute', 'hour', 'day', 'week', 'month', 'year']], float]]
        The desired number of tick values for quantitative legends.
    title : None
        Set to null to disable title for the axis, legend, or header.
    titleAlign : Union[Union[:class:`Align`, Literal['left', 'center', 'right']], Union[:class:`ExprRef`, Dict[required=[expr]]]]
        Horizontal text alignment for legend titles.

        **Default value:** ``"left"``.
    titleAnchor : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], Union[:class:`TitleAnchor`, Literal[None, 'start', 'middle', 'end']]]
        Text anchor position for placing legend titles.
    titleBaseline : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], Union[:class:`TextBaseline`, Union[:class:`Baseline`, Literal['top', 'middle', 'bottom']], str]]
        Vertical text baseline for legend titles.  One of ``"alphabetic"`` (default),
        ``"top"``, ``"middle"``, ``"bottom"``, ``"line-top"``, or ``"line-bottom"``. The
        ``"line-top"`` and ``"line-bottom"`` values operate similarly to ``"top"`` and
        ``"bottom"``, but are calculated relative to the *lineHeight* rather than *fontSize*
        alone.

        **Default value:** ``"top"``.
    titleColor : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], Union[None, Union[:class:`Color`, Union[:class:`ColorName`, Literal['black', 'silver', 'gray', 'white', 'maroon', 'red', 'purple', 'fuchsia', 'green', 'lime', 'olive', 'yellow', 'navy', 'blue', 'teal', 'aqua', 'orange', 'aliceblue', 'antiquewhite', 'aquamarine', 'azure', 'beige', 'bisque', 'blanchedalmond', 'blueviolet', 'brown', 'burlywood', 'cadetblue', 'chartreuse', 'chocolate', 'coral', 'cornflowerblue', 'cornsilk', 'crimson', 'cyan', 'darkblue', 'darkcyan', 'darkgoldenrod', 'darkgray', 'darkgreen', 'darkgrey', 'darkkhaki', 'darkmagenta', 'darkolivegreen', 'darkorange', 'darkorchid', 'darkred', 'darksalmon', 'darkseagreen', 'darkslateblue', 'darkslategray', 'darkslategrey', 'darkturquoise', 'darkviolet', 'deeppink', 'deepskyblue', 'dimgray', 'dimgrey', 'dodgerblue', 'firebrick', 'floralwhite', 'forestgreen', 'gainsboro', 'ghostwhite', 'gold', 'goldenrod', 'greenyellow', 'grey', 'honeydew', 'hotpink', 'indianred', 'indigo', 'ivory', 'khaki', 'lavender', 'lavenderblush', 'lawngreen', 'lemonchiffon', 'lightblue', 'lightcoral', 'lightcyan', 'lightgoldenrodyellow', 'lightgray', 'lightgreen', 'lightgrey', 'lightpink', 'lightsalmon', 'lightseagreen', 'lightskyblue', 'lightslategray', 'lightslategrey', 'lightsteelblue', 'lightyellow', 'limegreen', 'linen', 'magenta', 'mediumaquamarine', 'mediumblue', 'mediumorchid', 'mediumpurple', 'mediumseagreen', 'mediumslateblue', 'mediumspringgreen', 'mediumturquoise', 'mediumvioletred', 'midnightblue', 'mintcream', 'mistyrose', 'moccasin', 'navajowhite', 'oldlace', 'olivedrab', 'orangered', 'orchid', 'palegoldenrod', 'palegreen', 'paleturquoise', 'palevioletred', 'papayawhip', 'peachpuff', 'peru', 'pink', 'plum', 'powderblue', 'rosybrown', 'royalblue', 'saddlebrown', 'salmon', 'sandybrown', 'seagreen', 'seashell', 'sienna', 'skyblue', 'slateblue', 'slategray', 'slategrey', 'snow', 'springgreen', 'steelblue', 'tan', 'thistle', 'tomato', 'turquoise', 'violet', 'wheat', 'whitesmoke', 'yellowgreen', 'rebeccapurple']], Union[:class:`HexColor`, str], str]]]
        The color of the legend title, can be in hex color code or regular color name.
    titleFont : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], str]
        The font of the legend title.
    titleFontSize : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], float]
        The font size of the legend title.
    titleFontStyle : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], Union[:class:`FontStyle`, str]]
        The font style of the legend title.
    titleFontWeight : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], Union[:class:`FontWeight`, Literal['normal', 'bold', 'lighter', 'bolder', 100, 200, 300, 400, 500, 600, 700, 800, 900]]]
        The font weight of the legend title. This can be either a string (e.g ``"bold"``,
        ``"normal"`` ) or a number ( ``100``, ``200``, ``300``, ..., ``900`` where
        ``"normal"`` = ``400`` and ``"bold"`` = ``700`` ).
    titleLimit : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], float]
        Maximum allowed pixel width of legend titles.

        **Default value:** ``180``.
    titleLineHeight : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], float]
        Line height in pixels for multi-line title text or title text with ``"line-top"`` or
        ``"line-bottom"`` baseline.
    titleOpacity : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], float]
        Opacity of the legend title.
    titleOrient : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], Union[:class:`Orient`, Literal['left', 'right', 'top', 'bottom']]]
        Orientation of the legend title.
    titlePadding : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], float]
        The padding, in pixels, between title and legend.

        **Default value:** ``5``.
    unselectedOpacity : float
        The opacity of unselected legend entries.

        **Default value:** 0.35.
    zindex : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], float]
        The integer z-index indicating the layering of the legend group relative to other
        axis, mark, and legend groups.
    """

    _schema = {"$ref": "#/definitions/LegendConfig"}

    def __init__(
        self,
        aria: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], bool], UndefinedType
        ] = Undefined,
        clipHeight: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], float], UndefinedType
        ] = Undefined,
        columnPadding: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], float], UndefinedType
        ] = Undefined,
        columns: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], float], UndefinedType
        ] = Undefined,
        cornerRadius: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], float], UndefinedType
        ] = Undefined,
        description: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], str], UndefinedType
        ] = Undefined,
        direction: Union[
            Union["Orientation", Literal["horizontal", "vertical"]], UndefinedType
        ] = Undefined,
        disable: Union[bool, UndefinedType] = Undefined,
        fillColor: Union[
            Union[
                Union["ExprRef", "_ParameterProtocol", dict],
                Union[
                    None,
                    Union[
                        "Color",
                        Union[
                            "ColorName",
                            Literal[
                                "black",
                                "silver",
                                "gray",
                                "white",
                                "maroon",
                                "red",
                                "purple",
                                "fuchsia",
                                "green",
                                "lime",
                                "olive",
                                "yellow",
                                "navy",
                                "blue",
                                "teal",
                                "aqua",
                                "orange",
                                "aliceblue",
                                "antiquewhite",
                                "aquamarine",
                                "azure",
                                "beige",
                                "bisque",
                                "blanchedalmond",
                                "blueviolet",
                                "brown",
                                "burlywood",
                                "cadetblue",
                                "chartreuse",
                                "chocolate",
                                "coral",
                                "cornflowerblue",
                                "cornsilk",
                                "crimson",
                                "cyan",
                                "darkblue",
                                "darkcyan",
                                "darkgoldenrod",
                                "darkgray",
                                "darkgreen",
                                "darkgrey",
                                "darkkhaki",
                                "darkmagenta",
                                "darkolivegreen",
                                "darkorange",
                                "darkorchid",
                                "darkred",
                                "darksalmon",
                                "darkseagreen",
                                "darkslateblue",
                                "darkslategray",
                                "darkslategrey",
                                "darkturquoise",
                                "darkviolet",
                                "deeppink",
                                "deepskyblue",
                                "dimgray",
                                "dimgrey",
                                "dodgerblue",
                                "firebrick",
                                "floralwhite",
                                "forestgreen",
                                "gainsboro",
                                "ghostwhite",
                                "gold",
                                "goldenrod",
                                "greenyellow",
                                "grey",
                                "honeydew",
                                "hotpink",
                                "indianred",
                                "indigo",
                                "ivory",
                                "khaki",
                                "lavender",
                                "lavenderblush",
                                "lawngreen",
                                "lemonchiffon",
                                "lightblue",
                                "lightcoral",
                                "lightcyan",
                                "lightgoldenrodyellow",
                                "lightgray",
                                "lightgreen",
                                "lightgrey",
                                "lightpink",
                                "lightsalmon",
                                "lightseagreen",
                                "lightskyblue",
                                "lightslategray",
                                "lightslategrey",
                                "lightsteelblue",
                                "lightyellow",
                                "limegreen",
                                "linen",
                                "magenta",
                                "mediumaquamarine",
                                "mediumblue",
                                "mediumorchid",
                                "mediumpurple",
                                "mediumseagreen",
                                "mediumslateblue",
                                "mediumspringgreen",
                                "mediumturquoise",
                                "mediumvioletred",
                                "midnightblue",
                                "mintcream",
                                "mistyrose",
                                "moccasin",
                                "navajowhite",
                                "oldlace",
                                "olivedrab",
                                "orangered",
                                "orchid",
                                "palegoldenrod",
                                "palegreen",
                                "paleturquoise",
                                "palevioletred",
                                "papayawhip",
                                "peachpuff",
                                "peru",
                                "pink",
                                "plum",
                                "powderblue",
                                "rosybrown",
                                "royalblue",
                                "saddlebrown",
                                "salmon",
                                "sandybrown",
                                "seagreen",
                                "seashell",
                                "sienna",
                                "skyblue",
                                "slateblue",
                                "slategray",
                                "slategrey",
                                "snow",
                                "springgreen",
                                "steelblue",
                                "tan",
                                "thistle",
                                "tomato",
                                "turquoise",
                                "violet",
                                "wheat",
                                "whitesmoke",
                                "yellowgreen",
                                "rebeccapurple",
                            ],
                        ],
                        Union["HexColor", str],
                        str,
                    ],
                ],
            ],
            UndefinedType,
        ] = Undefined,
        gradientDirection: Union[
            Union[
                Union["ExprRef", "_ParameterProtocol", dict],
                Union["Orientation", Literal["horizontal", "vertical"]],
            ],
            UndefinedType,
        ] = Undefined,
        gradientHorizontalMaxLength: Union[float, UndefinedType] = Undefined,
        gradientHorizontalMinLength: Union[float, UndefinedType] = Undefined,
        gradientLabelLimit: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], float], UndefinedType
        ] = Undefined,
        gradientLabelOffset: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], float], UndefinedType
        ] = Undefined,
        gradientLength: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], float], UndefinedType
        ] = Undefined,
        gradientOpacity: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], float], UndefinedType
        ] = Undefined,
        gradientStrokeColor: Union[
            Union[
                Union["ExprRef", "_ParameterProtocol", dict],
                Union[
                    None,
                    Union[
                        "Color",
                        Union[
                            "ColorName",
                            Literal[
                                "black",
                                "silver",
                                "gray",
                                "white",
                                "maroon",
                                "red",
                                "purple",
                                "fuchsia",
                                "green",
                                "lime",
                                "olive",
                                "yellow",
                                "navy",
                                "blue",
                                "teal",
                                "aqua",
                                "orange",
                                "aliceblue",
                                "antiquewhite",
                                "aquamarine",
                                "azure",
                                "beige",
                                "bisque",
                                "blanchedalmond",
                                "blueviolet",
                                "brown",
                                "burlywood",
                                "cadetblue",
                                "chartreuse",
                                "chocolate",
                                "coral",
                                "cornflowerblue",
                                "cornsilk",
                                "crimson",
                                "cyan",
                                "darkblue",
                                "darkcyan",
                                "darkgoldenrod",
                                "darkgray",
                                "darkgreen",
                                "darkgrey",
                                "darkkhaki",
                                "darkmagenta",
                                "darkolivegreen",
                                "darkorange",
                                "darkorchid",
                                "darkred",
                                "darksalmon",
                                "darkseagreen",
                                "darkslateblue",
                                "darkslategray",
                                "darkslategrey",
                                "darkturquoise",
                                "darkviolet",
                                "deeppink",
                                "deepskyblue",
                                "dimgray",
                                "dimgrey",
                                "dodgerblue",
                                "firebrick",
                                "floralwhite",
                                "forestgreen",
                                "gainsboro",
                                "ghostwhite",
                                "gold",
                                "goldenrod",
                                "greenyellow",
                                "grey",
                                "honeydew",
                                "hotpink",
                                "indianred",
                                "indigo",
                                "ivory",
                                "khaki",
                                "lavender",
                                "lavenderblush",
                                "lawngreen",
                                "lemonchiffon",
                                "lightblue",
                                "lightcoral",
                                "lightcyan",
                                "lightgoldenrodyellow",
                                "lightgray",
                                "lightgreen",
                                "lightgrey",
                                "lightpink",
                                "lightsalmon",
                                "lightseagreen",
                                "lightskyblue",
                                "lightslategray",
                                "lightslategrey",
                                "lightsteelblue",
                                "lightyellow",
                                "limegreen",
                                "linen",
                                "magenta",
                                "mediumaquamarine",
                                "mediumblue",
                                "mediumorchid",
                                "mediumpurple",
                                "mediumseagreen",
                                "mediumslateblue",
                                "mediumspringgreen",
                                "mediumturquoise",
                                "mediumvioletred",
                                "midnightblue",
                                "mintcream",
                                "mistyrose",
                                "moccasin",
                                "navajowhite",
                                "oldlace",
                                "olivedrab",
                                "orangered",
                                "orchid",
                                "palegoldenrod",
                                "palegreen",
                                "paleturquoise",
                                "palevioletred",
                                "papayawhip",
                                "peachpuff",
                                "peru",
                                "pink",
                                "plum",
                                "powderblue",
                                "rosybrown",
                                "royalblue",
                                "saddlebrown",
                                "salmon",
                                "sandybrown",
                                "seagreen",
                                "seashell",
                                "sienna",
                                "skyblue",
                                "slateblue",
                                "slategray",
                                "slategrey",
                                "snow",
                                "springgreen",
                                "steelblue",
                                "tan",
                                "thistle",
                                "tomato",
                                "turquoise",
                                "violet",
                                "wheat",
                                "whitesmoke",
                                "yellowgreen",
                                "rebeccapurple",
                            ],
                        ],
                        Union["HexColor", str],
                        str,
                    ],
                ],
            ],
            UndefinedType,
        ] = Undefined,
        gradientStrokeWidth: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], float], UndefinedType
        ] = Undefined,
        gradientThickness: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], float], UndefinedType
        ] = Undefined,
        gradientVerticalMaxLength: Union[float, UndefinedType] = Undefined,
        gradientVerticalMinLength: Union[float, UndefinedType] = Undefined,
        gridAlign: Union[
            Union[
                Union["ExprRef", "_ParameterProtocol", dict],
                Union["LayoutAlign", Literal["all", "each", "none"]],
            ],
            UndefinedType,
        ] = Undefined,
        labelAlign: Union[
            Union[
                Union["Align", Literal["left", "center", "right"]],
                Union["ExprRef", "_ParameterProtocol", dict],
            ],
            UndefinedType,
        ] = Undefined,
        labelBaseline: Union[
            Union[
                Union["ExprRef", "_ParameterProtocol", dict],
                Union[
                    "TextBaseline",
                    Union["Baseline", Literal["top", "middle", "bottom"]],
                    str,
                ],
            ],
            UndefinedType,
        ] = Undefined,
        labelColor: Union[
            Union[
                Union["ExprRef", "_ParameterProtocol", dict],
                Union[
                    None,
                    Union[
                        "Color",
                        Union[
                            "ColorName",
                            Literal[
                                "black",
                                "silver",
                                "gray",
                                "white",
                                "maroon",
                                "red",
                                "purple",
                                "fuchsia",
                                "green",
                                "lime",
                                "olive",
                                "yellow",
                                "navy",
                                "blue",
                                "teal",
                                "aqua",
                                "orange",
                                "aliceblue",
                                "antiquewhite",
                                "aquamarine",
                                "azure",
                                "beige",
                                "bisque",
                                "blanchedalmond",
                                "blueviolet",
                                "brown",
                                "burlywood",
                                "cadetblue",
                                "chartreuse",
                                "chocolate",
                                "coral",
                                "cornflowerblue",
                                "cornsilk",
                                "crimson",
                                "cyan",
                                "darkblue",
                                "darkcyan",
                                "darkgoldenrod",
                                "darkgray",
                                "darkgreen",
                                "darkgrey",
                                "darkkhaki",
                                "darkmagenta",
                                "darkolivegreen",
                                "darkorange",
                                "darkorchid",
                                "darkred",
                                "darksalmon",
                                "darkseagreen",
                                "darkslateblue",
                                "darkslategray",
                                "darkslategrey",
                                "darkturquoise",
                                "darkviolet",
                                "deeppink",
                                "deepskyblue",
                                "dimgray",
                                "dimgrey",
                                "dodgerblue",
                                "firebrick",
                                "floralwhite",
                                "forestgreen",
                                "gainsboro",
                                "ghostwhite",
                                "gold",
                                "goldenrod",
                                "greenyellow",
                                "grey",
                                "honeydew",
                                "hotpink",
                                "indianred",
                                "indigo",
                                "ivory",
                                "khaki",
                                "lavender",
                                "lavenderblush",
                                "lawngreen",
                                "lemonchiffon",
                                "lightblue",
                                "lightcoral",
                                "lightcyan",
                                "lightgoldenrodyellow",
                                "lightgray",
                                "lightgreen",
                                "lightgrey",
                                "lightpink",
                                "lightsalmon",
                                "lightseagreen",
                                "lightskyblue",
                                "lightslategray",
                                "lightslategrey",
                                "lightsteelblue",
                                "lightyellow",
                                "limegreen",
                                "linen",
                                "magenta",
                                "mediumaquamarine",
                                "mediumblue",
                                "mediumorchid",
                                "mediumpurple",
                                "mediumseagreen",
                                "mediumslateblue",
                                "mediumspringgreen",
                                "mediumturquoise",
                                "mediumvioletred",
                                "midnightblue",
                                "mintcream",
                                "mistyrose",
                                "moccasin",
                                "navajowhite",
                                "oldlace",
                                "olivedrab",
                                "orangered",
                                "orchid",
                                "palegoldenrod",
                                "palegreen",
                                "paleturquoise",
                                "palevioletred",
                                "papayawhip",
                                "peachpuff",
                                "peru",
                                "pink",
                                "plum",
                                "powderblue",
                                "rosybrown",
                                "royalblue",
                                "saddlebrown",
                                "salmon",
                                "sandybrown",
                                "seagreen",
                                "seashell",
                                "sienna",
                                "skyblue",
                                "slateblue",
                                "slategray",
                                "slategrey",
                                "snow",
                                "springgreen",
                                "steelblue",
                                "tan",
                                "thistle",
                                "tomato",
                                "turquoise",
                                "violet",
                                "wheat",
                                "whitesmoke",
                                "yellowgreen",
                                "rebeccapurple",
                            ],
                        ],
                        Union["HexColor", str],
                        str,
                    ],
                ],
            ],
            UndefinedType,
        ] = Undefined,
        labelFont: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], str], UndefinedType
        ] = Undefined,
        labelFontSize: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], float], UndefinedType
        ] = Undefined,
        labelFontStyle: Union[
            Union[
                Union["ExprRef", "_ParameterProtocol", dict], Union["FontStyle", str]
            ],
            UndefinedType,
        ] = Undefined,
        labelFontWeight: Union[
            Union[
                Union["ExprRef", "_ParameterProtocol", dict],
                Union[
                    "FontWeight",
                    Literal[
                        "normal",
                        "bold",
                        "lighter",
                        "bolder",
                        100,
                        200,
                        300,
                        400,
                        500,
                        600,
                        700,
                        800,
                        900,
                    ],
                ],
            ],
            UndefinedType,
        ] = Undefined,
        labelLimit: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], float], UndefinedType
        ] = Undefined,
        labelOffset: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], float], UndefinedType
        ] = Undefined,
        labelOpacity: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], float], UndefinedType
        ] = Undefined,
        labelOverlap: Union[
            Union[
                Union["ExprRef", "_ParameterProtocol", dict],
                Union["LabelOverlap", bool, str],
            ],
            UndefinedType,
        ] = Undefined,
        labelPadding: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], float], UndefinedType
        ] = Undefined,
        labelSeparation: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], float], UndefinedType
        ] = Undefined,
        layout: Union[
            Union["ExprRef", "_ParameterProtocol", dict], UndefinedType
        ] = Undefined,
        legendX: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], float], UndefinedType
        ] = Undefined,
        legendY: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], float], UndefinedType
        ] = Undefined,
        offset: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], float], UndefinedType
        ] = Undefined,
        orient: Union[
            Union[
                "LegendOrient",
                Literal[
                    "none",
                    "left",
                    "right",
                    "top",
                    "bottom",
                    "top-left",
                    "top-right",
                    "bottom-left",
                    "bottom-right",
                ],
            ],
            UndefinedType,
        ] = Undefined,
        padding: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], float], UndefinedType
        ] = Undefined,
        rowPadding: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], float], UndefinedType
        ] = Undefined,
        strokeColor: Union[
            Union[
                Union["ExprRef", "_ParameterProtocol", dict],
                Union[
                    None,
                    Union[
                        "Color",
                        Union[
                            "ColorName",
                            Literal[
                                "black",
                                "silver",
                                "gray",
                                "white",
                                "maroon",
                                "red",
                                "purple",
                                "fuchsia",
                                "green",
                                "lime",
                                "olive",
                                "yellow",
                                "navy",
                                "blue",
                                "teal",
                                "aqua",
                                "orange",
                                "aliceblue",
                                "antiquewhite",
                                "aquamarine",
                                "azure",
                                "beige",
                                "bisque",
                                "blanchedalmond",
                                "blueviolet",
                                "brown",
                                "burlywood",
                                "cadetblue",
                                "chartreuse",
                                "chocolate",
                                "coral",
                                "cornflowerblue",
                                "cornsilk",
                                "crimson",
                                "cyan",
                                "darkblue",
                                "darkcyan",
                                "darkgoldenrod",
                                "darkgray",
                                "darkgreen",
                                "darkgrey",
                                "darkkhaki",
                                "darkmagenta",
                                "darkolivegreen",
                                "darkorange",
                                "darkorchid",
                                "darkred",
                                "darksalmon",
                                "darkseagreen",
                                "darkslateblue",
                                "darkslategray",
                                "darkslategrey",
                                "darkturquoise",
                                "darkviolet",
                                "deeppink",
                                "deepskyblue",
                                "dimgray",
                                "dimgrey",
                                "dodgerblue",
                                "firebrick",
                                "floralwhite",
                                "forestgreen",
                                "gainsboro",
                                "ghostwhite",
                                "gold",
                                "goldenrod",
                                "greenyellow",
                                "grey",
                                "honeydew",
                                "hotpink",
                                "indianred",
                                "indigo",
                                "ivory",
                                "khaki",
                                "lavender",
                                "lavenderblush",
                                "lawngreen",
                                "lemonchiffon",
                                "lightblue",
                                "lightcoral",
                                "lightcyan",
                                "lightgoldenrodyellow",
                                "lightgray",
                                "lightgreen",
                                "lightgrey",
                                "lightpink",
                                "lightsalmon",
                                "lightseagreen",
                                "lightskyblue",
                                "lightslategray",
                                "lightslategrey",
                                "lightsteelblue",
                                "lightyellow",
                                "limegreen",
                                "linen",
                                "magenta",
                                "mediumaquamarine",
                                "mediumblue",
                                "mediumorchid",
                                "mediumpurple",
                                "mediumseagreen",
                                "mediumslateblue",
                                "mediumspringgreen",
                                "mediumturquoise",
                                "mediumvioletred",
                                "midnightblue",
                                "mintcream",
                                "mistyrose",
                                "moccasin",
                                "navajowhite",
                                "oldlace",
                                "olivedrab",
                                "orangered",
                                "orchid",
                                "palegoldenrod",
                                "palegreen",
                                "paleturquoise",
                                "palevioletred",
                                "papayawhip",
                                "peachpuff",
                                "peru",
                                "pink",
                                "plum",
                                "powderblue",
                                "rosybrown",
                                "royalblue",
                                "saddlebrown",
                                "salmon",
                                "sandybrown",
                                "seagreen",
                                "seashell",
                                "sienna",
                                "skyblue",
                                "slateblue",
                                "slategray",
                                "slategrey",
                                "snow",
                                "springgreen",
                                "steelblue",
                                "tan",
                                "thistle",
                                "tomato",
                                "turquoise",
                                "violet",
                                "wheat",
                                "whitesmoke",
                                "yellowgreen",
                                "rebeccapurple",
                            ],
                        ],
                        Union["HexColor", str],
                        str,
                    ],
                ],
            ],
            UndefinedType,
        ] = Undefined,
        strokeDash: Union[
            Union[List[float], Union["ExprRef", "_ParameterProtocol", dict]],
            UndefinedType,
        ] = Undefined,
        strokeWidth: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], float], UndefinedType
        ] = Undefined,
        symbolBaseFillColor: Union[
            Union[
                Union["ExprRef", "_ParameterProtocol", dict],
                Union[
                    None,
                    Union[
                        "Color",
                        Union[
                            "ColorName",
                            Literal[
                                "black",
                                "silver",
                                "gray",
                                "white",
                                "maroon",
                                "red",
                                "purple",
                                "fuchsia",
                                "green",
                                "lime",
                                "olive",
                                "yellow",
                                "navy",
                                "blue",
                                "teal",
                                "aqua",
                                "orange",
                                "aliceblue",
                                "antiquewhite",
                                "aquamarine",
                                "azure",
                                "beige",
                                "bisque",
                                "blanchedalmond",
                                "blueviolet",
                                "brown",
                                "burlywood",
                                "cadetblue",
                                "chartreuse",
                                "chocolate",
                                "coral",
                                "cornflowerblue",
                                "cornsilk",
                                "crimson",
                                "cyan",
                                "darkblue",
                                "darkcyan",
                                "darkgoldenrod",
                                "darkgray",
                                "darkgreen",
                                "darkgrey",
                                "darkkhaki",
                                "darkmagenta",
                                "darkolivegreen",
                                "darkorange",
                                "darkorchid",
                                "darkred",
                                "darksalmon",
                                "darkseagreen",
                                "darkslateblue",
                                "darkslategray",
                                "darkslategrey",
                                "darkturquoise",
                                "darkviolet",
                                "deeppink",
                                "deepskyblue",
                                "dimgray",
                                "dimgrey",
                                "dodgerblue",
                                "firebrick",
                                "floralwhite",
                                "forestgreen",
                                "gainsboro",
                                "ghostwhite",
                                "gold",
                                "goldenrod",
                                "greenyellow",
                                "grey",
                                "honeydew",
                                "hotpink",
                                "indianred",
                                "indigo",
                                "ivory",
                                "khaki",
                                "lavender",
                                "lavenderblush",
                                "lawngreen",
                                "lemonchiffon",
                                "lightblue",
                                "lightcoral",
                                "lightcyan",
                                "lightgoldenrodyellow",
                                "lightgray",
                                "lightgreen",
                                "lightgrey",
                                "lightpink",
                                "lightsalmon",
                                "lightseagreen",
                                "lightskyblue",
                                "lightslategray",
                                "lightslategrey",
                                "lightsteelblue",
                                "lightyellow",
                                "limegreen",
                                "linen",
                                "magenta",
                                "mediumaquamarine",
                                "mediumblue",
                                "mediumorchid",
                                "mediumpurple",
                                "mediumseagreen",
                                "mediumslateblue",
                                "mediumspringgreen",
                                "mediumturquoise",
                                "mediumvioletred",
                                "midnightblue",
                                "mintcream",
                                "mistyrose",
                                "moccasin",
                                "navajowhite",
                                "oldlace",
                                "olivedrab",
                                "orangered",
                                "orchid",
                                "palegoldenrod",
                                "palegreen",
                                "paleturquoise",
                                "palevioletred",
                                "papayawhip",
                                "peachpuff",
                                "peru",
                                "pink",
                                "plum",
                                "powderblue",
                                "rosybrown",
                                "royalblue",
                                "saddlebrown",
                                "salmon",
                                "sandybrown",
                                "seagreen",
                                "seashell",
                                "sienna",
                                "skyblue",
                                "slateblue",
                                "slategray",
                                "slategrey",
                                "snow",
                                "springgreen",
                                "steelblue",
                                "tan",
                                "thistle",
                                "tomato",
                                "turquoise",
                                "violet",
                                "wheat",
                                "whitesmoke",
                                "yellowgreen",
                                "rebeccapurple",
                            ],
                        ],
                        Union["HexColor", str],
                        str,
                    ],
                ],
            ],
            UndefinedType,
        ] = Undefined,
        symbolBaseStrokeColor: Union[
            Union[
                Union["ExprRef", "_ParameterProtocol", dict],
                Union[
                    None,
                    Union[
                        "Color",
                        Union[
                            "ColorName",
                            Literal[
                                "black",
                                "silver",
                                "gray",
                                "white",
                                "maroon",
                                "red",
                                "purple",
                                "fuchsia",
                                "green",
                                "lime",
                                "olive",
                                "yellow",
                                "navy",
                                "blue",
                                "teal",
                                "aqua",
                                "orange",
                                "aliceblue",
                                "antiquewhite",
                                "aquamarine",
                                "azure",
                                "beige",
                                "bisque",
                                "blanchedalmond",
                                "blueviolet",
                                "brown",
                                "burlywood",
                                "cadetblue",
                                "chartreuse",
                                "chocolate",
                                "coral",
                                "cornflowerblue",
                                "cornsilk",
                                "crimson",
                                "cyan",
                                "darkblue",
                                "darkcyan",
                                "darkgoldenrod",
                                "darkgray",
                                "darkgreen",
                                "darkgrey",
                                "darkkhaki",
                                "darkmagenta",
                                "darkolivegreen",
                                "darkorange",
                                "darkorchid",
                                "darkred",
                                "darksalmon",
                                "darkseagreen",
                                "darkslateblue",
                                "darkslategray",
                                "darkslategrey",
                                "darkturquoise",
                                "darkviolet",
                                "deeppink",
                                "deepskyblue",
                                "dimgray",
                                "dimgrey",
                                "dodgerblue",
                                "firebrick",
                                "floralwhite",
                                "forestgreen",
                                "gainsboro",
                                "ghostwhite",
                                "gold",
                                "goldenrod",
                                "greenyellow",
                                "grey",
                                "honeydew",
                                "hotpink",
                                "indianred",
                                "indigo",
                                "ivory",
                                "khaki",
                                "lavender",
                                "lavenderblush",
                                "lawngreen",
                                "lemonchiffon",
                                "lightblue",
                                "lightcoral",
                                "lightcyan",
                                "lightgoldenrodyellow",
                                "lightgray",
                                "lightgreen",
                                "lightgrey",
                                "lightpink",
                                "lightsalmon",
                                "lightseagreen",
                                "lightskyblue",
                                "lightslategray",
                                "lightslategrey",
                                "lightsteelblue",
                                "lightyellow",
                                "limegreen",
                                "linen",
                                "magenta",
                                "mediumaquamarine",
                                "mediumblue",
                                "mediumorchid",
                                "mediumpurple",
                                "mediumseagreen",
                                "mediumslateblue",
                                "mediumspringgreen",
                                "mediumturquoise",
                                "mediumvioletred",
                                "midnightblue",
                                "mintcream",
                                "mistyrose",
                                "moccasin",
                                "navajowhite",
                                "oldlace",
                                "olivedrab",
                                "orangered",
                                "orchid",
                                "palegoldenrod",
                                "palegreen",
                                "paleturquoise",
                                "palevioletred",
                                "papayawhip",
                                "peachpuff",
                                "peru",
                                "pink",
                                "plum",
                                "powderblue",
                                "rosybrown",
                                "royalblue",
                                "saddlebrown",
                                "salmon",
                                "sandybrown",
                                "seagreen",
                                "seashell",
                                "sienna",
                                "skyblue",
                                "slateblue",
                                "slategray",
                                "slategrey",
                                "snow",
                                "springgreen",
                                "steelblue",
                                "tan",
                                "thistle",
                                "tomato",
                                "turquoise",
                                "violet",
                                "wheat",
                                "whitesmoke",
                                "yellowgreen",
                                "rebeccapurple",
                            ],
                        ],
                        Union["HexColor", str],
                        str,
                    ],
                ],
            ],
            UndefinedType,
        ] = Undefined,
        symbolDash: Union[
            Union[List[float], Union["ExprRef", "_ParameterProtocol", dict]],
            UndefinedType,
        ] = Undefined,
        symbolDashOffset: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], float], UndefinedType
        ] = Undefined,
        symbolDirection: Union[
            Union[
                Union["ExprRef", "_ParameterProtocol", dict],
                Union["Orientation", Literal["horizontal", "vertical"]],
            ],
            UndefinedType,
        ] = Undefined,
        symbolFillColor: Union[
            Union[
                Union["ExprRef", "_ParameterProtocol", dict],
                Union[
                    None,
                    Union[
                        "Color",
                        Union[
                            "ColorName",
                            Literal[
                                "black",
                                "silver",
                                "gray",
                                "white",
                                "maroon",
                                "red",
                                "purple",
                                "fuchsia",
                                "green",
                                "lime",
                                "olive",
                                "yellow",
                                "navy",
                                "blue",
                                "teal",
                                "aqua",
                                "orange",
                                "aliceblue",
                                "antiquewhite",
                                "aquamarine",
                                "azure",
                                "beige",
                                "bisque",
                                "blanchedalmond",
                                "blueviolet",
                                "brown",
                                "burlywood",
                                "cadetblue",
                                "chartreuse",
                                "chocolate",
                                "coral",
                                "cornflowerblue",
                                "cornsilk",
                                "crimson",
                                "cyan",
                                "darkblue",
                                "darkcyan",
                                "darkgoldenrod",
                                "darkgray",
                                "darkgreen",
                                "darkgrey",
                                "darkkhaki",
                                "darkmagenta",
                                "darkolivegreen",
                                "darkorange",
                                "darkorchid",
                                "darkred",
                                "darksalmon",
                                "darkseagreen",
                                "darkslateblue",
                                "darkslategray",
                                "darkslategrey",
                                "darkturquoise",
                                "darkviolet",
                                "deeppink",
                                "deepskyblue",
                                "dimgray",
                                "dimgrey",
                                "dodgerblue",
                                "firebrick",
                                "floralwhite",
                                "forestgreen",
                                "gainsboro",
                                "ghostwhite",
                                "gold",
                                "goldenrod",
                                "greenyellow",
                                "grey",
                                "honeydew",
                                "hotpink",
                                "indianred",
                                "indigo",
                                "ivory",
                                "khaki",
                                "lavender",
                                "lavenderblush",
                                "lawngreen",
                                "lemonchiffon",
                                "lightblue",
                                "lightcoral",
                                "lightcyan",
                                "lightgoldenrodyellow",
                                "lightgray",
                                "lightgreen",
                                "lightgrey",
                                "lightpink",
                                "lightsalmon",
                                "lightseagreen",
                                "lightskyblue",
                                "lightslategray",
                                "lightslategrey",
                                "lightsteelblue",
                                "lightyellow",
                                "limegreen",
                                "linen",
                                "magenta",
                                "mediumaquamarine",
                                "mediumblue",
                                "mediumorchid",
                                "mediumpurple",
                                "mediumseagreen",
                                "mediumslateblue",
                                "mediumspringgreen",
                                "mediumturquoise",
                                "mediumvioletred",
                                "midnightblue",
                                "mintcream",
                                "mistyrose",
                                "moccasin",
                                "navajowhite",
                                "oldlace",
                                "olivedrab",
                                "orangered",
                                "orchid",
                                "palegoldenrod",
                                "palegreen",
                                "paleturquoise",
                                "palevioletred",
                                "papayawhip",
                                "peachpuff",
                                "peru",
                                "pink",
                                "plum",
                                "powderblue",
                                "rosybrown",
                                "royalblue",
                                "saddlebrown",
                                "salmon",
                                "sandybrown",
                                "seagreen",
                                "seashell",
                                "sienna",
                                "skyblue",
                                "slateblue",
                                "slategray",
                                "slategrey",
                                "snow",
                                "springgreen",
                                "steelblue",
                                "tan",
                                "thistle",
                                "tomato",
                                "turquoise",
                                "violet",
                                "wheat",
                                "whitesmoke",
                                "yellowgreen",
                                "rebeccapurple",
                            ],
                        ],
                        Union["HexColor", str],
                        str,
                    ],
                ],
            ],
            UndefinedType,
        ] = Undefined,
        symbolLimit: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], float], UndefinedType
        ] = Undefined,
        symbolOffset: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], float], UndefinedType
        ] = Undefined,
        symbolOpacity: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], float], UndefinedType
        ] = Undefined,
        symbolSize: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], float], UndefinedType
        ] = Undefined,
        symbolStrokeColor: Union[
            Union[
                Union["ExprRef", "_ParameterProtocol", dict],
                Union[
                    None,
                    Union[
                        "Color",
                        Union[
                            "ColorName",
                            Literal[
                                "black",
                                "silver",
                                "gray",
                                "white",
                                "maroon",
                                "red",
                                "purple",
                                "fuchsia",
                                "green",
                                "lime",
                                "olive",
                                "yellow",
                                "navy",
                                "blue",
                                "teal",
                                "aqua",
                                "orange",
                                "aliceblue",
                                "antiquewhite",
                                "aquamarine",
                                "azure",
                                "beige",
                                "bisque",
                                "blanchedalmond",
                                "blueviolet",
                                "brown",
                                "burlywood",
                                "cadetblue",
                                "chartreuse",
                                "chocolate",
                                "coral",
                                "cornflowerblue",
                                "cornsilk",
                                "crimson",
                                "cyan",
                                "darkblue",
                                "darkcyan",
                                "darkgoldenrod",
                                "darkgray",
                                "darkgreen",
                                "darkgrey",
                                "darkkhaki",
                                "darkmagenta",
                                "darkolivegreen",
                                "darkorange",
                                "darkorchid",
                                "darkred",
                                "darksalmon",
                                "darkseagreen",
                                "darkslateblue",
                                "darkslategray",
                                "darkslategrey",
                                "darkturquoise",
                                "darkviolet",
                                "deeppink",
                                "deepskyblue",
                                "dimgray",
                                "dimgrey",
                                "dodgerblue",
                                "firebrick",
                                "floralwhite",
                                "forestgreen",
                                "gainsboro",
                                "ghostwhite",
                                "gold",
                                "goldenrod",
                                "greenyellow",
                                "grey",
                                "honeydew",
                                "hotpink",
                                "indianred",
                                "indigo",
                                "ivory",
                                "khaki",
                                "lavender",
                                "lavenderblush",
                                "lawngreen",
                                "lemonchiffon",
                                "lightblue",
                                "lightcoral",
                                "lightcyan",
                                "lightgoldenrodyellow",
                                "lightgray",
                                "lightgreen",
                                "lightgrey",
                                "lightpink",
                                "lightsalmon",
                                "lightseagreen",
                                "lightskyblue",
                                "lightslategray",
                                "lightslategrey",
                                "lightsteelblue",
                                "lightyellow",
                                "limegreen",
                                "linen",
                                "magenta",
                                "mediumaquamarine",
                                "mediumblue",
                                "mediumorchid",
                                "mediumpurple",
                                "mediumseagreen",
                                "mediumslateblue",
                                "mediumspringgreen",
                                "mediumturquoise",
                                "mediumvioletred",
                                "midnightblue",
                                "mintcream",
                                "mistyrose",
                                "moccasin",
                                "navajowhite",
                                "oldlace",
                                "olivedrab",
                                "orangered",
                                "orchid",
                                "palegoldenrod",
                                "palegreen",
                                "paleturquoise",
                                "palevioletred",
                                "papayawhip",
                                "peachpuff",
                                "peru",
                                "pink",
                                "plum",
                                "powderblue",
                                "rosybrown",
                                "royalblue",
                                "saddlebrown",
                                "salmon",
                                "sandybrown",
                                "seagreen",
                                "seashell",
                                "sienna",
                                "skyblue",
                                "slateblue",
                                "slategray",
                                "slategrey",
                                "snow",
                                "springgreen",
                                "steelblue",
                                "tan",
                                "thistle",
                                "tomato",
                                "turquoise",
                                "violet",
                                "wheat",
                                "whitesmoke",
                                "yellowgreen",
                                "rebeccapurple",
                            ],
                        ],
                        Union["HexColor", str],
                        str,
                    ],
                ],
            ],
            UndefinedType,
        ] = Undefined,
        symbolStrokeWidth: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], float], UndefinedType
        ] = Undefined,
        symbolType: Union[
            Union[
                Union["ExprRef", "_ParameterProtocol", dict], Union["SymbolShape", str]
            ],
            UndefinedType,
        ] = Undefined,
        tickCount: Union[
            Union[
                Union["ExprRef", "_ParameterProtocol", dict],
                Union[
                    "TickCount",
                    Union[
                        "TimeInterval",
                        Literal[
                            "millisecond",
                            "second",
                            "minute",
                            "hour",
                            "day",
                            "week",
                            "month",
                            "year",
                        ],
                    ],
                    Union["TimeIntervalStep", dict],
                    float,
                ],
            ],
            UndefinedType,
        ] = Undefined,
        title: Union[None, UndefinedType] = Undefined,
        titleAlign: Union[
            Union[
                Union["Align", Literal["left", "center", "right"]],
                Union["ExprRef", "_ParameterProtocol", dict],
            ],
            UndefinedType,
        ] = Undefined,
        titleAnchor: Union[
            Union[
                Union["ExprRef", "_ParameterProtocol", dict],
                Union["TitleAnchor", Literal[None, "start", "middle", "end"]],
            ],
            UndefinedType,
        ] = Undefined,
        titleBaseline: Union[
            Union[
                Union["ExprRef", "_ParameterProtocol", dict],
                Union[
                    "TextBaseline",
                    Union["Baseline", Literal["top", "middle", "bottom"]],
                    str,
                ],
            ],
            UndefinedType,
        ] = Undefined,
        titleColor: Union[
            Union[
                Union["ExprRef", "_ParameterProtocol", dict],
                Union[
                    None,
                    Union[
                        "Color",
                        Union[
                            "ColorName",
                            Literal[
                                "black",
                                "silver",
                                "gray",
                                "white",
                                "maroon",
                                "red",
                                "purple",
                                "fuchsia",
                                "green",
                                "lime",
                                "olive",
                                "yellow",
                                "navy",
                                "blue",
                                "teal",
                                "aqua",
                                "orange",
                                "aliceblue",
                                "antiquewhite",
                                "aquamarine",
                                "azure",
                                "beige",
                                "bisque",
                                "blanchedalmond",
                                "blueviolet",
                                "brown",
                                "burlywood",
                                "cadetblue",
                                "chartreuse",
                                "chocolate",
                                "coral",
                                "cornflowerblue",
                                "cornsilk",
                                "crimson",
                                "cyan",
                                "darkblue",
                                "darkcyan",
                                "darkgoldenrod",
                                "darkgray",
                                "darkgreen",
                                "darkgrey",
                                "darkkhaki",
                                "darkmagenta",
                                "darkolivegreen",
                                "darkorange",
                                "darkorchid",
                                "darkred",
                                "darksalmon",
                                "darkseagreen",
                                "darkslateblue",
                                "darkslategray",
                                "darkslategrey",
                                "darkturquoise",
                                "darkviolet",
                                "deeppink",
                                "deepskyblue",
                                "dimgray",
                                "dimgrey",
                                "dodgerblue",
                                "firebrick",
                                "floralwhite",
                                "forestgreen",
                                "gainsboro",
                                "ghostwhite",
                                "gold",
                                "goldenrod",
                                "greenyellow",
                                "grey",
                                "honeydew",
                                "hotpink",
                                "indianred",
                                "indigo",
                                "ivory",
                                "khaki",
                                "lavender",
                                "lavenderblush",
                                "lawngreen",
                                "lemonchiffon",
                                "lightblue",
                                "lightcoral",
                                "lightcyan",
                                "lightgoldenrodyellow",
                                "lightgray",
                                "lightgreen",
                                "lightgrey",
                                "lightpink",
                                "lightsalmon",
                                "lightseagreen",
                                "lightskyblue",
                                "lightslategray",
                                "lightslategrey",
                                "lightsteelblue",
                                "lightyellow",
                                "limegreen",
                                "linen",
                                "magenta",
                                "mediumaquamarine",
                                "mediumblue",
                                "mediumorchid",
                                "mediumpurple",
                                "mediumseagreen",
                                "mediumslateblue",
                                "mediumspringgreen",
                                "mediumturquoise",
                                "mediumvioletred",
                                "midnightblue",
                                "mintcream",
                                "mistyrose",
                                "moccasin",
                                "navajowhite",
                                "oldlace",
                                "olivedrab",
                                "orangered",
                                "orchid",
                                "palegoldenrod",
                                "palegreen",
                                "paleturquoise",
                                "palevioletred",
                                "papayawhip",
                                "peachpuff",
                                "peru",
                                "pink",
                                "plum",
                                "powderblue",
                                "rosybrown",
                                "royalblue",
                                "saddlebrown",
                                "salmon",
                                "sandybrown",
                                "seagreen",
                                "seashell",
                                "sienna",
                                "skyblue",
                                "slateblue",
                                "slategray",
                                "slategrey",
                                "snow",
                                "springgreen",
                                "steelblue",
                                "tan",
                                "thistle",
                                "tomato",
                                "turquoise",
                                "violet",
                                "wheat",
                                "whitesmoke",
                                "yellowgreen",
                                "rebeccapurple",
                            ],
                        ],
                        Union["HexColor", str],
                        str,
                    ],
                ],
            ],
            UndefinedType,
        ] = Undefined,
        titleFont: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], str], UndefinedType
        ] = Undefined,
        titleFontSize: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], float], UndefinedType
        ] = Undefined,
        titleFontStyle: Union[
            Union[
                Union["ExprRef", "_ParameterProtocol", dict], Union["FontStyle", str]
            ],
            UndefinedType,
        ] = Undefined,
        titleFontWeight: Union[
            Union[
                Union["ExprRef", "_ParameterProtocol", dict],
                Union[
                    "FontWeight",
                    Literal[
                        "normal",
                        "bold",
                        "lighter",
                        "bolder",
                        100,
                        200,
                        300,
                        400,
                        500,
                        600,
                        700,
                        800,
                        900,
                    ],
                ],
            ],
            UndefinedType,
        ] = Undefined,
        titleLimit: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], float], UndefinedType
        ] = Undefined,
        titleLineHeight: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], float], UndefinedType
        ] = Undefined,
        titleOpacity: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], float], UndefinedType
        ] = Undefined,
        titleOrient: Union[
            Union[
                Union["ExprRef", "_ParameterProtocol", dict],
                Union["Orient", Literal["left", "right", "top", "bottom"]],
            ],
            UndefinedType,
        ] = Undefined,
        titlePadding: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], float], UndefinedType
        ] = Undefined,
        unselectedOpacity: Union[float, UndefinedType] = Undefined,
        zindex: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], float], UndefinedType
        ] = Undefined,
        **kwds
    ):
        super(LegendConfig, self).__init__(
            aria=aria,
            clipHeight=clipHeight,
            columnPadding=columnPadding,
            columns=columns,
            cornerRadius=cornerRadius,
            description=description,
            direction=direction,
            disable=disable,
            fillColor=fillColor,
            gradientDirection=gradientDirection,
            gradientHorizontalMaxLength=gradientHorizontalMaxLength,
            gradientHorizontalMinLength=gradientHorizontalMinLength,
            gradientLabelLimit=gradientLabelLimit,
            gradientLabelOffset=gradientLabelOffset,
            gradientLength=gradientLength,
            gradientOpacity=gradientOpacity,
            gradientStrokeColor=gradientStrokeColor,
            gradientStrokeWidth=gradientStrokeWidth,
            gradientThickness=gradientThickness,
            gradientVerticalMaxLength=gradientVerticalMaxLength,
            gradientVerticalMinLength=gradientVerticalMinLength,
            gridAlign=gridAlign,
            labelAlign=labelAlign,
            labelBaseline=labelBaseline,
            labelColor=labelColor,
            labelFont=labelFont,
            labelFontSize=labelFontSize,
            labelFontStyle=labelFontStyle,
            labelFontWeight=labelFontWeight,
            labelLimit=labelLimit,
            labelOffset=labelOffset,
            labelOpacity=labelOpacity,
            labelOverlap=labelOverlap,
            labelPadding=labelPadding,
            labelSeparation=labelSeparation,
            layout=layout,
            legendX=legendX,
            legendY=legendY,
            offset=offset,
            orient=orient,
            padding=padding,
            rowPadding=rowPadding,
            strokeColor=strokeColor,
            strokeDash=strokeDash,
            strokeWidth=strokeWidth,
            symbolBaseFillColor=symbolBaseFillColor,
            symbolBaseStrokeColor=symbolBaseStrokeColor,
            symbolDash=symbolDash,
            symbolDashOffset=symbolDashOffset,
            symbolDirection=symbolDirection,
            symbolFillColor=symbolFillColor,
            symbolLimit=symbolLimit,
            symbolOffset=symbolOffset,
            symbolOpacity=symbolOpacity,
            symbolSize=symbolSize,
            symbolStrokeColor=symbolStrokeColor,
            symbolStrokeWidth=symbolStrokeWidth,
            symbolType=symbolType,
            tickCount=tickCount,
            title=title,
            titleAlign=titleAlign,
            titleAnchor=titleAnchor,
            titleBaseline=titleBaseline,
            titleColor=titleColor,
            titleFont=titleFont,
            titleFontSize=titleFontSize,
            titleFontStyle=titleFontStyle,
            titleFontWeight=titleFontWeight,
            titleLimit=titleLimit,
            titleLineHeight=titleLineHeight,
            titleOpacity=titleOpacity,
            titleOrient=titleOrient,
            titlePadding=titlePadding,
            unselectedOpacity=unselectedOpacity,
            zindex=zindex,
            **kwds
        )


class LegendOrient(VegaLiteSchema):
    """LegendOrient schema wrapper

    Union[:class:`LegendOrient`, Literal['none', 'left', 'right', 'top', 'bottom', 'top-left',
    'top-right', 'bottom-left', 'bottom-right']]
    """

    _schema = {"$ref": "#/definitions/LegendOrient"}

    def __init__(self, *args):
        super(LegendOrient, self).__init__(*args)


class LegendResolveMap(VegaLiteSchema):
    """LegendResolveMap schema wrapper

    Union[:class:`LegendResolveMap`, Dict[required=[]]]

    Parameters
    ----------

    angle : Union[:class:`ResolveMode`, Literal['independent', 'shared']]

    color : Union[:class:`ResolveMode`, Literal['independent', 'shared']]

    fill : Union[:class:`ResolveMode`, Literal['independent', 'shared']]

    fillOpacity : Union[:class:`ResolveMode`, Literal['independent', 'shared']]

    opacity : Union[:class:`ResolveMode`, Literal['independent', 'shared']]

    shape : Union[:class:`ResolveMode`, Literal['independent', 'shared']]

    size : Union[:class:`ResolveMode`, Literal['independent', 'shared']]

    stroke : Union[:class:`ResolveMode`, Literal['independent', 'shared']]

    strokeDash : Union[:class:`ResolveMode`, Literal['independent', 'shared']]

    strokeOpacity : Union[:class:`ResolveMode`, Literal['independent', 'shared']]

    strokeWidth : Union[:class:`ResolveMode`, Literal['independent', 'shared']]

    """

    _schema = {"$ref": "#/definitions/LegendResolveMap"}

    def __init__(
        self,
        angle: Union[
            Union["ResolveMode", Literal["independent", "shared"]], UndefinedType
        ] = Undefined,
        color: Union[
            Union["ResolveMode", Literal["independent", "shared"]], UndefinedType
        ] = Undefined,
        fill: Union[
            Union["ResolveMode", Literal["independent", "shared"]], UndefinedType
        ] = Undefined,
        fillOpacity: Union[
            Union["ResolveMode", Literal["independent", "shared"]], UndefinedType
        ] = Undefined,
        opacity: Union[
            Union["ResolveMode", Literal["independent", "shared"]], UndefinedType
        ] = Undefined,
        shape: Union[
            Union["ResolveMode", Literal["independent", "shared"]], UndefinedType
        ] = Undefined,
        size: Union[
            Union["ResolveMode", Literal["independent", "shared"]], UndefinedType
        ] = Undefined,
        stroke: Union[
            Union["ResolveMode", Literal["independent", "shared"]], UndefinedType
        ] = Undefined,
        strokeDash: Union[
            Union["ResolveMode", Literal["independent", "shared"]], UndefinedType
        ] = Undefined,
        strokeOpacity: Union[
            Union["ResolveMode", Literal["independent", "shared"]], UndefinedType
        ] = Undefined,
        strokeWidth: Union[
            Union["ResolveMode", Literal["independent", "shared"]], UndefinedType
        ] = Undefined,
        **kwds
    ):
        super(LegendResolveMap, self).__init__(
            angle=angle,
            color=color,
            fill=fill,
            fillOpacity=fillOpacity,
            opacity=opacity,
            shape=shape,
            size=size,
            stroke=stroke,
            strokeDash=strokeDash,
            strokeOpacity=strokeOpacity,
            strokeWidth=strokeWidth,
            **kwds
        )


class LegendStreamBinding(LegendBinding):
    """LegendStreamBinding schema wrapper

    Union[:class:`LegendStreamBinding`, Dict[required=[legend]]]

    Parameters
    ----------

    legend : Union[Union[:class:`Stream`, Union[:class:`DerivedStream`, Dict[required=[stream]]], Union[:class:`EventStream`, Dict[required=[source, type]], Dict[required=[type]]], Union[:class:`MergedStream`, Dict[required=[merge]]]], str]

    """

    _schema = {"$ref": "#/definitions/LegendStreamBinding"}

    def __init__(
        self,
        legend: Union[
            Union[
                Union[
                    "Stream",
                    Union["DerivedStream", dict],
                    Union["EventStream", dict],
                    Union["MergedStream", dict],
                ],
                str,
            ],
            UndefinedType,
        ] = Undefined,
        **kwds
    ):
        super(LegendStreamBinding, self).__init__(legend=legend, **kwds)


class LineConfig(AnyMarkConfig):
    """LineConfig schema wrapper

    Union[:class:`LineConfig`, Dict[required=[]]]

    Parameters
    ----------

    align : Union[Union[:class:`Align`, Literal['left', 'center', 'right']], Union[:class:`ExprRef`, Dict[required=[expr]]]]
        The horizontal alignment of the text or ranged marks (area, bar, image, rect, rule).
        One of ``"left"``, ``"right"``, ``"center"``.

        **Note:** Expression reference is *not* supported for range marks.
    angle : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], float]
        The rotation angle of the text, in degrees.
    aria : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], bool]
        A boolean flag indicating if `ARIA attributes
        <https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA>`__ should be
        included (SVG output only). If ``false``, the "aria-hidden" attribute will be set on
        the output SVG element, removing the mark item from the ARIA accessibility tree.
    ariaRole : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], str]
        Sets the type of user interface element of the mark item for `ARIA accessibility
        <https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA>`__ (SVG output
        only). If specified, this property determines the "role" attribute. Warning: this
        property is experimental and may be changed in the future.
    ariaRoleDescription : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], str]
        A human-readable, author-localized description for the role of the mark item for
        `ARIA accessibility
        <https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA>`__ (SVG output
        only). If specified, this property determines the "aria-roledescription" attribute.
        Warning: this property is experimental and may be changed in the future.
    aspect : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], bool]
        Whether to keep aspect ratio of image marks.
    baseline : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], Union[:class:`TextBaseline`, Union[:class:`Baseline`, Literal['top', 'middle', 'bottom']], str]]
        For text marks, the vertical text baseline. One of ``"alphabetic"`` (default),
        ``"top"``, ``"middle"``, ``"bottom"``, ``"line-top"``, ``"line-bottom"``, or an
        expression reference that provides one of the valid values. The ``"line-top"`` and
        ``"line-bottom"`` values operate similarly to ``"top"`` and ``"bottom"``, but are
        calculated relative to the ``lineHeight`` rather than ``fontSize`` alone.

        For range marks, the vertical alignment of the marks. One of ``"top"``,
        ``"middle"``, ``"bottom"``.

        **Note:** Expression reference is *not* supported for range marks.
    blend : Union[Union[:class:`Blend`, Literal[None, 'multiply', 'screen', 'overlay', 'darken', 'lighten', 'color-dodge', 'color-burn', 'hard-light', 'soft-light', 'difference', 'exclusion', 'hue', 'saturation', 'color', 'luminosity']], Union[:class:`ExprRef`, Dict[required=[expr]]]]
        The color blend mode for drawing an item on its current background. Any valid `CSS
        mix-blend-mode <https://developer.mozilla.org/en-US/docs/Web/CSS/mix-blend-mode>`__
        value can be used.

        __Default value:__ ``"source-over"``
    color : Union[Union[:class:`Color`, Union[:class:`ColorName`, Literal['black', 'silver', 'gray', 'white', 'maroon', 'red', 'purple', 'fuchsia', 'green', 'lime', 'olive', 'yellow', 'navy', 'blue', 'teal', 'aqua', 'orange', 'aliceblue', 'antiquewhite', 'aquamarine', 'azure', 'beige', 'bisque', 'blanchedalmond', 'blueviolet', 'brown', 'burlywood', 'cadetblue', 'chartreuse', 'chocolate', 'coral', 'cornflowerblue', 'cornsilk', 'crimson', 'cyan', 'darkblue', 'darkcyan', 'darkgoldenrod', 'darkgray', 'darkgreen', 'darkgrey', 'darkkhaki', 'darkmagenta', 'darkolivegreen', 'darkorange', 'darkorchid', 'darkred', 'darksalmon', 'darkseagreen', 'darkslateblue', 'darkslategray', 'darkslategrey', 'darkturquoise', 'darkviolet', 'deeppink', 'deepskyblue', 'dimgray', 'dimgrey', 'dodgerblue', 'firebrick', 'floralwhite', 'forestgreen', 'gainsboro', 'ghostwhite', 'gold', 'goldenrod', 'greenyellow', 'grey', 'honeydew', 'hotpink', 'indianred', 'indigo', 'ivory', 'khaki', 'lavender', 'lavenderblush', 'lawngreen', 'lemonchiffon', 'lightblue', 'lightcoral', 'lightcyan', 'lightgoldenrodyellow', 'lightgray', 'lightgreen', 'lightgrey', 'lightpink', 'lightsalmon', 'lightseagreen', 'lightskyblue', 'lightslategray', 'lightslategrey', 'lightsteelblue', 'lightyellow', 'limegreen', 'linen', 'magenta', 'mediumaquamarine', 'mediumblue', 'mediumorchid', 'mediumpurple', 'mediumseagreen', 'mediumslateblue', 'mediumspringgreen', 'mediumturquoise', 'mediumvioletred', 'midnightblue', 'mintcream', 'mistyrose', 'moccasin', 'navajowhite', 'oldlace', 'olivedrab', 'orangered', 'orchid', 'palegoldenrod', 'palegreen', 'paleturquoise', 'palevioletred', 'papayawhip', 'peachpuff', 'peru', 'pink', 'plum', 'powderblue', 'rosybrown', 'royalblue', 'saddlebrown', 'salmon', 'sandybrown', 'seagreen', 'seashell', 'sienna', 'skyblue', 'slateblue', 'slategray', 'slategrey', 'snow', 'springgreen', 'steelblue', 'tan', 'thistle', 'tomato', 'turquoise', 'violet', 'wheat', 'whitesmoke', 'yellowgreen', 'rebeccapurple']], Union[:class:`HexColor`, str], str], Union[:class:`ExprRef`, Dict[required=[expr]]], Union[:class:`Gradient`, Union[:class:`LinearGradient`, Dict[required=[gradient, stops]]], Union[:class:`RadialGradient`, Dict[required=[gradient, stops]]]]]
        Default color.

        **Default value:** :raw-html:`<span style="color: #4682b4;">&#9632;</span>`
        ``"#4682b4"``

        **Note:**


        * This property cannot be used in a `style config
          <https://vega.github.io/vega-lite/docs/mark.html#style-config>`__.
        * The ``fill`` and ``stroke`` properties have higher precedence than ``color`` and
          will override ``color``.
    cornerRadius : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], float]
        The radius in pixels of rounded rectangles or arcs' corners.

        **Default value:** ``0``
    cornerRadiusBottomLeft : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], float]
        The radius in pixels of rounded rectangles' bottom left corner.

        **Default value:** ``0``
    cornerRadiusBottomRight : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], float]
        The radius in pixels of rounded rectangles' bottom right corner.

        **Default value:** ``0``
    cornerRadiusTopLeft : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], float]
        The radius in pixels of rounded rectangles' top right corner.

        **Default value:** ``0``
    cornerRadiusTopRight : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], float]
        The radius in pixels of rounded rectangles' top left corner.

        **Default value:** ``0``
    cursor : Union[Union[:class:`Cursor`, Literal['auto', 'default', 'none', 'context-menu', 'help', 'pointer', 'progress', 'wait', 'cell', 'crosshair', 'text', 'vertical-text', 'alias', 'copy', 'move', 'no-drop', 'not-allowed', 'e-resize', 'n-resize', 'ne-resize', 'nw-resize', 's-resize', 'se-resize', 'sw-resize', 'w-resize', 'ew-resize', 'ns-resize', 'nesw-resize', 'nwse-resize', 'col-resize', 'row-resize', 'all-scroll', 'zoom-in', 'zoom-out', 'grab', 'grabbing']], Union[:class:`ExprRef`, Dict[required=[expr]]]]
        The mouse cursor used over the mark. Any valid `CSS cursor type
        <https://developer.mozilla.org/en-US/docs/Web/CSS/cursor#Values>`__ can be used.
    description : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], str]
        A text description of the mark item for `ARIA accessibility
        <https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA>`__ (SVG output
        only). If specified, this property determines the `"aria-label" attribute
        <https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/ARIA_Techniques/Using_the_aria-label_attribute>`__.
    dir : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], Union[:class:`TextDirection`, Literal['ltr', 'rtl']]]
        The direction of the text. One of ``"ltr"`` (left-to-right) or ``"rtl"``
        (right-to-left). This property determines on which side is truncated in response to
        the limit parameter.

        **Default value:** ``"ltr"``
    dx : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], float]
        The horizontal offset, in pixels, between the text label and its anchor point. The
        offset is applied after rotation by the *angle* property.
    dy : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], float]
        The vertical offset, in pixels, between the text label and its anchor point. The
        offset is applied after rotation by the *angle* property.
    ellipsis : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], str]
        The ellipsis string for text truncated in response to the limit parameter.

        **Default value:** ``"…"``
    endAngle : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], float]
        The end angle in radians for arc marks. A value of ``0`` indicates up (north),
        increasing values proceed clockwise.
    fill : Union[None, Union[:class:`Color`, Union[:class:`ColorName`, Literal['black', 'silver', 'gray', 'white', 'maroon', 'red', 'purple', 'fuchsia', 'green', 'lime', 'olive', 'yellow', 'navy', 'blue', 'teal', 'aqua', 'orange', 'aliceblue', 'antiquewhite', 'aquamarine', 'azure', 'beige', 'bisque', 'blanchedalmond', 'blueviolet', 'brown', 'burlywood', 'cadetblue', 'chartreuse', 'chocolate', 'coral', 'cornflowerblue', 'cornsilk', 'crimson', 'cyan', 'darkblue', 'darkcyan', 'darkgoldenrod', 'darkgray', 'darkgreen', 'darkgrey', 'darkkhaki', 'darkmagenta', 'darkolivegreen', 'darkorange', 'darkorchid', 'darkred', 'darksalmon', 'darkseagreen', 'darkslateblue', 'darkslategray', 'darkslategrey', 'darkturquoise', 'darkviolet', 'deeppink', 'deepskyblue', 'dimgray', 'dimgrey', 'dodgerblue', 'firebrick', 'floralwhite', 'forestgreen', 'gainsboro', 'ghostwhite', 'gold', 'goldenrod', 'greenyellow', 'grey', 'honeydew', 'hotpink', 'indianred', 'indigo', 'ivory', 'khaki', 'lavender', 'lavenderblush', 'lawngreen', 'lemonchiffon', 'lightblue', 'lightcoral', 'lightcyan', 'lightgoldenrodyellow', 'lightgray', 'lightgreen', 'lightgrey', 'lightpink', 'lightsalmon', 'lightseagreen', 'lightskyblue', 'lightslategray', 'lightslategrey', 'lightsteelblue', 'lightyellow', 'limegreen', 'linen', 'magenta', 'mediumaquamarine', 'mediumblue', 'mediumorchid', 'mediumpurple', 'mediumseagreen', 'mediumslateblue', 'mediumspringgreen', 'mediumturquoise', 'mediumvioletred', 'midnightblue', 'mintcream', 'mistyrose', 'moccasin', 'navajowhite', 'oldlace', 'olivedrab', 'orangered', 'orchid', 'palegoldenrod', 'palegreen', 'paleturquoise', 'palevioletred', 'papayawhip', 'peachpuff', 'peru', 'pink', 'plum', 'powderblue', 'rosybrown', 'royalblue', 'saddlebrown', 'salmon', 'sandybrown', 'seagreen', 'seashell', 'sienna', 'skyblue', 'slateblue', 'slategray', 'slategrey', 'snow', 'springgreen', 'steelblue', 'tan', 'thistle', 'tomato', 'turquoise', 'violet', 'wheat', 'whitesmoke', 'yellowgreen', 'rebeccapurple']], Union[:class:`HexColor`, str], str], Union[:class:`ExprRef`, Dict[required=[expr]]], Union[:class:`Gradient`, Union[:class:`LinearGradient`, Dict[required=[gradient, stops]]], Union[:class:`RadialGradient`, Dict[required=[gradient, stops]]]]]
        Default fill color. This property has higher precedence than ``config.color``. Set
        to ``null`` to remove fill.

        **Default value:** (None)
    fillOpacity : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], float]
        The fill opacity (value between [0,1]).

        **Default value:** ``1``
    filled : bool
        Whether the mark's color should be used as fill color instead of stroke color.

        **Default value:** ``false`` for all ``point``, ``line``, and ``rule`` marks as well
        as ``geoshape`` marks for `graticule
        <https://vega.github.io/vega-lite/docs/data.html#graticule>`__ data sources;
        otherwise, ``true``.

        **Note:** This property cannot be used in a `style config
        <https://vega.github.io/vega-lite/docs/mark.html#style-config>`__.
    font : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], str]
        The typeface to set the text in (e.g., ``"Helvetica Neue"`` ).
    fontSize : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], float]
        The font size, in pixels.

        **Default value:** ``11``
    fontStyle : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], Union[:class:`FontStyle`, str]]
        The font style (e.g., ``"italic"`` ).
    fontWeight : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], Union[:class:`FontWeight`, Literal['normal', 'bold', 'lighter', 'bolder', 100, 200, 300, 400, 500, 600, 700, 800, 900]]]
        The font weight. This can be either a string (e.g ``"bold"``, ``"normal"`` ) or a
        number ( ``100``, ``200``, ``300``, ..., ``900`` where ``"normal"`` = ``400`` and
        ``"bold"`` = ``700`` ).
    height : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], float]
        Height of the marks.
    href : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], Union[:class:`URI`, str]]
        A URL to load upon mouse click. If defined, the mark acts as a hyperlink.
    innerRadius : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], float]
        The inner radius in pixels of arc marks. ``innerRadius`` is an alias for
        ``radius2``.

        **Default value:** ``0``
    interpolate : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], Union[:class:`Interpolate`, Literal['basis', 'basis-open', 'basis-closed', 'bundle', 'cardinal', 'cardinal-open', 'cardinal-closed', 'catmull-rom', 'linear', 'linear-closed', 'monotone', 'natural', 'step', 'step-before', 'step-after']]]
        The line interpolation method to use for line and area marks. One of the following:


        * ``"linear"`` : piecewise linear segments, as in a polyline.
        * ``"linear-closed"`` : close the linear segments to form a polygon.
        * ``"step"`` : alternate between horizontal and vertical segments, as in a step
          function.
        * ``"step-before"`` : alternate between vertical and horizontal segments, as in a
          step function.
        * ``"step-after"`` : alternate between horizontal and vertical segments, as in a
          step function.
        * ``"basis"`` : a B-spline, with control point duplication on the ends.
        * ``"basis-open"`` : an open B-spline; may not intersect the start or end.
        * ``"basis-closed"`` : a closed B-spline, as in a loop.
        * ``"cardinal"`` : a Cardinal spline, with control point duplication on the ends.
        * ``"cardinal-open"`` : an open Cardinal spline; may not intersect the start or end,
          but will intersect other control points.
        * ``"cardinal-closed"`` : a closed Cardinal spline, as in a loop.
        * ``"bundle"`` : equivalent to basis, except the tension parameter is used to
          straighten the spline.
        * ``"monotone"`` : cubic interpolation that preserves monotonicity in y.
    invalid : Literal['filter', None]
        Defines how Vega-Lite should handle marks for invalid values ( ``null`` and ``NaN``
        ).


        * If set to ``"filter"`` (default), all data items with null values will be skipped
          (for line, trail, and area marks) or filtered (for other marks).
        * If ``null``, all data items are included. In this case, invalid values will be
          interpreted as zeroes.
    limit : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], float]
        The maximum length of the text mark in pixels. The text value will be automatically
        truncated if the rendered size exceeds the limit.

        **Default value:** ``0`` -- indicating no limit
    lineBreak : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], str]
        A delimiter, such as a newline character, upon which to break text strings into
        multiple lines. This property is ignored if the text is array-valued.
    lineHeight : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], float]
        The line height in pixels (the spacing between subsequent lines of text) for
        multi-line text marks.
    opacity : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], float]
        The overall opacity (value between [0,1]).

        **Default value:** ``0.7`` for non-aggregate plots with ``point``, ``tick``,
        ``circle``, or ``square`` marks or layered ``bar`` charts and ``1`` otherwise.
    order : Union[None, bool]
        For line and trail marks, this ``order`` property can be set to ``null`` or
        ``false`` to make the lines use the original order in the data sources.
    orient : Union[:class:`Orientation`, Literal['horizontal', 'vertical']]
        The orientation of a non-stacked bar, tick, area, and line charts. The value is
        either horizontal (default) or vertical.


        * For bar, rule and tick, this determines whether the size of the bar and tick
          should be applied to x or y dimension.
        * For area, this property determines the orient property of the Vega output.
        * For line and trail marks, this property determines the sort order of the points in
          the line if ``config.sortLineBy`` is not specified. For stacked charts, this is
          always determined by the orientation of the stack; therefore explicitly specified
          value will be ignored.
    outerRadius : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], float]
        The outer radius in pixels of arc marks. ``outerRadius`` is an alias for ``radius``.

        **Default value:** ``0``
    padAngle : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], float]
        The angular padding applied to sides of the arc, in radians.
    point : Union[Union[:class:`OverlayMarkDef`, Dict[required=[]]], bool, str]
        A flag for overlaying points on top of line or area marks, or an object defining the
        properties of the overlayed points.


        If this property is ``"transparent"``, transparent points will be used (for
        enhancing tooltips and selections).

        If this property is an empty object ( ``{}`` ) or ``true``, filled points with
        default properties will be used.

        If this property is ``false``, no points would be automatically added to line or
        area marks.

        **Default value:** ``false``.
    radius : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], float]
        For arc mark, the primary (outer) radius in pixels.

        For text marks, polar coordinate radial offset, in pixels, of the text from the
        origin determined by the ``x`` and ``y`` properties.

        **Default value:** ``min(plot_width, plot_height)/2``
    radius2 : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], float]
        The secondary (inner) radius in pixels of arc marks.

        **Default value:** ``0``
    shape : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], Union[Union[:class:`SymbolShape`, str], str]]
        Shape of the point marks. Supported values include:


        * plotting shapes: ``"circle"``, ``"square"``, ``"cross"``, ``"diamond"``,
          ``"triangle-up"``, ``"triangle-down"``, ``"triangle-right"``, or
          ``"triangle-left"``.
        * the line symbol ``"stroke"``
        * centered directional shapes ``"arrow"``, ``"wedge"``, or ``"triangle"``
        * a custom `SVG path string
          <https://developer.mozilla.org/en-US/docs/Web/SVG/Tutorial/Paths>`__ (For correct
          sizing, custom shape paths should be defined within a square bounding box with
          coordinates ranging from -1 to 1 along both the x and y dimensions.)

        **Default value:** ``"circle"``
    size : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], float]
        Default size for marks.


        * For ``point`` / ``circle`` / ``square``, this represents the pixel area of the
          marks. Note that this value sets the area of the symbol; the side lengths will
          increase with the square root of this value.
        * For ``bar``, this represents the band size of the bar, in pixels.
        * For ``text``, this represents the font size, in pixels.

        **Default value:**


        * ``30`` for point, circle, square marks; width/height's ``step``
        * ``2`` for bar marks with discrete dimensions;
        * ``5`` for bar marks with continuous dimensions;
        * ``11`` for text marks.
    smooth : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], bool]
        A boolean flag (default true) indicating if the image should be smoothed when
        resized. If false, individual pixels should be scaled directly rather than
        interpolated with smoothing. For SVG rendering, this option may not work in some
        browsers due to lack of standardization.
    startAngle : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], float]
        The start angle in radians for arc marks. A value of ``0`` indicates up (north),
        increasing values proceed clockwise.
    stroke : Union[None, Union[:class:`Color`, Union[:class:`ColorName`, Literal['black', 'silver', 'gray', 'white', 'maroon', 'red', 'purple', 'fuchsia', 'green', 'lime', 'olive', 'yellow', 'navy', 'blue', 'teal', 'aqua', 'orange', 'aliceblue', 'antiquewhite', 'aquamarine', 'azure', 'beige', 'bisque', 'blanchedalmond', 'blueviolet', 'brown', 'burlywood', 'cadetblue', 'chartreuse', 'chocolate', 'coral', 'cornflowerblue', 'cornsilk', 'crimson', 'cyan', 'darkblue', 'darkcyan', 'darkgoldenrod', 'darkgray', 'darkgreen', 'darkgrey', 'darkkhaki', 'darkmagenta', 'darkolivegreen', 'darkorange', 'darkorchid', 'darkred', 'darksalmon', 'darkseagreen', 'darkslateblue', 'darkslategray', 'darkslategrey', 'darkturquoise', 'darkviolet', 'deeppink', 'deepskyblue', 'dimgray', 'dimgrey', 'dodgerblue', 'firebrick', 'floralwhite', 'forestgreen', 'gainsboro', 'ghostwhite', 'gold', 'goldenrod', 'greenyellow', 'grey', 'honeydew', 'hotpink', 'indianred', 'indigo', 'ivory', 'khaki', 'lavender', 'lavenderblush', 'lawngreen', 'lemonchiffon', 'lightblue', 'lightcoral', 'lightcyan', 'lightgoldenrodyellow', 'lightgray', 'lightgreen', 'lightgrey', 'lightpink', 'lightsalmon', 'lightseagreen', 'lightskyblue', 'lightslategray', 'lightslategrey', 'lightsteelblue', 'lightyellow', 'limegreen', 'linen', 'magenta', 'mediumaquamarine', 'mediumblue', 'mediumorchid', 'mediumpurple', 'mediumseagreen', 'mediumslateblue', 'mediumspringgreen', 'mediumturquoise', 'mediumvioletred', 'midnightblue', 'mintcream', 'mistyrose', 'moccasin', 'navajowhite', 'oldlace', 'olivedrab', 'orangered', 'orchid', 'palegoldenrod', 'palegreen', 'paleturquoise', 'palevioletred', 'papayawhip', 'peachpuff', 'peru', 'pink', 'plum', 'powderblue', 'rosybrown', 'royalblue', 'saddlebrown', 'salmon', 'sandybrown', 'seagreen', 'seashell', 'sienna', 'skyblue', 'slateblue', 'slategray', 'slategrey', 'snow', 'springgreen', 'steelblue', 'tan', 'thistle', 'tomato', 'turquoise', 'violet', 'wheat', 'whitesmoke', 'yellowgreen', 'rebeccapurple']], Union[:class:`HexColor`, str], str], Union[:class:`ExprRef`, Dict[required=[expr]]], Union[:class:`Gradient`, Union[:class:`LinearGradient`, Dict[required=[gradient, stops]]], Union[:class:`RadialGradient`, Dict[required=[gradient, stops]]]]]
        Default stroke color. This property has higher precedence than ``config.color``. Set
        to ``null`` to remove stroke.

        **Default value:** (None)
    strokeCap : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], Union[:class:`StrokeCap`, Literal['butt', 'round', 'square']]]
        The stroke cap for line ending style. One of ``"butt"``, ``"round"``, or
        ``"square"``.

        **Default value:** ``"butt"``
    strokeDash : Union[List[float], Union[:class:`ExprRef`, Dict[required=[expr]]]]
        An array of alternating stroke, space lengths for creating dashed or dotted lines.
    strokeDashOffset : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], float]
        The offset (in pixels) into which to begin drawing with the stroke dash array.
    strokeJoin : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], Union[:class:`StrokeJoin`, Literal['miter', 'round', 'bevel']]]
        The stroke line join method. One of ``"miter"``, ``"round"`` or ``"bevel"``.

        **Default value:** ``"miter"``
    strokeMiterLimit : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], float]
        The miter limit at which to bevel a line join.
    strokeOffset : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], float]
        The offset in pixels at which to draw the group stroke and fill. If unspecified, the
        default behavior is to dynamically offset stroked groups such that 1 pixel stroke
        widths align with the pixel grid.
    strokeOpacity : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], float]
        The stroke opacity (value between [0,1]).

        **Default value:** ``1``
    strokeWidth : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], float]
        The stroke width, in pixels.
    tension : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], float]
        Depending on the interpolation type, sets the tension parameter (for line and area
        marks).
    text : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], Union[:class:`Text`, List[str], str]]
        Placeholder text if the ``text`` channel is not specified
    theta : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], float]
        For arc marks, the arc length in radians if theta2 is not specified, otherwise the
        start arc angle. (A value of 0 indicates up or “north”, increasing values proceed
        clockwise.)

        For text marks, polar coordinate angle in radians.
    theta2 : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], float]
        The end angle of arc marks in radians. A value of 0 indicates up or “north”,
        increasing values proceed clockwise.
    timeUnitBandPosition : float
        Default relative band position for a time unit. If set to ``0``, the marks will be
        positioned at the beginning of the time unit band step. If set to ``0.5``, the marks
        will be positioned in the middle of the time unit band step.
    timeUnitBandSize : float
        Default relative band size for a time unit. If set to ``1``, the bandwidth of the
        marks will be equal to the time unit band step. If set to ``0.5``, bandwidth of the
        marks will be half of the time unit band step.
    tooltip : Union[None, Union[:class:`ExprRef`, Dict[required=[expr]]], Union[:class:`TooltipContent`, Dict[required=[content]]], bool, float, str]
        The tooltip text string to show upon mouse hover or an object defining which fields
        should the tooltip be derived from.


        * If ``tooltip`` is ``true`` or ``{"content": "encoding"}``, then all fields from
          ``encoding`` will be used.
        * If ``tooltip`` is ``{"content": "data"}``, then all fields that appear in the
          highlighted data point will be used.
        * If set to ``null`` or ``false``, then no tooltip will be used.

        See the `tooltip <https://vega.github.io/vega-lite/docs/tooltip.html>`__
        documentation for a detailed discussion about tooltip  in Vega-Lite.

        **Default value:** ``null``
    url : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], Union[:class:`URI`, str]]
        The URL of the image file for image marks.
    width : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], float]
        Width of the marks.
    x : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], float, str]
        X coordinates of the marks, or width of horizontal ``"bar"`` and ``"area"`` without
        specified ``x2`` or ``width``.

        The ``value`` of this channel can be a number or a string ``"width"`` for the width
        of the plot.
    x2 : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], float, str]
        X2 coordinates for ranged ``"area"``, ``"bar"``, ``"rect"``, and  ``"rule"``.

        The ``value`` of this channel can be a number or a string ``"width"`` for the width
        of the plot.
    y : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], float, str]
        Y coordinates of the marks, or height of vertical ``"bar"`` and ``"area"`` without
        specified ``y2`` or ``height``.

        The ``value`` of this channel can be a number or a string ``"height"`` for the
        height of the plot.
    y2 : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], float, str]
        Y2 coordinates for ranged ``"area"``, ``"bar"``, ``"rect"``, and  ``"rule"``.

        The ``value`` of this channel can be a number or a string ``"height"`` for the
        height of the plot.
    """

    _schema = {"$ref": "#/definitions/LineConfig"}

    def __init__(
        self,
        align: Union[
            Union[
                Union["Align", Literal["left", "center", "right"]],
                Union["ExprRef", "_ParameterProtocol", dict],
            ],
            UndefinedType,
        ] = Undefined,
        angle: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], float], UndefinedType
        ] = Undefined,
        aria: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], bool], UndefinedType
        ] = Undefined,
        ariaRole: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], str], UndefinedType
        ] = Undefined,
        ariaRoleDescription: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], str], UndefinedType
        ] = Undefined,
        aspect: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], bool], UndefinedType
        ] = Undefined,
        baseline: Union[
            Union[
                Union["ExprRef", "_ParameterProtocol", dict],
                Union[
                    "TextBaseline",
                    Union["Baseline", Literal["top", "middle", "bottom"]],
                    str,
                ],
            ],
            UndefinedType,
        ] = Undefined,
        blend: Union[
            Union[
                Union[
                    "Blend",
                    Literal[
                        None,
                        "multiply",
                        "screen",
                        "overlay",
                        "darken",
                        "lighten",
                        "color-dodge",
                        "color-burn",
                        "hard-light",
                        "soft-light",
                        "difference",
                        "exclusion",
                        "hue",
                        "saturation",
                        "color",
                        "luminosity",
                    ],
                ],
                Union["ExprRef", "_ParameterProtocol", dict],
            ],
            UndefinedType,
        ] = Undefined,
        color: Union[
            Union[
                Union[
                    "Color",
                    Union[
                        "ColorName",
                        Literal[
                            "black",
                            "silver",
                            "gray",
                            "white",
                            "maroon",
                            "red",
                            "purple",
                            "fuchsia",
                            "green",
                            "lime",
                            "olive",
                            "yellow",
                            "navy",
                            "blue",
                            "teal",
                            "aqua",
                            "orange",
                            "aliceblue",
                            "antiquewhite",
                            "aquamarine",
                            "azure",
                            "beige",
                            "bisque",
                            "blanchedalmond",
                            "blueviolet",
                            "brown",
                            "burlywood",
                            "cadetblue",
                            "chartreuse",
                            "chocolate",
                            "coral",
                            "cornflowerblue",
                            "cornsilk",
                            "crimson",
                            "cyan",
                            "darkblue",
                            "darkcyan",
                            "darkgoldenrod",
                            "darkgray",
                            "darkgreen",
                            "darkgrey",
                            "darkkhaki",
                            "darkmagenta",
                            "darkolivegreen",
                            "darkorange",
                            "darkorchid",
                            "darkred",
                            "darksalmon",
                            "darkseagreen",
                            "darkslateblue",
                            "darkslategray",
                            "darkslategrey",
                            "darkturquoise",
                            "darkviolet",
                            "deeppink",
                            "deepskyblue",
                            "dimgray",
                            "dimgrey",
                            "dodgerblue",
                            "firebrick",
                            "floralwhite",
                            "forestgreen",
                            "gainsboro",
                            "ghostwhite",
                            "gold",
                            "goldenrod",
                            "greenyellow",
                            "grey",
                            "honeydew",
                            "hotpink",
                            "indianred",
                            "indigo",
                            "ivory",
                            "khaki",
                            "lavender",
                            "lavenderblush",
                            "lawngreen",
                            "lemonchiffon",
                            "lightblue",
                            "lightcoral",
                            "lightcyan",
                            "lightgoldenrodyellow",
                            "lightgray",
                            "lightgreen",
                            "lightgrey",
                            "lightpink",
                            "lightsalmon",
                            "lightseagreen",
                            "lightskyblue",
                            "lightslategray",
                            "lightslategrey",
                            "lightsteelblue",
                            "lightyellow",
                            "limegreen",
                            "linen",
                            "magenta",
                            "mediumaquamarine",
                            "mediumblue",
                            "mediumorchid",
                            "mediumpurple",
                            "mediumseagreen",
                            "mediumslateblue",
                            "mediumspringgreen",
                            "mediumturquoise",
                            "mediumvioletred",
                            "midnightblue",
                            "mintcream",
                            "mistyrose",
                            "moccasin",
                            "navajowhite",
                            "oldlace",
                            "olivedrab",
                            "orangered",
                            "orchid",
                            "palegoldenrod",
                            "palegreen",
                            "paleturquoise",
                            "palevioletred",
                            "papayawhip",
                            "peachpuff",
                            "peru",
                            "pink",
                            "plum",
                            "powderblue",
                            "rosybrown",
                            "royalblue",
                            "saddlebrown",
                            "salmon",
                            "sandybrown",
                            "seagreen",
                            "seashell",
                            "sienna",
                            "skyblue",
                            "slateblue",
                            "slategray",
                            "slategrey",
                            "snow",
                            "springgreen",
                            "steelblue",
                            "tan",
                            "thistle",
                            "tomato",
                            "turquoise",
                            "violet",
                            "wheat",
                            "whitesmoke",
                            "yellowgreen",
                            "rebeccapurple",
                        ],
                    ],
                    Union["HexColor", str],
                    str,
                ],
                Union["ExprRef", "_ParameterProtocol", dict],
                Union[
                    "Gradient",
                    Union["LinearGradient", dict],
                    Union["RadialGradient", dict],
                ],
            ],
            UndefinedType,
        ] = Undefined,
        cornerRadius: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], float], UndefinedType
        ] = Undefined,
        cornerRadiusBottomLeft: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], float], UndefinedType
        ] = Undefined,
        cornerRadiusBottomRight: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], float], UndefinedType
        ] = Undefined,
        cornerRadiusTopLeft: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], float], UndefinedType
        ] = Undefined,
        cornerRadiusTopRight: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], float], UndefinedType
        ] = Undefined,
        cursor: Union[
            Union[
                Union[
                    "Cursor",
                    Literal[
                        "auto",
                        "default",
                        "none",
                        "context-menu",
                        "help",
                        "pointer",
                        "progress",
                        "wait",
                        "cell",
                        "crosshair",
                        "text",
                        "vertical-text",
                        "alias",
                        "copy",
                        "move",
                        "no-drop",
                        "not-allowed",
                        "e-resize",
                        "n-resize",
                        "ne-resize",
                        "nw-resize",
                        "s-resize",
                        "se-resize",
                        "sw-resize",
                        "w-resize",
                        "ew-resize",
                        "ns-resize",
                        "nesw-resize",
                        "nwse-resize",
                        "col-resize",
                        "row-resize",
                        "all-scroll",
                        "zoom-in",
                        "zoom-out",
                        "grab",
                        "grabbing",
                    ],
                ],
                Union["ExprRef", "_ParameterProtocol", dict],
            ],
            UndefinedType,
        ] = Undefined,
        description: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], str], UndefinedType
        ] = Undefined,
        dir: Union[
            Union[
                Union["ExprRef", "_ParameterProtocol", dict],
                Union["TextDirection", Literal["ltr", "rtl"]],
            ],
            UndefinedType,
        ] = Undefined,
        dx: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], float], UndefinedType
        ] = Undefined,
        dy: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], float], UndefinedType
        ] = Undefined,
        ellipsis: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], str], UndefinedType
        ] = Undefined,
        endAngle: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], float], UndefinedType
        ] = Undefined,
        fill: Union[
            Union[
                None,
                Union[
                    "Color",
                    Union[
                        "ColorName",
                        Literal[
                            "black",
                            "silver",
                            "gray",
                            "white",
                            "maroon",
                            "red",
                            "purple",
                            "fuchsia",
                            "green",
                            "lime",
                            "olive",
                            "yellow",
                            "navy",
                            "blue",
                            "teal",
                            "aqua",
                            "orange",
                            "aliceblue",
                            "antiquewhite",
                            "aquamarine",
                            "azure",
                            "beige",
                            "bisque",
                            "blanchedalmond",
                            "blueviolet",
                            "brown",
                            "burlywood",
                            "cadetblue",
                            "chartreuse",
                            "chocolate",
                            "coral",
                            "cornflowerblue",
                            "cornsilk",
                            "crimson",
                            "cyan",
                            "darkblue",
                            "darkcyan",
                            "darkgoldenrod",
                            "darkgray",
                            "darkgreen",
                            "darkgrey",
                            "darkkhaki",
                            "darkmagenta",
                            "darkolivegreen",
                            "darkorange",
                            "darkorchid",
                            "darkred",
                            "darksalmon",
                            "darkseagreen",
                            "darkslateblue",
                            "darkslategray",
                            "darkslategrey",
                            "darkturquoise",
                            "darkviolet",
                            "deeppink",
                            "deepskyblue",
                            "dimgray",
                            "dimgrey",
                            "dodgerblue",
                            "firebrick",
                            "floralwhite",
                            "forestgreen",
                            "gainsboro",
                            "ghostwhite",
                            "gold",
                            "goldenrod",
                            "greenyellow",
                            "grey",
                            "honeydew",
                            "hotpink",
                            "indianred",
                            "indigo",
                            "ivory",
                            "khaki",
                            "lavender",
                            "lavenderblush",
                            "lawngreen",
                            "lemonchiffon",
                            "lightblue",
                            "lightcoral",
                            "lightcyan",
                            "lightgoldenrodyellow",
                            "lightgray",
                            "lightgreen",
                            "lightgrey",
                            "lightpink",
                            "lightsalmon",
                            "lightseagreen",
                            "lightskyblue",
                            "lightslategray",
                            "lightslategrey",
                            "lightsteelblue",
                            "lightyellow",
                            "limegreen",
                            "linen",
                            "magenta",
                            "mediumaquamarine",
                            "mediumblue",
                            "mediumorchid",
                            "mediumpurple",
                            "mediumseagreen",
                            "mediumslateblue",
                            "mediumspringgreen",
                            "mediumturquoise",
                            "mediumvioletred",
                            "midnightblue",
                            "mintcream",
                            "mistyrose",
                            "moccasin",
                            "navajowhite",
                            "oldlace",
                            "olivedrab",
                            "orangered",
                            "orchid",
                            "palegoldenrod",
                            "palegreen",
                            "paleturquoise",
                            "palevioletred",
                            "papayawhip",
                            "peachpuff",
                            "peru",
                            "pink",
                            "plum",
                            "powderblue",
                            "rosybrown",
                            "royalblue",
                            "saddlebrown",
                            "salmon",
                            "sandybrown",
                            "seagreen",
                            "seashell",
                            "sienna",
                            "skyblue",
                            "slateblue",
                            "slategray",
                            "slategrey",
                            "snow",
                            "springgreen",
                            "steelblue",
                            "tan",
                            "thistle",
                            "tomato",
                            "turquoise",
                            "violet",
                            "wheat",
                            "whitesmoke",
                            "yellowgreen",
                            "rebeccapurple",
                        ],
                    ],
                    Union["HexColor", str],
                    str,
                ],
                Union["ExprRef", "_ParameterProtocol", dict],
                Union[
                    "Gradient",
                    Union["LinearGradient", dict],
                    Union["RadialGradient", dict],
                ],
            ],
            UndefinedType,
        ] = Undefined,
        fillOpacity: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], float], UndefinedType
        ] = Undefined,
        filled: Union[bool, UndefinedType] = Undefined,
        font: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], str], UndefinedType
        ] = Undefined,
        fontSize: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], float], UndefinedType
        ] = Undefined,
        fontStyle: Union[
            Union[
                Union["ExprRef", "_ParameterProtocol", dict], Union["FontStyle", str]
            ],
            UndefinedType,
        ] = Undefined,
        fontWeight: Union[
            Union[
                Union["ExprRef", "_ParameterProtocol", dict],
                Union[
                    "FontWeight",
                    Literal[
                        "normal",
                        "bold",
                        "lighter",
                        "bolder",
                        100,
                        200,
                        300,
                        400,
                        500,
                        600,
                        700,
                        800,
                        900,
                    ],
                ],
            ],
            UndefinedType,
        ] = Undefined,
        height: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], float], UndefinedType
        ] = Undefined,
        href: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], Union["URI", str]],
            UndefinedType,
        ] = Undefined,
        innerRadius: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], float], UndefinedType
        ] = Undefined,
        interpolate: Union[
            Union[
                Union["ExprRef", "_ParameterProtocol", dict],
                Union[
                    "Interpolate",
                    Literal[
                        "basis",
                        "basis-open",
                        "basis-closed",
                        "bundle",
                        "cardinal",
                        "cardinal-open",
                        "cardinal-closed",
                        "catmull-rom",
                        "linear",
                        "linear-closed",
                        "monotone",
                        "natural",
                        "step",
                        "step-before",
                        "step-after",
                    ],
                ],
            ],
            UndefinedType,
        ] = Undefined,
        invalid: Union[Literal["filter", None], UndefinedType] = Undefined,
        limit: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], float], UndefinedType
        ] = Undefined,
        lineBreak: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], str], UndefinedType
        ] = Undefined,
        lineHeight: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], float], UndefinedType
        ] = Undefined,
        opacity: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], float], UndefinedType
        ] = Undefined,
        order: Union[Union[None, bool], UndefinedType] = Undefined,
        orient: Union[
            Union["Orientation", Literal["horizontal", "vertical"]], UndefinedType
        ] = Undefined,
        outerRadius: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], float], UndefinedType
        ] = Undefined,
        padAngle: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], float], UndefinedType
        ] = Undefined,
        point: Union[
            Union[Union["OverlayMarkDef", dict], bool, str], UndefinedType
        ] = Undefined,
        radius: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], float], UndefinedType
        ] = Undefined,
        radius2: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], float], UndefinedType
        ] = Undefined,
        shape: Union[
            Union[
                Union["ExprRef", "_ParameterProtocol", dict],
                Union[Union["SymbolShape", str], str],
            ],
            UndefinedType,
        ] = Undefined,
        size: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], float], UndefinedType
        ] = Undefined,
        smooth: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], bool], UndefinedType
        ] = Undefined,
        startAngle: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], float], UndefinedType
        ] = Undefined,
        stroke: Union[
            Union[
                None,
                Union[
                    "Color",
                    Union[
                        "ColorName",
                        Literal[
                            "black",
                            "silver",
                            "gray",
                            "white",
                            "maroon",
                            "red",
                            "purple",
                            "fuchsia",
                            "green",
                            "lime",
                            "olive",
                            "yellow",
                            "navy",
                            "blue",
                            "teal",
                            "aqua",
                            "orange",
                            "aliceblue",
                            "antiquewhite",
                            "aquamarine",
                            "azure",
                            "beige",
                            "bisque",
                            "blanchedalmond",
                            "blueviolet",
                            "brown",
                            "burlywood",
                            "cadetblue",
                            "chartreuse",
                            "chocolate",
                            "coral",
                            "cornflowerblue",
                            "cornsilk",
                            "crimson",
                            "cyan",
                            "darkblue",
                            "darkcyan",
                            "darkgoldenrod",
                            "darkgray",
                            "darkgreen",
                            "darkgrey",
                            "darkkhaki",
                            "darkmagenta",
                            "darkolivegreen",
                            "darkorange",
                            "darkorchid",
                            "darkred",
                            "darksalmon",
                            "darkseagreen",
                            "darkslateblue",
                            "darkslategray",
                            "darkslategrey",
                            "darkturquoise",
                            "darkviolet",
                            "deeppink",
                            "deepskyblue",
                            "dimgray",
                            "dimgrey",
                            "dodgerblue",
                            "firebrick",
                            "floralwhite",
                            "forestgreen",
                            "gainsboro",
                            "ghostwhite",
                            "gold",
                            "goldenrod",
                            "greenyellow",
                            "grey",
                            "honeydew",
                            "hotpink",
                            "indianred",
                            "indigo",
                            "ivory",
                            "khaki",
                            "lavender",
                            "lavenderblush",
                            "lawngreen",
                            "lemonchiffon",
                            "lightblue",
                            "lightcoral",
                            "lightcyan",
                            "lightgoldenrodyellow",
                            "lightgray",
                            "lightgreen",
                            "lightgrey",
                            "lightpink",
                            "lightsalmon",
                            "lightseagreen",
                            "lightskyblue",
                            "lightslategray",
                            "lightslategrey",
                            "lightsteelblue",
                            "lightyellow",
                            "limegreen",
                            "linen",
                            "magenta",
                            "mediumaquamarine",
                            "mediumblue",
                            "mediumorchid",
                            "mediumpurple",
                            "mediumseagreen",
                            "mediumslateblue",
                            "mediumspringgreen",
                            "mediumturquoise",
                            "mediumvioletred",
                            "midnightblue",
                            "mintcream",
                            "mistyrose",
                            "moccasin",
                            "navajowhite",
                            "oldlace",
                            "olivedrab",
                            "orangered",
                            "orchid",
                            "palegoldenrod",
                            "palegreen",
                            "paleturquoise",
                            "palevioletred",
                            "papayawhip",
                            "peachpuff",
                            "peru",
                            "pink",
                            "plum",
                            "powderblue",
                            "rosybrown",
                            "royalblue",
                            "saddlebrown",
                            "salmon",
                            "sandybrown",
                            "seagreen",
                            "seashell",
                            "sienna",
                            "skyblue",
                            "slateblue",
                            "slategray",
                            "slategrey",
                            "snow",
                            "springgreen",
                            "steelblue",
                            "tan",
                            "thistle",
                            "tomato",
                            "turquoise",
                            "violet",
                            "wheat",
                            "whitesmoke",
                            "yellowgreen",
                            "rebeccapurple",
                        ],
                    ],
                    Union["HexColor", str],
                    str,
                ],
                Union["ExprRef", "_ParameterProtocol", dict],
                Union[
                    "Gradient",
                    Union["LinearGradient", dict],
                    Union["RadialGradient", dict],
                ],
            ],
            UndefinedType,
        ] = Undefined,
        strokeCap: Union[
            Union[
                Union["ExprRef", "_ParameterProtocol", dict],
                Union["StrokeCap", Literal["butt", "round", "square"]],
            ],
            UndefinedType,
        ] = Undefined,
        strokeDash: Union[
            Union[List[float], Union["ExprRef", "_ParameterProtocol", dict]],
            UndefinedType,
        ] = Undefined,
        strokeDashOffset: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], float], UndefinedType
        ] = Undefined,
        strokeJoin: Union[
            Union[
                Union["ExprRef", "_ParameterProtocol", dict],
                Union["StrokeJoin", Literal["miter", "round", "bevel"]],
            ],
            UndefinedType,
        ] = Undefined,
        strokeMiterLimit: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], float], UndefinedType
        ] = Undefined,
        strokeOffset: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], float], UndefinedType
        ] = Undefined,
        strokeOpacity: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], float], UndefinedType
        ] = Undefined,
        strokeWidth: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], float], UndefinedType
        ] = Undefined,
        tension: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], float], UndefinedType
        ] = Undefined,
        text: Union[
            Union[
                Union["ExprRef", "_ParameterProtocol", dict],
                Union["Text", List[str], str],
            ],
            UndefinedType,
        ] = Undefined,
        theta: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], float], UndefinedType
        ] = Undefined,
        theta2: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], float], UndefinedType
        ] = Undefined,
        timeUnitBandPosition: Union[float, UndefinedType] = Undefined,
        timeUnitBandSize: Union[float, UndefinedType] = Undefined,
        tooltip: Union[
            Union[
                None,
                Union["ExprRef", "_ParameterProtocol", dict],
                Union["TooltipContent", dict],
                bool,
                float,
                str,
            ],
            UndefinedType,
        ] = Undefined,
        url: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], Union["URI", str]],
            UndefinedType,
        ] = Undefined,
        width: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], float], UndefinedType
        ] = Undefined,
        x: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], float, str],
            UndefinedType,
        ] = Undefined,
        x2: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], float, str],
            UndefinedType,
        ] = Undefined,
        y: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], float, str],
            UndefinedType,
        ] = Undefined,
        y2: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], float, str],
            UndefinedType,
        ] = Undefined,
        **kwds
    ):
        super(LineConfig, self).__init__(
            align=align,
            angle=angle,
            aria=aria,
            ariaRole=ariaRole,
            ariaRoleDescription=ariaRoleDescription,
            aspect=aspect,
            baseline=baseline,
            blend=blend,
            color=color,
            cornerRadius=cornerRadius,
            cornerRadiusBottomLeft=cornerRadiusBottomLeft,
            cornerRadiusBottomRight=cornerRadiusBottomRight,
            cornerRadiusTopLeft=cornerRadiusTopLeft,
            cornerRadiusTopRight=cornerRadiusTopRight,
            cursor=cursor,
            description=description,
            dir=dir,
            dx=dx,
            dy=dy,
            ellipsis=ellipsis,
            endAngle=endAngle,
            fill=fill,
            fillOpacity=fillOpacity,
            filled=filled,
            font=font,
            fontSize=fontSize,
            fontStyle=fontStyle,
            fontWeight=fontWeight,
            height=height,
            href=href,
            innerRadius=innerRadius,
            interpolate=interpolate,
            invalid=invalid,
            limit=limit,
            lineBreak=lineBreak,
            lineHeight=lineHeight,
            opacity=opacity,
            order=order,
            orient=orient,
            outerRadius=outerRadius,
            padAngle=padAngle,
            point=point,
            radius=radius,
            radius2=radius2,
            shape=shape,
            size=size,
            smooth=smooth,
            startAngle=startAngle,
            stroke=stroke,
            strokeCap=strokeCap,
            strokeDash=strokeDash,
            strokeDashOffset=strokeDashOffset,
            strokeJoin=strokeJoin,
            strokeMiterLimit=strokeMiterLimit,
            strokeOffset=strokeOffset,
            strokeOpacity=strokeOpacity,
            strokeWidth=strokeWidth,
            tension=tension,
            text=text,
            theta=theta,
            theta2=theta2,
            timeUnitBandPosition=timeUnitBandPosition,
            timeUnitBandSize=timeUnitBandSize,
            tooltip=tooltip,
            url=url,
            width=width,
            x=x,
            x2=x2,
            y=y,
            y2=y2,
            **kwds
        )


class LineString(Geometry):
    """LineString schema wrapper

    Union[:class:`LineString`, Dict[required=[coordinates, type]]]
    LineString geometry object. https://tools.ietf.org/html/rfc7946#section-3.1.4

    Parameters
    ----------

    coordinates : List[Union[:class:`Position`, List[float]]]

    type : str
        Specifies the type of GeoJSON object.
    bbox : Union[:class:`BBox`, List[float]]
        Bounding box of the coordinate range of the object's Geometries, Features, or
        Feature Collections. https://tools.ietf.org/html/rfc7946#section-5
    """

    _schema = {"$ref": "#/definitions/LineString"}

    def __init__(
        self,
        coordinates: Union[
            Union[List["Position"], List[List[float]]], UndefinedType
        ] = Undefined,
        type: Union[str, UndefinedType] = Undefined,
        bbox: Union[Union["BBox", List[float]], UndefinedType] = Undefined,
        **kwds
    ):
        super(LineString, self).__init__(
            coordinates=coordinates, type=type, bbox=bbox, **kwds
        )


class LinearGradient(Gradient):
    """LinearGradient schema wrapper

    Union[:class:`LinearGradient`, Dict[required=[gradient, stops]]]

    Parameters
    ----------

    gradient : str
        The type of gradient. Use ``"linear"`` for a linear gradient.
    stops : List[Union[:class:`GradientStop`, Dict[required=[offset, color]]]]
        An array of gradient stops defining the gradient color sequence.
    id : str

    x1 : float
        The starting x-coordinate, in normalized [0, 1] coordinates, of the linear gradient.

        **Default value:** ``0``
    x2 : float
        The ending x-coordinate, in normalized [0, 1] coordinates, of the linear gradient.

        **Default value:** ``1``
    y1 : float
        The starting y-coordinate, in normalized [0, 1] coordinates, of the linear gradient.

        **Default value:** ``0``
    y2 : float
        The ending y-coordinate, in normalized [0, 1] coordinates, of the linear gradient.

        **Default value:** ``0``
    """

    _schema = {"$ref": "#/definitions/LinearGradient"}

    def __init__(
        self,
        gradient: Union[str, UndefinedType] = Undefined,
        stops: Union[
            Union[List["GradientStop"], List[dict]], UndefinedType
        ] = Undefined,
        id: Union[str, UndefinedType] = Undefined,
        x1: Union[float, UndefinedType] = Undefined,
        x2: Union[float, UndefinedType] = Undefined,
        y1: Union[float, UndefinedType] = Undefined,
        y2: Union[float, UndefinedType] = Undefined,
        **kwds
    ):
        super(LinearGradient, self).__init__(
            gradient=gradient, stops=stops, id=id, x1=x1, x2=x2, y1=y1, y2=y2, **kwds
        )


class Locale(VegaLiteSchema):
    """Locale schema wrapper

    Union[:class:`Locale`, Dict[required=[]]]

    Parameters
    ----------

    number : Union[:class:`NumberLocale`, Dict[required=[decimal, thousands, grouping, currency]]]
        Locale definition for formatting numbers.
    time : Union[:class:`TimeLocale`, Dict[required=[dateTime, date, time, periods, days, shortDays, months, shortMonths]]]
        Locale definition for formatting dates and times.
    """

    _schema = {"$ref": "#/definitions/Locale"}

    def __init__(
        self,
        number: Union[Union["NumberLocale", dict], UndefinedType] = Undefined,
        time: Union[Union["TimeLocale", dict], UndefinedType] = Undefined,
        **kwds
    ):
        super(Locale, self).__init__(number=number, time=time, **kwds)


class LookupData(VegaLiteSchema):
    """LookupData schema wrapper

    Union[:class:`LookupData`, Dict[required=[data, key]]]

    Parameters
    ----------

    data : Union[:class:`Data`, Union[:class:`DataSource`, Union[:class:`InlineData`, Dict[required=[values]]], Union[:class:`NamedData`, Dict[required=[name]]], Union[:class:`UrlData`, Dict[required=[url]]]], Union[:class:`Generator`, Union[:class:`GraticuleGenerator`, Dict[required=[graticule]]], Union[:class:`SequenceGenerator`, Dict[required=[sequence]]], Union[:class:`SphereGenerator`, Dict[required=[sphere]]]]]
        Secondary data source to lookup in.
    key : Union[:class:`FieldName`, str]
        Key in data to lookup.
    fields : List[Union[:class:`FieldName`, str]]
        Fields in foreign data or selection to lookup. If not specified, the entire object
        is queried.
    """

    _schema = {"$ref": "#/definitions/LookupData"}

    def __init__(
        self,
        data: Union[
            Union[
                "Data",
                Union[
                    "DataSource",
                    Union["InlineData", dict],
                    Union["NamedData", dict],
                    Union["UrlData", dict],
                ],
                Union[
                    "Generator",
                    Union["GraticuleGenerator", dict],
                    Union["SequenceGenerator", dict],
                    Union["SphereGenerator", dict],
                ],
            ],
            UndefinedType,
        ] = Undefined,
        key: Union[Union["FieldName", str], UndefinedType] = Undefined,
        fields: Union[Union[List["FieldName"], List[str]], UndefinedType] = Undefined,
        **kwds
    ):
        super(LookupData, self).__init__(data=data, key=key, fields=fields, **kwds)


class LookupSelection(VegaLiteSchema):
    """LookupSelection schema wrapper

    Union[:class:`LookupSelection`, Dict[required=[key, param]]]

    Parameters
    ----------

    key : Union[:class:`FieldName`, str]
        Key in data to lookup.
    param : Union[:class:`ParameterName`, str]
        Selection parameter name to look up.
    fields : List[Union[:class:`FieldName`, str]]
        Fields in foreign data or selection to lookup. If not specified, the entire object
        is queried.
    """

    _schema = {"$ref": "#/definitions/LookupSelection"}

    def __init__(
        self,
        key: Union[Union["FieldName", str], UndefinedType] = Undefined,
        param: Union[Union["ParameterName", str], UndefinedType] = Undefined,
        fields: Union[Union[List["FieldName"], List[str]], UndefinedType] = Undefined,
        **kwds
    ):
        super(LookupSelection, self).__init__(
            key=key, param=param, fields=fields, **kwds
        )


class Mark(AnyMark):
    """Mark schema wrapper

    Union[:class:`Mark`, Literal['arc', 'area', 'bar', 'image', 'line', 'point', 'rect', 'rule',
    'text', 'tick', 'trail', 'circle', 'square', 'geoshape']]
    All types of primitive marks.
    """

    _schema = {"$ref": "#/definitions/Mark"}

    def __init__(self, *args):
        super(Mark, self).__init__(*args)


class MarkConfig(AnyMarkConfig):
    """MarkConfig schema wrapper

    Union[:class:`MarkConfig`, Dict[required=[]]]

    Parameters
    ----------

    align : Union[Union[:class:`Align`, Literal['left', 'center', 'right']], Union[:class:`ExprRef`, Dict[required=[expr]]]]
        The horizontal alignment of the text or ranged marks (area, bar, image, rect, rule).
        One of ``"left"``, ``"right"``, ``"center"``.

        **Note:** Expression reference is *not* supported for range marks.
    angle : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], float]
        The rotation angle of the text, in degrees.
    aria : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], bool]
        A boolean flag indicating if `ARIA attributes
        <https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA>`__ should be
        included (SVG output only). If ``false``, the "aria-hidden" attribute will be set on
        the output SVG element, removing the mark item from the ARIA accessibility tree.
    ariaRole : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], str]
        Sets the type of user interface element of the mark item for `ARIA accessibility
        <https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA>`__ (SVG output
        only). If specified, this property determines the "role" attribute. Warning: this
        property is experimental and may be changed in the future.
    ariaRoleDescription : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], str]
        A human-readable, author-localized description for the role of the mark item for
        `ARIA accessibility
        <https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA>`__ (SVG output
        only). If specified, this property determines the "aria-roledescription" attribute.
        Warning: this property is experimental and may be changed in the future.
    aspect : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], bool]
        Whether to keep aspect ratio of image marks.
    baseline : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], Union[:class:`TextBaseline`, Union[:class:`Baseline`, Literal['top', 'middle', 'bottom']], str]]
        For text marks, the vertical text baseline. One of ``"alphabetic"`` (default),
        ``"top"``, ``"middle"``, ``"bottom"``, ``"line-top"``, ``"line-bottom"``, or an
        expression reference that provides one of the valid values. The ``"line-top"`` and
        ``"line-bottom"`` values operate similarly to ``"top"`` and ``"bottom"``, but are
        calculated relative to the ``lineHeight`` rather than ``fontSize`` alone.

        For range marks, the vertical alignment of the marks. One of ``"top"``,
        ``"middle"``, ``"bottom"``.

        **Note:** Expression reference is *not* supported for range marks.
    blend : Union[Union[:class:`Blend`, Literal[None, 'multiply', 'screen', 'overlay', 'darken', 'lighten', 'color-dodge', 'color-burn', 'hard-light', 'soft-light', 'difference', 'exclusion', 'hue', 'saturation', 'color', 'luminosity']], Union[:class:`ExprRef`, Dict[required=[expr]]]]
        The color blend mode for drawing an item on its current background. Any valid `CSS
        mix-blend-mode <https://developer.mozilla.org/en-US/docs/Web/CSS/mix-blend-mode>`__
        value can be used.

        __Default value:__ ``"source-over"``
    color : Union[Union[:class:`Color`, Union[:class:`ColorName`, Literal['black', 'silver', 'gray', 'white', 'maroon', 'red', 'purple', 'fuchsia', 'green', 'lime', 'olive', 'yellow', 'navy', 'blue', 'teal', 'aqua', 'orange', 'aliceblue', 'antiquewhite', 'aquamarine', 'azure', 'beige', 'bisque', 'blanchedalmond', 'blueviolet', 'brown', 'burlywood', 'cadetblue', 'chartreuse', 'chocolate', 'coral', 'cornflowerblue', 'cornsilk', 'crimson', 'cyan', 'darkblue', 'darkcyan', 'darkgoldenrod', 'darkgray', 'darkgreen', 'darkgrey', 'darkkhaki', 'darkmagenta', 'darkolivegreen', 'darkorange', 'darkorchid', 'darkred', 'darksalmon', 'darkseagreen', 'darkslateblue', 'darkslategray', 'darkslategrey', 'darkturquoise', 'darkviolet', 'deeppink', 'deepskyblue', 'dimgray', 'dimgrey', 'dodgerblue', 'firebrick', 'floralwhite', 'forestgreen', 'gainsboro', 'ghostwhite', 'gold', 'goldenrod', 'greenyellow', 'grey', 'honeydew', 'hotpink', 'indianred', 'indigo', 'ivory', 'khaki', 'lavender', 'lavenderblush', 'lawngreen', 'lemonchiffon', 'lightblue', 'lightcoral', 'lightcyan', 'lightgoldenrodyellow', 'lightgray', 'lightgreen', 'lightgrey', 'lightpink', 'lightsalmon', 'lightseagreen', 'lightskyblue', 'lightslategray', 'lightslategrey', 'lightsteelblue', 'lightyellow', 'limegreen', 'linen', 'magenta', 'mediumaquamarine', 'mediumblue', 'mediumorchid', 'mediumpurple', 'mediumseagreen', 'mediumslateblue', 'mediumspringgreen', 'mediumturquoise', 'mediumvioletred', 'midnightblue', 'mintcream', 'mistyrose', 'moccasin', 'navajowhite', 'oldlace', 'olivedrab', 'orangered', 'orchid', 'palegoldenrod', 'palegreen', 'paleturquoise', 'palevioletred', 'papayawhip', 'peachpuff', 'peru', 'pink', 'plum', 'powderblue', 'rosybrown', 'royalblue', 'saddlebrown', 'salmon', 'sandybrown', 'seagreen', 'seashell', 'sienna', 'skyblue', 'slateblue', 'slategray', 'slategrey', 'snow', 'springgreen', 'steelblue', 'tan', 'thistle', 'tomato', 'turquoise', 'violet', 'wheat', 'whitesmoke', 'yellowgreen', 'rebeccapurple']], Union[:class:`HexColor`, str], str], Union[:class:`ExprRef`, Dict[required=[expr]]], Union[:class:`Gradient`, Union[:class:`LinearGradient`, Dict[required=[gradient, stops]]], Union[:class:`RadialGradient`, Dict[required=[gradient, stops]]]]]
        Default color.

        **Default value:** :raw-html:`<span style="color: #4682b4;">&#9632;</span>`
        ``"#4682b4"``

        **Note:**


        * This property cannot be used in a `style config
          <https://vega.github.io/vega-lite/docs/mark.html#style-config>`__.
        * The ``fill`` and ``stroke`` properties have higher precedence than ``color`` and
          will override ``color``.
    cornerRadius : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], float]
        The radius in pixels of rounded rectangles or arcs' corners.

        **Default value:** ``0``
    cornerRadiusBottomLeft : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], float]
        The radius in pixels of rounded rectangles' bottom left corner.

        **Default value:** ``0``
    cornerRadiusBottomRight : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], float]
        The radius in pixels of rounded rectangles' bottom right corner.

        **Default value:** ``0``
    cornerRadiusTopLeft : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], float]
        The radius in pixels of rounded rectangles' top right corner.

        **Default value:** ``0``
    cornerRadiusTopRight : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], float]
        The radius in pixels of rounded rectangles' top left corner.

        **Default value:** ``0``
    cursor : Union[Union[:class:`Cursor`, Literal['auto', 'default', 'none', 'context-menu', 'help', 'pointer', 'progress', 'wait', 'cell', 'crosshair', 'text', 'vertical-text', 'alias', 'copy', 'move', 'no-drop', 'not-allowed', 'e-resize', 'n-resize', 'ne-resize', 'nw-resize', 's-resize', 'se-resize', 'sw-resize', 'w-resize', 'ew-resize', 'ns-resize', 'nesw-resize', 'nwse-resize', 'col-resize', 'row-resize', 'all-scroll', 'zoom-in', 'zoom-out', 'grab', 'grabbing']], Union[:class:`ExprRef`, Dict[required=[expr]]]]
        The mouse cursor used over the mark. Any valid `CSS cursor type
        <https://developer.mozilla.org/en-US/docs/Web/CSS/cursor#Values>`__ can be used.
    description : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], str]
        A text description of the mark item for `ARIA accessibility
        <https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA>`__ (SVG output
        only). If specified, this property determines the `"aria-label" attribute
        <https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/ARIA_Techniques/Using_the_aria-label_attribute>`__.
    dir : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], Union[:class:`TextDirection`, Literal['ltr', 'rtl']]]
        The direction of the text. One of ``"ltr"`` (left-to-right) or ``"rtl"``
        (right-to-left). This property determines on which side is truncated in response to
        the limit parameter.

        **Default value:** ``"ltr"``
    dx : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], float]
        The horizontal offset, in pixels, between the text label and its anchor point. The
        offset is applied after rotation by the *angle* property.
    dy : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], float]
        The vertical offset, in pixels, between the text label and its anchor point. The
        offset is applied after rotation by the *angle* property.
    ellipsis : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], str]
        The ellipsis string for text truncated in response to the limit parameter.

        **Default value:** ``"…"``
    endAngle : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], float]
        The end angle in radians for arc marks. A value of ``0`` indicates up (north),
        increasing values proceed clockwise.
    fill : Union[None, Union[:class:`Color`, Union[:class:`ColorName`, Literal['black', 'silver', 'gray', 'white', 'maroon', 'red', 'purple', 'fuchsia', 'green', 'lime', 'olive', 'yellow', 'navy', 'blue', 'teal', 'aqua', 'orange', 'aliceblue', 'antiquewhite', 'aquamarine', 'azure', 'beige', 'bisque', 'blanchedalmond', 'blueviolet', 'brown', 'burlywood', 'cadetblue', 'chartreuse', 'chocolate', 'coral', 'cornflowerblue', 'cornsilk', 'crimson', 'cyan', 'darkblue', 'darkcyan', 'darkgoldenrod', 'darkgray', 'darkgreen', 'darkgrey', 'darkkhaki', 'darkmagenta', 'darkolivegreen', 'darkorange', 'darkorchid', 'darkred', 'darksalmon', 'darkseagreen', 'darkslateblue', 'darkslategray', 'darkslategrey', 'darkturquoise', 'darkviolet', 'deeppink', 'deepskyblue', 'dimgray', 'dimgrey', 'dodgerblue', 'firebrick', 'floralwhite', 'forestgreen', 'gainsboro', 'ghostwhite', 'gold', 'goldenrod', 'greenyellow', 'grey', 'honeydew', 'hotpink', 'indianred', 'indigo', 'ivory', 'khaki', 'lavender', 'lavenderblush', 'lawngreen', 'lemonchiffon', 'lightblue', 'lightcoral', 'lightcyan', 'lightgoldenrodyellow', 'lightgray', 'lightgreen', 'lightgrey', 'lightpink', 'lightsalmon', 'lightseagreen', 'lightskyblue', 'lightslategray', 'lightslategrey', 'lightsteelblue', 'lightyellow', 'limegreen', 'linen', 'magenta', 'mediumaquamarine', 'mediumblue', 'mediumorchid', 'mediumpurple', 'mediumseagreen', 'mediumslateblue', 'mediumspringgreen', 'mediumturquoise', 'mediumvioletred', 'midnightblue', 'mintcream', 'mistyrose', 'moccasin', 'navajowhite', 'oldlace', 'olivedrab', 'orangered', 'orchid', 'palegoldenrod', 'palegreen', 'paleturquoise', 'palevioletred', 'papayawhip', 'peachpuff', 'peru', 'pink', 'plum', 'powderblue', 'rosybrown', 'royalblue', 'saddlebrown', 'salmon', 'sandybrown', 'seagreen', 'seashell', 'sienna', 'skyblue', 'slateblue', 'slategray', 'slategrey', 'snow', 'springgreen', 'steelblue', 'tan', 'thistle', 'tomato', 'turquoise', 'violet', 'wheat', 'whitesmoke', 'yellowgreen', 'rebeccapurple']], Union[:class:`HexColor`, str], str], Union[:class:`ExprRef`, Dict[required=[expr]]], Union[:class:`Gradient`, Union[:class:`LinearGradient`, Dict[required=[gradient, stops]]], Union[:class:`RadialGradient`, Dict[required=[gradient, stops]]]]]
        Default fill color. This property has higher precedence than ``config.color``. Set
        to ``null`` to remove fill.

        **Default value:** (None)
    fillOpacity : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], float]
        The fill opacity (value between [0,1]).

        **Default value:** ``1``
    filled : bool
        Whether the mark's color should be used as fill color instead of stroke color.

        **Default value:** ``false`` for all ``point``, ``line``, and ``rule`` marks as well
        as ``geoshape`` marks for `graticule
        <https://vega.github.io/vega-lite/docs/data.html#graticule>`__ data sources;
        otherwise, ``true``.

        **Note:** This property cannot be used in a `style config
        <https://vega.github.io/vega-lite/docs/mark.html#style-config>`__.
    font : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], str]
        The typeface to set the text in (e.g., ``"Helvetica Neue"`` ).
    fontSize : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], float]
        The font size, in pixels.

        **Default value:** ``11``
    fontStyle : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], Union[:class:`FontStyle`, str]]
        The font style (e.g., ``"italic"`` ).
    fontWeight : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], Union[:class:`FontWeight`, Literal['normal', 'bold', 'lighter', 'bolder', 100, 200, 300, 400, 500, 600, 700, 800, 900]]]
        The font weight. This can be either a string (e.g ``"bold"``, ``"normal"`` ) or a
        number ( ``100``, ``200``, ``300``, ..., ``900`` where ``"normal"`` = ``400`` and
        ``"bold"`` = ``700`` ).
    height : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], float]
        Height of the marks.
    href : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], Union[:class:`URI`, str]]
        A URL to load upon mouse click. If defined, the mark acts as a hyperlink.
    innerRadius : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], float]
        The inner radius in pixels of arc marks. ``innerRadius`` is an alias for
        ``radius2``.

        **Default value:** ``0``
    interpolate : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], Union[:class:`Interpolate`, Literal['basis', 'basis-open', 'basis-closed', 'bundle', 'cardinal', 'cardinal-open', 'cardinal-closed', 'catmull-rom', 'linear', 'linear-closed', 'monotone', 'natural', 'step', 'step-before', 'step-after']]]
        The line interpolation method to use for line and area marks. One of the following:


        * ``"linear"`` : piecewise linear segments, as in a polyline.
        * ``"linear-closed"`` : close the linear segments to form a polygon.
        * ``"step"`` : alternate between horizontal and vertical segments, as in a step
          function.
        * ``"step-before"`` : alternate between vertical and horizontal segments, as in a
          step function.
        * ``"step-after"`` : alternate between horizontal and vertical segments, as in a
          step function.
        * ``"basis"`` : a B-spline, with control point duplication on the ends.
        * ``"basis-open"`` : an open B-spline; may not intersect the start or end.
        * ``"basis-closed"`` : a closed B-spline, as in a loop.
        * ``"cardinal"`` : a Cardinal spline, with control point duplication on the ends.
        * ``"cardinal-open"`` : an open Cardinal spline; may not intersect the start or end,
          but will intersect other control points.
        * ``"cardinal-closed"`` : a closed Cardinal spline, as in a loop.
        * ``"bundle"`` : equivalent to basis, except the tension parameter is used to
          straighten the spline.
        * ``"monotone"`` : cubic interpolation that preserves monotonicity in y.
    invalid : Literal['filter', None]
        Defines how Vega-Lite should handle marks for invalid values ( ``null`` and ``NaN``
        ).


        * If set to ``"filter"`` (default), all data items with null values will be skipped
          (for line, trail, and area marks) or filtered (for other marks).
        * If ``null``, all data items are included. In this case, invalid values will be
          interpreted as zeroes.
    limit : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], float]
        The maximum length of the text mark in pixels. The text value will be automatically
        truncated if the rendered size exceeds the limit.

        **Default value:** ``0`` -- indicating no limit
    lineBreak : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], str]
        A delimiter, such as a newline character, upon which to break text strings into
        multiple lines. This property is ignored if the text is array-valued.
    lineHeight : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], float]
        The line height in pixels (the spacing between subsequent lines of text) for
        multi-line text marks.
    opacity : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], float]
        The overall opacity (value between [0,1]).

        **Default value:** ``0.7`` for non-aggregate plots with ``point``, ``tick``,
        ``circle``, or ``square`` marks or layered ``bar`` charts and ``1`` otherwise.
    order : Union[None, bool]
        For line and trail marks, this ``order`` property can be set to ``null`` or
        ``false`` to make the lines use the original order in the data sources.
    orient : Union[:class:`Orientation`, Literal['horizontal', 'vertical']]
        The orientation of a non-stacked bar, tick, area, and line charts. The value is
        either horizontal (default) or vertical.


        * For bar, rule and tick, this determines whether the size of the bar and tick
          should be applied to x or y dimension.
        * For area, this property determines the orient property of the Vega output.
        * For line and trail marks, this property determines the sort order of the points in
          the line if ``config.sortLineBy`` is not specified. For stacked charts, this is
          always determined by the orientation of the stack; therefore explicitly specified
          value will be ignored.
    outerRadius : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], float]
        The outer radius in pixels of arc marks. ``outerRadius`` is an alias for ``radius``.

        **Default value:** ``0``
    padAngle : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], float]
        The angular padding applied to sides of the arc, in radians.
    radius : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], float]
        For arc mark, the primary (outer) radius in pixels.

        For text marks, polar coordinate radial offset, in pixels, of the text from the
        origin determined by the ``x`` and ``y`` properties.

        **Default value:** ``min(plot_width, plot_height)/2``
    radius2 : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], float]
        The secondary (inner) radius in pixels of arc marks.

        **Default value:** ``0``
    shape : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], Union[Union[:class:`SymbolShape`, str], str]]
        Shape of the point marks. Supported values include:


        * plotting shapes: ``"circle"``, ``"square"``, ``"cross"``, ``"diamond"``,
          ``"triangle-up"``, ``"triangle-down"``, ``"triangle-right"``, or
          ``"triangle-left"``.
        * the line symbol ``"stroke"``
        * centered directional shapes ``"arrow"``, ``"wedge"``, or ``"triangle"``
        * a custom `SVG path string
          <https://developer.mozilla.org/en-US/docs/Web/SVG/Tutorial/Paths>`__ (For correct
          sizing, custom shape paths should be defined within a square bounding box with
          coordinates ranging from -1 to 1 along both the x and y dimensions.)

        **Default value:** ``"circle"``
    size : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], float]
        Default size for marks.


        * For ``point`` / ``circle`` / ``square``, this represents the pixel area of the
          marks. Note that this value sets the area of the symbol; the side lengths will
          increase with the square root of this value.
        * For ``bar``, this represents the band size of the bar, in pixels.
        * For ``text``, this represents the font size, in pixels.

        **Default value:**


        * ``30`` for point, circle, square marks; width/height's ``step``
        * ``2`` for bar marks with discrete dimensions;
        * ``5`` for bar marks with continuous dimensions;
        * ``11`` for text marks.
    smooth : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], bool]
        A boolean flag (default true) indicating if the image should be smoothed when
        resized. If false, individual pixels should be scaled directly rather than
        interpolated with smoothing. For SVG rendering, this option may not work in some
        browsers due to lack of standardization.
    startAngle : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], float]
        The start angle in radians for arc marks. A value of ``0`` indicates up (north),
        increasing values proceed clockwise.
    stroke : Union[None, Union[:class:`Color`, Union[:class:`ColorName`, Literal['black', 'silver', 'gray', 'white', 'maroon', 'red', 'purple', 'fuchsia', 'green', 'lime', 'olive', 'yellow', 'navy', 'blue', 'teal', 'aqua', 'orange', 'aliceblue', 'antiquewhite', 'aquamarine', 'azure', 'beige', 'bisque', 'blanchedalmond', 'blueviolet', 'brown', 'burlywood', 'cadetblue', 'chartreuse', 'chocolate', 'coral', 'cornflowerblue', 'cornsilk', 'crimson', 'cyan', 'darkblue', 'darkcyan', 'darkgoldenrod', 'darkgray', 'darkgreen', 'darkgrey', 'darkkhaki', 'darkmagenta', 'darkolivegreen', 'darkorange', 'darkorchid', 'darkred', 'darksalmon', 'darkseagreen', 'darkslateblue', 'darkslategray', 'darkslategrey', 'darkturquoise', 'darkviolet', 'deeppink', 'deepskyblue', 'dimgray', 'dimgrey', 'dodgerblue', 'firebrick', 'floralwhite', 'forestgreen', 'gainsboro', 'ghostwhite', 'gold', 'goldenrod', 'greenyellow', 'grey', 'honeydew', 'hotpink', 'indianred', 'indigo', 'ivory', 'khaki', 'lavender', 'lavenderblush', 'lawngreen', 'lemonchiffon', 'lightblue', 'lightcoral', 'lightcyan', 'lightgoldenrodyellow', 'lightgray', 'lightgreen', 'lightgrey', 'lightpink', 'lightsalmon', 'lightseagreen', 'lightskyblue', 'lightslategray', 'lightslategrey', 'lightsteelblue', 'lightyellow', 'limegreen', 'linen', 'magenta', 'mediumaquamarine', 'mediumblue', 'mediumorchid', 'mediumpurple', 'mediumseagreen', 'mediumslateblue', 'mediumspringgreen', 'mediumturquoise', 'mediumvioletred', 'midnightblue', 'mintcream', 'mistyrose', 'moccasin', 'navajowhite', 'oldlace', 'olivedrab', 'orangered', 'orchid', 'palegoldenrod', 'palegreen', 'paleturquoise', 'palevioletred', 'papayawhip', 'peachpuff', 'peru', 'pink', 'plum', 'powderblue', 'rosybrown', 'royalblue', 'saddlebrown', 'salmon', 'sandybrown', 'seagreen', 'seashell', 'sienna', 'skyblue', 'slateblue', 'slategray', 'slategrey', 'snow', 'springgreen', 'steelblue', 'tan', 'thistle', 'tomato', 'turquoise', 'violet', 'wheat', 'whitesmoke', 'yellowgreen', 'rebeccapurple']], Union[:class:`HexColor`, str], str], Union[:class:`ExprRef`, Dict[required=[expr]]], Union[:class:`Gradient`, Union[:class:`LinearGradient`, Dict[required=[gradient, stops]]], Union[:class:`RadialGradient`, Dict[required=[gradient, stops]]]]]
        Default stroke color. This property has higher precedence than ``config.color``. Set
        to ``null`` to remove stroke.

        **Default value:** (None)
    strokeCap : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], Union[:class:`StrokeCap`, Literal['butt', 'round', 'square']]]
        The stroke cap for line ending style. One of ``"butt"``, ``"round"``, or
        ``"square"``.

        **Default value:** ``"butt"``
    strokeDash : Union[List[float], Union[:class:`ExprRef`, Dict[required=[expr]]]]
        An array of alternating stroke, space lengths for creating dashed or dotted lines.
    strokeDashOffset : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], float]
        The offset (in pixels) into which to begin drawing with the stroke dash array.
    strokeJoin : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], Union[:class:`StrokeJoin`, Literal['miter', 'round', 'bevel']]]
        The stroke line join method. One of ``"miter"``, ``"round"`` or ``"bevel"``.

        **Default value:** ``"miter"``
    strokeMiterLimit : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], float]
        The miter limit at which to bevel a line join.
    strokeOffset : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], float]
        The offset in pixels at which to draw the group stroke and fill. If unspecified, the
        default behavior is to dynamically offset stroked groups such that 1 pixel stroke
        widths align with the pixel grid.
    strokeOpacity : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], float]
        The stroke opacity (value between [0,1]).

        **Default value:** ``1``
    strokeWidth : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], float]
        The stroke width, in pixels.
    tension : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], float]
        Depending on the interpolation type, sets the tension parameter (for line and area
        marks).
    text : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], Union[:class:`Text`, List[str], str]]
        Placeholder text if the ``text`` channel is not specified
    theta : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], float]
        For arc marks, the arc length in radians if theta2 is not specified, otherwise the
        start arc angle. (A value of 0 indicates up or “north”, increasing values proceed
        clockwise.)

        For text marks, polar coordinate angle in radians.
    theta2 : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], float]
        The end angle of arc marks in radians. A value of 0 indicates up or “north”,
        increasing values proceed clockwise.
    timeUnitBandPosition : float
        Default relative band position for a time unit. If set to ``0``, the marks will be
        positioned at the beginning of the time unit band step. If set to ``0.5``, the marks
        will be positioned in the middle of the time unit band step.
    timeUnitBandSize : float
        Default relative band size for a time unit. If set to ``1``, the bandwidth of the
        marks will be equal to the time unit band step. If set to ``0.5``, bandwidth of the
        marks will be half of the time unit band step.
    tooltip : Union[None, Union[:class:`ExprRef`, Dict[required=[expr]]], Union[:class:`TooltipContent`, Dict[required=[content]]], bool, float, str]
        The tooltip text string to show upon mouse hover or an object defining which fields
        should the tooltip be derived from.


        * If ``tooltip`` is ``true`` or ``{"content": "encoding"}``, then all fields from
          ``encoding`` will be used.
        * If ``tooltip`` is ``{"content": "data"}``, then all fields that appear in the
          highlighted data point will be used.
        * If set to ``null`` or ``false``, then no tooltip will be used.

        See the `tooltip <https://vega.github.io/vega-lite/docs/tooltip.html>`__
        documentation for a detailed discussion about tooltip  in Vega-Lite.

        **Default value:** ``null``
    url : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], Union[:class:`URI`, str]]
        The URL of the image file for image marks.
    width : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], float]
        Width of the marks.
    x : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], float, str]
        X coordinates of the marks, or width of horizontal ``"bar"`` and ``"area"`` without
        specified ``x2`` or ``width``.

        The ``value`` of this channel can be a number or a string ``"width"`` for the width
        of the plot.
    x2 : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], float, str]
        X2 coordinates for ranged ``"area"``, ``"bar"``, ``"rect"``, and  ``"rule"``.

        The ``value`` of this channel can be a number or a string ``"width"`` for the width
        of the plot.
    y : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], float, str]
        Y coordinates of the marks, or height of vertical ``"bar"`` and ``"area"`` without
        specified ``y2`` or ``height``.

        The ``value`` of this channel can be a number or a string ``"height"`` for the
        height of the plot.
    y2 : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], float, str]
        Y2 coordinates for ranged ``"area"``, ``"bar"``, ``"rect"``, and  ``"rule"``.

        The ``value`` of this channel can be a number or a string ``"height"`` for the
        height of the plot.
    """

    _schema = {"$ref": "#/definitions/MarkConfig"}

    def __init__(
        self,
        align: Union[
            Union[
                Union["Align", Literal["left", "center", "right"]],
                Union["ExprRef", "_ParameterProtocol", dict],
            ],
            UndefinedType,
        ] = Undefined,
        angle: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], float], UndefinedType
        ] = Undefined,
        aria: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], bool], UndefinedType
        ] = Undefined,
        ariaRole: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], str], UndefinedType
        ] = Undefined,
        ariaRoleDescription: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], str], UndefinedType
        ] = Undefined,
        aspect: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], bool], UndefinedType
        ] = Undefined,
        baseline: Union[
            Union[
                Union["ExprRef", "_ParameterProtocol", dict],
                Union[
                    "TextBaseline",
                    Union["Baseline", Literal["top", "middle", "bottom"]],
                    str,
                ],
            ],
            UndefinedType,
        ] = Undefined,
        blend: Union[
            Union[
                Union[
                    "Blend",
                    Literal[
                        None,
                        "multiply",
                        "screen",
                        "overlay",
                        "darken",
                        "lighten",
                        "color-dodge",
                        "color-burn",
                        "hard-light",
                        "soft-light",
                        "difference",
                        "exclusion",
                        "hue",
                        "saturation",
                        "color",
                        "luminosity",
                    ],
                ],
                Union["ExprRef", "_ParameterProtocol", dict],
            ],
            UndefinedType,
        ] = Undefined,
        color: Union[
            Union[
                Union[
                    "Color",
                    Union[
                        "ColorName",
                        Literal[
                            "black",
                            "silver",
                            "gray",
                            "white",
                            "maroon",
                            "red",
                            "purple",
                            "fuchsia",
                            "green",
                            "lime",
                            "olive",
                            "yellow",
                            "navy",
                            "blue",
                            "teal",
                            "aqua",
                            "orange",
                            "aliceblue",
                            "antiquewhite",
                            "aquamarine",
                            "azure",
                            "beige",
                            "bisque",
                            "blanchedalmond",
                            "blueviolet",
                            "brown",
                            "burlywood",
                            "cadetblue",
                            "chartreuse",
                            "chocolate",
                            "coral",
                            "cornflowerblue",
                            "cornsilk",
                            "crimson",
                            "cyan",
                            "darkblue",
                            "darkcyan",
                            "darkgoldenrod",
                            "darkgray",
                            "darkgreen",
                            "darkgrey",
                            "darkkhaki",
                            "darkmagenta",
                            "darkolivegreen",
                            "darkorange",
                            "darkorchid",
                            "darkred",
                            "darksalmon",
                            "darkseagreen",
                            "darkslateblue",
                            "darkslategray",
                            "darkslategrey",
                            "darkturquoise",
                            "darkviolet",
                            "deeppink",
                            "deepskyblue",
                            "dimgray",
                            "dimgrey",
                            "dodgerblue",
                            "firebrick",
                            "floralwhite",
                            "forestgreen",
                            "gainsboro",
                            "ghostwhite",
                            "gold",
                            "goldenrod",
                            "greenyellow",
                            "grey",
                            "honeydew",
                            "hotpink",
                            "indianred",
                            "indigo",
                            "ivory",
                            "khaki",
                            "lavender",
                            "lavenderblush",
                            "lawngreen",
                            "lemonchiffon",
                            "lightblue",
                            "lightcoral",
                            "lightcyan",
                            "lightgoldenrodyellow",
                            "lightgray",
                            "lightgreen",
                            "lightgrey",
                            "lightpink",
                            "lightsalmon",
                            "lightseagreen",
                            "lightskyblue",
                            "lightslategray",
                            "lightslategrey",
                            "lightsteelblue",
                            "lightyellow",
                            "limegreen",
                            "linen",
                            "magenta",
                            "mediumaquamarine",
                            "mediumblue",
                            "mediumorchid",
                            "mediumpurple",
                            "mediumseagreen",
                            "mediumslateblue",
                            "mediumspringgreen",
                            "mediumturquoise",
                            "mediumvioletred",
                            "midnightblue",
                            "mintcream",
                            "mistyrose",
                            "moccasin",
                            "navajowhite",
                            "oldlace",
                            "olivedrab",
                            "orangered",
                            "orchid",
                            "palegoldenrod",
                            "palegreen",
                            "paleturquoise",
                            "palevioletred",
                            "papayawhip",
                            "peachpuff",
                            "peru",
                            "pink",
                            "plum",
                            "powderblue",
                            "rosybrown",
                            "royalblue",
                            "saddlebrown",
                            "salmon",
                            "sandybrown",
                            "seagreen",
                            "seashell",
                            "sienna",
                            "skyblue",
                            "slateblue",
                            "slategray",
                            "slategrey",
                            "snow",
                            "springgreen",
                            "steelblue",
                            "tan",
                            "thistle",
                            "tomato",
                            "turquoise",
                            "violet",
                            "wheat",
                            "whitesmoke",
                            "yellowgreen",
                            "rebeccapurple",
                        ],
                    ],
                    Union["HexColor", str],
                    str,
                ],
                Union["ExprRef", "_ParameterProtocol", dict],
                Union[
                    "Gradient",
                    Union["LinearGradient", dict],
                    Union["RadialGradient", dict],
                ],
            ],
            UndefinedType,
        ] = Undefined,
        cornerRadius: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], float], UndefinedType
        ] = Undefined,
        cornerRadiusBottomLeft: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], float], UndefinedType
        ] = Undefined,
        cornerRadiusBottomRight: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], float], UndefinedType
        ] = Undefined,
        cornerRadiusTopLeft: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], float], UndefinedType
        ] = Undefined,
        cornerRadiusTopRight: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], float], UndefinedType
        ] = Undefined,
        cursor: Union[
            Union[
                Union[
                    "Cursor",
                    Literal[
                        "auto",
                        "default",
                        "none",
                        "context-menu",
                        "help",
                        "pointer",
                        "progress",
                        "wait",
                        "cell",
                        "crosshair",
                        "text",
                        "vertical-text",
                        "alias",
                        "copy",
                        "move",
                        "no-drop",
                        "not-allowed",
                        "e-resize",
                        "n-resize",
                        "ne-resize",
                        "nw-resize",
                        "s-resize",
                        "se-resize",
                        "sw-resize",
                        "w-resize",
                        "ew-resize",
                        "ns-resize",
                        "nesw-resize",
                        "nwse-resize",
                        "col-resize",
                        "row-resize",
                        "all-scroll",
                        "zoom-in",
                        "zoom-out",
                        "grab",
                        "grabbing",
                    ],
                ],
                Union["ExprRef", "_ParameterProtocol", dict],
            ],
            UndefinedType,
        ] = Undefined,
        description: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], str], UndefinedType
        ] = Undefined,
        dir: Union[
            Union[
                Union["ExprRef", "_ParameterProtocol", dict],
                Union["TextDirection", Literal["ltr", "rtl"]],
            ],
            UndefinedType,
        ] = Undefined,
        dx: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], float], UndefinedType
        ] = Undefined,
        dy: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], float], UndefinedType
        ] = Undefined,
        ellipsis: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], str], UndefinedType
        ] = Undefined,
        endAngle: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], float], UndefinedType
        ] = Undefined,
        fill: Union[
            Union[
                None,
                Union[
                    "Color",
                    Union[
                        "ColorName",
                        Literal[
                            "black",
                            "silver",
                            "gray",
                            "white",
                            "maroon",
                            "red",
                            "purple",
                            "fuchsia",
                            "green",
                            "lime",
                            "olive",
                            "yellow",
                            "navy",
                            "blue",
                            "teal",
                            "aqua",
                            "orange",
                            "aliceblue",
                            "antiquewhite",
                            "aquamarine",
                            "azure",
                            "beige",
                            "bisque",
                            "blanchedalmond",
                            "blueviolet",
                            "brown",
                            "burlywood",
                            "cadetblue",
                            "chartreuse",
                            "chocolate",
                            "coral",
                            "cornflowerblue",
                            "cornsilk",
                            "crimson",
                            "cyan",
                            "darkblue",
                            "darkcyan",
                            "darkgoldenrod",
                            "darkgray",
                            "darkgreen",
                            "darkgrey",
                            "darkkhaki",
                            "darkmagenta",
                            "darkolivegreen",
                            "darkorange",
                            "darkorchid",
                            "darkred",
                            "darksalmon",
                            "darkseagreen",
                            "darkslateblue",
                            "darkslategray",
                            "darkslategrey",
                            "darkturquoise",
                            "darkviolet",
                            "deeppink",
                            "deepskyblue",
                            "dimgray",
                            "dimgrey",
                            "dodgerblue",
                            "firebrick",
                            "floralwhite",
                            "forestgreen",
                            "gainsboro",
                            "ghostwhite",
                            "gold",
                            "goldenrod",
                            "greenyellow",
                            "grey",
                            "honeydew",
                            "hotpink",
                            "indianred",
                            "indigo",
                            "ivory",
                            "khaki",
                            "lavender",
                            "lavenderblush",
                            "lawngreen",
                            "lemonchiffon",
                            "lightblue",
                            "lightcoral",
                            "lightcyan",
                            "lightgoldenrodyellow",
                            "lightgray",
                            "lightgreen",
                            "lightgrey",
                            "lightpink",
                            "lightsalmon",
                            "lightseagreen",
                            "lightskyblue",
                            "lightslategray",
                            "lightslategrey",
                            "lightsteelblue",
                            "lightyellow",
                            "limegreen",
                            "linen",
                            "magenta",
                            "mediumaquamarine",
                            "mediumblue",
                            "mediumorchid",
                            "mediumpurple",
                            "mediumseagreen",
                            "mediumslateblue",
                            "mediumspringgreen",
                            "mediumturquoise",
                            "mediumvioletred",
                            "midnightblue",
                            "mintcream",
                            "mistyrose",
                            "moccasin",
                            "navajowhite",
                            "oldlace",
                            "olivedrab",
                            "orangered",
                            "orchid",
                            "palegoldenrod",
                            "palegreen",
                            "paleturquoise",
                            "palevioletred",
                            "papayawhip",
                            "peachpuff",
                            "peru",
                            "pink",
                            "plum",
                            "powderblue",
                            "rosybrown",
                            "royalblue",
                            "saddlebrown",
                            "salmon",
                            "sandybrown",
                            "seagreen",
                            "seashell",
                            "sienna",
                            "skyblue",
                            "slateblue",
                            "slategray",
                            "slategrey",
                            "snow",
                            "springgreen",
                            "steelblue",
                            "tan",
                            "thistle",
                            "tomato",
                            "turquoise",
                            "violet",
                            "wheat",
                            "whitesmoke",
                            "yellowgreen",
                            "rebeccapurple",
                        ],
                    ],
                    Union["HexColor", str],
                    str,
                ],
                Union["ExprRef", "_ParameterProtocol", dict],
                Union[
                    "Gradient",
                    Union["LinearGradient", dict],
                    Union["RadialGradient", dict],
                ],
            ],
            UndefinedType,
        ] = Undefined,
        fillOpacity: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], float], UndefinedType
        ] = Undefined,
        filled: Union[bool, UndefinedType] = Undefined,
        font: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], str], UndefinedType
        ] = Undefined,
        fontSize: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], float], UndefinedType
        ] = Undefined,
        fontStyle: Union[
            Union[
                Union["ExprRef", "_ParameterProtocol", dict], Union["FontStyle", str]
            ],
            UndefinedType,
        ] = Undefined,
        fontWeight: Union[
            Union[
                Union["ExprRef", "_ParameterProtocol", dict],
                Union[
                    "FontWeight",
                    Literal[
                        "normal",
                        "bold",
                        "lighter",
                        "bolder",
                        100,
                        200,
                        300,
                        400,
                        500,
                        600,
                        700,
                        800,
                        900,
                    ],
                ],
            ],
            UndefinedType,
        ] = Undefined,
        height: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], float], UndefinedType
        ] = Undefined,
        href: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], Union["URI", str]],
            UndefinedType,
        ] = Undefined,
        innerRadius: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], float], UndefinedType
        ] = Undefined,
        interpolate: Union[
            Union[
                Union["ExprRef", "_ParameterProtocol", dict],
                Union[
                    "Interpolate",
                    Literal[
                        "basis",
                        "basis-open",
                        "basis-closed",
                        "bundle",
                        "cardinal",
                        "cardinal-open",
                        "cardinal-closed",
                        "catmull-rom",
                        "linear",
                        "linear-closed",
                        "monotone",
                        "natural",
                        "step",
                        "step-before",
                        "step-after",
                    ],
                ],
            ],
            UndefinedType,
        ] = Undefined,
        invalid: Union[Literal["filter", None], UndefinedType] = Undefined,
        limit: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], float], UndefinedType
        ] = Undefined,
        lineBreak: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], str], UndefinedType
        ] = Undefined,
        lineHeight: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], float], UndefinedType
        ] = Undefined,
        opacity: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], float], UndefinedType
        ] = Undefined,
        order: Union[Union[None, bool], UndefinedType] = Undefined,
        orient: Union[
            Union["Orientation", Literal["horizontal", "vertical"]], UndefinedType
        ] = Undefined,
        outerRadius: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], float], UndefinedType
        ] = Undefined,
        padAngle: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], float], UndefinedType
        ] = Undefined,
        radius: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], float], UndefinedType
        ] = Undefined,
        radius2: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], float], UndefinedType
        ] = Undefined,
        shape: Union[
            Union[
                Union["ExprRef", "_ParameterProtocol", dict],
                Union[Union["SymbolShape", str], str],
            ],
            UndefinedType,
        ] = Undefined,
        size: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], float], UndefinedType
        ] = Undefined,
        smooth: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], bool], UndefinedType
        ] = Undefined,
        startAngle: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], float], UndefinedType
        ] = Undefined,
        stroke: Union[
            Union[
                None,
                Union[
                    "Color",
                    Union[
                        "ColorName",
                        Literal[
                            "black",
                            "silver",
                            "gray",
                            "white",
                            "maroon",
                            "red",
                            "purple",
                            "fuchsia",
                            "green",
                            "lime",
                            "olive",
                            "yellow",
                            "navy",
                            "blue",
                            "teal",
                            "aqua",
                            "orange",
                            "aliceblue",
                            "antiquewhite",
                            "aquamarine",
                            "azure",
                            "beige",
                            "bisque",
                            "blanchedalmond",
                            "blueviolet",
                            "brown",
                            "burlywood",
                            "cadetblue",
                            "chartreuse",
                            "chocolate",
                            "coral",
                            "cornflowerblue",
                            "cornsilk",
                            "crimson",
                            "cyan",
                            "darkblue",
                            "darkcyan",
                            "darkgoldenrod",
                            "darkgray",
                            "darkgreen",
                            "darkgrey",
                            "darkkhaki",
                            "darkmagenta",
                            "darkolivegreen",
                            "darkorange",
                            "darkorchid",
                            "darkred",
                            "darksalmon",
                            "darkseagreen",
                            "darkslateblue",
                            "darkslategray",
                            "darkslategrey",
                            "darkturquoise",
                            "darkviolet",
                            "deeppink",
                            "deepskyblue",
                            "dimgray",
                            "dimgrey",
                            "dodgerblue",
                            "firebrick",
                            "floralwhite",
                            "forestgreen",
                            "gainsboro",
                            "ghostwhite",
                            "gold",
                            "goldenrod",
                            "greenyellow",
                            "grey",
                            "honeydew",
                            "hotpink",
                            "indianred",
                            "indigo",
                            "ivory",
                            "khaki",
                            "lavender",
                            "lavenderblush",
                            "lawngreen",
                            "lemonchiffon",
                            "lightblue",
                            "lightcoral",
                            "lightcyan",
                            "lightgoldenrodyellow",
                            "lightgray",
                            "lightgreen",
                            "lightgrey",
                            "lightpink",
                            "lightsalmon",
                            "lightseagreen",
                            "lightskyblue",
                            "lightslategray",
                            "lightslategrey",
                            "lightsteelblue",
                            "lightyellow",
                            "limegreen",
                            "linen",
                            "magenta",
                            "mediumaquamarine",
                            "mediumblue",
                            "mediumorchid",
                            "mediumpurple",
                            "mediumseagreen",
                            "mediumslateblue",
                            "mediumspringgreen",
                            "mediumturquoise",
                            "mediumvioletred",
                            "midnightblue",
                            "mintcream",
                            "mistyrose",
                            "moccasin",
                            "navajowhite",
                            "oldlace",
                            "olivedrab",
                            "orangered",
                            "orchid",
                            "palegoldenrod",
                            "palegreen",
                            "paleturquoise",
                            "palevioletred",
                            "papayawhip",
                            "peachpuff",
                            "peru",
                            "pink",
                            "plum",
                            "powderblue",
                            "rosybrown",
                            "royalblue",
                            "saddlebrown",
                            "salmon",
                            "sandybrown",
                            "seagreen",
                            "seashell",
                            "sienna",
                            "skyblue",
                            "slateblue",
                            "slategray",
                            "slategrey",
                            "snow",
                            "springgreen",
                            "steelblue",
                            "tan",
                            "thistle",
                            "tomato",
                            "turquoise",
                            "violet",
                            "wheat",
                            "whitesmoke",
                            "yellowgreen",
                            "rebeccapurple",
                        ],
                    ],
                    Union["HexColor", str],
                    str,
                ],
                Union["ExprRef", "_ParameterProtocol", dict],
                Union[
                    "Gradient",
                    Union["LinearGradient", dict],
                    Union["RadialGradient", dict],
                ],
            ],
            UndefinedType,
        ] = Undefined,
        strokeCap: Union[
            Union[
                Union["ExprRef", "_ParameterProtocol", dict],
                Union["StrokeCap", Literal["butt", "round", "square"]],
            ],
            UndefinedType,
        ] = Undefined,
        strokeDash: Union[
            Union[List[float], Union["ExprRef", "_ParameterProtocol", dict]],
            UndefinedType,
        ] = Undefined,
        strokeDashOffset: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], float], UndefinedType
        ] = Undefined,
        strokeJoin: Union[
            Union[
                Union["ExprRef", "_ParameterProtocol", dict],
                Union["StrokeJoin", Literal["miter", "round", "bevel"]],
            ],
            UndefinedType,
        ] = Undefined,
        strokeMiterLimit: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], float], UndefinedType
        ] = Undefined,
        strokeOffset: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], float], UndefinedType
        ] = Undefined,
        strokeOpacity: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], float], UndefinedType
        ] = Undefined,
        strokeWidth: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], float], UndefinedType
        ] = Undefined,
        tension: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], float], UndefinedType
        ] = Undefined,
        text: Union[
            Union[
                Union["ExprRef", "_ParameterProtocol", dict],
                Union["Text", List[str], str],
            ],
            UndefinedType,
        ] = Undefined,
        theta: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], float], UndefinedType
        ] = Undefined,
        theta2: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], float], UndefinedType
        ] = Undefined,
        timeUnitBandPosition: Union[float, UndefinedType] = Undefined,
        timeUnitBandSize: Union[float, UndefinedType] = Undefined,
        tooltip: Union[
            Union[
                None,
                Union["ExprRef", "_ParameterProtocol", dict],
                Union["TooltipContent", dict],
                bool,
                float,
                str,
            ],
            UndefinedType,
        ] = Undefined,
        url: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], Union["URI", str]],
            UndefinedType,
        ] = Undefined,
        width: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], float], UndefinedType
        ] = Undefined,
        x: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], float, str],
            UndefinedType,
        ] = Undefined,
        x2: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], float, str],
            UndefinedType,
        ] = Undefined,
        y: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], float, str],
            UndefinedType,
        ] = Undefined,
        y2: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], float, str],
            UndefinedType,
        ] = Undefined,
        **kwds
    ):
        super(MarkConfig, self).__init__(
            align=align,
            angle=angle,
            aria=aria,
            ariaRole=ariaRole,
            ariaRoleDescription=ariaRoleDescription,
            aspect=aspect,
            baseline=baseline,
            blend=blend,
            color=color,
            cornerRadius=cornerRadius,
            cornerRadiusBottomLeft=cornerRadiusBottomLeft,
            cornerRadiusBottomRight=cornerRadiusBottomRight,
            cornerRadiusTopLeft=cornerRadiusTopLeft,
            cornerRadiusTopRight=cornerRadiusTopRight,
            cursor=cursor,
            description=description,
            dir=dir,
            dx=dx,
            dy=dy,
            ellipsis=ellipsis,
            endAngle=endAngle,
            fill=fill,
            fillOpacity=fillOpacity,
            filled=filled,
            font=font,
            fontSize=fontSize,
            fontStyle=fontStyle,
            fontWeight=fontWeight,
            height=height,
            href=href,
            innerRadius=innerRadius,
            interpolate=interpolate,
            invalid=invalid,
            limit=limit,
            lineBreak=lineBreak,
            lineHeight=lineHeight,
            opacity=opacity,
            order=order,
            orient=orient,
            outerRadius=outerRadius,
            padAngle=padAngle,
            radius=radius,
            radius2=radius2,
            shape=shape,
            size=size,
            smooth=smooth,
            startAngle=startAngle,
            stroke=stroke,
            strokeCap=strokeCap,
            strokeDash=strokeDash,
            strokeDashOffset=strokeDashOffset,
            strokeJoin=strokeJoin,
            strokeMiterLimit=strokeMiterLimit,
            strokeOffset=strokeOffset,
            strokeOpacity=strokeOpacity,
            strokeWidth=strokeWidth,
            tension=tension,
            text=text,
            theta=theta,
            theta2=theta2,
            timeUnitBandPosition=timeUnitBandPosition,
            timeUnitBandSize=timeUnitBandSize,
            tooltip=tooltip,
            url=url,
            width=width,
            x=x,
            x2=x2,
            y=y,
            y2=y2,
            **kwds
        )


class MarkDef(AnyMark):
    """MarkDef schema wrapper

    Union[:class:`MarkDef`, Dict[required=[type]]]

    Parameters
    ----------

    type : Union[:class:`Mark`, Literal['arc', 'area', 'bar', 'image', 'line', 'point', 'rect', 'rule', 'text', 'tick', 'trail', 'circle', 'square', 'geoshape']]
        The mark type. This could a primitive mark type (one of ``"bar"``, ``"circle"``,
        ``"square"``, ``"tick"``, ``"line"``, ``"area"``, ``"point"``, ``"geoshape"``,
        ``"rule"``, and ``"text"`` ) or a composite mark type ( ``"boxplot"``,
        ``"errorband"``, ``"errorbar"`` ).
    align : Union[Union[:class:`Align`, Literal['left', 'center', 'right']], Union[:class:`ExprRef`, Dict[required=[expr]]]]
        The horizontal alignment of the text or ranged marks (area, bar, image, rect, rule).
        One of ``"left"``, ``"right"``, ``"center"``.

        **Note:** Expression reference is *not* supported for range marks.
    angle : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], float]
        The rotation angle of the text, in degrees.
    aria : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], bool]
        A boolean flag indicating if `ARIA attributes
        <https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA>`__ should be
        included (SVG output only). If ``false``, the "aria-hidden" attribute will be set on
        the output SVG element, removing the mark item from the ARIA accessibility tree.
    ariaRole : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], str]
        Sets the type of user interface element of the mark item for `ARIA accessibility
        <https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA>`__ (SVG output
        only). If specified, this property determines the "role" attribute. Warning: this
        property is experimental and may be changed in the future.
    ariaRoleDescription : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], str]
        A human-readable, author-localized description for the role of the mark item for
        `ARIA accessibility
        <https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA>`__ (SVG output
        only). If specified, this property determines the "aria-roledescription" attribute.
        Warning: this property is experimental and may be changed in the future.
    aspect : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], bool]
        Whether to keep aspect ratio of image marks.
    bandSize : float
        The width of the ticks.

        **Default value:**  3/4 of step (width step for horizontal ticks and height step for
        vertical ticks).
    baseline : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], Union[:class:`TextBaseline`, Union[:class:`Baseline`, Literal['top', 'middle', 'bottom']], str]]
        For text marks, the vertical text baseline. One of ``"alphabetic"`` (default),
        ``"top"``, ``"middle"``, ``"bottom"``, ``"line-top"``, ``"line-bottom"``, or an
        expression reference that provides one of the valid values. The ``"line-top"`` and
        ``"line-bottom"`` values operate similarly to ``"top"`` and ``"bottom"``, but are
        calculated relative to the ``lineHeight`` rather than ``fontSize`` alone.

        For range marks, the vertical alignment of the marks. One of ``"top"``,
        ``"middle"``, ``"bottom"``.

        **Note:** Expression reference is *not* supported for range marks.
    binSpacing : float
        Offset between bars for binned field. The ideal value for this is either 0
        (preferred by statisticians) or 1 (Vega-Lite default, D3 example style).

        **Default value:** ``1``
    blend : Union[Union[:class:`Blend`, Literal[None, 'multiply', 'screen', 'overlay', 'darken', 'lighten', 'color-dodge', 'color-burn', 'hard-light', 'soft-light', 'difference', 'exclusion', 'hue', 'saturation', 'color', 'luminosity']], Union[:class:`ExprRef`, Dict[required=[expr]]]]
        The color blend mode for drawing an item on its current background. Any valid `CSS
        mix-blend-mode <https://developer.mozilla.org/en-US/docs/Web/CSS/mix-blend-mode>`__
        value can be used.

        __Default value:__ ``"source-over"``
    clip : bool
        Whether a mark be clipped to the enclosing group’s width and height.
    color : Union[Union[:class:`Color`, Union[:class:`ColorName`, Literal['black', 'silver', 'gray', 'white', 'maroon', 'red', 'purple', 'fuchsia', 'green', 'lime', 'olive', 'yellow', 'navy', 'blue', 'teal', 'aqua', 'orange', 'aliceblue', 'antiquewhite', 'aquamarine', 'azure', 'beige', 'bisque', 'blanchedalmond', 'blueviolet', 'brown', 'burlywood', 'cadetblue', 'chartreuse', 'chocolate', 'coral', 'cornflowerblue', 'cornsilk', 'crimson', 'cyan', 'darkblue', 'darkcyan', 'darkgoldenrod', 'darkgray', 'darkgreen', 'darkgrey', 'darkkhaki', 'darkmagenta', 'darkolivegreen', 'darkorange', 'darkorchid', 'darkred', 'darksalmon', 'darkseagreen', 'darkslateblue', 'darkslategray', 'darkslategrey', 'darkturquoise', 'darkviolet', 'deeppink', 'deepskyblue', 'dimgray', 'dimgrey', 'dodgerblue', 'firebrick', 'floralwhite', 'forestgreen', 'gainsboro', 'ghostwhite', 'gold', 'goldenrod', 'greenyellow', 'grey', 'honeydew', 'hotpink', 'indianred', 'indigo', 'ivory', 'khaki', 'lavender', 'lavenderblush', 'lawngreen', 'lemonchiffon', 'lightblue', 'lightcoral', 'lightcyan', 'lightgoldenrodyellow', 'lightgray', 'lightgreen', 'lightgrey', 'lightpink', 'lightsalmon', 'lightseagreen', 'lightskyblue', 'lightslategray', 'lightslategrey', 'lightsteelblue', 'lightyellow', 'limegreen', 'linen', 'magenta', 'mediumaquamarine', 'mediumblue', 'mediumorchid', 'mediumpurple', 'mediumseagreen', 'mediumslateblue', 'mediumspringgreen', 'mediumturquoise', 'mediumvioletred', 'midnightblue', 'mintcream', 'mistyrose', 'moccasin', 'navajowhite', 'oldlace', 'olivedrab', 'orangered', 'orchid', 'palegoldenrod', 'palegreen', 'paleturquoise', 'palevioletred', 'papayawhip', 'peachpuff', 'peru', 'pink', 'plum', 'powderblue', 'rosybrown', 'royalblue', 'saddlebrown', 'salmon', 'sandybrown', 'seagreen', 'seashell', 'sienna', 'skyblue', 'slateblue', 'slategray', 'slategrey', 'snow', 'springgreen', 'steelblue', 'tan', 'thistle', 'tomato', 'turquoise', 'violet', 'wheat', 'whitesmoke', 'yellowgreen', 'rebeccapurple']], Union[:class:`HexColor`, str], str], Union[:class:`ExprRef`, Dict[required=[expr]]], Union[:class:`Gradient`, Union[:class:`LinearGradient`, Dict[required=[gradient, stops]]], Union[:class:`RadialGradient`, Dict[required=[gradient, stops]]]]]
        Default color.

        **Default value:** :raw-html:`<span style="color: #4682b4;">&#9632;</span>`
        ``"#4682b4"``

        **Note:**


        * This property cannot be used in a `style config
          <https://vega.github.io/vega-lite/docs/mark.html#style-config>`__.
        * The ``fill`` and ``stroke`` properties have higher precedence than ``color`` and
          will override ``color``.
    continuousBandSize : float
        The default size of the bars on continuous scales.

        **Default value:** ``5``
    cornerRadius : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], float]
        The radius in pixels of rounded rectangles or arcs' corners.

        **Default value:** ``0``
    cornerRadiusBottomLeft : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], float]
        The radius in pixels of rounded rectangles' bottom left corner.

        **Default value:** ``0``
    cornerRadiusBottomRight : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], float]
        The radius in pixels of rounded rectangles' bottom right corner.

        **Default value:** ``0``
    cornerRadiusEnd : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], float]
        For vertical bars, top-left and top-right corner radius.

        For horizontal bars, top-right and bottom-right corner radius.
    cornerRadiusTopLeft : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], float]
        The radius in pixels of rounded rectangles' top right corner.

        **Default value:** ``0``
    cornerRadiusTopRight : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], float]
        The radius in pixels of rounded rectangles' top left corner.

        **Default value:** ``0``
    cursor : Union[Union[:class:`Cursor`, Literal['auto', 'default', 'none', 'context-menu', 'help', 'pointer', 'progress', 'wait', 'cell', 'crosshair', 'text', 'vertical-text', 'alias', 'copy', 'move', 'no-drop', 'not-allowed', 'e-resize', 'n-resize', 'ne-resize', 'nw-resize', 's-resize', 'se-resize', 'sw-resize', 'w-resize', 'ew-resize', 'ns-resize', 'nesw-resize', 'nwse-resize', 'col-resize', 'row-resize', 'all-scroll', 'zoom-in', 'zoom-out', 'grab', 'grabbing']], Union[:class:`ExprRef`, Dict[required=[expr]]]]
        The mouse cursor used over the mark. Any valid `CSS cursor type
        <https://developer.mozilla.org/en-US/docs/Web/CSS/cursor#Values>`__ can be used.
    description : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], str]
        A text description of the mark item for `ARIA accessibility
        <https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA>`__ (SVG output
        only). If specified, this property determines the `"aria-label" attribute
        <https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/ARIA_Techniques/Using_the_aria-label_attribute>`__.
    dir : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], Union[:class:`TextDirection`, Literal['ltr', 'rtl']]]
        The direction of the text. One of ``"ltr"`` (left-to-right) or ``"rtl"``
        (right-to-left). This property determines on which side is truncated in response to
        the limit parameter.

        **Default value:** ``"ltr"``
    discreteBandSize : Union[Union[:class:`RelativeBandSize`, Dict[required=[band]]], float]
        The default size of the bars with discrete dimensions. If unspecified, the default
        size is  ``step-2``, which provides 2 pixel offset between bars.
    dx : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], float]
        The horizontal offset, in pixels, between the text label and its anchor point. The
        offset is applied after rotation by the *angle* property.
    dy : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], float]
        The vertical offset, in pixels, between the text label and its anchor point. The
        offset is applied after rotation by the *angle* property.
    ellipsis : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], str]
        The ellipsis string for text truncated in response to the limit parameter.

        **Default value:** ``"…"``
    fill : Union[None, Union[:class:`Color`, Union[:class:`ColorName`, Literal['black', 'silver', 'gray', 'white', 'maroon', 'red', 'purple', 'fuchsia', 'green', 'lime', 'olive', 'yellow', 'navy', 'blue', 'teal', 'aqua', 'orange', 'aliceblue', 'antiquewhite', 'aquamarine', 'azure', 'beige', 'bisque', 'blanchedalmond', 'blueviolet', 'brown', 'burlywood', 'cadetblue', 'chartreuse', 'chocolate', 'coral', 'cornflowerblue', 'cornsilk', 'crimson', 'cyan', 'darkblue', 'darkcyan', 'darkgoldenrod', 'darkgray', 'darkgreen', 'darkgrey', 'darkkhaki', 'darkmagenta', 'darkolivegreen', 'darkorange', 'darkorchid', 'darkred', 'darksalmon', 'darkseagreen', 'darkslateblue', 'darkslategray', 'darkslategrey', 'darkturquoise', 'darkviolet', 'deeppink', 'deepskyblue', 'dimgray', 'dimgrey', 'dodgerblue', 'firebrick', 'floralwhite', 'forestgreen', 'gainsboro', 'ghostwhite', 'gold', 'goldenrod', 'greenyellow', 'grey', 'honeydew', 'hotpink', 'indianred', 'indigo', 'ivory', 'khaki', 'lavender', 'lavenderblush', 'lawngreen', 'lemonchiffon', 'lightblue', 'lightcoral', 'lightcyan', 'lightgoldenrodyellow', 'lightgray', 'lightgreen', 'lightgrey', 'lightpink', 'lightsalmon', 'lightseagreen', 'lightskyblue', 'lightslategray', 'lightslategrey', 'lightsteelblue', 'lightyellow', 'limegreen', 'linen', 'magenta', 'mediumaquamarine', 'mediumblue', 'mediumorchid', 'mediumpurple', 'mediumseagreen', 'mediumslateblue', 'mediumspringgreen', 'mediumturquoise', 'mediumvioletred', 'midnightblue', 'mintcream', 'mistyrose', 'moccasin', 'navajowhite', 'oldlace', 'olivedrab', 'orangered', 'orchid', 'palegoldenrod', 'palegreen', 'paleturquoise', 'palevioletred', 'papayawhip', 'peachpuff', 'peru', 'pink', 'plum', 'powderblue', 'rosybrown', 'royalblue', 'saddlebrown', 'salmon', 'sandybrown', 'seagreen', 'seashell', 'sienna', 'skyblue', 'slateblue', 'slategray', 'slategrey', 'snow', 'springgreen', 'steelblue', 'tan', 'thistle', 'tomato', 'turquoise', 'violet', 'wheat', 'whitesmoke', 'yellowgreen', 'rebeccapurple']], Union[:class:`HexColor`, str], str], Union[:class:`ExprRef`, Dict[required=[expr]]], Union[:class:`Gradient`, Union[:class:`LinearGradient`, Dict[required=[gradient, stops]]], Union[:class:`RadialGradient`, Dict[required=[gradient, stops]]]]]
        Default fill color. This property has higher precedence than ``config.color``. Set
        to ``null`` to remove fill.

        **Default value:** (None)
    fillOpacity : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], float]
        The fill opacity (value between [0,1]).

        **Default value:** ``1``
    filled : bool
        Whether the mark's color should be used as fill color instead of stroke color.

        **Default value:** ``false`` for all ``point``, ``line``, and ``rule`` marks as well
        as ``geoshape`` marks for `graticule
        <https://vega.github.io/vega-lite/docs/data.html#graticule>`__ data sources;
        otherwise, ``true``.

        **Note:** This property cannot be used in a `style config
        <https://vega.github.io/vega-lite/docs/mark.html#style-config>`__.
    font : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], str]
        The typeface to set the text in (e.g., ``"Helvetica Neue"`` ).
    fontSize : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], float]
        The font size, in pixels.

        **Default value:** ``11``
    fontStyle : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], Union[:class:`FontStyle`, str]]
        The font style (e.g., ``"italic"`` ).
    fontWeight : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], Union[:class:`FontWeight`, Literal['normal', 'bold', 'lighter', 'bolder', 100, 200, 300, 400, 500, 600, 700, 800, 900]]]
        The font weight. This can be either a string (e.g ``"bold"``, ``"normal"`` ) or a
        number ( ``100``, ``200``, ``300``, ..., ``900`` where ``"normal"`` = ``400`` and
        ``"bold"`` = ``700`` ).
    height : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], Union[:class:`RelativeBandSize`, Dict[required=[band]]], float]
        Height of the marks.  One of:


        A number representing a fixed pixel height.

        A relative band size definition.  For example, ``{band: 0.5}`` represents half of
        the band
    href : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], Union[:class:`URI`, str]]
        A URL to load upon mouse click. If defined, the mark acts as a hyperlink.
    innerRadius : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], float]
        The inner radius in pixels of arc marks. ``innerRadius`` is an alias for
        ``radius2``.

        **Default value:** ``0``
    interpolate : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], Union[:class:`Interpolate`, Literal['basis', 'basis-open', 'basis-closed', 'bundle', 'cardinal', 'cardinal-open', 'cardinal-closed', 'catmull-rom', 'linear', 'linear-closed', 'monotone', 'natural', 'step', 'step-before', 'step-after']]]
        The line interpolation method to use for line and area marks. One of the following:


        * ``"linear"`` : piecewise linear segments, as in a polyline.
        * ``"linear-closed"`` : close the linear segments to form a polygon.
        * ``"step"`` : alternate between horizontal and vertical segments, as in a step
          function.
        * ``"step-before"`` : alternate between vertical and horizontal segments, as in a
          step function.
        * ``"step-after"`` : alternate between horizontal and vertical segments, as in a
          step function.
        * ``"basis"`` : a B-spline, with control point duplication on the ends.
        * ``"basis-open"`` : an open B-spline; may not intersect the start or end.
        * ``"basis-closed"`` : a closed B-spline, as in a loop.
        * ``"cardinal"`` : a Cardinal spline, with control point duplication on the ends.
        * ``"cardinal-open"`` : an open Cardinal spline; may not intersect the start or end,
          but will intersect other control points.
        * ``"cardinal-closed"`` : a closed Cardinal spline, as in a loop.
        * ``"bundle"`` : equivalent to basis, except the tension parameter is used to
          straighten the spline.
        * ``"monotone"`` : cubic interpolation that preserves monotonicity in y.
    invalid : Literal['filter', None]
        Defines how Vega-Lite should handle marks for invalid values ( ``null`` and ``NaN``
        ).


        * If set to ``"filter"`` (default), all data items with null values will be skipped
          (for line, trail, and area marks) or filtered (for other marks).
        * If ``null``, all data items are included. In this case, invalid values will be
          interpreted as zeroes.
    limit : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], float]
        The maximum length of the text mark in pixels. The text value will be automatically
        truncated if the rendered size exceeds the limit.

        **Default value:** ``0`` -- indicating no limit
    line : Union[Union[:class:`OverlayMarkDef`, Dict[required=[]]], bool]
        A flag for overlaying line on top of area marks, or an object defining the
        properties of the overlayed lines.


        If this value is an empty object ( ``{}`` ) or ``true``, lines with default
        properties will be used.

        If this value is ``false``, no lines would be automatically added to area marks.

        **Default value:** ``false``.
    lineBreak : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], str]
        A delimiter, such as a newline character, upon which to break text strings into
        multiple lines. This property is ignored if the text is array-valued.
    lineHeight : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], float]
        The line height in pixels (the spacing between subsequent lines of text) for
        multi-line text marks.
    minBandSize : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], float]
        The minimum band size for bar and rectangle marks. **Default value:** ``0.25``
    opacity : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], float]
        The overall opacity (value between [0,1]).

        **Default value:** ``0.7`` for non-aggregate plots with ``point``, ``tick``,
        ``circle``, or ``square`` marks or layered ``bar`` charts and ``1`` otherwise.
    order : Union[None, bool]
        For line and trail marks, this ``order`` property can be set to ``null`` or
        ``false`` to make the lines use the original order in the data sources.
    orient : Union[:class:`Orientation`, Literal['horizontal', 'vertical']]
        The orientation of a non-stacked bar, tick, area, and line charts. The value is
        either horizontal (default) or vertical.


        * For bar, rule and tick, this determines whether the size of the bar and tick
          should be applied to x or y dimension.
        * For area, this property determines the orient property of the Vega output.
        * For line and trail marks, this property determines the sort order of the points in
          the line if ``config.sortLineBy`` is not specified. For stacked charts, this is
          always determined by the orientation of the stack; therefore explicitly specified
          value will be ignored.
    outerRadius : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], float]
        The outer radius in pixels of arc marks. ``outerRadius`` is an alias for ``radius``.

        **Default value:** ``0``
    padAngle : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], float]
        The angular padding applied to sides of the arc, in radians.
    point : Union[Union[:class:`OverlayMarkDef`, Dict[required=[]]], bool, str]
        A flag for overlaying points on top of line or area marks, or an object defining the
        properties of the overlayed points.


        If this property is ``"transparent"``, transparent points will be used (for
        enhancing tooltips and selections).

        If this property is an empty object ( ``{}`` ) or ``true``, filled points with
        default properties will be used.

        If this property is ``false``, no points would be automatically added to line or
        area marks.

        **Default value:** ``false``.
    radius : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], float]
        For arc mark, the primary (outer) radius in pixels.

        For text marks, polar coordinate radial offset, in pixels, of the text from the
        origin determined by the ``x`` and ``y`` properties.

        **Default value:** ``min(plot_width, plot_height)/2``
    radius2 : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], float]
        The secondary (inner) radius in pixels of arc marks.

        **Default value:** ``0``
    radius2Offset : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], float]
        Offset for radius2.
    radiusOffset : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], float]
        Offset for radius.
    shape : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], Union[Union[:class:`SymbolShape`, str], str]]
        Shape of the point marks. Supported values include:


        * plotting shapes: ``"circle"``, ``"square"``, ``"cross"``, ``"diamond"``,
          ``"triangle-up"``, ``"triangle-down"``, ``"triangle-right"``, or
          ``"triangle-left"``.
        * the line symbol ``"stroke"``
        * centered directional shapes ``"arrow"``, ``"wedge"``, or ``"triangle"``
        * a custom `SVG path string
          <https://developer.mozilla.org/en-US/docs/Web/SVG/Tutorial/Paths>`__ (For correct
          sizing, custom shape paths should be defined within a square bounding box with
          coordinates ranging from -1 to 1 along both the x and y dimensions.)

        **Default value:** ``"circle"``
    size : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], float]
        Default size for marks.


        * For ``point`` / ``circle`` / ``square``, this represents the pixel area of the
          marks. Note that this value sets the area of the symbol; the side lengths will
          increase with the square root of this value.
        * For ``bar``, this represents the band size of the bar, in pixels.
        * For ``text``, this represents the font size, in pixels.

        **Default value:**


        * ``30`` for point, circle, square marks; width/height's ``step``
        * ``2`` for bar marks with discrete dimensions;
        * ``5`` for bar marks with continuous dimensions;
        * ``11`` for text marks.
    smooth : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], bool]
        A boolean flag (default true) indicating if the image should be smoothed when
        resized. If false, individual pixels should be scaled directly rather than
        interpolated with smoothing. For SVG rendering, this option may not work in some
        browsers due to lack of standardization.
    stroke : Union[None, Union[:class:`Color`, Union[:class:`ColorName`, Literal['black', 'silver', 'gray', 'white', 'maroon', 'red', 'purple', 'fuchsia', 'green', 'lime', 'olive', 'yellow', 'navy', 'blue', 'teal', 'aqua', 'orange', 'aliceblue', 'antiquewhite', 'aquamarine', 'azure', 'beige', 'bisque', 'blanchedalmond', 'blueviolet', 'brown', 'burlywood', 'cadetblue', 'chartreuse', 'chocolate', 'coral', 'cornflowerblue', 'cornsilk', 'crimson', 'cyan', 'darkblue', 'darkcyan', 'darkgoldenrod', 'darkgray', 'darkgreen', 'darkgrey', 'darkkhaki', 'darkmagenta', 'darkolivegreen', 'darkorange', 'darkorchid', 'darkred', 'darksalmon', 'darkseagreen', 'darkslateblue', 'darkslategray', 'darkslategrey', 'darkturquoise', 'darkviolet', 'deeppink', 'deepskyblue', 'dimgray', 'dimgrey', 'dodgerblue', 'firebrick', 'floralwhite', 'forestgreen', 'gainsboro', 'ghostwhite', 'gold', 'goldenrod', 'greenyellow', 'grey', 'honeydew', 'hotpink', 'indianred', 'indigo', 'ivory', 'khaki', 'lavender', 'lavenderblush', 'lawngreen', 'lemonchiffon', 'lightblue', 'lightcoral', 'lightcyan', 'lightgoldenrodyellow', 'lightgray', 'lightgreen', 'lightgrey', 'lightpink', 'lightsalmon', 'lightseagreen', 'lightskyblue', 'lightslategray', 'lightslategrey', 'lightsteelblue', 'lightyellow', 'limegreen', 'linen', 'magenta', 'mediumaquamarine', 'mediumblue', 'mediumorchid', 'mediumpurple', 'mediumseagreen', 'mediumslateblue', 'mediumspringgreen', 'mediumturquoise', 'mediumvioletred', 'midnightblue', 'mintcream', 'mistyrose', 'moccasin', 'navajowhite', 'oldlace', 'olivedrab', 'orangered', 'orchid', 'palegoldenrod', 'palegreen', 'paleturquoise', 'palevioletred', 'papayawhip', 'peachpuff', 'peru', 'pink', 'plum', 'powderblue', 'rosybrown', 'royalblue', 'saddlebrown', 'salmon', 'sandybrown', 'seagreen', 'seashell', 'sienna', 'skyblue', 'slateblue', 'slategray', 'slategrey', 'snow', 'springgreen', 'steelblue', 'tan', 'thistle', 'tomato', 'turquoise', 'violet', 'wheat', 'whitesmoke', 'yellowgreen', 'rebeccapurple']], Union[:class:`HexColor`, str], str], Union[:class:`ExprRef`, Dict[required=[expr]]], Union[:class:`Gradient`, Union[:class:`LinearGradient`, Dict[required=[gradient, stops]]], Union[:class:`RadialGradient`, Dict[required=[gradient, stops]]]]]
        Default stroke color. This property has higher precedence than ``config.color``. Set
        to ``null`` to remove stroke.

        **Default value:** (None)
    strokeCap : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], Union[:class:`StrokeCap`, Literal['butt', 'round', 'square']]]
        The stroke cap for line ending style. One of ``"butt"``, ``"round"``, or
        ``"square"``.

        **Default value:** ``"butt"``
    strokeDash : Union[List[float], Union[:class:`ExprRef`, Dict[required=[expr]]]]
        An array of alternating stroke, space lengths for creating dashed or dotted lines.
    strokeDashOffset : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], float]
        The offset (in pixels) into which to begin drawing with the stroke dash array.
    strokeJoin : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], Union[:class:`StrokeJoin`, Literal['miter', 'round', 'bevel']]]
        The stroke line join method. One of ``"miter"``, ``"round"`` or ``"bevel"``.

        **Default value:** ``"miter"``
    strokeMiterLimit : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], float]
        The miter limit at which to bevel a line join.
    strokeOffset : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], float]
        The offset in pixels at which to draw the group stroke and fill. If unspecified, the
        default behavior is to dynamically offset stroked groups such that 1 pixel stroke
        widths align with the pixel grid.
    strokeOpacity : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], float]
        The stroke opacity (value between [0,1]).

        **Default value:** ``1``
    strokeWidth : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], float]
        The stroke width, in pixels.
    style : Union[List[str], str]
        A string or array of strings indicating the name of custom styles to apply to the
        mark. A style is a named collection of mark property defaults defined within the
        `style configuration
        <https://vega.github.io/vega-lite/docs/mark.html#style-config>`__. If style is an
        array, later styles will override earlier styles. Any `mark properties
        <https://vega.github.io/vega-lite/docs/encoding.html#mark-prop>`__ explicitly
        defined within the ``encoding`` will override a style default.

        **Default value:** The mark's name. For example, a bar mark will have style
        ``"bar"`` by default. **Note:** Any specified style will augment the default style.
        For example, a bar mark with ``"style": "foo"`` will receive from
        ``config.style.bar`` and ``config.style.foo`` (the specified style ``"foo"`` has
        higher precedence).
    tension : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], float]
        Depending on the interpolation type, sets the tension parameter (for line and area
        marks).
    text : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], Union[:class:`Text`, List[str], str]]
        Placeholder text if the ``text`` channel is not specified
    theta : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], float]
        For arc marks, the arc length in radians if theta2 is not specified, otherwise the
        start arc angle. (A value of 0 indicates up or “north”, increasing values proceed
        clockwise.)

        For text marks, polar coordinate angle in radians.
    theta2 : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], float]
        The end angle of arc marks in radians. A value of 0 indicates up or “north”,
        increasing values proceed clockwise.
    theta2Offset : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], float]
        Offset for theta2.
    thetaOffset : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], float]
        Offset for theta.
    thickness : float
        Thickness of the tick mark.

        **Default value:**  ``1``
    timeUnitBandPosition : float
        Default relative band position for a time unit. If set to ``0``, the marks will be
        positioned at the beginning of the time unit band step. If set to ``0.5``, the marks
        will be positioned in the middle of the time unit band step.
    timeUnitBandSize : float
        Default relative band size for a time unit. If set to ``1``, the bandwidth of the
        marks will be equal to the time unit band step. If set to ``0.5``, bandwidth of the
        marks will be half of the time unit band step.
    tooltip : Union[None, Union[:class:`ExprRef`, Dict[required=[expr]]], Union[:class:`TooltipContent`, Dict[required=[content]]], bool, float, str]
        The tooltip text string to show upon mouse hover or an object defining which fields
        should the tooltip be derived from.


        * If ``tooltip`` is ``true`` or ``{"content": "encoding"}``, then all fields from
          ``encoding`` will be used.
        * If ``tooltip`` is ``{"content": "data"}``, then all fields that appear in the
          highlighted data point will be used.
        * If set to ``null`` or ``false``, then no tooltip will be used.

        See the `tooltip <https://vega.github.io/vega-lite/docs/tooltip.html>`__
        documentation for a detailed discussion about tooltip  in Vega-Lite.

        **Default value:** ``null``
    url : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], Union[:class:`URI`, str]]
        The URL of the image file for image marks.
    width : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], Union[:class:`RelativeBandSize`, Dict[required=[band]]], float]
        Width of the marks.  One of:


        A number representing a fixed pixel width.

        A relative band size definition.  For example, ``{band: 0.5}`` represents half of
        the band.
    x : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], float, str]
        X coordinates of the marks, or width of horizontal ``"bar"`` and ``"area"`` without
        specified ``x2`` or ``width``.

        The ``value`` of this channel can be a number or a string ``"width"`` for the width
        of the plot.
    x2 : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], float, str]
        X2 coordinates for ranged ``"area"``, ``"bar"``, ``"rect"``, and  ``"rule"``.

        The ``value`` of this channel can be a number or a string ``"width"`` for the width
        of the plot.
    x2Offset : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], float]
        Offset for x2-position.
    xOffset : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], float]
        Offset for x-position.
    y : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], float, str]
        Y coordinates of the marks, or height of vertical ``"bar"`` and ``"area"`` without
        specified ``y2`` or ``height``.

        The ``value`` of this channel can be a number or a string ``"height"`` for the
        height of the plot.
    y2 : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], float, str]
        Y2 coordinates for ranged ``"area"``, ``"bar"``, ``"rect"``, and  ``"rule"``.

        The ``value`` of this channel can be a number or a string ``"height"`` for the
        height of the plot.
    y2Offset : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], float]
        Offset for y2-position.
    yOffset : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], float]
        Offset for y-position.
    """

    _schema = {"$ref": "#/definitions/MarkDef"}

    def __init__(
        self,
        type: Union[
            Union[
                "Mark",
                Literal[
                    "arc",
                    "area",
                    "bar",
                    "image",
                    "line",
                    "point",
                    "rect",
                    "rule",
                    "text",
                    "tick",
                    "trail",
                    "circle",
                    "square",
                    "geoshape",
                ],
            ],
            UndefinedType,
        ] = Undefined,
        align: Union[
            Union[
                Union["Align", Literal["left", "center", "right"]],
                Union["ExprRef", "_ParameterProtocol", dict],
            ],
            UndefinedType,
        ] = Undefined,
        angle: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], float], UndefinedType
        ] = Undefined,
        aria: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], bool], UndefinedType
        ] = Undefined,
        ariaRole: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], str], UndefinedType
        ] = Undefined,
        ariaRoleDescription: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], str], UndefinedType
        ] = Undefined,
        aspect: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], bool], UndefinedType
        ] = Undefined,
        bandSize: Union[float, UndefinedType] = Undefined,
        baseline: Union[
            Union[
                Union["ExprRef", "_ParameterProtocol", dict],
                Union[
                    "TextBaseline",
                    Union["Baseline", Literal["top", "middle", "bottom"]],
                    str,
                ],
            ],
            UndefinedType,
        ] = Undefined,
        binSpacing: Union[float, UndefinedType] = Undefined,
        blend: Union[
            Union[
                Union[
                    "Blend",
                    Literal[
                        None,
                        "multiply",
                        "screen",
                        "overlay",
                        "darken",
                        "lighten",
                        "color-dodge",
                        "color-burn",
                        "hard-light",
                        "soft-light",
                        "difference",
                        "exclusion",
                        "hue",
                        "saturation",
                        "color",
                        "luminosity",
                    ],
                ],
                Union["ExprRef", "_ParameterProtocol", dict],
            ],
            UndefinedType,
        ] = Undefined,
        clip: Union[bool, UndefinedType] = Undefined,
        color: Union[
            Union[
                Union[
                    "Color",
                    Union[
                        "ColorName",
                        Literal[
                            "black",
                            "silver",
                            "gray",
                            "white",
                            "maroon",
                            "red",
                            "purple",
                            "fuchsia",
                            "green",
                            "lime",
                            "olive",
                            "yellow",
                            "navy",
                            "blue",
                            "teal",
                            "aqua",
                            "orange",
                            "aliceblue",
                            "antiquewhite",
                            "aquamarine",
                            "azure",
                            "beige",
                            "bisque",
                            "blanchedalmond",
                            "blueviolet",
                            "brown",
                            "burlywood",
                            "cadetblue",
                            "chartreuse",
                            "chocolate",
                            "coral",
                            "cornflowerblue",
                            "cornsilk",
                            "crimson",
                            "cyan",
                            "darkblue",
                            "darkcyan",
                            "darkgoldenrod",
                            "darkgray",
                            "darkgreen",
                            "darkgrey",
                            "darkkhaki",
                            "darkmagenta",
                            "darkolivegreen",
                            "darkorange",
                            "darkorchid",
                            "darkred",
                            "darksalmon",
                            "darkseagreen",
                            "darkslateblue",
                            "darkslategray",
                            "darkslategrey",
                            "darkturquoise",
                            "darkviolet",
                            "deeppink",
                            "deepskyblue",
                            "dimgray",
                            "dimgrey",
                            "dodgerblue",
                            "firebrick",
                            "floralwhite",
                            "forestgreen",
                            "gainsboro",
                            "ghostwhite",
                            "gold",
                            "goldenrod",
                            "greenyellow",
                            "grey",
                            "honeydew",
                            "hotpink",
                            "indianred",
                            "indigo",
                            "ivory",
                            "khaki",
                            "lavender",
                            "lavenderblush",
                            "lawngreen",
                            "lemonchiffon",
                            "lightblue",
                            "lightcoral",
                            "lightcyan",
                            "lightgoldenrodyellow",
                            "lightgray",
                            "lightgreen",
                            "lightgrey",
                            "lightpink",
                            "lightsalmon",
                            "lightseagreen",
                            "lightskyblue",
                            "lightslategray",
                            "lightslategrey",
                            "lightsteelblue",
                            "lightyellow",
                            "limegreen",
                            "linen",
                            "magenta",
                            "mediumaquamarine",
                            "mediumblue",
                            "mediumorchid",
                            "mediumpurple",
                            "mediumseagreen",
                            "mediumslateblue",
                            "mediumspringgreen",
                            "mediumturquoise",
                            "mediumvioletred",
                            "midnightblue",
                            "mintcream",
                            "mistyrose",
                            "moccasin",
                            "navajowhite",
                            "oldlace",
                            "olivedrab",
                            "orangered",
                            "orchid",
                            "palegoldenrod",
                            "palegreen",
                            "paleturquoise",
                            "palevioletred",
                            "papayawhip",
                            "peachpuff",
                            "peru",
                            "pink",
                            "plum",
                            "powderblue",
                            "rosybrown",
                            "royalblue",
                            "saddlebrown",
                            "salmon",
                            "sandybrown",
                            "seagreen",
                            "seashell",
                            "sienna",
                            "skyblue",
                            "slateblue",
                            "slategray",
                            "slategrey",
                            "snow",
                            "springgreen",
                            "steelblue",
                            "tan",
                            "thistle",
                            "tomato",
                            "turquoise",
                            "violet",
                            "wheat",
                            "whitesmoke",
                            "yellowgreen",
                            "rebeccapurple",
                        ],
                    ],
                    Union["HexColor", str],
                    str,
                ],
                Union["ExprRef", "_ParameterProtocol", dict],
                Union[
                    "Gradient",
                    Union["LinearGradient", dict],
                    Union["RadialGradient", dict],
                ],
            ],
            UndefinedType,
        ] = Undefined,
        continuousBandSize: Union[float, UndefinedType] = Undefined,
        cornerRadius: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], float], UndefinedType
        ] = Undefined,
        cornerRadiusBottomLeft: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], float], UndefinedType
        ] = Undefined,
        cornerRadiusBottomRight: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], float], UndefinedType
        ] = Undefined,
        cornerRadiusEnd: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], float], UndefinedType
        ] = Undefined,
        cornerRadiusTopLeft: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], float], UndefinedType
        ] = Undefined,
        cornerRadiusTopRight: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], float], UndefinedType
        ] = Undefined,
        cursor: Union[
            Union[
                Union[
                    "Cursor",
                    Literal[
                        "auto",
                        "default",
                        "none",
                        "context-menu",
                        "help",
                        "pointer",
                        "progress",
                        "wait",
                        "cell",
                        "crosshair",
                        "text",
                        "vertical-text",
                        "alias",
                        "copy",
                        "move",
                        "no-drop",
                        "not-allowed",
                        "e-resize",
                        "n-resize",
                        "ne-resize",
                        "nw-resize",
                        "s-resize",
                        "se-resize",
                        "sw-resize",
                        "w-resize",
                        "ew-resize",
                        "ns-resize",
                        "nesw-resize",
                        "nwse-resize",
                        "col-resize",
                        "row-resize",
                        "all-scroll",
                        "zoom-in",
                        "zoom-out",
                        "grab",
                        "grabbing",
                    ],
                ],
                Union["ExprRef", "_ParameterProtocol", dict],
            ],
            UndefinedType,
        ] = Undefined,
        description: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], str], UndefinedType
        ] = Undefined,
        dir: Union[
            Union[
                Union["ExprRef", "_ParameterProtocol", dict],
                Union["TextDirection", Literal["ltr", "rtl"]],
            ],
            UndefinedType,
        ] = Undefined,
        discreteBandSize: Union[
            Union[Union["RelativeBandSize", dict], float], UndefinedType
        ] = Undefined,
        dx: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], float], UndefinedType
        ] = Undefined,
        dy: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], float], UndefinedType
        ] = Undefined,
        ellipsis: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], str], UndefinedType
        ] = Undefined,
        fill: Union[
            Union[
                None,
                Union[
                    "Color",
                    Union[
                        "ColorName",
                        Literal[
                            "black",
                            "silver",
                            "gray",
                            "white",
                            "maroon",
                            "red",
                            "purple",
                            "fuchsia",
                            "green",
                            "lime",
                            "olive",
                            "yellow",
                            "navy",
                            "blue",
                            "teal",
                            "aqua",
                            "orange",
                            "aliceblue",
                            "antiquewhite",
                            "aquamarine",
                            "azure",
                            "beige",
                            "bisque",
                            "blanchedalmond",
                            "blueviolet",
                            "brown",
                            "burlywood",
                            "cadetblue",
                            "chartreuse",
                            "chocolate",
                            "coral",
                            "cornflowerblue",
                            "cornsilk",
                            "crimson",
                            "cyan",
                            "darkblue",
                            "darkcyan",
                            "darkgoldenrod",
                            "darkgray",
                            "darkgreen",
                            "darkgrey",
                            "darkkhaki",
                            "darkmagenta",
                            "darkolivegreen",
                            "darkorange",
                            "darkorchid",
                            "darkred",
                            "darksalmon",
                            "darkseagreen",
                            "darkslateblue",
                            "darkslategray",
                            "darkslategrey",
                            "darkturquoise",
                            "darkviolet",
                            "deeppink",
                            "deepskyblue",
                            "dimgray",
                            "dimgrey",
                            "dodgerblue",
                            "firebrick",
                            "floralwhite",
                            "forestgreen",
                            "gainsboro",
                            "ghostwhite",
                            "gold",
                            "goldenrod",
                            "greenyellow",
                            "grey",
                            "honeydew",
                            "hotpink",
                            "indianred",
                            "indigo",
                            "ivory",
                            "khaki",
                            "lavender",
                            "lavenderblush",
                            "lawngreen",
                            "lemonchiffon",
                            "lightblue",
                            "lightcoral",
                            "lightcyan",
                            "lightgoldenrodyellow",
                            "lightgray",
                            "lightgreen",
                            "lightgrey",
                            "lightpink",
                            "lightsalmon",
                            "lightseagreen",
                            "lightskyblue",
                            "lightslategray",
                            "lightslategrey",
                            "lightsteelblue",
                            "lightyellow",
                            "limegreen",
                            "linen",
                            "magenta",
                            "mediumaquamarine",
                            "mediumblue",
                            "mediumorchid",
                            "mediumpurple",
                            "mediumseagreen",
                            "mediumslateblue",
                            "mediumspringgreen",
                            "mediumturquoise",
                            "mediumvioletred",
                            "midnightblue",
                            "mintcream",
                            "mistyrose",
                            "moccasin",
                            "navajowhite",
                            "oldlace",
                            "olivedrab",
                            "orangered",
                            "orchid",
                            "palegoldenrod",
                            "palegreen",
                            "paleturquoise",
                            "palevioletred",
                            "papayawhip",
                            "peachpuff",
                            "peru",
                            "pink",
                            "plum",
                            "powderblue",
                            "rosybrown",
                            "royalblue",
                            "saddlebrown",
                            "salmon",
                            "sandybrown",
                            "seagreen",
                            "seashell",
                            "sienna",
                            "skyblue",
                            "slateblue",
                            "slategray",
                            "slategrey",
                            "snow",
                            "springgreen",
                            "steelblue",
                            "tan",
                            "thistle",
                            "tomato",
                            "turquoise",
                            "violet",
                            "wheat",
                            "whitesmoke",
                            "yellowgreen",
                            "rebeccapurple",
                        ],
                    ],
                    Union["HexColor", str],
                    str,
                ],
                Union["ExprRef", "_ParameterProtocol", dict],
                Union[
                    "Gradient",
                    Union["LinearGradient", dict],
                    Union["RadialGradient", dict],
                ],
            ],
            UndefinedType,
        ] = Undefined,
        fillOpacity: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], float], UndefinedType
        ] = Undefined,
        filled: Union[bool, UndefinedType] = Undefined,
        font: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], str], UndefinedType
        ] = Undefined,
        fontSize: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], float], UndefinedType
        ] = Undefined,
        fontStyle: Union[
            Union[
                Union["ExprRef", "_ParameterProtocol", dict], Union["FontStyle", str]
            ],
            UndefinedType,
        ] = Undefined,
        fontWeight: Union[
            Union[
                Union["ExprRef", "_ParameterProtocol", dict],
                Union[
                    "FontWeight",
                    Literal[
                        "normal",
                        "bold",
                        "lighter",
                        "bolder",
                        100,
                        200,
                        300,
                        400,
                        500,
                        600,
                        700,
                        800,
                        900,
                    ],
                ],
            ],
            UndefinedType,
        ] = Undefined,
        height: Union[
            Union[
                Union["ExprRef", "_ParameterProtocol", dict],
                Union["RelativeBandSize", dict],
                float,
            ],
            UndefinedType,
        ] = Undefined,
        href: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], Union["URI", str]],
            UndefinedType,
        ] = Undefined,
        innerRadius: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], float], UndefinedType
        ] = Undefined,
        interpolate: Union[
            Union[
                Union["ExprRef", "_ParameterProtocol", dict],
                Union[
                    "Interpolate",
                    Literal[
                        "basis",
                        "basis-open",
                        "basis-closed",
                        "bundle",
                        "cardinal",
                        "cardinal-open",
                        "cardinal-closed",
                        "catmull-rom",
                        "linear",
                        "linear-closed",
                        "monotone",
                        "natural",
                        "step",
                        "step-before",
                        "step-after",
                    ],
                ],
            ],
            UndefinedType,
        ] = Undefined,
        invalid: Union[Literal["filter", None], UndefinedType] = Undefined,
        limit: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], float], UndefinedType
        ] = Undefined,
        line: Union[
            Union[Union["OverlayMarkDef", dict], bool], UndefinedType
        ] = Undefined,
        lineBreak: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], str], UndefinedType
        ] = Undefined,
        lineHeight: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], float], UndefinedType
        ] = Undefined,
        minBandSize: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], float], UndefinedType
        ] = Undefined,
        opacity: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], float], UndefinedType
        ] = Undefined,
        order: Union[Union[None, bool], UndefinedType] = Undefined,
        orient: Union[
            Union["Orientation", Literal["horizontal", "vertical"]], UndefinedType
        ] = Undefined,
        outerRadius: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], float], UndefinedType
        ] = Undefined,
        padAngle: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], float], UndefinedType
        ] = Undefined,
        point: Union[
            Union[Union["OverlayMarkDef", dict], bool, str], UndefinedType
        ] = Undefined,
        radius: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], float], UndefinedType
        ] = Undefined,
        radius2: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], float], UndefinedType
        ] = Undefined,
        radius2Offset: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], float], UndefinedType
        ] = Undefined,
        radiusOffset: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], float], UndefinedType
        ] = Undefined,
        shape: Union[
            Union[
                Union["ExprRef", "_ParameterProtocol", dict],
                Union[Union["SymbolShape", str], str],
            ],
            UndefinedType,
        ] = Undefined,
        size: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], float], UndefinedType
        ] = Undefined,
        smooth: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], bool], UndefinedType
        ] = Undefined,
        stroke: Union[
            Union[
                None,
                Union[
                    "Color",
                    Union[
                        "ColorName",
                        Literal[
                            "black",
                            "silver",
                            "gray",
                            "white",
                            "maroon",
                            "red",
                            "purple",
                            "fuchsia",
                            "green",
                            "lime",
                            "olive",
                            "yellow",
                            "navy",
                            "blue",
                            "teal",
                            "aqua",
                            "orange",
                            "aliceblue",
                            "antiquewhite",
                            "aquamarine",
                            "azure",
                            "beige",
                            "bisque",
                            "blanchedalmond",
                            "blueviolet",
                            "brown",
                            "burlywood",
                            "cadetblue",
                            "chartreuse",
                            "chocolate",
                            "coral",
                            "cornflowerblue",
                            "cornsilk",
                            "crimson",
                            "cyan",
                            "darkblue",
                            "darkcyan",
                            "darkgoldenrod",
                            "darkgray",
                            "darkgreen",
                            "darkgrey",
                            "darkkhaki",
                            "darkmagenta",
                            "darkolivegreen",
                            "darkorange",
                            "darkorchid",
                            "darkred",
                            "darksalmon",
                            "darkseagreen",
                            "darkslateblue",
                            "darkslategray",
                            "darkslategrey",
                            "darkturquoise",
                            "darkviolet",
                            "deeppink",
                            "deepskyblue",
                            "dimgray",
                            "dimgrey",
                            "dodgerblue",
                            "firebrick",
                            "floralwhite",
                            "forestgreen",
                            "gainsboro",
                            "ghostwhite",
                            "gold",
                            "goldenrod",
                            "greenyellow",
                            "grey",
                            "honeydew",
                            "hotpink",
                            "indianred",
                            "indigo",
                            "ivory",
                            "khaki",
                            "lavender",
                            "lavenderblush",
                            "lawngreen",
                            "lemonchiffon",
                            "lightblue",
                            "lightcoral",
                            "lightcyan",
                            "lightgoldenrodyellow",
                            "lightgray",
                            "lightgreen",
                            "lightgrey",
                            "lightpink",
                            "lightsalmon",
                            "lightseagreen",
                            "lightskyblue",
                            "lightslategray",
                            "lightslategrey",
                            "lightsteelblue",
                            "lightyellow",
                            "limegreen",
                            "linen",
                            "magenta",
                            "mediumaquamarine",
                            "mediumblue",
                            "mediumorchid",
                            "mediumpurple",
                            "mediumseagreen",
                            "mediumslateblue",
                            "mediumspringgreen",
                            "mediumturquoise",
                            "mediumvioletred",
                            "midnightblue",
                            "mintcream",
                            "mistyrose",
                            "moccasin",
                            "navajowhite",
                            "oldlace",
                            "olivedrab",
                            "orangered",
                            "orchid",
                            "palegoldenrod",
                            "palegreen",
                            "paleturquoise",
                            "palevioletred",
                            "papayawhip",
                            "peachpuff",
                            "peru",
                            "pink",
                            "plum",
                            "powderblue",
                            "rosybrown",
                            "royalblue",
                            "saddlebrown",
                            "salmon",
                            "sandybrown",
                            "seagreen",
                            "seashell",
                            "sienna",
                            "skyblue",
                            "slateblue",
                            "slategray",
                            "slategrey",
                            "snow",
                            "springgreen",
                            "steelblue",
                            "tan",
                            "thistle",
                            "tomato",
                            "turquoise",
                            "violet",
                            "wheat",
                            "whitesmoke",
                            "yellowgreen",
                            "rebeccapurple",
                        ],
                    ],
                    Union["HexColor", str],
                    str,
                ],
                Union["ExprRef", "_ParameterProtocol", dict],
                Union[
                    "Gradient",
                    Union["LinearGradient", dict],
                    Union["RadialGradient", dict],
                ],
            ],
            UndefinedType,
        ] = Undefined,
        strokeCap: Union[
            Union[
                Union["ExprRef", "_ParameterProtocol", dict],
                Union["StrokeCap", Literal["butt", "round", "square"]],
            ],
            UndefinedType,
        ] = Undefined,
        strokeDash: Union[
            Union[List[float], Union["ExprRef", "_ParameterProtocol", dict]],
            UndefinedType,
        ] = Undefined,
        strokeDashOffset: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], float], UndefinedType
        ] = Undefined,
        strokeJoin: Union[
            Union[
                Union["ExprRef", "_ParameterProtocol", dict],
                Union["StrokeJoin", Literal["miter", "round", "bevel"]],
            ],
            UndefinedType,
        ] = Undefined,
        strokeMiterLimit: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], float], UndefinedType
        ] = Undefined,
        strokeOffset: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], float], UndefinedType
        ] = Undefined,
        strokeOpacity: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], float], UndefinedType
        ] = Undefined,
        strokeWidth: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], float], UndefinedType
        ] = Undefined,
        style: Union[Union[List[str], str], UndefinedType] = Undefined,
        tension: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], float], UndefinedType
        ] = Undefined,
        text: Union[
            Union[
                Union["ExprRef", "_ParameterProtocol", dict],
                Union["Text", List[str], str],
            ],
            UndefinedType,
        ] = Undefined,
        theta: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], float], UndefinedType
        ] = Undefined,
        theta2: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], float], UndefinedType
        ] = Undefined,
        theta2Offset: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], float], UndefinedType
        ] = Undefined,
        thetaOffset: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], float], UndefinedType
        ] = Undefined,
        thickness: Union[float, UndefinedType] = Undefined,
        timeUnitBandPosition: Union[float, UndefinedType] = Undefined,
        timeUnitBandSize: Union[float, UndefinedType] = Undefined,
        tooltip: Union[
            Union[
                None,
                Union["ExprRef", "_ParameterProtocol", dict],
                Union["TooltipContent", dict],
                bool,
                float,
                str,
            ],
            UndefinedType,
        ] = Undefined,
        url: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], Union["URI", str]],
            UndefinedType,
        ] = Undefined,
        width: Union[
            Union[
                Union["ExprRef", "_ParameterProtocol", dict],
                Union["RelativeBandSize", dict],
                float,
            ],
            UndefinedType,
        ] = Undefined,
        x: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], float, str],
            UndefinedType,
        ] = Undefined,
        x2: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], float, str],
            UndefinedType,
        ] = Undefined,
        x2Offset: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], float], UndefinedType
        ] = Undefined,
        xOffset: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], float], UndefinedType
        ] = Undefined,
        y: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], float, str],
            UndefinedType,
        ] = Undefined,
        y2: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], float, str],
            UndefinedType,
        ] = Undefined,
        y2Offset: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], float], UndefinedType
        ] = Undefined,
        yOffset: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], float], UndefinedType
        ] = Undefined,
        **kwds
    ):
        super(MarkDef, self).__init__(
            type=type,
            align=align,
            angle=angle,
            aria=aria,
            ariaRole=ariaRole,
            ariaRoleDescription=ariaRoleDescription,
            aspect=aspect,
            bandSize=bandSize,
            baseline=baseline,
            binSpacing=binSpacing,
            blend=blend,
            clip=clip,
            color=color,
            continuousBandSize=continuousBandSize,
            cornerRadius=cornerRadius,
            cornerRadiusBottomLeft=cornerRadiusBottomLeft,
            cornerRadiusBottomRight=cornerRadiusBottomRight,
            cornerRadiusEnd=cornerRadiusEnd,
            cornerRadiusTopLeft=cornerRadiusTopLeft,
            cornerRadiusTopRight=cornerRadiusTopRight,
            cursor=cursor,
            description=description,
            dir=dir,
            discreteBandSize=discreteBandSize,
            dx=dx,
            dy=dy,
            ellipsis=ellipsis,
            fill=fill,
            fillOpacity=fillOpacity,
            filled=filled,
            font=font,
            fontSize=fontSize,
            fontStyle=fontStyle,
            fontWeight=fontWeight,
            height=height,
            href=href,
            innerRadius=innerRadius,
            interpolate=interpolate,
            invalid=invalid,
            limit=limit,
            line=line,
            lineBreak=lineBreak,
            lineHeight=lineHeight,
            minBandSize=minBandSize,
            opacity=opacity,
            order=order,
            orient=orient,
            outerRadius=outerRadius,
            padAngle=padAngle,
            point=point,
            radius=radius,
            radius2=radius2,
            radius2Offset=radius2Offset,
            radiusOffset=radiusOffset,
            shape=shape,
            size=size,
            smooth=smooth,
            stroke=stroke,
            strokeCap=strokeCap,
            strokeDash=strokeDash,
            strokeDashOffset=strokeDashOffset,
            strokeJoin=strokeJoin,
            strokeMiterLimit=strokeMiterLimit,
            strokeOffset=strokeOffset,
            strokeOpacity=strokeOpacity,
            strokeWidth=strokeWidth,
            style=style,
            tension=tension,
            text=text,
            theta=theta,
            theta2=theta2,
            theta2Offset=theta2Offset,
            thetaOffset=thetaOffset,
            thickness=thickness,
            timeUnitBandPosition=timeUnitBandPosition,
            timeUnitBandSize=timeUnitBandSize,
            tooltip=tooltip,
            url=url,
            width=width,
            x=x,
            x2=x2,
            x2Offset=x2Offset,
            xOffset=xOffset,
            y=y,
            y2=y2,
            y2Offset=y2Offset,
            yOffset=yOffset,
            **kwds
        )


class MarkPropDefGradientstringnull(VegaLiteSchema):
    """MarkPropDefGradientstringnull schema wrapper

    Union[:class:`MarkPropDefGradientstringnull`,
    Union[:class:`FieldOrDatumDefWithConditionDatumDefGradientstringnull`, Dict[required=[]]],
    Union[:class:`FieldOrDatumDefWithConditionMarkPropFieldDefGradientstringnull`,
    Dict[required=[]]],
    Union[:class:`ValueDefWithConditionMarkPropFieldOrDatumDefGradientstringnull`,
    Dict[required=[]]]]
    """

    _schema = {"$ref": "#/definitions/MarkPropDef<(Gradient|string|null)>"}

    def __init__(self, *args, **kwds):
        super(MarkPropDefGradientstringnull, self).__init__(*args, **kwds)


class FieldOrDatumDefWithConditionDatumDefGradientstringnull(
    ColorDef, MarkPropDefGradientstringnull
):
    """FieldOrDatumDefWithConditionDatumDefGradientstringnull schema wrapper

    Union[:class:`FieldOrDatumDefWithConditionDatumDefGradientstringnull`, Dict[required=[]]]

    Parameters
    ----------

    bandPosition : float
        Relative position on a band of a stacked, binned, time unit, or band scale. For
        example, the marks will be positioned at the beginning of the band if set to ``0``,
        and at the middle of the band if set to ``0.5``.
    condition : Union[List[Union[:class:`ConditionalValueDefGradientstringnullExprRef`, Union[:class:`ConditionalParameterValueDefGradientstringnullExprRef`, Dict[required=[param, value]]], Union[:class:`ConditionalPredicateValueDefGradientstringnullExprRef`, Dict[required=[test, value]]]]], Union[:class:`ConditionalValueDefGradientstringnullExprRef`, Union[:class:`ConditionalParameterValueDefGradientstringnullExprRef`, Dict[required=[param, value]]], Union[:class:`ConditionalPredicateValueDefGradientstringnullExprRef`, Dict[required=[test, value]]]]]
        One or more value definition(s) with `a parameter or a test predicate
        <https://vega.github.io/vega-lite/docs/condition.html>`__.

        **Note:** A field definition's ``condition`` property can only contain `conditional
        value definitions <https://vega.github.io/vega-lite/docs/condition.html#value>`__
        since Vega-Lite only allows at most one encoded field per encoding channel.
    datum : Union[Union[:class:`DateTime`, Dict[required=[]]], Union[:class:`ExprRef`, Dict[required=[expr]]], Union[:class:`PrimitiveValue`, None, bool, float, str], Union[:class:`RepeatRef`, Dict[required=[repeat]]]]
        A constant value in data domain.
    title : Union[None, Union[:class:`Text`, List[str], str]]
        A title for the field. If ``null``, the title will be removed.

        **Default value:**  derived from the field's name and transformation function (
        ``aggregate``, ``bin`` and ``timeUnit`` ). If the field has an aggregate function,
        the function is displayed as part of the title (e.g., ``"Sum of Profit"`` ). If the
        field is binned or has a time unit applied, the applied function is shown in
        parentheses (e.g., ``"Profit (binned)"``, ``"Transaction Date (year-month)"`` ).
        Otherwise, the title is simply the field name.

        **Notes** :

        1) You can customize the default field title format by providing the `fieldTitle
        <https://vega.github.io/vega-lite/docs/config.html#top-level-config>`__ property in
        the `config <https://vega.github.io/vega-lite/docs/config.html>`__ or `fieldTitle
        function via the compile function's options
        <https://vega.github.io/vega-lite/usage/compile.html#field-title>`__.

        2) If both field definition's ``title`` and axis, header, or legend ``title`` are
        defined, axis/header/legend title will be used.
    type : Union[:class:`Type`, Literal['quantitative', 'ordinal', 'temporal', 'nominal', 'geojson']]
        The type of measurement ( ``"quantitative"``, ``"temporal"``, ``"ordinal"``, or
        ``"nominal"`` ) for the encoded field or constant value ( ``datum`` ). It can also
        be a ``"geojson"`` type for encoding `'geoshape'
        <https://vega.github.io/vega-lite/docs/geoshape.html>`__.

        Vega-Lite automatically infers data types in many cases as discussed below. However,
        type is required for a field if: (1) the field is not nominal and the field encoding
        has no specified ``aggregate`` (except ``argmin`` and ``argmax`` ), ``bin``, scale
        type, custom ``sort`` order, nor ``timeUnit`` or (2) if you wish to use an ordinal
        scale for a field with ``bin`` or ``timeUnit``.

        **Default value:**

        1) For a data ``field``, ``"nominal"`` is the default data type unless the field
        encoding has ``aggregate``, ``channel``, ``bin``, scale type, ``sort``, or
        ``timeUnit`` that satisfies the following criteria:


        * ``"quantitative"`` is the default type if (1) the encoded field contains ``bin``
          or ``aggregate`` except ``"argmin"`` and ``"argmax"``, (2) the encoding channel is
          ``latitude`` or ``longitude`` channel or (3) if the specified scale type is `a
          quantitative scale <https://vega.github.io/vega-lite/docs/scale.html#type>`__.
        * ``"temporal"`` is the default type if (1) the encoded field contains ``timeUnit``
          or (2) the specified scale type is a time or utc scale
        * ``"ordinal"`` is the default type if (1) the encoded field contains a `custom sort
          order
          <https://vega.github.io/vega-lite/docs/sort.html#specifying-custom-sort-order>`__,
          (2) the specified scale type is an ordinal/point/band scale, or (3) the encoding
          channel is ``order``.

        2) For a constant value in data domain ( ``datum`` ):


        * ``"quantitative"`` if the datum is a number
        * ``"nominal"`` if the datum is a string
        * ``"temporal"`` if the datum is `a date time object
          <https://vega.github.io/vega-lite/docs/datetime.html>`__

        **Note:**


        * Data ``type`` describes the semantics of the data rather than the primitive data
          types (number, string, etc.). The same primitive data type can have different
          types of measurement. For example, numeric data can represent quantitative,
          ordinal, or nominal data.
        * Data values for a temporal field can be either a date-time string (e.g.,
          ``"2015-03-07 12:32:17"``, ``"17:01"``, ``"2015-03-16"``. ``"2015"`` ) or a
          timestamp number (e.g., ``1552199579097`` ).
        * When using with `bin <https://vega.github.io/vega-lite/docs/bin.html>`__, the
          ``type`` property can be either ``"quantitative"`` (for using a linear bin scale)
          or `"ordinal" (for using an ordinal bin scale)
          <https://vega.github.io/vega-lite/docs/type.html#cast-bin>`__.
        * When using with `timeUnit
          <https://vega.github.io/vega-lite/docs/timeunit.html>`__, the ``type`` property
          can be either ``"temporal"`` (default, for using a temporal scale) or `"ordinal"
          (for using an ordinal scale)
          <https://vega.github.io/vega-lite/docs/type.html#cast-bin>`__.
        * When using with `aggregate
          <https://vega.github.io/vega-lite/docs/aggregate.html>`__, the ``type`` property
          refers to the post-aggregation data type. For example, we can calculate count
          ``distinct`` of a categorical field ``"cat"`` using ``{"aggregate": "distinct",
          "field": "cat"}``. The ``"type"`` of the aggregate output is ``"quantitative"``.
        * Secondary channels (e.g., ``x2``, ``y2``, ``xError``, ``yError`` ) do not have
          ``type`` as they must have exactly the same type as their primary channels (e.g.,
          ``x``, ``y`` ).

        **See also:** `type <https://vega.github.io/vega-lite/docs/type.html>`__
        documentation.
    """

    _schema = {
        "$ref": "#/definitions/FieldOrDatumDefWithCondition<DatumDef,(Gradient|string|null)>"
    }

    def __init__(
        self,
        bandPosition: Union[float, UndefinedType] = Undefined,
        condition: Union[
            Union[
                Union[
                    "ConditionalValueDefGradientstringnullExprRef",
                    Union[
                        "ConditionalParameterValueDefGradientstringnullExprRef", dict
                    ],
                    Union[
                        "ConditionalPredicateValueDefGradientstringnullExprRef", dict
                    ],
                ],
                Union[
                    List["ConditionalValueDefGradientstringnullExprRef"],
                    List[
                        Union[
                            "ConditionalParameterValueDefGradientstringnullExprRef",
                            dict,
                        ]
                    ],
                    List[
                        Union[
                            "ConditionalPredicateValueDefGradientstringnullExprRef",
                            dict,
                        ]
                    ],
                ],
            ],
            UndefinedType,
        ] = Undefined,
        datum: Union[
            Union[
                Union["DateTime", dict],
                Union["ExprRef", "_ParameterProtocol", dict],
                Union["PrimitiveValue", None, bool, float, str],
                Union["RepeatRef", dict],
            ],
            UndefinedType,
        ] = Undefined,
        title: Union[
            Union[None, Union["Text", List[str], str]], UndefinedType
        ] = Undefined,
        type: Union[
            Union[
                "Type",
                Literal["quantitative", "ordinal", "temporal", "nominal", "geojson"],
            ],
            UndefinedType,
        ] = Undefined,
        **kwds
    ):
        super(FieldOrDatumDefWithConditionDatumDefGradientstringnull, self).__init__(
            bandPosition=bandPosition,
            condition=condition,
            datum=datum,
            title=title,
            type=type,
            **kwds
        )


class FieldOrDatumDefWithConditionMarkPropFieldDefGradientstringnull(
    ColorDef, MarkPropDefGradientstringnull
):
    """FieldOrDatumDefWithConditionMarkPropFieldDefGradientstringnull schema wrapper

    Union[:class:`FieldOrDatumDefWithConditionMarkPropFieldDefGradientstringnull`,
    Dict[required=[]]]

    Parameters
    ----------

    aggregate : Union[:class:`Aggregate`, Union[:class:`ArgmaxDef`, Dict[required=[argmax]]], Union[:class:`ArgminDef`, Dict[required=[argmin]]], Union[:class:`NonArgAggregateOp`, Literal['average', 'count', 'distinct', 'max', 'mean', 'median', 'min', 'missing', 'product', 'q1', 'q3', 'ci0', 'ci1', 'stderr', 'stdev', 'stdevp', 'sum', 'valid', 'values', 'variance', 'variancep']]]
        Aggregation function for the field (e.g., ``"mean"``, ``"sum"``, ``"median"``,
        ``"min"``, ``"max"``, ``"count"`` ).

        **Default value:** ``undefined`` (None)

        **See also:** `aggregate <https://vega.github.io/vega-lite/docs/aggregate.html>`__
        documentation.
    bandPosition : float
        Relative position on a band of a stacked, binned, time unit, or band scale. For
        example, the marks will be positioned at the beginning of the band if set to ``0``,
        and at the middle of the band if set to ``0.5``.
    bin : Union[None, Union[:class:`BinParams`, Dict[required=[]]], bool]
        A flag for binning a ``quantitative`` field, `an object defining binning parameters
        <https://vega.github.io/vega-lite/docs/bin.html#bin-parameters>`__, or indicating
        that the data for ``x`` or ``y`` channel are binned before they are imported into
        Vega-Lite ( ``"binned"`` ).


        If ``true``, default `binning parameters
        <https://vega.github.io/vega-lite/docs/bin.html#bin-parameters>`__ will be applied.

        If ``"binned"``, this indicates that the data for the ``x`` (or ``y`` ) channel are
        already binned. You can map the bin-start field to ``x`` (or ``y`` ) and the bin-end
        field to ``x2`` (or ``y2`` ). The scale and axis will be formatted similar to
        binning in Vega-Lite.  To adjust the axis ticks based on the bin step, you can also
        set the axis's `tickMinStep
        <https://vega.github.io/vega-lite/docs/axis.html#ticks>`__ property.

        **Default value:** ``false``

        **See also:** `bin <https://vega.github.io/vega-lite/docs/bin.html>`__
        documentation.
    condition : Union[List[Union[:class:`ConditionalValueDefGradientstringnullExprRef`, Union[:class:`ConditionalParameterValueDefGradientstringnullExprRef`, Dict[required=[param, value]]], Union[:class:`ConditionalPredicateValueDefGradientstringnullExprRef`, Dict[required=[test, value]]]]], Union[:class:`ConditionalValueDefGradientstringnullExprRef`, Union[:class:`ConditionalParameterValueDefGradientstringnullExprRef`, Dict[required=[param, value]]], Union[:class:`ConditionalPredicateValueDefGradientstringnullExprRef`, Dict[required=[test, value]]]]]
        One or more value definition(s) with `a parameter or a test predicate
        <https://vega.github.io/vega-lite/docs/condition.html>`__.

        **Note:** A field definition's ``condition`` property can only contain `conditional
        value definitions <https://vega.github.io/vega-lite/docs/condition.html#value>`__
        since Vega-Lite only allows at most one encoded field per encoding channel.
    field : Union[:class:`Field`, Union[:class:`FieldName`, str], Union[:class:`RepeatRef`, Dict[required=[repeat]]]]
        **Required.** A string defining the name of the field from which to pull a data
        value or an object defining iterated values from the `repeat
        <https://vega.github.io/vega-lite/docs/repeat.html>`__ operator.

        **See also:** `field <https://vega.github.io/vega-lite/docs/field.html>`__
        documentation.

        **Notes:** 1)  Dots ( ``.`` ) and brackets ( ``[`` and ``]`` ) can be used to access
        nested objects (e.g., ``"field": "foo.bar"`` and ``"field": "foo['bar']"`` ). If
        field names contain dots or brackets but are not nested, you can use ``\\`` to
        escape dots and brackets (e.g., ``"a\\.b"`` and ``"a\\[0\\]"`` ). See more details
        about escaping in the `field documentation
        <https://vega.github.io/vega-lite/docs/field.html>`__. 2) ``field`` is not required
        if ``aggregate`` is ``count``.
    legend : Union[None, Union[:class:`Legend`, Dict[required=[]]]]
        An object defining properties of the legend. If ``null``, the legend for the
        encoding channel will be removed.

        **Default value:** If undefined, default `legend properties
        <https://vega.github.io/vega-lite/docs/legend.html>`__ are applied.

        **See also:** `legend <https://vega.github.io/vega-lite/docs/legend.html>`__
        documentation.
    scale : Union[None, Union[:class:`Scale`, Dict[required=[]]]]
        An object defining properties of the channel's scale, which is the function that
        transforms values in the data domain (numbers, dates, strings, etc) to visual values
        (pixels, colors, sizes) of the encoding channels.

        If ``null``, the scale will be `disabled and the data value will be directly encoded
        <https://vega.github.io/vega-lite/docs/scale.html#disable>`__.

        **Default value:** If undefined, default `scale properties
        <https://vega.github.io/vega-lite/docs/scale.html>`__ are applied.

        **See also:** `scale <https://vega.github.io/vega-lite/docs/scale.html>`__
        documentation.
    sort : Union[:class:`Sort`, None, Union[:class:`AllSortString`, Union[:class:`SortByChannelDesc`, Literal['-x', '-y', '-color', '-fill', '-stroke', '-strokeWidth', '-size', '-shape', '-fillOpacity', '-strokeOpacity', '-opacity', '-text']], Union[:class:`SortByChannel`, Literal['x', 'y', 'color', 'fill', 'stroke', 'strokeWidth', 'size', 'shape', 'fillOpacity', 'strokeOpacity', 'opacity', 'text']], Union[:class:`SortOrder`, Literal['ascending', 'descending']]], Union[:class:`EncodingSortField`, Dict[required=[]]], Union[:class:`SortArray`, List[Union[:class:`DateTime`, Dict[required=[]]]], List[bool], List[float], List[str]], Union[:class:`SortByEncoding`, Dict[required=[encoding]]]]
        Sort order for the encoded field.

        For continuous fields (quantitative or temporal), ``sort`` can be either
        ``"ascending"`` or ``"descending"``.

        For discrete fields, ``sort`` can be one of the following:


        * ``"ascending"`` or ``"descending"`` -- for sorting by the values' natural order in
          JavaScript.
        * `A string indicating an encoding channel name to sort by
          <https://vega.github.io/vega-lite/docs/sort.html#sort-by-encoding>`__ (e.g.,
          ``"x"`` or ``"y"`` ) with an optional minus prefix for descending sort (e.g.,
          ``"-x"`` to sort by x-field, descending). This channel string is short-form of `a
          sort-by-encoding definition
          <https://vega.github.io/vega-lite/docs/sort.html#sort-by-encoding>`__. For
          example, ``"sort": "-x"`` is equivalent to ``"sort": {"encoding": "x", "order":
          "descending"}``.
        * `A sort field definition
          <https://vega.github.io/vega-lite/docs/sort.html#sort-field>`__ for sorting by
          another field.
        * `An array specifying the field values in preferred order
          <https://vega.github.io/vega-lite/docs/sort.html#sort-array>`__. In this case, the
          sort order will obey the values in the array, followed by any unspecified values
          in their original order. For discrete time field, values in the sort array can be
          `date-time definition objects
          <https://vega.github.io/vega-lite/docs/datetime.html>`__. In addition, for time
          units ``"month"`` and ``"day"``, the values can be the month or day names (case
          insensitive) or their 3-letter initials (e.g., ``"Mon"``, ``"Tue"`` ).
        * ``null`` indicating no sort.

        **Default value:** ``"ascending"``

        **Note:** ``null`` and sorting by another channel is not supported for ``row`` and
        ``column``.

        **See also:** `sort <https://vega.github.io/vega-lite/docs/sort.html>`__
        documentation.
    timeUnit : Union[Union[:class:`BinnedTimeUnit`, Literal['binnedutcyear', 'binnedutcyearquarter', 'binnedutcyearquartermonth', 'binnedutcyearmonth', 'binnedutcyearmonthdate', 'binnedutcyearmonthdatehours', 'binnedutcyearmonthdatehoursminutes', 'binnedutcyearmonthdatehoursminutesseconds', 'binnedutcyearweek', 'binnedutcyearweekday', 'binnedutcyearweekdayhours', 'binnedutcyearweekdayhoursminutes', 'binnedutcyearweekdayhoursminutesseconds', 'binnedutcyeardayofyear'], Literal['binnedyear', 'binnedyearquarter', 'binnedyearquartermonth', 'binnedyearmonth', 'binnedyearmonthdate', 'binnedyearmonthdatehours', 'binnedyearmonthdatehoursminutes', 'binnedyearmonthdatehoursminutesseconds', 'binnedyearweek', 'binnedyearweekday', 'binnedyearweekdayhours', 'binnedyearweekdayhoursminutes', 'binnedyearweekdayhoursminutesseconds', 'binnedyeardayofyear']], Union[:class:`TimeUnitParams`, Dict[required=[]]], Union[:class:`TimeUnit`, Union[:class:`MultiTimeUnit`, Union[:class:`LocalMultiTimeUnit`, Literal['yearquarter', 'yearquartermonth', 'yearmonth', 'yearmonthdate', 'yearmonthdatehours', 'yearmonthdatehoursminutes', 'yearmonthdatehoursminutesseconds', 'yearweek', 'yearweekday', 'yearweekdayhours', 'yearweekdayhoursminutes', 'yearweekdayhoursminutesseconds', 'yeardayofyear', 'quartermonth', 'monthdate', 'monthdatehours', 'monthdatehoursminutes', 'monthdatehoursminutesseconds', 'weekday', 'weeksdayhours', 'weekdayhoursminutes', 'weekdayhoursminutesseconds', 'dayhours', 'dayhoursminutes', 'dayhoursminutesseconds', 'hoursminutes', 'hoursminutesseconds', 'minutesseconds', 'secondsmilliseconds']], Union[:class:`UtcMultiTimeUnit`, Literal['utcyearquarter', 'utcyearquartermonth', 'utcyearmonth', 'utcyearmonthdate', 'utcyearmonthdatehours', 'utcyearmonthdatehoursminutes', 'utcyearmonthdatehoursminutesseconds', 'utcyearweek', 'utcyearweekday', 'utcyearweekdayhours', 'utcyearweekdayhoursminutes', 'utcyearweekdayhoursminutesseconds', 'utcyeardayofyear', 'utcquartermonth', 'utcmonthdate', 'utcmonthdatehours', 'utcmonthdatehoursminutes', 'utcmonthdatehoursminutesseconds', 'utcweekday', 'utcweeksdayhours', 'utcweekdayhoursminutes', 'utcweekdayhoursminutesseconds', 'utcdayhours', 'utcdayhoursminutes', 'utcdayhoursminutesseconds', 'utchoursminutes', 'utchoursminutesseconds', 'utcminutesseconds', 'utcsecondsmilliseconds']]], Union[:class:`SingleTimeUnit`, Union[:class:`LocalSingleTimeUnit`, Literal['year', 'quarter', 'month', 'week', 'day', 'dayofyear', 'date', 'hours', 'minutes', 'seconds', 'milliseconds']], Union[:class:`UtcSingleTimeUnit`, Literal['utcyear', 'utcquarter', 'utcmonth', 'utcweek', 'utcday', 'utcdayofyear', 'utcdate', 'utchours', 'utcminutes', 'utcseconds', 'utcmilliseconds']]]]]
        Time unit (e.g., ``year``, ``yearmonth``, ``month``, ``hours`` ) for a temporal
        field. or `a temporal field that gets casted as ordinal
        <https://vega.github.io/vega-lite/docs/type.html#cast>`__.

        **Default value:** ``undefined`` (None)

        **See also:** `timeUnit <https://vega.github.io/vega-lite/docs/timeunit.html>`__
        documentation.
    title : Union[None, Union[:class:`Text`, List[str], str]]
        A title for the field. If ``null``, the title will be removed.

        **Default value:**  derived from the field's name and transformation function (
        ``aggregate``, ``bin`` and ``timeUnit`` ). If the field has an aggregate function,
        the function is displayed as part of the title (e.g., ``"Sum of Profit"`` ). If the
        field is binned or has a time unit applied, the applied function is shown in
        parentheses (e.g., ``"Profit (binned)"``, ``"Transaction Date (year-month)"`` ).
        Otherwise, the title is simply the field name.

        **Notes** :

        1) You can customize the default field title format by providing the `fieldTitle
        <https://vega.github.io/vega-lite/docs/config.html#top-level-config>`__ property in
        the `config <https://vega.github.io/vega-lite/docs/config.html>`__ or `fieldTitle
        function via the compile function's options
        <https://vega.github.io/vega-lite/usage/compile.html#field-title>`__.

        2) If both field definition's ``title`` and axis, header, or legend ``title`` are
        defined, axis/header/legend title will be used.
    type : Union[:class:`StandardType`, Literal['quantitative', 'ordinal', 'temporal', 'nominal']]
        The type of measurement ( ``"quantitative"``, ``"temporal"``, ``"ordinal"``, or
        ``"nominal"`` ) for the encoded field or constant value ( ``datum`` ). It can also
        be a ``"geojson"`` type for encoding `'geoshape'
        <https://vega.github.io/vega-lite/docs/geoshape.html>`__.

        Vega-Lite automatically infers data types in many cases as discussed below. However,
        type is required for a field if: (1) the field is not nominal and the field encoding
        has no specified ``aggregate`` (except ``argmin`` and ``argmax`` ), ``bin``, scale
        type, custom ``sort`` order, nor ``timeUnit`` or (2) if you wish to use an ordinal
        scale for a field with ``bin`` or ``timeUnit``.

        **Default value:**

        1) For a data ``field``, ``"nominal"`` is the default data type unless the field
        encoding has ``aggregate``, ``channel``, ``bin``, scale type, ``sort``, or
        ``timeUnit`` that satisfies the following criteria:


        * ``"quantitative"`` is the default type if (1) the encoded field contains ``bin``
          or ``aggregate`` except ``"argmin"`` and ``"argmax"``, (2) the encoding channel is
          ``latitude`` or ``longitude`` channel or (3) if the specified scale type is `a
          quantitative scale <https://vega.github.io/vega-lite/docs/scale.html#type>`__.
        * ``"temporal"`` is the default type if (1) the encoded field contains ``timeUnit``
          or (2) the specified scale type is a time or utc scale
        * ``"ordinal"`` is the default type if (1) the encoded field contains a `custom sort
          order
          <https://vega.github.io/vega-lite/docs/sort.html#specifying-custom-sort-order>`__,
          (2) the specified scale type is an ordinal/point/band scale, or (3) the encoding
          channel is ``order``.

        2) For a constant value in data domain ( ``datum`` ):


        * ``"quantitative"`` if the datum is a number
        * ``"nominal"`` if the datum is a string
        * ``"temporal"`` if the datum is `a date time object
          <https://vega.github.io/vega-lite/docs/datetime.html>`__

        **Note:**


        * Data ``type`` describes the semantics of the data rather than the primitive data
          types (number, string, etc.). The same primitive data type can have different
          types of measurement. For example, numeric data can represent quantitative,
          ordinal, or nominal data.
        * Data values for a temporal field can be either a date-time string (e.g.,
          ``"2015-03-07 12:32:17"``, ``"17:01"``, ``"2015-03-16"``. ``"2015"`` ) or a
          timestamp number (e.g., ``1552199579097`` ).
        * When using with `bin <https://vega.github.io/vega-lite/docs/bin.html>`__, the
          ``type`` property can be either ``"quantitative"`` (for using a linear bin scale)
          or `"ordinal" (for using an ordinal bin scale)
          <https://vega.github.io/vega-lite/docs/type.html#cast-bin>`__.
        * When using with `timeUnit
          <https://vega.github.io/vega-lite/docs/timeunit.html>`__, the ``type`` property
          can be either ``"temporal"`` (default, for using a temporal scale) or `"ordinal"
          (for using an ordinal scale)
          <https://vega.github.io/vega-lite/docs/type.html#cast-bin>`__.
        * When using with `aggregate
          <https://vega.github.io/vega-lite/docs/aggregate.html>`__, the ``type`` property
          refers to the post-aggregation data type. For example, we can calculate count
          ``distinct`` of a categorical field ``"cat"`` using ``{"aggregate": "distinct",
          "field": "cat"}``. The ``"type"`` of the aggregate output is ``"quantitative"``.
        * Secondary channels (e.g., ``x2``, ``y2``, ``xError``, ``yError`` ) do not have
          ``type`` as they must have exactly the same type as their primary channels (e.g.,
          ``x``, ``y`` ).

        **See also:** `type <https://vega.github.io/vega-lite/docs/type.html>`__
        documentation.
    """

    _schema = {
        "$ref": "#/definitions/FieldOrDatumDefWithCondition<MarkPropFieldDef,(Gradient|string|null)>"
    }

    def __init__(
        self,
        aggregate: Union[
            Union[
                "Aggregate",
                Union["ArgmaxDef", dict],
                Union["ArgminDef", dict],
                Union[
                    "NonArgAggregateOp",
                    Literal[
                        "average",
                        "count",
                        "distinct",
                        "max",
                        "mean",
                        "median",
                        "min",
                        "missing",
                        "product",
                        "q1",
                        "q3",
                        "ci0",
                        "ci1",
                        "stderr",
                        "stdev",
                        "stdevp",
                        "sum",
                        "valid",
                        "values",
                        "variance",
                        "variancep",
                    ],
                ],
            ],
            UndefinedType,
        ] = Undefined,
        bandPosition: Union[float, UndefinedType] = Undefined,
        bin: Union[
            Union[None, Union["BinParams", dict], bool], UndefinedType
        ] = Undefined,
        condition: Union[
            Union[
                Union[
                    "ConditionalValueDefGradientstringnullExprRef",
                    Union[
                        "ConditionalParameterValueDefGradientstringnullExprRef", dict
                    ],
                    Union[
                        "ConditionalPredicateValueDefGradientstringnullExprRef", dict
                    ],
                ],
                Union[
                    List["ConditionalValueDefGradientstringnullExprRef"],
                    List[
                        Union[
                            "ConditionalParameterValueDefGradientstringnullExprRef",
                            dict,
                        ]
                    ],
                    List[
                        Union[
                            "ConditionalPredicateValueDefGradientstringnullExprRef",
                            dict,
                        ]
                    ],
                ],
            ],
            UndefinedType,
        ] = Undefined,
        field: Union[
            Union["Field", Union["FieldName", str], Union["RepeatRef", dict]],
            UndefinedType,
        ] = Undefined,
        legend: Union[Union[None, Union["Legend", dict]], UndefinedType] = Undefined,
        scale: Union[Union[None, Union["Scale", dict]], UndefinedType] = Undefined,
        sort: Union[
            Union[
                "Sort",
                None,
                Union[
                    "AllSortString",
                    Union[
                        "SortByChannel",
                        Literal[
                            "x",
                            "y",
                            "color",
                            "fill",
                            "stroke",
                            "strokeWidth",
                            "size",
                            "shape",
                            "fillOpacity",
                            "strokeOpacity",
                            "opacity",
                            "text",
                        ],
                    ],
                    Union[
                        "SortByChannelDesc",
                        Literal[
                            "-x",
                            "-y",
                            "-color",
                            "-fill",
                            "-stroke",
                            "-strokeWidth",
                            "-size",
                            "-shape",
                            "-fillOpacity",
                            "-strokeOpacity",
                            "-opacity",
                            "-text",
                        ],
                    ],
                    Union["SortOrder", Literal["ascending", "descending"]],
                ],
                Union["EncodingSortField", dict],
                Union[
                    "SortArray",
                    List[bool],
                    List[float],
                    List[str],
                    Union[List["DateTime"], List[dict]],
                ],
                Union["SortByEncoding", dict],
            ],
            UndefinedType,
        ] = Undefined,
        timeUnit: Union[
            Union[
                Union[
                    "BinnedTimeUnit",
                    Literal[
                        "binnedutcyear",
                        "binnedutcyearquarter",
                        "binnedutcyearquartermonth",
                        "binnedutcyearmonth",
                        "binnedutcyearmonthdate",
                        "binnedutcyearmonthdatehours",
                        "binnedutcyearmonthdatehoursminutes",
                        "binnedutcyearmonthdatehoursminutesseconds",
                        "binnedutcyearweek",
                        "binnedutcyearweekday",
                        "binnedutcyearweekdayhours",
                        "binnedutcyearweekdayhoursminutes",
                        "binnedutcyearweekdayhoursminutesseconds",
                        "binnedutcyeardayofyear",
                    ],
                    Literal[
                        "binnedyear",
                        "binnedyearquarter",
                        "binnedyearquartermonth",
                        "binnedyearmonth",
                        "binnedyearmonthdate",
                        "binnedyearmonthdatehours",
                        "binnedyearmonthdatehoursminutes",
                        "binnedyearmonthdatehoursminutesseconds",
                        "binnedyearweek",
                        "binnedyearweekday",
                        "binnedyearweekdayhours",
                        "binnedyearweekdayhoursminutes",
                        "binnedyearweekdayhoursminutesseconds",
                        "binnedyeardayofyear",
                    ],
                ],
                Union[
                    "TimeUnit",
                    Union[
                        "MultiTimeUnit",
                        Union[
                            "LocalMultiTimeUnit",
                            Literal[
                                "yearquarter",
                                "yearquartermonth",
                                "yearmonth",
                                "yearmonthdate",
                                "yearmonthdatehours",
                                "yearmonthdatehoursminutes",
                                "yearmonthdatehoursminutesseconds",
                                "yearweek",
                                "yearweekday",
                                "yearweekdayhours",
                                "yearweekdayhoursminutes",
                                "yearweekdayhoursminutesseconds",
                                "yeardayofyear",
                                "quartermonth",
                                "monthdate",
                                "monthdatehours",
                                "monthdatehoursminutes",
                                "monthdatehoursminutesseconds",
                                "weekday",
                                "weeksdayhours",
                                "weekdayhoursminutes",
                                "weekdayhoursminutesseconds",
                                "dayhours",
                                "dayhoursminutes",
                                "dayhoursminutesseconds",
                                "hoursminutes",
                                "hoursminutesseconds",
                                "minutesseconds",
                                "secondsmilliseconds",
                            ],
                        ],
                        Union[
                            "UtcMultiTimeUnit",
                            Literal[
                                "utcyearquarter",
                                "utcyearquartermonth",
                                "utcyearmonth",
                                "utcyearmonthdate",
                                "utcyearmonthdatehours",
                                "utcyearmonthdatehoursminutes",
                                "utcyearmonthdatehoursminutesseconds",
                                "utcyearweek",
                                "utcyearweekday",
                                "utcyearweekdayhours",
                                "utcyearweekdayhoursminutes",
                                "utcyearweekdayhoursminutesseconds",
                                "utcyeardayofyear",
                                "utcquartermonth",
                                "utcmonthdate",
                                "utcmonthdatehours",
                                "utcmonthdatehoursminutes",
                                "utcmonthdatehoursminutesseconds",
                                "utcweekday",
                                "utcweeksdayhours",
                                "utcweekdayhoursminutes",
                                "utcweekdayhoursminutesseconds",
                                "utcdayhours",
                                "utcdayhoursminutes",
                                "utcdayhoursminutesseconds",
                                "utchoursminutes",
                                "utchoursminutesseconds",
                                "utcminutesseconds",
                                "utcsecondsmilliseconds",
                            ],
                        ],
                    ],
                    Union[
                        "SingleTimeUnit",
                        Union[
                            "LocalSingleTimeUnit",
                            Literal[
                                "year",
                                "quarter",
                                "month",
                                "week",
                                "day",
                                "dayofyear",
                                "date",
                                "hours",
                                "minutes",
                                "seconds",
                                "milliseconds",
                            ],
                        ],
                        Union[
                            "UtcSingleTimeUnit",
                            Literal[
                                "utcyear",
                                "utcquarter",
                                "utcmonth",
                                "utcweek",
                                "utcday",
                                "utcdayofyear",
                                "utcdate",
                                "utchours",
                                "utcminutes",
                                "utcseconds",
                                "utcmilliseconds",
                            ],
                        ],
                    ],
                ],
                Union["TimeUnitParams", dict],
            ],
            UndefinedType,
        ] = Undefined,
        title: Union[
            Union[None, Union["Text", List[str], str]], UndefinedType
        ] = Undefined,
        type: Union[
            Union[
                "StandardType",
                Literal["quantitative", "ordinal", "temporal", "nominal"],
            ],
            UndefinedType,
        ] = Undefined,
        **kwds
    ):
        super(
            FieldOrDatumDefWithConditionMarkPropFieldDefGradientstringnull, self
        ).__init__(
            aggregate=aggregate,
            bandPosition=bandPosition,
            bin=bin,
            condition=condition,
            field=field,
            legend=legend,
            scale=scale,
            sort=sort,
            timeUnit=timeUnit,
            title=title,
            type=type,
            **kwds
        )


class MarkPropDefnumber(VegaLiteSchema):
    """MarkPropDefnumber schema wrapper

    Union[:class:`MarkPropDefnumber`, Union[:class:`FieldOrDatumDefWithConditionDatumDefnumber`,
    Dict[required=[]]], Union[:class:`FieldOrDatumDefWithConditionMarkPropFieldDefnumber`,
    Dict[required=[]]], Union[:class:`ValueDefWithConditionMarkPropFieldOrDatumDefnumber`,
    Dict[required=[]]]]
    """

    _schema = {"$ref": "#/definitions/MarkPropDef<number>"}

    def __init__(self, *args, **kwds):
        super(MarkPropDefnumber, self).__init__(*args, **kwds)


class MarkPropDefnumberArray(VegaLiteSchema):
    """MarkPropDefnumberArray schema wrapper

    Union[:class:`MarkPropDefnumberArray`,
    Union[:class:`FieldOrDatumDefWithConditionDatumDefnumberArray`, Dict[required=[]]],
    Union[:class:`FieldOrDatumDefWithConditionMarkPropFieldDefnumberArray`, Dict[required=[]]],
    Union[:class:`ValueDefWithConditionMarkPropFieldOrDatumDefnumberArray`, Dict[required=[]]]]
    """

    _schema = {"$ref": "#/definitions/MarkPropDef<number[]>"}

    def __init__(self, *args, **kwds):
        super(MarkPropDefnumberArray, self).__init__(*args, **kwds)


class MarkPropDefstringnullTypeForShape(VegaLiteSchema):
    """MarkPropDefstringnullTypeForShape schema wrapper

    Union[:class:`MarkPropDefstringnullTypeForShape`,
    Union[:class:`FieldOrDatumDefWithConditionDatumDefstringnull`, Dict[required=[]]],
    Union[:class:`FieldOrDatumDefWithConditionMarkPropFieldDefTypeForShapestringnull`,
    Dict[required=[]]],
    Union[:class:`ValueDefWithConditionMarkPropFieldOrDatumDefTypeForShapestringnull`,
    Dict[required=[]]]]
    """

    _schema = {"$ref": "#/definitions/MarkPropDef<(string|null),TypeForShape>"}

    def __init__(self, *args, **kwds):
        super(MarkPropDefstringnullTypeForShape, self).__init__(*args, **kwds)


class MarkType(VegaLiteSchema):
    """MarkType schema wrapper

    Union[:class:`MarkType`, Literal['arc', 'area', 'image', 'group', 'line', 'path', 'rect',
    'rule', 'shape', 'symbol', 'text', 'trail']]
    """

    _schema = {"$ref": "#/definitions/MarkType"}

    def __init__(self, *args):
        super(MarkType, self).__init__(*args)


class Month(VegaLiteSchema):
    """Month schema wrapper

    Union[:class:`Month`, float]
    """

    _schema = {"$ref": "#/definitions/Month"}

    def __init__(self, *args):
        super(Month, self).__init__(*args)


class MultiLineString(Geometry):
    """MultiLineString schema wrapper

    Union[:class:`MultiLineString`, Dict[required=[coordinates, type]]]
    MultiLineString geometry object. https://tools.ietf.org/html/rfc7946#section-3.1.5

    Parameters
    ----------

    coordinates : List[List[Union[:class:`Position`, List[float]]]]

    type : str
        Specifies the type of GeoJSON object.
    bbox : Union[:class:`BBox`, List[float]]
        Bounding box of the coordinate range of the object's Geometries, Features, or
        Feature Collections. https://tools.ietf.org/html/rfc7946#section-5
    """

    _schema = {"$ref": "#/definitions/MultiLineString"}

    def __init__(
        self,
        coordinates: Union[
            Union[List[List["Position"]], List[List[List[float]]]], UndefinedType
        ] = Undefined,
        type: Union[str, UndefinedType] = Undefined,
        bbox: Union[Union["BBox", List[float]], UndefinedType] = Undefined,
        **kwds
    ):
        super(MultiLineString, self).__init__(
            coordinates=coordinates, type=type, bbox=bbox, **kwds
        )


class MultiPoint(Geometry):
    """MultiPoint schema wrapper

    Union[:class:`MultiPoint`, Dict[required=[coordinates, type]]]
    MultiPoint geometry object.  https://tools.ietf.org/html/rfc7946#section-3.1.3

    Parameters
    ----------

    coordinates : List[Union[:class:`Position`, List[float]]]

    type : str
        Specifies the type of GeoJSON object.
    bbox : Union[:class:`BBox`, List[float]]
        Bounding box of the coordinate range of the object's Geometries, Features, or
        Feature Collections. https://tools.ietf.org/html/rfc7946#section-5
    """

    _schema = {"$ref": "#/definitions/MultiPoint"}

    def __init__(
        self,
        coordinates: Union[
            Union[List["Position"], List[List[float]]], UndefinedType
        ] = Undefined,
        type: Union[str, UndefinedType] = Undefined,
        bbox: Union[Union["BBox", List[float]], UndefinedType] = Undefined,
        **kwds
    ):
        super(MultiPoint, self).__init__(
            coordinates=coordinates, type=type, bbox=bbox, **kwds
        )


class MultiPolygon(Geometry):
    """MultiPolygon schema wrapper

    Union[:class:`MultiPolygon`, Dict[required=[coordinates, type]]]
    MultiPolygon geometry object. https://tools.ietf.org/html/rfc7946#section-3.1.7

    Parameters
    ----------

    coordinates : List[List[List[Union[:class:`Position`, List[float]]]]]

    type : str
        Specifies the type of GeoJSON object.
    bbox : Union[:class:`BBox`, List[float]]
        Bounding box of the coordinate range of the object's Geometries, Features, or
        Feature Collections. https://tools.ietf.org/html/rfc7946#section-5
    """

    _schema = {"$ref": "#/definitions/MultiPolygon"}

    def __init__(
        self,
        coordinates: Union[
            Union[List[List[List["Position"]]], List[List[List[List[float]]]]],
            UndefinedType,
        ] = Undefined,
        type: Union[str, UndefinedType] = Undefined,
        bbox: Union[Union["BBox", List[float]], UndefinedType] = Undefined,
        **kwds
    ):
        super(MultiPolygon, self).__init__(
            coordinates=coordinates, type=type, bbox=bbox, **kwds
        )


class NamedData(DataSource):
    """NamedData schema wrapper

    Union[:class:`NamedData`, Dict[required=[name]]]

    Parameters
    ----------

    name : str
        Provide a placeholder name and bind data at runtime.

        New data may change the layout but Vega does not always resize the chart. To update
        the layout when the data updates, set `autosize
        <https://vega.github.io/vega-lite/docs/size.html#autosize>`__ or explicitly use
        `view.resize <https://vega.github.io/vega/docs/api/view/#view_resize>`__.
    format : Union[:class:`DataFormat`, Union[:class:`CsvDataFormat`, Dict[required=[]]], Union[:class:`DsvDataFormat`, Dict[required=[delimiter]]], Union[:class:`JsonDataFormat`, Dict[required=[]]], Union[:class:`TopoDataFormat`, Dict[required=[]]]]
        An object that specifies the format for parsing the data.
    """

    _schema = {"$ref": "#/definitions/NamedData"}

    def __init__(
        self,
        name: Union[str, UndefinedType] = Undefined,
        format: Union[
            Union[
                "DataFormat",
                Union["CsvDataFormat", dict],
                Union["DsvDataFormat", dict],
                Union["JsonDataFormat", dict],
                Union["TopoDataFormat", dict],
            ],
            UndefinedType,
        ] = Undefined,
        **kwds
    ):
        super(NamedData, self).__init__(name=name, format=format, **kwds)


class NonArgAggregateOp(Aggregate):
    """NonArgAggregateOp schema wrapper

    Union[:class:`NonArgAggregateOp`, Literal['average', 'count', 'distinct', 'max', 'mean',
    'median', 'min', 'missing', 'product', 'q1', 'q3', 'ci0', 'ci1', 'stderr', 'stdev',
    'stdevp', 'sum', 'valid', 'values', 'variance', 'variancep']]
    """

    _schema = {"$ref": "#/definitions/NonArgAggregateOp"}

    def __init__(self, *args):
        super(NonArgAggregateOp, self).__init__(*args)


class NonNormalizedSpec(VegaLiteSchema):
    """NonNormalizedSpec schema wrapper

    Union[:class:`NonNormalizedSpec`, Union[:class:`ConcatSpecGenericSpec`,
    Dict[required=[concat]]], Union[:class:`FacetSpec`, Dict[required=[facet, spec]]],
    Union[:class:`FacetedUnitSpec`, Dict[required=[mark]]],
    Union[:class:`HConcatSpecGenericSpec`, Dict[required=[hconcat]]], Union[:class:`LayerSpec`,
    Dict[required=[layer]]], Union[:class:`RepeatSpec`, Union[:class:`LayerRepeatSpec`,
    Dict[required=[repeat, spec]]], Union[:class:`NonLayerRepeatSpec`, Dict[required=[repeat,
    spec]]]], Union[:class:`VConcatSpecGenericSpec`, Dict[required=[vconcat]]]]
    Any specification in Vega-Lite.
    """

    _schema = {"$ref": "#/definitions/NonNormalizedSpec"}

    def __init__(self, *args, **kwds):
        super(NonNormalizedSpec, self).__init__(*args, **kwds)


class NumberLocale(VegaLiteSchema):
    """NumberLocale schema wrapper

    Union[:class:`NumberLocale`, Dict[required=[decimal, thousands, grouping, currency]]]
    Locale definition for formatting numbers.

    Parameters
    ----------

    currency : Union[:class:`Vector2string`, List[str]]
        The currency prefix and suffix (e.g., ["$", ""]).
    decimal : str
        The decimal point (e.g., ".").
    grouping : List[float]
        The array of group sizes (e.g., [3]), cycled as needed.
    thousands : str
        The group separator (e.g., ",").
    minus : str
        The minus sign (defaults to hyphen-minus, "-").
    nan : str
        The not-a-number value (defaults to "NaN").
    numerals : Union[:class:`Vector10string`, List[str]]
        An array of ten strings to replace the numerals 0-9.
    percent : str
        The percent sign (defaults to "%").
    """

    _schema = {"$ref": "#/definitions/NumberLocale"}

    def __init__(
        self,
        currency: Union[Union["Vector2string", List[str]], UndefinedType] = Undefined,
        decimal: Union[str, UndefinedType] = Undefined,
        grouping: Union[List[float], UndefinedType] = Undefined,
        thousands: Union[str, UndefinedType] = Undefined,
        minus: Union[str, UndefinedType] = Undefined,
        nan: Union[str, UndefinedType] = Undefined,
        numerals: Union[Union["Vector10string", List[str]], UndefinedType] = Undefined,
        percent: Union[str, UndefinedType] = Undefined,
        **kwds
    ):
        super(NumberLocale, self).__init__(
            currency=currency,
            decimal=decimal,
            grouping=grouping,
            thousands=thousands,
            minus=minus,
            nan=nan,
            numerals=numerals,
            percent=percent,
            **kwds
        )


class NumericArrayMarkPropDef(VegaLiteSchema):
    """NumericArrayMarkPropDef schema wrapper

    Union[:class:`NumericArrayMarkPropDef`,
    Union[:class:`FieldOrDatumDefWithConditionDatumDefnumberArray`, Dict[required=[]]],
    Union[:class:`FieldOrDatumDefWithConditionMarkPropFieldDefnumberArray`, Dict[required=[]]],
    Union[:class:`ValueDefWithConditionMarkPropFieldOrDatumDefnumberArray`, Dict[required=[]]]]
    """

    _schema = {"$ref": "#/definitions/NumericArrayMarkPropDef"}

    def __init__(self, *args, **kwds):
        super(NumericArrayMarkPropDef, self).__init__(*args, **kwds)


class FieldOrDatumDefWithConditionDatumDefnumberArray(
    MarkPropDefnumberArray, NumericArrayMarkPropDef
):
    """FieldOrDatumDefWithConditionDatumDefnumberArray schema wrapper

    Union[:class:`FieldOrDatumDefWithConditionDatumDefnumberArray`, Dict[required=[]]]

    Parameters
    ----------

    bandPosition : float
        Relative position on a band of a stacked, binned, time unit, or band scale. For
        example, the marks will be positioned at the beginning of the band if set to ``0``,
        and at the middle of the band if set to ``0.5``.
    condition : Union[List[Union[:class:`ConditionalValueDefnumberArrayExprRef`, Union[:class:`ConditionalParameterValueDefnumberArrayExprRef`, Dict[required=[param, value]]], Union[:class:`ConditionalPredicateValueDefnumberArrayExprRef`, Dict[required=[test, value]]]]], Union[:class:`ConditionalValueDefnumberArrayExprRef`, Union[:class:`ConditionalParameterValueDefnumberArrayExprRef`, Dict[required=[param, value]]], Union[:class:`ConditionalPredicateValueDefnumberArrayExprRef`, Dict[required=[test, value]]]]]
        One or more value definition(s) with `a parameter or a test predicate
        <https://vega.github.io/vega-lite/docs/condition.html>`__.

        **Note:** A field definition's ``condition`` property can only contain `conditional
        value definitions <https://vega.github.io/vega-lite/docs/condition.html#value>`__
        since Vega-Lite only allows at most one encoded field per encoding channel.
    datum : Union[Union[:class:`DateTime`, Dict[required=[]]], Union[:class:`ExprRef`, Dict[required=[expr]]], Union[:class:`PrimitiveValue`, None, bool, float, str], Union[:class:`RepeatRef`, Dict[required=[repeat]]]]
        A constant value in data domain.
    title : Union[None, Union[:class:`Text`, List[str], str]]
        A title for the field. If ``null``, the title will be removed.

        **Default value:**  derived from the field's name and transformation function (
        ``aggregate``, ``bin`` and ``timeUnit`` ). If the field has an aggregate function,
        the function is displayed as part of the title (e.g., ``"Sum of Profit"`` ). If the
        field is binned or has a time unit applied, the applied function is shown in
        parentheses (e.g., ``"Profit (binned)"``, ``"Transaction Date (year-month)"`` ).
        Otherwise, the title is simply the field name.

        **Notes** :

        1) You can customize the default field title format by providing the `fieldTitle
        <https://vega.github.io/vega-lite/docs/config.html#top-level-config>`__ property in
        the `config <https://vega.github.io/vega-lite/docs/config.html>`__ or `fieldTitle
        function via the compile function's options
        <https://vega.github.io/vega-lite/usage/compile.html#field-title>`__.

        2) If both field definition's ``title`` and axis, header, or legend ``title`` are
        defined, axis/header/legend title will be used.
    type : Union[:class:`Type`, Literal['quantitative', 'ordinal', 'temporal', 'nominal', 'geojson']]
        The type of measurement ( ``"quantitative"``, ``"temporal"``, ``"ordinal"``, or
        ``"nominal"`` ) for the encoded field or constant value ( ``datum`` ). It can also
        be a ``"geojson"`` type for encoding `'geoshape'
        <https://vega.github.io/vega-lite/docs/geoshape.html>`__.

        Vega-Lite automatically infers data types in many cases as discussed below. However,
        type is required for a field if: (1) the field is not nominal and the field encoding
        has no specified ``aggregate`` (except ``argmin`` and ``argmax`` ), ``bin``, scale
        type, custom ``sort`` order, nor ``timeUnit`` or (2) if you wish to use an ordinal
        scale for a field with ``bin`` or ``timeUnit``.

        **Default value:**

        1) For a data ``field``, ``"nominal"`` is the default data type unless the field
        encoding has ``aggregate``, ``channel``, ``bin``, scale type, ``sort``, or
        ``timeUnit`` that satisfies the following criteria:


        * ``"quantitative"`` is the default type if (1) the encoded field contains ``bin``
          or ``aggregate`` except ``"argmin"`` and ``"argmax"``, (2) the encoding channel is
          ``latitude`` or ``longitude`` channel or (3) if the specified scale type is `a
          quantitative scale <https://vega.github.io/vega-lite/docs/scale.html#type>`__.
        * ``"temporal"`` is the default type if (1) the encoded field contains ``timeUnit``
          or (2) the specified scale type is a time or utc scale
        * ``"ordinal"`` is the default type if (1) the encoded field contains a `custom sort
          order
          <https://vega.github.io/vega-lite/docs/sort.html#specifying-custom-sort-order>`__,
          (2) the specified scale type is an ordinal/point/band scale, or (3) the encoding
          channel is ``order``.

        2) For a constant value in data domain ( ``datum`` ):


        * ``"quantitative"`` if the datum is a number
        * ``"nominal"`` if the datum is a string
        * ``"temporal"`` if the datum is `a date time object
          <https://vega.github.io/vega-lite/docs/datetime.html>`__

        **Note:**


        * Data ``type`` describes the semantics of the data rather than the primitive data
          types (number, string, etc.). The same primitive data type can have different
          types of measurement. For example, numeric data can represent quantitative,
          ordinal, or nominal data.
        * Data values for a temporal field can be either a date-time string (e.g.,
          ``"2015-03-07 12:32:17"``, ``"17:01"``, ``"2015-03-16"``. ``"2015"`` ) or a
          timestamp number (e.g., ``1552199579097`` ).
        * When using with `bin <https://vega.github.io/vega-lite/docs/bin.html>`__, the
          ``type`` property can be either ``"quantitative"`` (for using a linear bin scale)
          or `"ordinal" (for using an ordinal bin scale)
          <https://vega.github.io/vega-lite/docs/type.html#cast-bin>`__.
        * When using with `timeUnit
          <https://vega.github.io/vega-lite/docs/timeunit.html>`__, the ``type`` property
          can be either ``"temporal"`` (default, for using a temporal scale) or `"ordinal"
          (for using an ordinal scale)
          <https://vega.github.io/vega-lite/docs/type.html#cast-bin>`__.
        * When using with `aggregate
          <https://vega.github.io/vega-lite/docs/aggregate.html>`__, the ``type`` property
          refers to the post-aggregation data type. For example, we can calculate count
          ``distinct`` of a categorical field ``"cat"`` using ``{"aggregate": "distinct",
          "field": "cat"}``. The ``"type"`` of the aggregate output is ``"quantitative"``.
        * Secondary channels (e.g., ``x2``, ``y2``, ``xError``, ``yError`` ) do not have
          ``type`` as they must have exactly the same type as their primary channels (e.g.,
          ``x``, ``y`` ).

        **See also:** `type <https://vega.github.io/vega-lite/docs/type.html>`__
        documentation.
    """

    _schema = {"$ref": "#/definitions/FieldOrDatumDefWithCondition<DatumDef,number[]>"}

    def __init__(
        self,
        bandPosition: Union[float, UndefinedType] = Undefined,
        condition: Union[
            Union[
                Union[
                    "ConditionalValueDefnumberArrayExprRef",
                    Union["ConditionalParameterValueDefnumberArrayExprRef", dict],
                    Union["ConditionalPredicateValueDefnumberArrayExprRef", dict],
                ],
                Union[
                    List["ConditionalValueDefnumberArrayExprRef"],
                    List[Union["ConditionalParameterValueDefnumberArrayExprRef", dict]],
                    List[Union["ConditionalPredicateValueDefnumberArrayExprRef", dict]],
                ],
            ],
            UndefinedType,
        ] = Undefined,
        datum: Union[
            Union[
                Union["DateTime", dict],
                Union["ExprRef", "_ParameterProtocol", dict],
                Union["PrimitiveValue", None, bool, float, str],
                Union["RepeatRef", dict],
            ],
            UndefinedType,
        ] = Undefined,
        title: Union[
            Union[None, Union["Text", List[str], str]], UndefinedType
        ] = Undefined,
        type: Union[
            Union[
                "Type",
                Literal["quantitative", "ordinal", "temporal", "nominal", "geojson"],
            ],
            UndefinedType,
        ] = Undefined,
        **kwds
    ):
        super(FieldOrDatumDefWithConditionDatumDefnumberArray, self).__init__(
            bandPosition=bandPosition,
            condition=condition,
            datum=datum,
            title=title,
            type=type,
            **kwds
        )


class FieldOrDatumDefWithConditionMarkPropFieldDefnumberArray(
    MarkPropDefnumberArray, NumericArrayMarkPropDef
):
    """FieldOrDatumDefWithConditionMarkPropFieldDefnumberArray schema wrapper

    Union[:class:`FieldOrDatumDefWithConditionMarkPropFieldDefnumberArray`, Dict[required=[]]]

    Parameters
    ----------

    aggregate : Union[:class:`Aggregate`, Union[:class:`ArgmaxDef`, Dict[required=[argmax]]], Union[:class:`ArgminDef`, Dict[required=[argmin]]], Union[:class:`NonArgAggregateOp`, Literal['average', 'count', 'distinct', 'max', 'mean', 'median', 'min', 'missing', 'product', 'q1', 'q3', 'ci0', 'ci1', 'stderr', 'stdev', 'stdevp', 'sum', 'valid', 'values', 'variance', 'variancep']]]
        Aggregation function for the field (e.g., ``"mean"``, ``"sum"``, ``"median"``,
        ``"min"``, ``"max"``, ``"count"`` ).

        **Default value:** ``undefined`` (None)

        **See also:** `aggregate <https://vega.github.io/vega-lite/docs/aggregate.html>`__
        documentation.
    bandPosition : float
        Relative position on a band of a stacked, binned, time unit, or band scale. For
        example, the marks will be positioned at the beginning of the band if set to ``0``,
        and at the middle of the band if set to ``0.5``.
    bin : Union[None, Union[:class:`BinParams`, Dict[required=[]]], bool]
        A flag for binning a ``quantitative`` field, `an object defining binning parameters
        <https://vega.github.io/vega-lite/docs/bin.html#bin-parameters>`__, or indicating
        that the data for ``x`` or ``y`` channel are binned before they are imported into
        Vega-Lite ( ``"binned"`` ).


        If ``true``, default `binning parameters
        <https://vega.github.io/vega-lite/docs/bin.html#bin-parameters>`__ will be applied.

        If ``"binned"``, this indicates that the data for the ``x`` (or ``y`` ) channel are
        already binned. You can map the bin-start field to ``x`` (or ``y`` ) and the bin-end
        field to ``x2`` (or ``y2`` ). The scale and axis will be formatted similar to
        binning in Vega-Lite.  To adjust the axis ticks based on the bin step, you can also
        set the axis's `tickMinStep
        <https://vega.github.io/vega-lite/docs/axis.html#ticks>`__ property.

        **Default value:** ``false``

        **See also:** `bin <https://vega.github.io/vega-lite/docs/bin.html>`__
        documentation.
    condition : Union[List[Union[:class:`ConditionalValueDefnumberArrayExprRef`, Union[:class:`ConditionalParameterValueDefnumberArrayExprRef`, Dict[required=[param, value]]], Union[:class:`ConditionalPredicateValueDefnumberArrayExprRef`, Dict[required=[test, value]]]]], Union[:class:`ConditionalValueDefnumberArrayExprRef`, Union[:class:`ConditionalParameterValueDefnumberArrayExprRef`, Dict[required=[param, value]]], Union[:class:`ConditionalPredicateValueDefnumberArrayExprRef`, Dict[required=[test, value]]]]]
        One or more value definition(s) with `a parameter or a test predicate
        <https://vega.github.io/vega-lite/docs/condition.html>`__.

        **Note:** A field definition's ``condition`` property can only contain `conditional
        value definitions <https://vega.github.io/vega-lite/docs/condition.html#value>`__
        since Vega-Lite only allows at most one encoded field per encoding channel.
    field : Union[:class:`Field`, Union[:class:`FieldName`, str], Union[:class:`RepeatRef`, Dict[required=[repeat]]]]
        **Required.** A string defining the name of the field from which to pull a data
        value or an object defining iterated values from the `repeat
        <https://vega.github.io/vega-lite/docs/repeat.html>`__ operator.

        **See also:** `field <https://vega.github.io/vega-lite/docs/field.html>`__
        documentation.

        **Notes:** 1)  Dots ( ``.`` ) and brackets ( ``[`` and ``]`` ) can be used to access
        nested objects (e.g., ``"field": "foo.bar"`` and ``"field": "foo['bar']"`` ). If
        field names contain dots or brackets but are not nested, you can use ``\\`` to
        escape dots and brackets (e.g., ``"a\\.b"`` and ``"a\\[0\\]"`` ). See more details
        about escaping in the `field documentation
        <https://vega.github.io/vega-lite/docs/field.html>`__. 2) ``field`` is not required
        if ``aggregate`` is ``count``.
    legend : Union[None, Union[:class:`Legend`, Dict[required=[]]]]
        An object defining properties of the legend. If ``null``, the legend for the
        encoding channel will be removed.

        **Default value:** If undefined, default `legend properties
        <https://vega.github.io/vega-lite/docs/legend.html>`__ are applied.

        **See also:** `legend <https://vega.github.io/vega-lite/docs/legend.html>`__
        documentation.
    scale : Union[None, Union[:class:`Scale`, Dict[required=[]]]]
        An object defining properties of the channel's scale, which is the function that
        transforms values in the data domain (numbers, dates, strings, etc) to visual values
        (pixels, colors, sizes) of the encoding channels.

        If ``null``, the scale will be `disabled and the data value will be directly encoded
        <https://vega.github.io/vega-lite/docs/scale.html#disable>`__.

        **Default value:** If undefined, default `scale properties
        <https://vega.github.io/vega-lite/docs/scale.html>`__ are applied.

        **See also:** `scale <https://vega.github.io/vega-lite/docs/scale.html>`__
        documentation.
    sort : Union[:class:`Sort`, None, Union[:class:`AllSortString`, Union[:class:`SortByChannelDesc`, Literal['-x', '-y', '-color', '-fill', '-stroke', '-strokeWidth', '-size', '-shape', '-fillOpacity', '-strokeOpacity', '-opacity', '-text']], Union[:class:`SortByChannel`, Literal['x', 'y', 'color', 'fill', 'stroke', 'strokeWidth', 'size', 'shape', 'fillOpacity', 'strokeOpacity', 'opacity', 'text']], Union[:class:`SortOrder`, Literal['ascending', 'descending']]], Union[:class:`EncodingSortField`, Dict[required=[]]], Union[:class:`SortArray`, List[Union[:class:`DateTime`, Dict[required=[]]]], List[bool], List[float], List[str]], Union[:class:`SortByEncoding`, Dict[required=[encoding]]]]
        Sort order for the encoded field.

        For continuous fields (quantitative or temporal), ``sort`` can be either
        ``"ascending"`` or ``"descending"``.

        For discrete fields, ``sort`` can be one of the following:


        * ``"ascending"`` or ``"descending"`` -- for sorting by the values' natural order in
          JavaScript.
        * `A string indicating an encoding channel name to sort by
          <https://vega.github.io/vega-lite/docs/sort.html#sort-by-encoding>`__ (e.g.,
          ``"x"`` or ``"y"`` ) with an optional minus prefix for descending sort (e.g.,
          ``"-x"`` to sort by x-field, descending). This channel string is short-form of `a
          sort-by-encoding definition
          <https://vega.github.io/vega-lite/docs/sort.html#sort-by-encoding>`__. For
          example, ``"sort": "-x"`` is equivalent to ``"sort": {"encoding": "x", "order":
          "descending"}``.
        * `A sort field definition
          <https://vega.github.io/vega-lite/docs/sort.html#sort-field>`__ for sorting by
          another field.
        * `An array specifying the field values in preferred order
          <https://vega.github.io/vega-lite/docs/sort.html#sort-array>`__. In this case, the
          sort order will obey the values in the array, followed by any unspecified values
          in their original order. For discrete time field, values in the sort array can be
          `date-time definition objects
          <https://vega.github.io/vega-lite/docs/datetime.html>`__. In addition, for time
          units ``"month"`` and ``"day"``, the values can be the month or day names (case
          insensitive) or their 3-letter initials (e.g., ``"Mon"``, ``"Tue"`` ).
        * ``null`` indicating no sort.

        **Default value:** ``"ascending"``

        **Note:** ``null`` and sorting by another channel is not supported for ``row`` and
        ``column``.

        **See also:** `sort <https://vega.github.io/vega-lite/docs/sort.html>`__
        documentation.
    timeUnit : Union[Union[:class:`BinnedTimeUnit`, Literal['binnedutcyear', 'binnedutcyearquarter', 'binnedutcyearquartermonth', 'binnedutcyearmonth', 'binnedutcyearmonthdate', 'binnedutcyearmonthdatehours', 'binnedutcyearmonthdatehoursminutes', 'binnedutcyearmonthdatehoursminutesseconds', 'binnedutcyearweek', 'binnedutcyearweekday', 'binnedutcyearweekdayhours', 'binnedutcyearweekdayhoursminutes', 'binnedutcyearweekdayhoursminutesseconds', 'binnedutcyeardayofyear'], Literal['binnedyear', 'binnedyearquarter', 'binnedyearquartermonth', 'binnedyearmonth', 'binnedyearmonthdate', 'binnedyearmonthdatehours', 'binnedyearmonthdatehoursminutes', 'binnedyearmonthdatehoursminutesseconds', 'binnedyearweek', 'binnedyearweekday', 'binnedyearweekdayhours', 'binnedyearweekdayhoursminutes', 'binnedyearweekdayhoursminutesseconds', 'binnedyeardayofyear']], Union[:class:`TimeUnitParams`, Dict[required=[]]], Union[:class:`TimeUnit`, Union[:class:`MultiTimeUnit`, Union[:class:`LocalMultiTimeUnit`, Literal['yearquarter', 'yearquartermonth', 'yearmonth', 'yearmonthdate', 'yearmonthdatehours', 'yearmonthdatehoursminutes', 'yearmonthdatehoursminutesseconds', 'yearweek', 'yearweekday', 'yearweekdayhours', 'yearweekdayhoursminutes', 'yearweekdayhoursminutesseconds', 'yeardayofyear', 'quartermonth', 'monthdate', 'monthdatehours', 'monthdatehoursminutes', 'monthdatehoursminutesseconds', 'weekday', 'weeksdayhours', 'weekdayhoursminutes', 'weekdayhoursminutesseconds', 'dayhours', 'dayhoursminutes', 'dayhoursminutesseconds', 'hoursminutes', 'hoursminutesseconds', 'minutesseconds', 'secondsmilliseconds']], Union[:class:`UtcMultiTimeUnit`, Literal['utcyearquarter', 'utcyearquartermonth', 'utcyearmonth', 'utcyearmonthdate', 'utcyearmonthdatehours', 'utcyearmonthdatehoursminutes', 'utcyearmonthdatehoursminutesseconds', 'utcyearweek', 'utcyearweekday', 'utcyearweekdayhours', 'utcyearweekdayhoursminutes', 'utcyearweekdayhoursminutesseconds', 'utcyeardayofyear', 'utcquartermonth', 'utcmonthdate', 'utcmonthdatehours', 'utcmonthdatehoursminutes', 'utcmonthdatehoursminutesseconds', 'utcweekday', 'utcweeksdayhours', 'utcweekdayhoursminutes', 'utcweekdayhoursminutesseconds', 'utcdayhours', 'utcdayhoursminutes', 'utcdayhoursminutesseconds', 'utchoursminutes', 'utchoursminutesseconds', 'utcminutesseconds', 'utcsecondsmilliseconds']]], Union[:class:`SingleTimeUnit`, Union[:class:`LocalSingleTimeUnit`, Literal['year', 'quarter', 'month', 'week', 'day', 'dayofyear', 'date', 'hours', 'minutes', 'seconds', 'milliseconds']], Union[:class:`UtcSingleTimeUnit`, Literal['utcyear', 'utcquarter', 'utcmonth', 'utcweek', 'utcday', 'utcdayofyear', 'utcdate', 'utchours', 'utcminutes', 'utcseconds', 'utcmilliseconds']]]]]
        Time unit (e.g., ``year``, ``yearmonth``, ``month``, ``hours`` ) for a temporal
        field. or `a temporal field that gets casted as ordinal
        <https://vega.github.io/vega-lite/docs/type.html#cast>`__.

        **Default value:** ``undefined`` (None)

        **See also:** `timeUnit <https://vega.github.io/vega-lite/docs/timeunit.html>`__
        documentation.
    title : Union[None, Union[:class:`Text`, List[str], str]]
        A title for the field. If ``null``, the title will be removed.

        **Default value:**  derived from the field's name and transformation function (
        ``aggregate``, ``bin`` and ``timeUnit`` ). If the field has an aggregate function,
        the function is displayed as part of the title (e.g., ``"Sum of Profit"`` ). If the
        field is binned or has a time unit applied, the applied function is shown in
        parentheses (e.g., ``"Profit (binned)"``, ``"Transaction Date (year-month)"`` ).
        Otherwise, the title is simply the field name.

        **Notes** :

        1) You can customize the default field title format by providing the `fieldTitle
        <https://vega.github.io/vega-lite/docs/config.html#top-level-config>`__ property in
        the `config <https://vega.github.io/vega-lite/docs/config.html>`__ or `fieldTitle
        function via the compile function's options
        <https://vega.github.io/vega-lite/usage/compile.html#field-title>`__.

        2) If both field definition's ``title`` and axis, header, or legend ``title`` are
        defined, axis/header/legend title will be used.
    type : Union[:class:`StandardType`, Literal['quantitative', 'ordinal', 'temporal', 'nominal']]
        The type of measurement ( ``"quantitative"``, ``"temporal"``, ``"ordinal"``, or
        ``"nominal"`` ) for the encoded field or constant value ( ``datum`` ). It can also
        be a ``"geojson"`` type for encoding `'geoshape'
        <https://vega.github.io/vega-lite/docs/geoshape.html>`__.

        Vega-Lite automatically infers data types in many cases as discussed below. However,
        type is required for a field if: (1) the field is not nominal and the field encoding
        has no specified ``aggregate`` (except ``argmin`` and ``argmax`` ), ``bin``, scale
        type, custom ``sort`` order, nor ``timeUnit`` or (2) if you wish to use an ordinal
        scale for a field with ``bin`` or ``timeUnit``.

        **Default value:**

        1) For a data ``field``, ``"nominal"`` is the default data type unless the field
        encoding has ``aggregate``, ``channel``, ``bin``, scale type, ``sort``, or
        ``timeUnit`` that satisfies the following criteria:


        * ``"quantitative"`` is the default type if (1) the encoded field contains ``bin``
          or ``aggregate`` except ``"argmin"`` and ``"argmax"``, (2) the encoding channel is
          ``latitude`` or ``longitude`` channel or (3) if the specified scale type is `a
          quantitative scale <https://vega.github.io/vega-lite/docs/scale.html#type>`__.
        * ``"temporal"`` is the default type if (1) the encoded field contains ``timeUnit``
          or (2) the specified scale type is a time or utc scale
        * ``"ordinal"`` is the default type if (1) the encoded field contains a `custom sort
          order
          <https://vega.github.io/vega-lite/docs/sort.html#specifying-custom-sort-order>`__,
          (2) the specified scale type is an ordinal/point/band scale, or (3) the encoding
          channel is ``order``.

        2) For a constant value in data domain ( ``datum`` ):


        * ``"quantitative"`` if the datum is a number
        * ``"nominal"`` if the datum is a string
        * ``"temporal"`` if the datum is `a date time object
          <https://vega.github.io/vega-lite/docs/datetime.html>`__

        **Note:**


        * Data ``type`` describes the semantics of the data rather than the primitive data
          types (number, string, etc.). The same primitive data type can have different
          types of measurement. For example, numeric data can represent quantitative,
          ordinal, or nominal data.
        * Data values for a temporal field can be either a date-time string (e.g.,
          ``"2015-03-07 12:32:17"``, ``"17:01"``, ``"2015-03-16"``. ``"2015"`` ) or a
          timestamp number (e.g., ``1552199579097`` ).
        * When using with `bin <https://vega.github.io/vega-lite/docs/bin.html>`__, the
          ``type`` property can be either ``"quantitative"`` (for using a linear bin scale)
          or `"ordinal" (for using an ordinal bin scale)
          <https://vega.github.io/vega-lite/docs/type.html#cast-bin>`__.
        * When using with `timeUnit
          <https://vega.github.io/vega-lite/docs/timeunit.html>`__, the ``type`` property
          can be either ``"temporal"`` (default, for using a temporal scale) or `"ordinal"
          (for using an ordinal scale)
          <https://vega.github.io/vega-lite/docs/type.html#cast-bin>`__.
        * When using with `aggregate
          <https://vega.github.io/vega-lite/docs/aggregate.html>`__, the ``type`` property
          refers to the post-aggregation data type. For example, we can calculate count
          ``distinct`` of a categorical field ``"cat"`` using ``{"aggregate": "distinct",
          "field": "cat"}``. The ``"type"`` of the aggregate output is ``"quantitative"``.
        * Secondary channels (e.g., ``x2``, ``y2``, ``xError``, ``yError`` ) do not have
          ``type`` as they must have exactly the same type as their primary channels (e.g.,
          ``x``, ``y`` ).

        **See also:** `type <https://vega.github.io/vega-lite/docs/type.html>`__
        documentation.
    """

    _schema = {
        "$ref": "#/definitions/FieldOrDatumDefWithCondition<MarkPropFieldDef,number[]>"
    }

    def __init__(
        self,
        aggregate: Union[
            Union[
                "Aggregate",
                Union["ArgmaxDef", dict],
                Union["ArgminDef", dict],
                Union[
                    "NonArgAggregateOp",
                    Literal[
                        "average",
                        "count",
                        "distinct",
                        "max",
                        "mean",
                        "median",
                        "min",
                        "missing",
                        "product",
                        "q1",
                        "q3",
                        "ci0",
                        "ci1",
                        "stderr",
                        "stdev",
                        "stdevp",
                        "sum",
                        "valid",
                        "values",
                        "variance",
                        "variancep",
                    ],
                ],
            ],
            UndefinedType,
        ] = Undefined,
        bandPosition: Union[float, UndefinedType] = Undefined,
        bin: Union[
            Union[None, Union["BinParams", dict], bool], UndefinedType
        ] = Undefined,
        condition: Union[
            Union[
                Union[
                    "ConditionalValueDefnumberArrayExprRef",
                    Union["ConditionalParameterValueDefnumberArrayExprRef", dict],
                    Union["ConditionalPredicateValueDefnumberArrayExprRef", dict],
                ],
                Union[
                    List["ConditionalValueDefnumberArrayExprRef"],
                    List[Union["ConditionalParameterValueDefnumberArrayExprRef", dict]],
                    List[Union["ConditionalPredicateValueDefnumberArrayExprRef", dict]],
                ],
            ],
            UndefinedType,
        ] = Undefined,
        field: Union[
            Union["Field", Union["FieldName", str], Union["RepeatRef", dict]],
            UndefinedType,
        ] = Undefined,
        legend: Union[Union[None, Union["Legend", dict]], UndefinedType] = Undefined,
        scale: Union[Union[None, Union["Scale", dict]], UndefinedType] = Undefined,
        sort: Union[
            Union[
                "Sort",
                None,
                Union[
                    "AllSortString",
                    Union[
                        "SortByChannel",
                        Literal[
                            "x",
                            "y",
                            "color",
                            "fill",
                            "stroke",
                            "strokeWidth",
                            "size",
                            "shape",
                            "fillOpacity",
                            "strokeOpacity",
                            "opacity",
                            "text",
                        ],
                    ],
                    Union[
                        "SortByChannelDesc",
                        Literal[
                            "-x",
                            "-y",
                            "-color",
                            "-fill",
                            "-stroke",
                            "-strokeWidth",
                            "-size",
                            "-shape",
                            "-fillOpacity",
                            "-strokeOpacity",
                            "-opacity",
                            "-text",
                        ],
                    ],
                    Union["SortOrder", Literal["ascending", "descending"]],
                ],
                Union["EncodingSortField", dict],
                Union[
                    "SortArray",
                    List[bool],
                    List[float],
                    List[str],
                    Union[List["DateTime"], List[dict]],
                ],
                Union["SortByEncoding", dict],
            ],
            UndefinedType,
        ] = Undefined,
        timeUnit: Union[
            Union[
                Union[
                    "BinnedTimeUnit",
                    Literal[
                        "binnedutcyear",
                        "binnedutcyearquarter",
                        "binnedutcyearquartermonth",
                        "binnedutcyearmonth",
                        "binnedutcyearmonthdate",
                        "binnedutcyearmonthdatehours",
                        "binnedutcyearmonthdatehoursminutes",
                        "binnedutcyearmonthdatehoursminutesseconds",
                        "binnedutcyearweek",
                        "binnedutcyearweekday",
                        "binnedutcyearweekdayhours",
                        "binnedutcyearweekdayhoursminutes",
                        "binnedutcyearweekdayhoursminutesseconds",
                        "binnedutcyeardayofyear",
                    ],
                    Literal[
                        "binnedyear",
                        "binnedyearquarter",
                        "binnedyearquartermonth",
                        "binnedyearmonth",
                        "binnedyearmonthdate",
                        "binnedyearmonthdatehours",
                        "binnedyearmonthdatehoursminutes",
                        "binnedyearmonthdatehoursminutesseconds",
                        "binnedyearweek",
                        "binnedyearweekday",
                        "binnedyearweekdayhours",
                        "binnedyearweekdayhoursminutes",
                        "binnedyearweekdayhoursminutesseconds",
                        "binnedyeardayofyear",
                    ],
                ],
                Union[
                    "TimeUnit",
                    Union[
                        "MultiTimeUnit",
                        Union[
                            "LocalMultiTimeUnit",
                            Literal[
                                "yearquarter",
                                "yearquartermonth",
                                "yearmonth",
                                "yearmonthdate",
                                "yearmonthdatehours",
                                "yearmonthdatehoursminutes",
                                "yearmonthdatehoursminutesseconds",
                                "yearweek",
                                "yearweekday",
                                "yearweekdayhours",
                                "yearweekdayhoursminutes",
                                "yearweekdayhoursminutesseconds",
                                "yeardayofyear",
                                "quartermonth",
                                "monthdate",
                                "monthdatehours",
                                "monthdatehoursminutes",
                                "monthdatehoursminutesseconds",
                                "weekday",
                                "weeksdayhours",
                                "weekdayhoursminutes",
                                "weekdayhoursminutesseconds",
                                "dayhours",
                                "dayhoursminutes",
                                "dayhoursminutesseconds",
                                "hoursminutes",
                                "hoursminutesseconds",
                                "minutesseconds",
                                "secondsmilliseconds",
                            ],
                        ],
                        Union[
                            "UtcMultiTimeUnit",
                            Literal[
                                "utcyearquarter",
                                "utcyearquartermonth",
                                "utcyearmonth",
                                "utcyearmonthdate",
                                "utcyearmonthdatehours",
                                "utcyearmonthdatehoursminutes",
                                "utcyearmonthdatehoursminutesseconds",
                                "utcyearweek",
                                "utcyearweekday",
                                "utcyearweekdayhours",
                                "utcyearweekdayhoursminutes",
                                "utcyearweekdayhoursminutesseconds",
                                "utcyeardayofyear",
                                "utcquartermonth",
                                "utcmonthdate",
                                "utcmonthdatehours",
                                "utcmonthdatehoursminutes",
                                "utcmonthdatehoursminutesseconds",
                                "utcweekday",
                                "utcweeksdayhours",
                                "utcweekdayhoursminutes",
                                "utcweekdayhoursminutesseconds",
                                "utcdayhours",
                                "utcdayhoursminutes",
                                "utcdayhoursminutesseconds",
                                "utchoursminutes",
                                "utchoursminutesseconds",
                                "utcminutesseconds",
                                "utcsecondsmilliseconds",
                            ],
                        ],
                    ],
                    Union[
                        "SingleTimeUnit",
                        Union[
                            "LocalSingleTimeUnit",
                            Literal[
                                "year",
                                "quarter",
                                "month",
                                "week",
                                "day",
                                "dayofyear",
                                "date",
                                "hours",
                                "minutes",
                                "seconds",
                                "milliseconds",
                            ],
                        ],
                        Union[
                            "UtcSingleTimeUnit",
                            Literal[
                                "utcyear",
                                "utcquarter",
                                "utcmonth",
                                "utcweek",
                                "utcday",
                                "utcdayofyear",
                                "utcdate",
                                "utchours",
                                "utcminutes",
                                "utcseconds",
                                "utcmilliseconds",
                            ],
                        ],
                    ],
                ],
                Union["TimeUnitParams", dict],
            ],
            UndefinedType,
        ] = Undefined,
        title: Union[
            Union[None, Union["Text", List[str], str]], UndefinedType
        ] = Undefined,
        type: Union[
            Union[
                "StandardType",
                Literal["quantitative", "ordinal", "temporal", "nominal"],
            ],
            UndefinedType,
        ] = Undefined,
        **kwds
    ):
        super(FieldOrDatumDefWithConditionMarkPropFieldDefnumberArray, self).__init__(
            aggregate=aggregate,
            bandPosition=bandPosition,
            bin=bin,
            condition=condition,
            field=field,
            legend=legend,
            scale=scale,
            sort=sort,
            timeUnit=timeUnit,
            title=title,
            type=type,
            **kwds
        )


class NumericMarkPropDef(VegaLiteSchema):
    """NumericMarkPropDef schema wrapper

    Union[:class:`NumericMarkPropDef`,
    Union[:class:`FieldOrDatumDefWithConditionDatumDefnumber`, Dict[required=[]]],
    Union[:class:`FieldOrDatumDefWithConditionMarkPropFieldDefnumber`, Dict[required=[]]],
    Union[:class:`ValueDefWithConditionMarkPropFieldOrDatumDefnumber`, Dict[required=[]]]]
    """

    _schema = {"$ref": "#/definitions/NumericMarkPropDef"}

    def __init__(self, *args, **kwds):
        super(NumericMarkPropDef, self).__init__(*args, **kwds)


class FieldOrDatumDefWithConditionDatumDefnumber(MarkPropDefnumber, NumericMarkPropDef):
    """FieldOrDatumDefWithConditionDatumDefnumber schema wrapper

    Union[:class:`FieldOrDatumDefWithConditionDatumDefnumber`, Dict[required=[]]]

    Parameters
    ----------

    bandPosition : float
        Relative position on a band of a stacked, binned, time unit, or band scale. For
        example, the marks will be positioned at the beginning of the band if set to ``0``,
        and at the middle of the band if set to ``0.5``.
    condition : Union[List[Union[:class:`ConditionalValueDefnumberExprRef`, Union[:class:`ConditionalParameterValueDefnumberExprRef`, Dict[required=[param, value]]], Union[:class:`ConditionalPredicateValueDefnumberExprRef`, Dict[required=[test, value]]]]], Union[:class:`ConditionalValueDefnumberExprRef`, Union[:class:`ConditionalParameterValueDefnumberExprRef`, Dict[required=[param, value]]], Union[:class:`ConditionalPredicateValueDefnumberExprRef`, Dict[required=[test, value]]]]]
        One or more value definition(s) with `a parameter or a test predicate
        <https://vega.github.io/vega-lite/docs/condition.html>`__.

        **Note:** A field definition's ``condition`` property can only contain `conditional
        value definitions <https://vega.github.io/vega-lite/docs/condition.html#value>`__
        since Vega-Lite only allows at most one encoded field per encoding channel.
    datum : Union[Union[:class:`DateTime`, Dict[required=[]]], Union[:class:`ExprRef`, Dict[required=[expr]]], Union[:class:`PrimitiveValue`, None, bool, float, str], Union[:class:`RepeatRef`, Dict[required=[repeat]]]]
        A constant value in data domain.
    title : Union[None, Union[:class:`Text`, List[str], str]]
        A title for the field. If ``null``, the title will be removed.

        **Default value:**  derived from the field's name and transformation function (
        ``aggregate``, ``bin`` and ``timeUnit`` ). If the field has an aggregate function,
        the function is displayed as part of the title (e.g., ``"Sum of Profit"`` ). If the
        field is binned or has a time unit applied, the applied function is shown in
        parentheses (e.g., ``"Profit (binned)"``, ``"Transaction Date (year-month)"`` ).
        Otherwise, the title is simply the field name.

        **Notes** :

        1) You can customize the default field title format by providing the `fieldTitle
        <https://vega.github.io/vega-lite/docs/config.html#top-level-config>`__ property in
        the `config <https://vega.github.io/vega-lite/docs/config.html>`__ or `fieldTitle
        function via the compile function's options
        <https://vega.github.io/vega-lite/usage/compile.html#field-title>`__.

        2) If both field definition's ``title`` and axis, header, or legend ``title`` are
        defined, axis/header/legend title will be used.
    type : Union[:class:`Type`, Literal['quantitative', 'ordinal', 'temporal', 'nominal', 'geojson']]
        The type of measurement ( ``"quantitative"``, ``"temporal"``, ``"ordinal"``, or
        ``"nominal"`` ) for the encoded field or constant value ( ``datum`` ). It can also
        be a ``"geojson"`` type for encoding `'geoshape'
        <https://vega.github.io/vega-lite/docs/geoshape.html>`__.

        Vega-Lite automatically infers data types in many cases as discussed below. However,
        type is required for a field if: (1) the field is not nominal and the field encoding
        has no specified ``aggregate`` (except ``argmin`` and ``argmax`` ), ``bin``, scale
        type, custom ``sort`` order, nor ``timeUnit`` or (2) if you wish to use an ordinal
        scale for a field with ``bin`` or ``timeUnit``.

        **Default value:**

        1) For a data ``field``, ``"nominal"`` is the default data type unless the field
        encoding has ``aggregate``, ``channel``, ``bin``, scale type, ``sort``, or
        ``timeUnit`` that satisfies the following criteria:


        * ``"quantitative"`` is the default type if (1) the encoded field contains ``bin``
          or ``aggregate`` except ``"argmin"`` and ``"argmax"``, (2) the encoding channel is
          ``latitude`` or ``longitude`` channel or (3) if the specified scale type is `a
          quantitative scale <https://vega.github.io/vega-lite/docs/scale.html#type>`__.
        * ``"temporal"`` is the default type if (1) the encoded field contains ``timeUnit``
          or (2) the specified scale type is a time or utc scale
        * ``"ordinal"`` is the default type if (1) the encoded field contains a `custom sort
          order
          <https://vega.github.io/vega-lite/docs/sort.html#specifying-custom-sort-order>`__,
          (2) the specified scale type is an ordinal/point/band scale, or (3) the encoding
          channel is ``order``.

        2) For a constant value in data domain ( ``datum`` ):


        * ``"quantitative"`` if the datum is a number
        * ``"nominal"`` if the datum is a string
        * ``"temporal"`` if the datum is `a date time object
          <https://vega.github.io/vega-lite/docs/datetime.html>`__

        **Note:**


        * Data ``type`` describes the semantics of the data rather than the primitive data
          types (number, string, etc.). The same primitive data type can have different
          types of measurement. For example, numeric data can represent quantitative,
          ordinal, or nominal data.
        * Data values for a temporal field can be either a date-time string (e.g.,
          ``"2015-03-07 12:32:17"``, ``"17:01"``, ``"2015-03-16"``. ``"2015"`` ) or a
          timestamp number (e.g., ``1552199579097`` ).
        * When using with `bin <https://vega.github.io/vega-lite/docs/bin.html>`__, the
          ``type`` property can be either ``"quantitative"`` (for using a linear bin scale)
          or `"ordinal" (for using an ordinal bin scale)
          <https://vega.github.io/vega-lite/docs/type.html#cast-bin>`__.
        * When using with `timeUnit
          <https://vega.github.io/vega-lite/docs/timeunit.html>`__, the ``type`` property
          can be either ``"temporal"`` (default, for using a temporal scale) or `"ordinal"
          (for using an ordinal scale)
          <https://vega.github.io/vega-lite/docs/type.html#cast-bin>`__.
        * When using with `aggregate
          <https://vega.github.io/vega-lite/docs/aggregate.html>`__, the ``type`` property
          refers to the post-aggregation data type. For example, we can calculate count
          ``distinct`` of a categorical field ``"cat"`` using ``{"aggregate": "distinct",
          "field": "cat"}``. The ``"type"`` of the aggregate output is ``"quantitative"``.
        * Secondary channels (e.g., ``x2``, ``y2``, ``xError``, ``yError`` ) do not have
          ``type`` as they must have exactly the same type as their primary channels (e.g.,
          ``x``, ``y`` ).

        **See also:** `type <https://vega.github.io/vega-lite/docs/type.html>`__
        documentation.
    """

    _schema = {"$ref": "#/definitions/FieldOrDatumDefWithCondition<DatumDef,number>"}

    def __init__(
        self,
        bandPosition: Union[float, UndefinedType] = Undefined,
        condition: Union[
            Union[
                Union[
                    "ConditionalValueDefnumberExprRef",
                    Union["ConditionalParameterValueDefnumberExprRef", dict],
                    Union["ConditionalPredicateValueDefnumberExprRef", dict],
                ],
                Union[
                    List["ConditionalValueDefnumberExprRef"],
                    List[Union["ConditionalParameterValueDefnumberExprRef", dict]],
                    List[Union["ConditionalPredicateValueDefnumberExprRef", dict]],
                ],
            ],
            UndefinedType,
        ] = Undefined,
        datum: Union[
            Union[
                Union["DateTime", dict],
                Union["ExprRef", "_ParameterProtocol", dict],
                Union["PrimitiveValue", None, bool, float, str],
                Union["RepeatRef", dict],
            ],
            UndefinedType,
        ] = Undefined,
        title: Union[
            Union[None, Union["Text", List[str], str]], UndefinedType
        ] = Undefined,
        type: Union[
            Union[
                "Type",
                Literal["quantitative", "ordinal", "temporal", "nominal", "geojson"],
            ],
            UndefinedType,
        ] = Undefined,
        **kwds
    ):
        super(FieldOrDatumDefWithConditionDatumDefnumber, self).__init__(
            bandPosition=bandPosition,
            condition=condition,
            datum=datum,
            title=title,
            type=type,
            **kwds
        )


class FieldOrDatumDefWithConditionMarkPropFieldDefnumber(
    MarkPropDefnumber, NumericMarkPropDef
):
    """FieldOrDatumDefWithConditionMarkPropFieldDefnumber schema wrapper

    Union[:class:`FieldOrDatumDefWithConditionMarkPropFieldDefnumber`, Dict[required=[]]]

    Parameters
    ----------

    aggregate : Union[:class:`Aggregate`, Union[:class:`ArgmaxDef`, Dict[required=[argmax]]], Union[:class:`ArgminDef`, Dict[required=[argmin]]], Union[:class:`NonArgAggregateOp`, Literal['average', 'count', 'distinct', 'max', 'mean', 'median', 'min', 'missing', 'product', 'q1', 'q3', 'ci0', 'ci1', 'stderr', 'stdev', 'stdevp', 'sum', 'valid', 'values', 'variance', 'variancep']]]
        Aggregation function for the field (e.g., ``"mean"``, ``"sum"``, ``"median"``,
        ``"min"``, ``"max"``, ``"count"`` ).

        **Default value:** ``undefined`` (None)

        **See also:** `aggregate <https://vega.github.io/vega-lite/docs/aggregate.html>`__
        documentation.
    bandPosition : float
        Relative position on a band of a stacked, binned, time unit, or band scale. For
        example, the marks will be positioned at the beginning of the band if set to ``0``,
        and at the middle of the band if set to ``0.5``.
    bin : Union[None, Union[:class:`BinParams`, Dict[required=[]]], bool]
        A flag for binning a ``quantitative`` field, `an object defining binning parameters
        <https://vega.github.io/vega-lite/docs/bin.html#bin-parameters>`__, or indicating
        that the data for ``x`` or ``y`` channel are binned before they are imported into
        Vega-Lite ( ``"binned"`` ).


        If ``true``, default `binning parameters
        <https://vega.github.io/vega-lite/docs/bin.html#bin-parameters>`__ will be applied.

        If ``"binned"``, this indicates that the data for the ``x`` (or ``y`` ) channel are
        already binned. You can map the bin-start field to ``x`` (or ``y`` ) and the bin-end
        field to ``x2`` (or ``y2`` ). The scale and axis will be formatted similar to
        binning in Vega-Lite.  To adjust the axis ticks based on the bin step, you can also
        set the axis's `tickMinStep
        <https://vega.github.io/vega-lite/docs/axis.html#ticks>`__ property.

        **Default value:** ``false``

        **See also:** `bin <https://vega.github.io/vega-lite/docs/bin.html>`__
        documentation.
    condition : Union[List[Union[:class:`ConditionalValueDefnumberExprRef`, Union[:class:`ConditionalParameterValueDefnumberExprRef`, Dict[required=[param, value]]], Union[:class:`ConditionalPredicateValueDefnumberExprRef`, Dict[required=[test, value]]]]], Union[:class:`ConditionalValueDefnumberExprRef`, Union[:class:`ConditionalParameterValueDefnumberExprRef`, Dict[required=[param, value]]], Union[:class:`ConditionalPredicateValueDefnumberExprRef`, Dict[required=[test, value]]]]]
        One or more value definition(s) with `a parameter or a test predicate
        <https://vega.github.io/vega-lite/docs/condition.html>`__.

        **Note:** A field definition's ``condition`` property can only contain `conditional
        value definitions <https://vega.github.io/vega-lite/docs/condition.html#value>`__
        since Vega-Lite only allows at most one encoded field per encoding channel.
    field : Union[:class:`Field`, Union[:class:`FieldName`, str], Union[:class:`RepeatRef`, Dict[required=[repeat]]]]
        **Required.** A string defining the name of the field from which to pull a data
        value or an object defining iterated values from the `repeat
        <https://vega.github.io/vega-lite/docs/repeat.html>`__ operator.

        **See also:** `field <https://vega.github.io/vega-lite/docs/field.html>`__
        documentation.

        **Notes:** 1)  Dots ( ``.`` ) and brackets ( ``[`` and ``]`` ) can be used to access
        nested objects (e.g., ``"field": "foo.bar"`` and ``"field": "foo['bar']"`` ). If
        field names contain dots or brackets but are not nested, you can use ``\\`` to
        escape dots and brackets (e.g., ``"a\\.b"`` and ``"a\\[0\\]"`` ). See more details
        about escaping in the `field documentation
        <https://vega.github.io/vega-lite/docs/field.html>`__. 2) ``field`` is not required
        if ``aggregate`` is ``count``.
    legend : Union[None, Union[:class:`Legend`, Dict[required=[]]]]
        An object defining properties of the legend. If ``null``, the legend for the
        encoding channel will be removed.

        **Default value:** If undefined, default `legend properties
        <https://vega.github.io/vega-lite/docs/legend.html>`__ are applied.

        **See also:** `legend <https://vega.github.io/vega-lite/docs/legend.html>`__
        documentation.
    scale : Union[None, Union[:class:`Scale`, Dict[required=[]]]]
        An object defining properties of the channel's scale, which is the function that
        transforms values in the data domain (numbers, dates, strings, etc) to visual values
        (pixels, colors, sizes) of the encoding channels.

        If ``null``, the scale will be `disabled and the data value will be directly encoded
        <https://vega.github.io/vega-lite/docs/scale.html#disable>`__.

        **Default value:** If undefined, default `scale properties
        <https://vega.github.io/vega-lite/docs/scale.html>`__ are applied.

        **See also:** `scale <https://vega.github.io/vega-lite/docs/scale.html>`__
        documentation.
    sort : Union[:class:`Sort`, None, Union[:class:`AllSortString`, Union[:class:`SortByChannelDesc`, Literal['-x', '-y', '-color', '-fill', '-stroke', '-strokeWidth', '-size', '-shape', '-fillOpacity', '-strokeOpacity', '-opacity', '-text']], Union[:class:`SortByChannel`, Literal['x', 'y', 'color', 'fill', 'stroke', 'strokeWidth', 'size', 'shape', 'fillOpacity', 'strokeOpacity', 'opacity', 'text']], Union[:class:`SortOrder`, Literal['ascending', 'descending']]], Union[:class:`EncodingSortField`, Dict[required=[]]], Union[:class:`SortArray`, List[Union[:class:`DateTime`, Dict[required=[]]]], List[bool], List[float], List[str]], Union[:class:`SortByEncoding`, Dict[required=[encoding]]]]
        Sort order for the encoded field.

        For continuous fields (quantitative or temporal), ``sort`` can be either
        ``"ascending"`` or ``"descending"``.

        For discrete fields, ``sort`` can be one of the following:


        * ``"ascending"`` or ``"descending"`` -- for sorting by the values' natural order in
          JavaScript.
        * `A string indicating an encoding channel name to sort by
          <https://vega.github.io/vega-lite/docs/sort.html#sort-by-encoding>`__ (e.g.,
          ``"x"`` or ``"y"`` ) with an optional minus prefix for descending sort (e.g.,
          ``"-x"`` to sort by x-field, descending). This channel string is short-form of `a
          sort-by-encoding definition
          <https://vega.github.io/vega-lite/docs/sort.html#sort-by-encoding>`__. For
          example, ``"sort": "-x"`` is equivalent to ``"sort": {"encoding": "x", "order":
          "descending"}``.
        * `A sort field definition
          <https://vega.github.io/vega-lite/docs/sort.html#sort-field>`__ for sorting by
          another field.
        * `An array specifying the field values in preferred order
          <https://vega.github.io/vega-lite/docs/sort.html#sort-array>`__. In this case, the
          sort order will obey the values in the array, followed by any unspecified values
          in their original order. For discrete time field, values in the sort array can be
          `date-time definition objects
          <https://vega.github.io/vega-lite/docs/datetime.html>`__. In addition, for time
          units ``"month"`` and ``"day"``, the values can be the month or day names (case
          insensitive) or their 3-letter initials (e.g., ``"Mon"``, ``"Tue"`` ).
        * ``null`` indicating no sort.

        **Default value:** ``"ascending"``

        **Note:** ``null`` and sorting by another channel is not supported for ``row`` and
        ``column``.

        **See also:** `sort <https://vega.github.io/vega-lite/docs/sort.html>`__
        documentation.
    timeUnit : Union[Union[:class:`BinnedTimeUnit`, Literal['binnedutcyear', 'binnedutcyearquarter', 'binnedutcyearquartermonth', 'binnedutcyearmonth', 'binnedutcyearmonthdate', 'binnedutcyearmonthdatehours', 'binnedutcyearmonthdatehoursminutes', 'binnedutcyearmonthdatehoursminutesseconds', 'binnedutcyearweek', 'binnedutcyearweekday', 'binnedutcyearweekdayhours', 'binnedutcyearweekdayhoursminutes', 'binnedutcyearweekdayhoursminutesseconds', 'binnedutcyeardayofyear'], Literal['binnedyear', 'binnedyearquarter', 'binnedyearquartermonth', 'binnedyearmonth', 'binnedyearmonthdate', 'binnedyearmonthdatehours', 'binnedyearmonthdatehoursminutes', 'binnedyearmonthdatehoursminutesseconds', 'binnedyearweek', 'binnedyearweekday', 'binnedyearweekdayhours', 'binnedyearweekdayhoursminutes', 'binnedyearweekdayhoursminutesseconds', 'binnedyeardayofyear']], Union[:class:`TimeUnitParams`, Dict[required=[]]], Union[:class:`TimeUnit`, Union[:class:`MultiTimeUnit`, Union[:class:`LocalMultiTimeUnit`, Literal['yearquarter', 'yearquartermonth', 'yearmonth', 'yearmonthdate', 'yearmonthdatehours', 'yearmonthdatehoursminutes', 'yearmonthdatehoursminutesseconds', 'yearweek', 'yearweekday', 'yearweekdayhours', 'yearweekdayhoursminutes', 'yearweekdayhoursminutesseconds', 'yeardayofyear', 'quartermonth', 'monthdate', 'monthdatehours', 'monthdatehoursminutes', 'monthdatehoursminutesseconds', 'weekday', 'weeksdayhours', 'weekdayhoursminutes', 'weekdayhoursminutesseconds', 'dayhours', 'dayhoursminutes', 'dayhoursminutesseconds', 'hoursminutes', 'hoursminutesseconds', 'minutesseconds', 'secondsmilliseconds']], Union[:class:`UtcMultiTimeUnit`, Literal['utcyearquarter', 'utcyearquartermonth', 'utcyearmonth', 'utcyearmonthdate', 'utcyearmonthdatehours', 'utcyearmonthdatehoursminutes', 'utcyearmonthdatehoursminutesseconds', 'utcyearweek', 'utcyearweekday', 'utcyearweekdayhours', 'utcyearweekdayhoursminutes', 'utcyearweekdayhoursminutesseconds', 'utcyeardayofyear', 'utcquartermonth', 'utcmonthdate', 'utcmonthdatehours', 'utcmonthdatehoursminutes', 'utcmonthdatehoursminutesseconds', 'utcweekday', 'utcweeksdayhours', 'utcweekdayhoursminutes', 'utcweekdayhoursminutesseconds', 'utcdayhours', 'utcdayhoursminutes', 'utcdayhoursminutesseconds', 'utchoursminutes', 'utchoursminutesseconds', 'utcminutesseconds', 'utcsecondsmilliseconds']]], Union[:class:`SingleTimeUnit`, Union[:class:`LocalSingleTimeUnit`, Literal['year', 'quarter', 'month', 'week', 'day', 'dayofyear', 'date', 'hours', 'minutes', 'seconds', 'milliseconds']], Union[:class:`UtcSingleTimeUnit`, Literal['utcyear', 'utcquarter', 'utcmonth', 'utcweek', 'utcday', 'utcdayofyear', 'utcdate', 'utchours', 'utcminutes', 'utcseconds', 'utcmilliseconds']]]]]
        Time unit (e.g., ``year``, ``yearmonth``, ``month``, ``hours`` ) for a temporal
        field. or `a temporal field that gets casted as ordinal
        <https://vega.github.io/vega-lite/docs/type.html#cast>`__.

        **Default value:** ``undefined`` (None)

        **See also:** `timeUnit <https://vega.github.io/vega-lite/docs/timeunit.html>`__
        documentation.
    title : Union[None, Union[:class:`Text`, List[str], str]]
        A title for the field. If ``null``, the title will be removed.

        **Default value:**  derived from the field's name and transformation function (
        ``aggregate``, ``bin`` and ``timeUnit`` ). If the field has an aggregate function,
        the function is displayed as part of the title (e.g., ``"Sum of Profit"`` ). If the
        field is binned or has a time unit applied, the applied function is shown in
        parentheses (e.g., ``"Profit (binned)"``, ``"Transaction Date (year-month)"`` ).
        Otherwise, the title is simply the field name.

        **Notes** :

        1) You can customize the default field title format by providing the `fieldTitle
        <https://vega.github.io/vega-lite/docs/config.html#top-level-config>`__ property in
        the `config <https://vega.github.io/vega-lite/docs/config.html>`__ or `fieldTitle
        function via the compile function's options
        <https://vega.github.io/vega-lite/usage/compile.html#field-title>`__.

        2) If both field definition's ``title`` and axis, header, or legend ``title`` are
        defined, axis/header/legend title will be used.
    type : Union[:class:`StandardType`, Literal['quantitative', 'ordinal', 'temporal', 'nominal']]
        The type of measurement ( ``"quantitative"``, ``"temporal"``, ``"ordinal"``, or
        ``"nominal"`` ) for the encoded field or constant value ( ``datum`` ). It can also
        be a ``"geojson"`` type for encoding `'geoshape'
        <https://vega.github.io/vega-lite/docs/geoshape.html>`__.

        Vega-Lite automatically infers data types in many cases as discussed below. However,
        type is required for a field if: (1) the field is not nominal and the field encoding
        has no specified ``aggregate`` (except ``argmin`` and ``argmax`` ), ``bin``, scale
        type, custom ``sort`` order, nor ``timeUnit`` or (2) if you wish to use an ordinal
        scale for a field with ``bin`` or ``timeUnit``.

        **Default value:**

        1) For a data ``field``, ``"nominal"`` is the default data type unless the field
        encoding has ``aggregate``, ``channel``, ``bin``, scale type, ``sort``, or
        ``timeUnit`` that satisfies the following criteria:


        * ``"quantitative"`` is the default type if (1) the encoded field contains ``bin``
          or ``aggregate`` except ``"argmin"`` and ``"argmax"``, (2) the encoding channel is
          ``latitude`` or ``longitude`` channel or (3) if the specified scale type is `a
          quantitative scale <https://vega.github.io/vega-lite/docs/scale.html#type>`__.
        * ``"temporal"`` is the default type if (1) the encoded field contains ``timeUnit``
          or (2) the specified scale type is a time or utc scale
        * ``"ordinal"`` is the default type if (1) the encoded field contains a `custom sort
          order
          <https://vega.github.io/vega-lite/docs/sort.html#specifying-custom-sort-order>`__,
          (2) the specified scale type is an ordinal/point/band scale, or (3) the encoding
          channel is ``order``.

        2) For a constant value in data domain ( ``datum`` ):


        * ``"quantitative"`` if the datum is a number
        * ``"nominal"`` if the datum is a string
        * ``"temporal"`` if the datum is `a date time object
          <https://vega.github.io/vega-lite/docs/datetime.html>`__

        **Note:**


        * Data ``type`` describes the semantics of the data rather than the primitive data
          types (number, string, etc.). The same primitive data type can have different
          types of measurement. For example, numeric data can represent quantitative,
          ordinal, or nominal data.
        * Data values for a temporal field can be either a date-time string (e.g.,
          ``"2015-03-07 12:32:17"``, ``"17:01"``, ``"2015-03-16"``. ``"2015"`` ) or a
          timestamp number (e.g., ``1552199579097`` ).
        * When using with `bin <https://vega.github.io/vega-lite/docs/bin.html>`__, the
          ``type`` property can be either ``"quantitative"`` (for using a linear bin scale)
          or `"ordinal" (for using an ordinal bin scale)
          <https://vega.github.io/vega-lite/docs/type.html#cast-bin>`__.
        * When using with `timeUnit
          <https://vega.github.io/vega-lite/docs/timeunit.html>`__, the ``type`` property
          can be either ``"temporal"`` (default, for using a temporal scale) or `"ordinal"
          (for using an ordinal scale)
          <https://vega.github.io/vega-lite/docs/type.html#cast-bin>`__.
        * When using with `aggregate
          <https://vega.github.io/vega-lite/docs/aggregate.html>`__, the ``type`` property
          refers to the post-aggregation data type. For example, we can calculate count
          ``distinct`` of a categorical field ``"cat"`` using ``{"aggregate": "distinct",
          "field": "cat"}``. The ``"type"`` of the aggregate output is ``"quantitative"``.
        * Secondary channels (e.g., ``x2``, ``y2``, ``xError``, ``yError`` ) do not have
          ``type`` as they must have exactly the same type as their primary channels (e.g.,
          ``x``, ``y`` ).

        **See also:** `type <https://vega.github.io/vega-lite/docs/type.html>`__
        documentation.
    """

    _schema = {
        "$ref": "#/definitions/FieldOrDatumDefWithCondition<MarkPropFieldDef,number>"
    }

    def __init__(
        self,
        aggregate: Union[
            Union[
                "Aggregate",
                Union["ArgmaxDef", dict],
                Union["ArgminDef", dict],
                Union[
                    "NonArgAggregateOp",
                    Literal[
                        "average",
                        "count",
                        "distinct",
                        "max",
                        "mean",
                        "median",
                        "min",
                        "missing",
                        "product",
                        "q1",
                        "q3",
                        "ci0",
                        "ci1",
                        "stderr",
                        "stdev",
                        "stdevp",
                        "sum",
                        "valid",
                        "values",
                        "variance",
                        "variancep",
                    ],
                ],
            ],
            UndefinedType,
        ] = Undefined,
        bandPosition: Union[float, UndefinedType] = Undefined,
        bin: Union[
            Union[None, Union["BinParams", dict], bool], UndefinedType
        ] = Undefined,
        condition: Union[
            Union[
                Union[
                    "ConditionalValueDefnumberExprRef",
                    Union["ConditionalParameterValueDefnumberExprRef", dict],
                    Union["ConditionalPredicateValueDefnumberExprRef", dict],
                ],
                Union[
                    List["ConditionalValueDefnumberExprRef"],
                    List[Union["ConditionalParameterValueDefnumberExprRef", dict]],
                    List[Union["ConditionalPredicateValueDefnumberExprRef", dict]],
                ],
            ],
            UndefinedType,
        ] = Undefined,
        field: Union[
            Union["Field", Union["FieldName", str], Union["RepeatRef", dict]],
            UndefinedType,
        ] = Undefined,
        legend: Union[Union[None, Union["Legend", dict]], UndefinedType] = Undefined,
        scale: Union[Union[None, Union["Scale", dict]], UndefinedType] = Undefined,
        sort: Union[
            Union[
                "Sort",
                None,
                Union[
                    "AllSortString",
                    Union[
                        "SortByChannel",
                        Literal[
                            "x",
                            "y",
                            "color",
                            "fill",
                            "stroke",
                            "strokeWidth",
                            "size",
                            "shape",
                            "fillOpacity",
                            "strokeOpacity",
                            "opacity",
                            "text",
                        ],
                    ],
                    Union[
                        "SortByChannelDesc",
                        Literal[
                            "-x",
                            "-y",
                            "-color",
                            "-fill",
                            "-stroke",
                            "-strokeWidth",
                            "-size",
                            "-shape",
                            "-fillOpacity",
                            "-strokeOpacity",
                            "-opacity",
                            "-text",
                        ],
                    ],
                    Union["SortOrder", Literal["ascending", "descending"]],
                ],
                Union["EncodingSortField", dict],
                Union[
                    "SortArray",
                    List[bool],
                    List[float],
                    List[str],
                    Union[List["DateTime"], List[dict]],
                ],
                Union["SortByEncoding", dict],
            ],
            UndefinedType,
        ] = Undefined,
        timeUnit: Union[
            Union[
                Union[
                    "BinnedTimeUnit",
                    Literal[
                        "binnedutcyear",
                        "binnedutcyearquarter",
                        "binnedutcyearquartermonth",
                        "binnedutcyearmonth",
                        "binnedutcyearmonthdate",
                        "binnedutcyearmonthdatehours",
                        "binnedutcyearmonthdatehoursminutes",
                        "binnedutcyearmonthdatehoursminutesseconds",
                        "binnedutcyearweek",
                        "binnedutcyearweekday",
                        "binnedutcyearweekdayhours",
                        "binnedutcyearweekdayhoursminutes",
                        "binnedutcyearweekdayhoursminutesseconds",
                        "binnedutcyeardayofyear",
                    ],
                    Literal[
                        "binnedyear",
                        "binnedyearquarter",
                        "binnedyearquartermonth",
                        "binnedyearmonth",
                        "binnedyearmonthdate",
                        "binnedyearmonthdatehours",
                        "binnedyearmonthdatehoursminutes",
                        "binnedyearmonthdatehoursminutesseconds",
                        "binnedyearweek",
                        "binnedyearweekday",
                        "binnedyearweekdayhours",
                        "binnedyearweekdayhoursminutes",
                        "binnedyearweekdayhoursminutesseconds",
                        "binnedyeardayofyear",
                    ],
                ],
                Union[
                    "TimeUnit",
                    Union[
                        "MultiTimeUnit",
                        Union[
                            "LocalMultiTimeUnit",
                            Literal[
                                "yearquarter",
                                "yearquartermonth",
                                "yearmonth",
                                "yearmonthdate",
                                "yearmonthdatehours",
                                "yearmonthdatehoursminutes",
                                "yearmonthdatehoursminutesseconds",
                                "yearweek",
                                "yearweekday",
                                "yearweekdayhours",
                                "yearweekdayhoursminutes",
                                "yearweekdayhoursminutesseconds",
                                "yeardayofyear",
                                "quartermonth",
                                "monthdate",
                                "monthdatehours",
                                "monthdatehoursminutes",
                                "monthdatehoursminutesseconds",
                                "weekday",
                                "weeksdayhours",
                                "weekdayhoursminutes",
                                "weekdayhoursminutesseconds",
                                "dayhours",
                                "dayhoursminutes",
                                "dayhoursminutesseconds",
                                "hoursminutes",
                                "hoursminutesseconds",
                                "minutesseconds",
                                "secondsmilliseconds",
                            ],
                        ],
                        Union[
                            "UtcMultiTimeUnit",
                            Literal[
                                "utcyearquarter",
                                "utcyearquartermonth",
                                "utcyearmonth",
                                "utcyearmonthdate",
                                "utcyearmonthdatehours",
                                "utcyearmonthdatehoursminutes",
                                "utcyearmonthdatehoursminutesseconds",
                                "utcyearweek",
                                "utcyearweekday",
                                "utcyearweekdayhours",
                                "utcyearweekdayhoursminutes",
                                "utcyearweekdayhoursminutesseconds",
                                "utcyeardayofyear",
                                "utcquartermonth",
                                "utcmonthdate",
                                "utcmonthdatehours",
                                "utcmonthdatehoursminutes",
                                "utcmonthdatehoursminutesseconds",
                                "utcweekday",
                                "utcweeksdayhours",
                                "utcweekdayhoursminutes",
                                "utcweekdayhoursminutesseconds",
                                "utcdayhours",
                                "utcdayhoursminutes",
                                "utcdayhoursminutesseconds",
                                "utchoursminutes",
                                "utchoursminutesseconds",
                                "utcminutesseconds",
                                "utcsecondsmilliseconds",
                            ],
                        ],
                    ],
                    Union[
                        "SingleTimeUnit",
                        Union[
                            "LocalSingleTimeUnit",
                            Literal[
                                "year",
                                "quarter",
                                "month",
                                "week",
                                "day",
                                "dayofyear",
                                "date",
                                "hours",
                                "minutes",
                                "seconds",
                                "milliseconds",
                            ],
                        ],
                        Union[
                            "UtcSingleTimeUnit",
                            Literal[
                                "utcyear",
                                "utcquarter",
                                "utcmonth",
                                "utcweek",
                                "utcday",
                                "utcdayofyear",
                                "utcdate",
                                "utchours",
                                "utcminutes",
                                "utcseconds",
                                "utcmilliseconds",
                            ],
                        ],
                    ],
                ],
                Union["TimeUnitParams", dict],
            ],
            UndefinedType,
        ] = Undefined,
        title: Union[
            Union[None, Union["Text", List[str], str]], UndefinedType
        ] = Undefined,
        type: Union[
            Union[
                "StandardType",
                Literal["quantitative", "ordinal", "temporal", "nominal"],
            ],
            UndefinedType,
        ] = Undefined,
        **kwds
    ):
        super(FieldOrDatumDefWithConditionMarkPropFieldDefnumber, self).__init__(
            aggregate=aggregate,
            bandPosition=bandPosition,
            bin=bin,
            condition=condition,
            field=field,
            legend=legend,
            scale=scale,
            sort=sort,
            timeUnit=timeUnit,
            title=title,
            type=type,
            **kwds
        )


class OffsetDef(VegaLiteSchema):
    """OffsetDef schema wrapper

    Union[:class:`OffsetDef`, Union[:class:`ScaleDatumDef`, Dict[required=[]]],
    Union[:class:`ScaleFieldDef`, Dict[required=[]]], Union[:class:`ValueDefnumber`,
    Dict[required=[value]]]]
    """

    _schema = {"$ref": "#/definitions/OffsetDef"}

    def __init__(self, *args, **kwds):
        super(OffsetDef, self).__init__(*args, **kwds)


class OrderFieldDef(VegaLiteSchema):
    """OrderFieldDef schema wrapper

    Union[:class:`OrderFieldDef`, Dict[required=[]]]

    Parameters
    ----------

    aggregate : Union[:class:`Aggregate`, Union[:class:`ArgmaxDef`, Dict[required=[argmax]]], Union[:class:`ArgminDef`, Dict[required=[argmin]]], Union[:class:`NonArgAggregateOp`, Literal['average', 'count', 'distinct', 'max', 'mean', 'median', 'min', 'missing', 'product', 'q1', 'q3', 'ci0', 'ci1', 'stderr', 'stdev', 'stdevp', 'sum', 'valid', 'values', 'variance', 'variancep']]]
        Aggregation function for the field (e.g., ``"mean"``, ``"sum"``, ``"median"``,
        ``"min"``, ``"max"``, ``"count"`` ).

        **Default value:** ``undefined`` (None)

        **See also:** `aggregate <https://vega.github.io/vega-lite/docs/aggregate.html>`__
        documentation.
    bandPosition : float
        Relative position on a band of a stacked, binned, time unit, or band scale. For
        example, the marks will be positioned at the beginning of the band if set to ``0``,
        and at the middle of the band if set to ``0.5``.
    bin : Union[None, Union[:class:`BinParams`, Dict[required=[]]], bool, str]
        A flag for binning a ``quantitative`` field, `an object defining binning parameters
        <https://vega.github.io/vega-lite/docs/bin.html#bin-parameters>`__, or indicating
        that the data for ``x`` or ``y`` channel are binned before they are imported into
        Vega-Lite ( ``"binned"`` ).


        If ``true``, default `binning parameters
        <https://vega.github.io/vega-lite/docs/bin.html#bin-parameters>`__ will be applied.

        If ``"binned"``, this indicates that the data for the ``x`` (or ``y`` ) channel are
        already binned. You can map the bin-start field to ``x`` (or ``y`` ) and the bin-end
        field to ``x2`` (or ``y2`` ). The scale and axis will be formatted similar to
        binning in Vega-Lite.  To adjust the axis ticks based on the bin step, you can also
        set the axis's `tickMinStep
        <https://vega.github.io/vega-lite/docs/axis.html#ticks>`__ property.

        **Default value:** ``false``

        **See also:** `bin <https://vega.github.io/vega-lite/docs/bin.html>`__
        documentation.
    field : Union[:class:`Field`, Union[:class:`FieldName`, str], Union[:class:`RepeatRef`, Dict[required=[repeat]]]]
        **Required.** A string defining the name of the field from which to pull a data
        value or an object defining iterated values from the `repeat
        <https://vega.github.io/vega-lite/docs/repeat.html>`__ operator.

        **See also:** `field <https://vega.github.io/vega-lite/docs/field.html>`__
        documentation.

        **Notes:** 1)  Dots ( ``.`` ) and brackets ( ``[`` and ``]`` ) can be used to access
        nested objects (e.g., ``"field": "foo.bar"`` and ``"field": "foo['bar']"`` ). If
        field names contain dots or brackets but are not nested, you can use ``\\`` to
        escape dots and brackets (e.g., ``"a\\.b"`` and ``"a\\[0\\]"`` ). See more details
        about escaping in the `field documentation
        <https://vega.github.io/vega-lite/docs/field.html>`__. 2) ``field`` is not required
        if ``aggregate`` is ``count``.
    sort : Union[:class:`SortOrder`, Literal['ascending', 'descending']]
        The sort order. One of ``"ascending"`` (default) or ``"descending"``.
    timeUnit : Union[Union[:class:`BinnedTimeUnit`, Literal['binnedutcyear', 'binnedutcyearquarter', 'binnedutcyearquartermonth', 'binnedutcyearmonth', 'binnedutcyearmonthdate', 'binnedutcyearmonthdatehours', 'binnedutcyearmonthdatehoursminutes', 'binnedutcyearmonthdatehoursminutesseconds', 'binnedutcyearweek', 'binnedutcyearweekday', 'binnedutcyearweekdayhours', 'binnedutcyearweekdayhoursminutes', 'binnedutcyearweekdayhoursminutesseconds', 'binnedutcyeardayofyear'], Literal['binnedyear', 'binnedyearquarter', 'binnedyearquartermonth', 'binnedyearmonth', 'binnedyearmonthdate', 'binnedyearmonthdatehours', 'binnedyearmonthdatehoursminutes', 'binnedyearmonthdatehoursminutesseconds', 'binnedyearweek', 'binnedyearweekday', 'binnedyearweekdayhours', 'binnedyearweekdayhoursminutes', 'binnedyearweekdayhoursminutesseconds', 'binnedyeardayofyear']], Union[:class:`TimeUnitParams`, Dict[required=[]]], Union[:class:`TimeUnit`, Union[:class:`MultiTimeUnit`, Union[:class:`LocalMultiTimeUnit`, Literal['yearquarter', 'yearquartermonth', 'yearmonth', 'yearmonthdate', 'yearmonthdatehours', 'yearmonthdatehoursminutes', 'yearmonthdatehoursminutesseconds', 'yearweek', 'yearweekday', 'yearweekdayhours', 'yearweekdayhoursminutes', 'yearweekdayhoursminutesseconds', 'yeardayofyear', 'quartermonth', 'monthdate', 'monthdatehours', 'monthdatehoursminutes', 'monthdatehoursminutesseconds', 'weekday', 'weeksdayhours', 'weekdayhoursminutes', 'weekdayhoursminutesseconds', 'dayhours', 'dayhoursminutes', 'dayhoursminutesseconds', 'hoursminutes', 'hoursminutesseconds', 'minutesseconds', 'secondsmilliseconds']], Union[:class:`UtcMultiTimeUnit`, Literal['utcyearquarter', 'utcyearquartermonth', 'utcyearmonth', 'utcyearmonthdate', 'utcyearmonthdatehours', 'utcyearmonthdatehoursminutes', 'utcyearmonthdatehoursminutesseconds', 'utcyearweek', 'utcyearweekday', 'utcyearweekdayhours', 'utcyearweekdayhoursminutes', 'utcyearweekdayhoursminutesseconds', 'utcyeardayofyear', 'utcquartermonth', 'utcmonthdate', 'utcmonthdatehours', 'utcmonthdatehoursminutes', 'utcmonthdatehoursminutesseconds', 'utcweekday', 'utcweeksdayhours', 'utcweekdayhoursminutes', 'utcweekdayhoursminutesseconds', 'utcdayhours', 'utcdayhoursminutes', 'utcdayhoursminutesseconds', 'utchoursminutes', 'utchoursminutesseconds', 'utcminutesseconds', 'utcsecondsmilliseconds']]], Union[:class:`SingleTimeUnit`, Union[:class:`LocalSingleTimeUnit`, Literal['year', 'quarter', 'month', 'week', 'day', 'dayofyear', 'date', 'hours', 'minutes', 'seconds', 'milliseconds']], Union[:class:`UtcSingleTimeUnit`, Literal['utcyear', 'utcquarter', 'utcmonth', 'utcweek', 'utcday', 'utcdayofyear', 'utcdate', 'utchours', 'utcminutes', 'utcseconds', 'utcmilliseconds']]]]]
        Time unit (e.g., ``year``, ``yearmonth``, ``month``, ``hours`` ) for a temporal
        field. or `a temporal field that gets casted as ordinal
        <https://vega.github.io/vega-lite/docs/type.html#cast>`__.

        **Default value:** ``undefined`` (None)

        **See also:** `timeUnit <https://vega.github.io/vega-lite/docs/timeunit.html>`__
        documentation.
    title : Union[None, Union[:class:`Text`, List[str], str]]
        A title for the field. If ``null``, the title will be removed.

        **Default value:**  derived from the field's name and transformation function (
        ``aggregate``, ``bin`` and ``timeUnit`` ). If the field has an aggregate function,
        the function is displayed as part of the title (e.g., ``"Sum of Profit"`` ). If the
        field is binned or has a time unit applied, the applied function is shown in
        parentheses (e.g., ``"Profit (binned)"``, ``"Transaction Date (year-month)"`` ).
        Otherwise, the title is simply the field name.

        **Notes** :

        1) You can customize the default field title format by providing the `fieldTitle
        <https://vega.github.io/vega-lite/docs/config.html#top-level-config>`__ property in
        the `config <https://vega.github.io/vega-lite/docs/config.html>`__ or `fieldTitle
        function via the compile function's options
        <https://vega.github.io/vega-lite/usage/compile.html#field-title>`__.

        2) If both field definition's ``title`` and axis, header, or legend ``title`` are
        defined, axis/header/legend title will be used.
    type : Union[:class:`StandardType`, Literal['quantitative', 'ordinal', 'temporal', 'nominal']]
        The type of measurement ( ``"quantitative"``, ``"temporal"``, ``"ordinal"``, or
        ``"nominal"`` ) for the encoded field or constant value ( ``datum`` ). It can also
        be a ``"geojson"`` type for encoding `'geoshape'
        <https://vega.github.io/vega-lite/docs/geoshape.html>`__.

        Vega-Lite automatically infers data types in many cases as discussed below. However,
        type is required for a field if: (1) the field is not nominal and the field encoding
        has no specified ``aggregate`` (except ``argmin`` and ``argmax`` ), ``bin``, scale
        type, custom ``sort`` order, nor ``timeUnit`` or (2) if you wish to use an ordinal
        scale for a field with ``bin`` or ``timeUnit``.

        **Default value:**

        1) For a data ``field``, ``"nominal"`` is the default data type unless the field
        encoding has ``aggregate``, ``channel``, ``bin``, scale type, ``sort``, or
        ``timeUnit`` that satisfies the following criteria:


        * ``"quantitative"`` is the default type if (1) the encoded field contains ``bin``
          or ``aggregate`` except ``"argmin"`` and ``"argmax"``, (2) the encoding channel is
          ``latitude`` or ``longitude`` channel or (3) if the specified scale type is `a
          quantitative scale <https://vega.github.io/vega-lite/docs/scale.html#type>`__.
        * ``"temporal"`` is the default type if (1) the encoded field contains ``timeUnit``
          or (2) the specified scale type is a time or utc scale
        * ``"ordinal"`` is the default type if (1) the encoded field contains a `custom sort
          order
          <https://vega.github.io/vega-lite/docs/sort.html#specifying-custom-sort-order>`__,
          (2) the specified scale type is an ordinal/point/band scale, or (3) the encoding
          channel is ``order``.

        2) For a constant value in data domain ( ``datum`` ):


        * ``"quantitative"`` if the datum is a number
        * ``"nominal"`` if the datum is a string
        * ``"temporal"`` if the datum is `a date time object
          <https://vega.github.io/vega-lite/docs/datetime.html>`__

        **Note:**


        * Data ``type`` describes the semantics of the data rather than the primitive data
          types (number, string, etc.). The same primitive data type can have different
          types of measurement. For example, numeric data can represent quantitative,
          ordinal, or nominal data.
        * Data values for a temporal field can be either a date-time string (e.g.,
          ``"2015-03-07 12:32:17"``, ``"17:01"``, ``"2015-03-16"``. ``"2015"`` ) or a
          timestamp number (e.g., ``1552199579097`` ).
        * When using with `bin <https://vega.github.io/vega-lite/docs/bin.html>`__, the
          ``type`` property can be either ``"quantitative"`` (for using a linear bin scale)
          or `"ordinal" (for using an ordinal bin scale)
          <https://vega.github.io/vega-lite/docs/type.html#cast-bin>`__.
        * When using with `timeUnit
          <https://vega.github.io/vega-lite/docs/timeunit.html>`__, the ``type`` property
          can be either ``"temporal"`` (default, for using a temporal scale) or `"ordinal"
          (for using an ordinal scale)
          <https://vega.github.io/vega-lite/docs/type.html#cast-bin>`__.
        * When using with `aggregate
          <https://vega.github.io/vega-lite/docs/aggregate.html>`__, the ``type`` property
          refers to the post-aggregation data type. For example, we can calculate count
          ``distinct`` of a categorical field ``"cat"`` using ``{"aggregate": "distinct",
          "field": "cat"}``. The ``"type"`` of the aggregate output is ``"quantitative"``.
        * Secondary channels (e.g., ``x2``, ``y2``, ``xError``, ``yError`` ) do not have
          ``type`` as they must have exactly the same type as their primary channels (e.g.,
          ``x``, ``y`` ).

        **See also:** `type <https://vega.github.io/vega-lite/docs/type.html>`__
        documentation.
    """

    _schema = {"$ref": "#/definitions/OrderFieldDef"}

    def __init__(
        self,
        aggregate: Union[
            Union[
                "Aggregate",
                Union["ArgmaxDef", dict],
                Union["ArgminDef", dict],
                Union[
                    "NonArgAggregateOp",
                    Literal[
                        "average",
                        "count",
                        "distinct",
                        "max",
                        "mean",
                        "median",
                        "min",
                        "missing",
                        "product",
                        "q1",
                        "q3",
                        "ci0",
                        "ci1",
                        "stderr",
                        "stdev",
                        "stdevp",
                        "sum",
                        "valid",
                        "values",
                        "variance",
                        "variancep",
                    ],
                ],
            ],
            UndefinedType,
        ] = Undefined,
        bandPosition: Union[float, UndefinedType] = Undefined,
        bin: Union[
            Union[None, Union["BinParams", dict], bool, str], UndefinedType
        ] = Undefined,
        field: Union[
            Union["Field", Union["FieldName", str], Union["RepeatRef", dict]],
            UndefinedType,
        ] = Undefined,
        sort: Union[
            Union["SortOrder", Literal["ascending", "descending"]], UndefinedType
        ] = Undefined,
        timeUnit: Union[
            Union[
                Union[
                    "BinnedTimeUnit",
                    Literal[
                        "binnedutcyear",
                        "binnedutcyearquarter",
                        "binnedutcyearquartermonth",
                        "binnedutcyearmonth",
                        "binnedutcyearmonthdate",
                        "binnedutcyearmonthdatehours",
                        "binnedutcyearmonthdatehoursminutes",
                        "binnedutcyearmonthdatehoursminutesseconds",
                        "binnedutcyearweek",
                        "binnedutcyearweekday",
                        "binnedutcyearweekdayhours",
                        "binnedutcyearweekdayhoursminutes",
                        "binnedutcyearweekdayhoursminutesseconds",
                        "binnedutcyeardayofyear",
                    ],
                    Literal[
                        "binnedyear",
                        "binnedyearquarter",
                        "binnedyearquartermonth",
                        "binnedyearmonth",
                        "binnedyearmonthdate",
                        "binnedyearmonthdatehours",
                        "binnedyearmonthdatehoursminutes",
                        "binnedyearmonthdatehoursminutesseconds",
                        "binnedyearweek",
                        "binnedyearweekday",
                        "binnedyearweekdayhours",
                        "binnedyearweekdayhoursminutes",
                        "binnedyearweekdayhoursminutesseconds",
                        "binnedyeardayofyear",
                    ],
                ],
                Union[
                    "TimeUnit",
                    Union[
                        "MultiTimeUnit",
                        Union[
                            "LocalMultiTimeUnit",
                            Literal[
                                "yearquarter",
                                "yearquartermonth",
                                "yearmonth",
                                "yearmonthdate",
                                "yearmonthdatehours",
                                "yearmonthdatehoursminutes",
                                "yearmonthdatehoursminutesseconds",
                                "yearweek",
                                "yearweekday",
                                "yearweekdayhours",
                                "yearweekdayhoursminutes",
                                "yearweekdayhoursminutesseconds",
                                "yeardayofyear",
                                "quartermonth",
                                "monthdate",
                                "monthdatehours",
                                "monthdatehoursminutes",
                                "monthdatehoursminutesseconds",
                                "weekday",
                                "weeksdayhours",
                                "weekdayhoursminutes",
                                "weekdayhoursminutesseconds",
                                "dayhours",
                                "dayhoursminutes",
                                "dayhoursminutesseconds",
                                "hoursminutes",
                                "hoursminutesseconds",
                                "minutesseconds",
                                "secondsmilliseconds",
                            ],
                        ],
                        Union[
                            "UtcMultiTimeUnit",
                            Literal[
                                "utcyearquarter",
                                "utcyearquartermonth",
                                "utcyearmonth",
                                "utcyearmonthdate",
                                "utcyearmonthdatehours",
                                "utcyearmonthdatehoursminutes",
                                "utcyearmonthdatehoursminutesseconds",
                                "utcyearweek",
                                "utcyearweekday",
                                "utcyearweekdayhours",
                                "utcyearweekdayhoursminutes",
                                "utcyearweekdayhoursminutesseconds",
                                "utcyeardayofyear",
                                "utcquartermonth",
                                "utcmonthdate",
                                "utcmonthdatehours",
                                "utcmonthdatehoursminutes",
                                "utcmonthdatehoursminutesseconds",
                                "utcweekday",
                                "utcweeksdayhours",
                                "utcweekdayhoursminutes",
                                "utcweekdayhoursminutesseconds",
                                "utcdayhours",
                                "utcdayhoursminutes",
                                "utcdayhoursminutesseconds",
                                "utchoursminutes",
                                "utchoursminutesseconds",
                                "utcminutesseconds",
                                "utcsecondsmilliseconds",
                            ],
                        ],
                    ],
                    Union[
                        "SingleTimeUnit",
                        Union[
                            "LocalSingleTimeUnit",
                            Literal[
                                "year",
                                "quarter",
                                "month",
                                "week",
                                "day",
                                "dayofyear",
                                "date",
                                "hours",
                                "minutes",
                                "seconds",
                                "milliseconds",
                            ],
                        ],
                        Union[
                            "UtcSingleTimeUnit",
                            Literal[
                                "utcyear",
                                "utcquarter",
                                "utcmonth",
                                "utcweek",
                                "utcday",
                                "utcdayofyear",
                                "utcdate",
                                "utchours",
                                "utcminutes",
                                "utcseconds",
                                "utcmilliseconds",
                            ],
                        ],
                    ],
                ],
                Union["TimeUnitParams", dict],
            ],
            UndefinedType,
        ] = Undefined,
        title: Union[
            Union[None, Union["Text", List[str], str]], UndefinedType
        ] = Undefined,
        type: Union[
            Union[
                "StandardType",
                Literal["quantitative", "ordinal", "temporal", "nominal"],
            ],
            UndefinedType,
        ] = Undefined,
        **kwds
    ):
        super(OrderFieldDef, self).__init__(
            aggregate=aggregate,
            bandPosition=bandPosition,
            bin=bin,
            field=field,
            sort=sort,
            timeUnit=timeUnit,
            title=title,
            type=type,
            **kwds
        )


class OrderOnlyDef(VegaLiteSchema):
    """OrderOnlyDef schema wrapper

    Union[:class:`OrderOnlyDef`, Dict[required=[]]]

    Parameters
    ----------

    sort : Union[:class:`SortOrder`, Literal['ascending', 'descending']]
        The sort order. One of ``"ascending"`` (default) or ``"descending"``.
    """

    _schema = {"$ref": "#/definitions/OrderOnlyDef"}

    def __init__(
        self,
        sort: Union[
            Union["SortOrder", Literal["ascending", "descending"]], UndefinedType
        ] = Undefined,
        **kwds
    ):
        super(OrderOnlyDef, self).__init__(sort=sort, **kwds)


class OrderValueDef(VegaLiteSchema):
    """OrderValueDef schema wrapper

    Union[:class:`OrderValueDef`, Dict[required=[value]]]

    Parameters
    ----------

    value : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], float]
        A constant value in visual domain (e.g., ``"red"`` / ``"#0099ff"`` / `gradient
        definition <https://vega.github.io/vega-lite/docs/types.html#gradient>`__ for color,
        values between ``0`` to ``1`` for opacity).
    condition : Union[List[Union[:class:`ConditionalValueDefnumber`, Union[:class:`ConditionalParameterValueDefnumber`, Dict[required=[param, value]]], Union[:class:`ConditionalPredicateValueDefnumber`, Dict[required=[test, value]]]]], Union[:class:`ConditionalValueDefnumber`, Union[:class:`ConditionalParameterValueDefnumber`, Dict[required=[param, value]]], Union[:class:`ConditionalPredicateValueDefnumber`, Dict[required=[test, value]]]]]
        One or more value definition(s) with `a parameter or a test predicate
        <https://vega.github.io/vega-lite/docs/condition.html>`__.

        **Note:** A field definition's ``condition`` property can only contain `conditional
        value definitions <https://vega.github.io/vega-lite/docs/condition.html#value>`__
        since Vega-Lite only allows at most one encoded field per encoding channel.
    """

    _schema = {"$ref": "#/definitions/OrderValueDef"}

    def __init__(
        self,
        value: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], float], UndefinedType
        ] = Undefined,
        condition: Union[
            Union[
                Union[
                    "ConditionalValueDefnumber",
                    Union["ConditionalParameterValueDefnumber", dict],
                    Union["ConditionalPredicateValueDefnumber", dict],
                ],
                Union[
                    List["ConditionalValueDefnumber"],
                    List[Union["ConditionalParameterValueDefnumber", dict]],
                    List[Union["ConditionalPredicateValueDefnumber", dict]],
                ],
            ],
            UndefinedType,
        ] = Undefined,
        **kwds
    ):
        super(OrderValueDef, self).__init__(value=value, condition=condition, **kwds)


class Orient(VegaLiteSchema):
    """Orient schema wrapper

    Union[:class:`Orient`, Literal['left', 'right', 'top', 'bottom']]
    """

    _schema = {"$ref": "#/definitions/Orient"}

    def __init__(self, *args):
        super(Orient, self).__init__(*args)


class Orientation(VegaLiteSchema):
    """Orientation schema wrapper

    Union[:class:`Orientation`, Literal['horizontal', 'vertical']]
    """

    _schema = {"$ref": "#/definitions/Orientation"}

    def __init__(self, *args):
        super(Orientation, self).__init__(*args)


class OverlayMarkDef(VegaLiteSchema):
    """OverlayMarkDef schema wrapper

    Union[:class:`OverlayMarkDef`, Dict[required=[]]]

    Parameters
    ----------

    align : Union[Union[:class:`Align`, Literal['left', 'center', 'right']], Union[:class:`ExprRef`, Dict[required=[expr]]]]
        The horizontal alignment of the text or ranged marks (area, bar, image, rect, rule).
        One of ``"left"``, ``"right"``, ``"center"``.

        **Note:** Expression reference is *not* supported for range marks.
    angle : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], float]
        The rotation angle of the text, in degrees.
    aria : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], bool]
        A boolean flag indicating if `ARIA attributes
        <https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA>`__ should be
        included (SVG output only). If ``false``, the "aria-hidden" attribute will be set on
        the output SVG element, removing the mark item from the ARIA accessibility tree.
    ariaRole : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], str]
        Sets the type of user interface element of the mark item for `ARIA accessibility
        <https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA>`__ (SVG output
        only). If specified, this property determines the "role" attribute. Warning: this
        property is experimental and may be changed in the future.
    ariaRoleDescription : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], str]
        A human-readable, author-localized description for the role of the mark item for
        `ARIA accessibility
        <https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA>`__ (SVG output
        only). If specified, this property determines the "aria-roledescription" attribute.
        Warning: this property is experimental and may be changed in the future.
    aspect : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], bool]
        Whether to keep aspect ratio of image marks.
    baseline : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], Union[:class:`TextBaseline`, Union[:class:`Baseline`, Literal['top', 'middle', 'bottom']], str]]
        For text marks, the vertical text baseline. One of ``"alphabetic"`` (default),
        ``"top"``, ``"middle"``, ``"bottom"``, ``"line-top"``, ``"line-bottom"``, or an
        expression reference that provides one of the valid values. The ``"line-top"`` and
        ``"line-bottom"`` values operate similarly to ``"top"`` and ``"bottom"``, but are
        calculated relative to the ``lineHeight`` rather than ``fontSize`` alone.

        For range marks, the vertical alignment of the marks. One of ``"top"``,
        ``"middle"``, ``"bottom"``.

        **Note:** Expression reference is *not* supported for range marks.
    blend : Union[Union[:class:`Blend`, Literal[None, 'multiply', 'screen', 'overlay', 'darken', 'lighten', 'color-dodge', 'color-burn', 'hard-light', 'soft-light', 'difference', 'exclusion', 'hue', 'saturation', 'color', 'luminosity']], Union[:class:`ExprRef`, Dict[required=[expr]]]]
        The color blend mode for drawing an item on its current background. Any valid `CSS
        mix-blend-mode <https://developer.mozilla.org/en-US/docs/Web/CSS/mix-blend-mode>`__
        value can be used.

        __Default value:__ ``"source-over"``
    clip : bool
        Whether a mark be clipped to the enclosing group’s width and height.
    color : Union[Union[:class:`Color`, Union[:class:`ColorName`, Literal['black', 'silver', 'gray', 'white', 'maroon', 'red', 'purple', 'fuchsia', 'green', 'lime', 'olive', 'yellow', 'navy', 'blue', 'teal', 'aqua', 'orange', 'aliceblue', 'antiquewhite', 'aquamarine', 'azure', 'beige', 'bisque', 'blanchedalmond', 'blueviolet', 'brown', 'burlywood', 'cadetblue', 'chartreuse', 'chocolate', 'coral', 'cornflowerblue', 'cornsilk', 'crimson', 'cyan', 'darkblue', 'darkcyan', 'darkgoldenrod', 'darkgray', 'darkgreen', 'darkgrey', 'darkkhaki', 'darkmagenta', 'darkolivegreen', 'darkorange', 'darkorchid', 'darkred', 'darksalmon', 'darkseagreen', 'darkslateblue', 'darkslategray', 'darkslategrey', 'darkturquoise', 'darkviolet', 'deeppink', 'deepskyblue', 'dimgray', 'dimgrey', 'dodgerblue', 'firebrick', 'floralwhite', 'forestgreen', 'gainsboro', 'ghostwhite', 'gold', 'goldenrod', 'greenyellow', 'grey', 'honeydew', 'hotpink', 'indianred', 'indigo', 'ivory', 'khaki', 'lavender', 'lavenderblush', 'lawngreen', 'lemonchiffon', 'lightblue', 'lightcoral', 'lightcyan', 'lightgoldenrodyellow', 'lightgray', 'lightgreen', 'lightgrey', 'lightpink', 'lightsalmon', 'lightseagreen', 'lightskyblue', 'lightslategray', 'lightslategrey', 'lightsteelblue', 'lightyellow', 'limegreen', 'linen', 'magenta', 'mediumaquamarine', 'mediumblue', 'mediumorchid', 'mediumpurple', 'mediumseagreen', 'mediumslateblue', 'mediumspringgreen', 'mediumturquoise', 'mediumvioletred', 'midnightblue', 'mintcream', 'mistyrose', 'moccasin', 'navajowhite', 'oldlace', 'olivedrab', 'orangered', 'orchid', 'palegoldenrod', 'palegreen', 'paleturquoise', 'palevioletred', 'papayawhip', 'peachpuff', 'peru', 'pink', 'plum', 'powderblue', 'rosybrown', 'royalblue', 'saddlebrown', 'salmon', 'sandybrown', 'seagreen', 'seashell', 'sienna', 'skyblue', 'slateblue', 'slategray', 'slategrey', 'snow', 'springgreen', 'steelblue', 'tan', 'thistle', 'tomato', 'turquoise', 'violet', 'wheat', 'whitesmoke', 'yellowgreen', 'rebeccapurple']], Union[:class:`HexColor`, str], str], Union[:class:`ExprRef`, Dict[required=[expr]]], Union[:class:`Gradient`, Union[:class:`LinearGradient`, Dict[required=[gradient, stops]]], Union[:class:`RadialGradient`, Dict[required=[gradient, stops]]]]]
        Default color.

        **Default value:** :raw-html:`<span style="color: #4682b4;">&#9632;</span>`
        ``"#4682b4"``

        **Note:**


        * This property cannot be used in a `style config
          <https://vega.github.io/vega-lite/docs/mark.html#style-config>`__.
        * The ``fill`` and ``stroke`` properties have higher precedence than ``color`` and
          will override ``color``.
    cornerRadius : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], float]
        The radius in pixels of rounded rectangles or arcs' corners.

        **Default value:** ``0``
    cornerRadiusBottomLeft : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], float]
        The radius in pixels of rounded rectangles' bottom left corner.

        **Default value:** ``0``
    cornerRadiusBottomRight : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], float]
        The radius in pixels of rounded rectangles' bottom right corner.

        **Default value:** ``0``
    cornerRadiusTopLeft : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], float]
        The radius in pixels of rounded rectangles' top right corner.

        **Default value:** ``0``
    cornerRadiusTopRight : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], float]
        The radius in pixels of rounded rectangles' top left corner.

        **Default value:** ``0``
    cursor : Union[Union[:class:`Cursor`, Literal['auto', 'default', 'none', 'context-menu', 'help', 'pointer', 'progress', 'wait', 'cell', 'crosshair', 'text', 'vertical-text', 'alias', 'copy', 'move', 'no-drop', 'not-allowed', 'e-resize', 'n-resize', 'ne-resize', 'nw-resize', 's-resize', 'se-resize', 'sw-resize', 'w-resize', 'ew-resize', 'ns-resize', 'nesw-resize', 'nwse-resize', 'col-resize', 'row-resize', 'all-scroll', 'zoom-in', 'zoom-out', 'grab', 'grabbing']], Union[:class:`ExprRef`, Dict[required=[expr]]]]
        The mouse cursor used over the mark. Any valid `CSS cursor type
        <https://developer.mozilla.org/en-US/docs/Web/CSS/cursor#Values>`__ can be used.
    description : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], str]
        A text description of the mark item for `ARIA accessibility
        <https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA>`__ (SVG output
        only). If specified, this property determines the `"aria-label" attribute
        <https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/ARIA_Techniques/Using_the_aria-label_attribute>`__.
    dir : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], Union[:class:`TextDirection`, Literal['ltr', 'rtl']]]
        The direction of the text. One of ``"ltr"`` (left-to-right) or ``"rtl"``
        (right-to-left). This property determines on which side is truncated in response to
        the limit parameter.

        **Default value:** ``"ltr"``
    dx : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], float]
        The horizontal offset, in pixels, between the text label and its anchor point. The
        offset is applied after rotation by the *angle* property.
    dy : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], float]
        The vertical offset, in pixels, between the text label and its anchor point. The
        offset is applied after rotation by the *angle* property.
    ellipsis : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], str]
        The ellipsis string for text truncated in response to the limit parameter.

        **Default value:** ``"…"``
    endAngle : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], float]
        The end angle in radians for arc marks. A value of ``0`` indicates up (north),
        increasing values proceed clockwise.
    fill : Union[None, Union[:class:`Color`, Union[:class:`ColorName`, Literal['black', 'silver', 'gray', 'white', 'maroon', 'red', 'purple', 'fuchsia', 'green', 'lime', 'olive', 'yellow', 'navy', 'blue', 'teal', 'aqua', 'orange', 'aliceblue', 'antiquewhite', 'aquamarine', 'azure', 'beige', 'bisque', 'blanchedalmond', 'blueviolet', 'brown', 'burlywood', 'cadetblue', 'chartreuse', 'chocolate', 'coral', 'cornflowerblue', 'cornsilk', 'crimson', 'cyan', 'darkblue', 'darkcyan', 'darkgoldenrod', 'darkgray', 'darkgreen', 'darkgrey', 'darkkhaki', 'darkmagenta', 'darkolivegreen', 'darkorange', 'darkorchid', 'darkred', 'darksalmon', 'darkseagreen', 'darkslateblue', 'darkslategray', 'darkslategrey', 'darkturquoise', 'darkviolet', 'deeppink', 'deepskyblue', 'dimgray', 'dimgrey', 'dodgerblue', 'firebrick', 'floralwhite', 'forestgreen', 'gainsboro', 'ghostwhite', 'gold', 'goldenrod', 'greenyellow', 'grey', 'honeydew', 'hotpink', 'indianred', 'indigo', 'ivory', 'khaki', 'lavender', 'lavenderblush', 'lawngreen', 'lemonchiffon', 'lightblue', 'lightcoral', 'lightcyan', 'lightgoldenrodyellow', 'lightgray', 'lightgreen', 'lightgrey', 'lightpink', 'lightsalmon', 'lightseagreen', 'lightskyblue', 'lightslategray', 'lightslategrey', 'lightsteelblue', 'lightyellow', 'limegreen', 'linen', 'magenta', 'mediumaquamarine', 'mediumblue', 'mediumorchid', 'mediumpurple', 'mediumseagreen', 'mediumslateblue', 'mediumspringgreen', 'mediumturquoise', 'mediumvioletred', 'midnightblue', 'mintcream', 'mistyrose', 'moccasin', 'navajowhite', 'oldlace', 'olivedrab', 'orangered', 'orchid', 'palegoldenrod', 'palegreen', 'paleturquoise', 'palevioletred', 'papayawhip', 'peachpuff', 'peru', 'pink', 'plum', 'powderblue', 'rosybrown', 'royalblue', 'saddlebrown', 'salmon', 'sandybrown', 'seagreen', 'seashell', 'sienna', 'skyblue', 'slateblue', 'slategray', 'slategrey', 'snow', 'springgreen', 'steelblue', 'tan', 'thistle', 'tomato', 'turquoise', 'violet', 'wheat', 'whitesmoke', 'yellowgreen', 'rebeccapurple']], Union[:class:`HexColor`, str], str], Union[:class:`ExprRef`, Dict[required=[expr]]], Union[:class:`Gradient`, Union[:class:`LinearGradient`, Dict[required=[gradient, stops]]], Union[:class:`RadialGradient`, Dict[required=[gradient, stops]]]]]
        Default fill color. This property has higher precedence than ``config.color``. Set
        to ``null`` to remove fill.

        **Default value:** (None)
    fillOpacity : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], float]
        The fill opacity (value between [0,1]).

        **Default value:** ``1``
    filled : bool
        Whether the mark's color should be used as fill color instead of stroke color.

        **Default value:** ``false`` for all ``point``, ``line``, and ``rule`` marks as well
        as ``geoshape`` marks for `graticule
        <https://vega.github.io/vega-lite/docs/data.html#graticule>`__ data sources;
        otherwise, ``true``.

        **Note:** This property cannot be used in a `style config
        <https://vega.github.io/vega-lite/docs/mark.html#style-config>`__.
    font : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], str]
        The typeface to set the text in (e.g., ``"Helvetica Neue"`` ).
    fontSize : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], float]
        The font size, in pixels.

        **Default value:** ``11``
    fontStyle : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], Union[:class:`FontStyle`, str]]
        The font style (e.g., ``"italic"`` ).
    fontWeight : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], Union[:class:`FontWeight`, Literal['normal', 'bold', 'lighter', 'bolder', 100, 200, 300, 400, 500, 600, 700, 800, 900]]]
        The font weight. This can be either a string (e.g ``"bold"``, ``"normal"`` ) or a
        number ( ``100``, ``200``, ``300``, ..., ``900`` where ``"normal"`` = ``400`` and
        ``"bold"`` = ``700`` ).
    height : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], float]
        Height of the marks.
    href : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], Union[:class:`URI`, str]]
        A URL to load upon mouse click. If defined, the mark acts as a hyperlink.
    innerRadius : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], float]
        The inner radius in pixels of arc marks. ``innerRadius`` is an alias for
        ``radius2``.

        **Default value:** ``0``
    interpolate : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], Union[:class:`Interpolate`, Literal['basis', 'basis-open', 'basis-closed', 'bundle', 'cardinal', 'cardinal-open', 'cardinal-closed', 'catmull-rom', 'linear', 'linear-closed', 'monotone', 'natural', 'step', 'step-before', 'step-after']]]
        The line interpolation method to use for line and area marks. One of the following:


        * ``"linear"`` : piecewise linear segments, as in a polyline.
        * ``"linear-closed"`` : close the linear segments to form a polygon.
        * ``"step"`` : alternate between horizontal and vertical segments, as in a step
          function.
        * ``"step-before"`` : alternate between vertical and horizontal segments, as in a
          step function.
        * ``"step-after"`` : alternate between horizontal and vertical segments, as in a
          step function.
        * ``"basis"`` : a B-spline, with control point duplication on the ends.
        * ``"basis-open"`` : an open B-spline; may not intersect the start or end.
        * ``"basis-closed"`` : a closed B-spline, as in a loop.
        * ``"cardinal"`` : a Cardinal spline, with control point duplication on the ends.
        * ``"cardinal-open"`` : an open Cardinal spline; may not intersect the start or end,
          but will intersect other control points.
        * ``"cardinal-closed"`` : a closed Cardinal spline, as in a loop.
        * ``"bundle"`` : equivalent to basis, except the tension parameter is used to
          straighten the spline.
        * ``"monotone"`` : cubic interpolation that preserves monotonicity in y.
    invalid : Literal['filter', None]
        Defines how Vega-Lite should handle marks for invalid values ( ``null`` and ``NaN``
        ).


        * If set to ``"filter"`` (default), all data items with null values will be skipped
          (for line, trail, and area marks) or filtered (for other marks).
        * If ``null``, all data items are included. In this case, invalid values will be
          interpreted as zeroes.
    limit : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], float]
        The maximum length of the text mark in pixels. The text value will be automatically
        truncated if the rendered size exceeds the limit.

        **Default value:** ``0`` -- indicating no limit
    lineBreak : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], str]
        A delimiter, such as a newline character, upon which to break text strings into
        multiple lines. This property is ignored if the text is array-valued.
    lineHeight : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], float]
        The line height in pixels (the spacing between subsequent lines of text) for
        multi-line text marks.
    opacity : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], float]
        The overall opacity (value between [0,1]).

        **Default value:** ``0.7`` for non-aggregate plots with ``point``, ``tick``,
        ``circle``, or ``square`` marks or layered ``bar`` charts and ``1`` otherwise.
    order : Union[None, bool]
        For line and trail marks, this ``order`` property can be set to ``null`` or
        ``false`` to make the lines use the original order in the data sources.
    orient : Union[:class:`Orientation`, Literal['horizontal', 'vertical']]
        The orientation of a non-stacked bar, tick, area, and line charts. The value is
        either horizontal (default) or vertical.


        * For bar, rule and tick, this determines whether the size of the bar and tick
          should be applied to x or y dimension.
        * For area, this property determines the orient property of the Vega output.
        * For line and trail marks, this property determines the sort order of the points in
          the line if ``config.sortLineBy`` is not specified. For stacked charts, this is
          always determined by the orientation of the stack; therefore explicitly specified
          value will be ignored.
    outerRadius : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], float]
        The outer radius in pixels of arc marks. ``outerRadius`` is an alias for ``radius``.

        **Default value:** ``0``
    padAngle : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], float]
        The angular padding applied to sides of the arc, in radians.
    radius : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], float]
        For arc mark, the primary (outer) radius in pixels.

        For text marks, polar coordinate radial offset, in pixels, of the text from the
        origin determined by the ``x`` and ``y`` properties.

        **Default value:** ``min(plot_width, plot_height)/2``
    radius2 : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], float]
        The secondary (inner) radius in pixels of arc marks.

        **Default value:** ``0``
    radius2Offset : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], float]
        Offset for radius2.
    radiusOffset : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], float]
        Offset for radius.
    shape : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], Union[Union[:class:`SymbolShape`, str], str]]
        Shape of the point marks. Supported values include:


        * plotting shapes: ``"circle"``, ``"square"``, ``"cross"``, ``"diamond"``,
          ``"triangle-up"``, ``"triangle-down"``, ``"triangle-right"``, or
          ``"triangle-left"``.
        * the line symbol ``"stroke"``
        * centered directional shapes ``"arrow"``, ``"wedge"``, or ``"triangle"``
        * a custom `SVG path string
          <https://developer.mozilla.org/en-US/docs/Web/SVG/Tutorial/Paths>`__ (For correct
          sizing, custom shape paths should be defined within a square bounding box with
          coordinates ranging from -1 to 1 along both the x and y dimensions.)

        **Default value:** ``"circle"``
    size : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], float]
        Default size for marks.


        * For ``point`` / ``circle`` / ``square``, this represents the pixel area of the
          marks. Note that this value sets the area of the symbol; the side lengths will
          increase with the square root of this value.
        * For ``bar``, this represents the band size of the bar, in pixels.
        * For ``text``, this represents the font size, in pixels.

        **Default value:**


        * ``30`` for point, circle, square marks; width/height's ``step``
        * ``2`` for bar marks with discrete dimensions;
        * ``5`` for bar marks with continuous dimensions;
        * ``11`` for text marks.
    smooth : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], bool]
        A boolean flag (default true) indicating if the image should be smoothed when
        resized. If false, individual pixels should be scaled directly rather than
        interpolated with smoothing. For SVG rendering, this option may not work in some
        browsers due to lack of standardization.
    startAngle : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], float]
        The start angle in radians for arc marks. A value of ``0`` indicates up (north),
        increasing values proceed clockwise.
    stroke : Union[None, Union[:class:`Color`, Union[:class:`ColorName`, Literal['black', 'silver', 'gray', 'white', 'maroon', 'red', 'purple', 'fuchsia', 'green', 'lime', 'olive', 'yellow', 'navy', 'blue', 'teal', 'aqua', 'orange', 'aliceblue', 'antiquewhite', 'aquamarine', 'azure', 'beige', 'bisque', 'blanchedalmond', 'blueviolet', 'brown', 'burlywood', 'cadetblue', 'chartreuse', 'chocolate', 'coral', 'cornflowerblue', 'cornsilk', 'crimson', 'cyan', 'darkblue', 'darkcyan', 'darkgoldenrod', 'darkgray', 'darkgreen', 'darkgrey', 'darkkhaki', 'darkmagenta', 'darkolivegreen', 'darkorange', 'darkorchid', 'darkred', 'darksalmon', 'darkseagreen', 'darkslateblue', 'darkslategray', 'darkslategrey', 'darkturquoise', 'darkviolet', 'deeppink', 'deepskyblue', 'dimgray', 'dimgrey', 'dodgerblue', 'firebrick', 'floralwhite', 'forestgreen', 'gainsboro', 'ghostwhite', 'gold', 'goldenrod', 'greenyellow', 'grey', 'honeydew', 'hotpink', 'indianred', 'indigo', 'ivory', 'khaki', 'lavender', 'lavenderblush', 'lawngreen', 'lemonchiffon', 'lightblue', 'lightcoral', 'lightcyan', 'lightgoldenrodyellow', 'lightgray', 'lightgreen', 'lightgrey', 'lightpink', 'lightsalmon', 'lightseagreen', 'lightskyblue', 'lightslategray', 'lightslategrey', 'lightsteelblue', 'lightyellow', 'limegreen', 'linen', 'magenta', 'mediumaquamarine', 'mediumblue', 'mediumorchid', 'mediumpurple', 'mediumseagreen', 'mediumslateblue', 'mediumspringgreen', 'mediumturquoise', 'mediumvioletred', 'midnightblue', 'mintcream', 'mistyrose', 'moccasin', 'navajowhite', 'oldlace', 'olivedrab', 'orangered', 'orchid', 'palegoldenrod', 'palegreen', 'paleturquoise', 'palevioletred', 'papayawhip', 'peachpuff', 'peru', 'pink', 'plum', 'powderblue', 'rosybrown', 'royalblue', 'saddlebrown', 'salmon', 'sandybrown', 'seagreen', 'seashell', 'sienna', 'skyblue', 'slateblue', 'slategray', 'slategrey', 'snow', 'springgreen', 'steelblue', 'tan', 'thistle', 'tomato', 'turquoise', 'violet', 'wheat', 'whitesmoke', 'yellowgreen', 'rebeccapurple']], Union[:class:`HexColor`, str], str], Union[:class:`ExprRef`, Dict[required=[expr]]], Union[:class:`Gradient`, Union[:class:`LinearGradient`, Dict[required=[gradient, stops]]], Union[:class:`RadialGradient`, Dict[required=[gradient, stops]]]]]
        Default stroke color. This property has higher precedence than ``config.color``. Set
        to ``null`` to remove stroke.

        **Default value:** (None)
    strokeCap : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], Union[:class:`StrokeCap`, Literal['butt', 'round', 'square']]]
        The stroke cap for line ending style. One of ``"butt"``, ``"round"``, or
        ``"square"``.

        **Default value:** ``"butt"``
    strokeDash : Union[List[float], Union[:class:`ExprRef`, Dict[required=[expr]]]]
        An array of alternating stroke, space lengths for creating dashed or dotted lines.
    strokeDashOffset : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], float]
        The offset (in pixels) into which to begin drawing with the stroke dash array.
    strokeJoin : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], Union[:class:`StrokeJoin`, Literal['miter', 'round', 'bevel']]]
        The stroke line join method. One of ``"miter"``, ``"round"`` or ``"bevel"``.

        **Default value:** ``"miter"``
    strokeMiterLimit : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], float]
        The miter limit at which to bevel a line join.
    strokeOffset : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], float]
        The offset in pixels at which to draw the group stroke and fill. If unspecified, the
        default behavior is to dynamically offset stroked groups such that 1 pixel stroke
        widths align with the pixel grid.
    strokeOpacity : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], float]
        The stroke opacity (value between [0,1]).

        **Default value:** ``1``
    strokeWidth : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], float]
        The stroke width, in pixels.
    style : Union[List[str], str]
        A string or array of strings indicating the name of custom styles to apply to the
        mark. A style is a named collection of mark property defaults defined within the
        `style configuration
        <https://vega.github.io/vega-lite/docs/mark.html#style-config>`__. If style is an
        array, later styles will override earlier styles. Any `mark properties
        <https://vega.github.io/vega-lite/docs/encoding.html#mark-prop>`__ explicitly
        defined within the ``encoding`` will override a style default.

        **Default value:** The mark's name. For example, a bar mark will have style
        ``"bar"`` by default. **Note:** Any specified style will augment the default style.
        For example, a bar mark with ``"style": "foo"`` will receive from
        ``config.style.bar`` and ``config.style.foo`` (the specified style ``"foo"`` has
        higher precedence).
    tension : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], float]
        Depending on the interpolation type, sets the tension parameter (for line and area
        marks).
    text : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], Union[:class:`Text`, List[str], str]]
        Placeholder text if the ``text`` channel is not specified
    theta : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], float]
        For arc marks, the arc length in radians if theta2 is not specified, otherwise the
        start arc angle. (A value of 0 indicates up or “north”, increasing values proceed
        clockwise.)

        For text marks, polar coordinate angle in radians.
    theta2 : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], float]
        The end angle of arc marks in radians. A value of 0 indicates up or “north”,
        increasing values proceed clockwise.
    theta2Offset : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], float]
        Offset for theta2.
    thetaOffset : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], float]
        Offset for theta.
    timeUnitBandPosition : float
        Default relative band position for a time unit. If set to ``0``, the marks will be
        positioned at the beginning of the time unit band step. If set to ``0.5``, the marks
        will be positioned in the middle of the time unit band step.
    timeUnitBandSize : float
        Default relative band size for a time unit. If set to ``1``, the bandwidth of the
        marks will be equal to the time unit band step. If set to ``0.5``, bandwidth of the
        marks will be half of the time unit band step.
    tooltip : Union[None, Union[:class:`ExprRef`, Dict[required=[expr]]], Union[:class:`TooltipContent`, Dict[required=[content]]], bool, float, str]
        The tooltip text string to show upon mouse hover or an object defining which fields
        should the tooltip be derived from.


        * If ``tooltip`` is ``true`` or ``{"content": "encoding"}``, then all fields from
          ``encoding`` will be used.
        * If ``tooltip`` is ``{"content": "data"}``, then all fields that appear in the
          highlighted data point will be used.
        * If set to ``null`` or ``false``, then no tooltip will be used.

        See the `tooltip <https://vega.github.io/vega-lite/docs/tooltip.html>`__
        documentation for a detailed discussion about tooltip  in Vega-Lite.

        **Default value:** ``null``
    url : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], Union[:class:`URI`, str]]
        The URL of the image file for image marks.
    width : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], float]
        Width of the marks.
    x : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], float, str]
        X coordinates of the marks, or width of horizontal ``"bar"`` and ``"area"`` without
        specified ``x2`` or ``width``.

        The ``value`` of this channel can be a number or a string ``"width"`` for the width
        of the plot.
    x2 : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], float, str]
        X2 coordinates for ranged ``"area"``, ``"bar"``, ``"rect"``, and  ``"rule"``.

        The ``value`` of this channel can be a number or a string ``"width"`` for the width
        of the plot.
    x2Offset : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], float]
        Offset for x2-position.
    xOffset : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], float]
        Offset for x-position.
    y : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], float, str]
        Y coordinates of the marks, or height of vertical ``"bar"`` and ``"area"`` without
        specified ``y2`` or ``height``.

        The ``value`` of this channel can be a number or a string ``"height"`` for the
        height of the plot.
    y2 : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], float, str]
        Y2 coordinates for ranged ``"area"``, ``"bar"``, ``"rect"``, and  ``"rule"``.

        The ``value`` of this channel can be a number or a string ``"height"`` for the
        height of the plot.
    y2Offset : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], float]
        Offset for y2-position.
    yOffset : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], float]
        Offset for y-position.
    """

    _schema = {"$ref": "#/definitions/OverlayMarkDef"}

    def __init__(
        self,
        align: Union[
            Union[
                Union["Align", Literal["left", "center", "right"]],
                Union["ExprRef", "_ParameterProtocol", dict],
            ],
            UndefinedType,
        ] = Undefined,
        angle: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], float], UndefinedType
        ] = Undefined,
        aria: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], bool], UndefinedType
        ] = Undefined,
        ariaRole: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], str], UndefinedType
        ] = Undefined,
        ariaRoleDescription: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], str], UndefinedType
        ] = Undefined,
        aspect: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], bool], UndefinedType
        ] = Undefined,
        baseline: Union[
            Union[
                Union["ExprRef", "_ParameterProtocol", dict],
                Union[
                    "TextBaseline",
                    Union["Baseline", Literal["top", "middle", "bottom"]],
                    str,
                ],
            ],
            UndefinedType,
        ] = Undefined,
        blend: Union[
            Union[
                Union[
                    "Blend",
                    Literal[
                        None,
                        "multiply",
                        "screen",
                        "overlay",
                        "darken",
                        "lighten",
                        "color-dodge",
                        "color-burn",
                        "hard-light",
                        "soft-light",
                        "difference",
                        "exclusion",
                        "hue",
                        "saturation",
                        "color",
                        "luminosity",
                    ],
                ],
                Union["ExprRef", "_ParameterProtocol", dict],
            ],
            UndefinedType,
        ] = Undefined,
        clip: Union[bool, UndefinedType] = Undefined,
        color: Union[
            Union[
                Union[
                    "Color",
                    Union[
                        "ColorName",
                        Literal[
                            "black",
                            "silver",
                            "gray",
                            "white",
                            "maroon",
                            "red",
                            "purple",
                            "fuchsia",
                            "green",
                            "lime",
                            "olive",
                            "yellow",
                            "navy",
                            "blue",
                            "teal",
                            "aqua",
                            "orange",
                            "aliceblue",
                            "antiquewhite",
                            "aquamarine",
                            "azure",
                            "beige",
                            "bisque",
                            "blanchedalmond",
                            "blueviolet",
                            "brown",
                            "burlywood",
                            "cadetblue",
                            "chartreuse",
                            "chocolate",
                            "coral",
                            "cornflowerblue",
                            "cornsilk",
                            "crimson",
                            "cyan",
                            "darkblue",
                            "darkcyan",
                            "darkgoldenrod",
                            "darkgray",
                            "darkgreen",
                            "darkgrey",
                            "darkkhaki",
                            "darkmagenta",
                            "darkolivegreen",
                            "darkorange",
                            "darkorchid",
                            "darkred",
                            "darksalmon",
                            "darkseagreen",
                            "darkslateblue",
                            "darkslategray",
                            "darkslategrey",
                            "darkturquoise",
                            "darkviolet",
                            "deeppink",
                            "deepskyblue",
                            "dimgray",
                            "dimgrey",
                            "dodgerblue",
                            "firebrick",
                            "floralwhite",
                            "forestgreen",
                            "gainsboro",
                            "ghostwhite",
                            "gold",
                            "goldenrod",
                            "greenyellow",
                            "grey",
                            "honeydew",
                            "hotpink",
                            "indianred",
                            "indigo",
                            "ivory",
                            "khaki",
                            "lavender",
                            "lavenderblush",
                            "lawngreen",
                            "lemonchiffon",
                            "lightblue",
                            "lightcoral",
                            "lightcyan",
                            "lightgoldenrodyellow",
                            "lightgray",
                            "lightgreen",
                            "lightgrey",
                            "lightpink",
                            "lightsalmon",
                            "lightseagreen",
                            "lightskyblue",
                            "lightslategray",
                            "lightslategrey",
                            "lightsteelblue",
                            "lightyellow",
                            "limegreen",
                            "linen",
                            "magenta",
                            "mediumaquamarine",
                            "mediumblue",
                            "mediumorchid",
                            "mediumpurple",
                            "mediumseagreen",
                            "mediumslateblue",
                            "mediumspringgreen",
                            "mediumturquoise",
                            "mediumvioletred",
                            "midnightblue",
                            "mintcream",
                            "mistyrose",
                            "moccasin",
                            "navajowhite",
                            "oldlace",
                            "olivedrab",
                            "orangered",
                            "orchid",
                            "palegoldenrod",
                            "palegreen",
                            "paleturquoise",
                            "palevioletred",
                            "papayawhip",
                            "peachpuff",
                            "peru",
                            "pink",
                            "plum",
                            "powderblue",
                            "rosybrown",
                            "royalblue",
                            "saddlebrown",
                            "salmon",
                            "sandybrown",
                            "seagreen",
                            "seashell",
                            "sienna",
                            "skyblue",
                            "slateblue",
                            "slategray",
                            "slategrey",
                            "snow",
                            "springgreen",
                            "steelblue",
                            "tan",
                            "thistle",
                            "tomato",
                            "turquoise",
                            "violet",
                            "wheat",
                            "whitesmoke",
                            "yellowgreen",
                            "rebeccapurple",
                        ],
                    ],
                    Union["HexColor", str],
                    str,
                ],
                Union["ExprRef", "_ParameterProtocol", dict],
                Union[
                    "Gradient",
                    Union["LinearGradient", dict],
                    Union["RadialGradient", dict],
                ],
            ],
            UndefinedType,
        ] = Undefined,
        cornerRadius: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], float], UndefinedType
        ] = Undefined,
        cornerRadiusBottomLeft: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], float], UndefinedType
        ] = Undefined,
        cornerRadiusBottomRight: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], float], UndefinedType
        ] = Undefined,
        cornerRadiusTopLeft: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], float], UndefinedType
        ] = Undefined,
        cornerRadiusTopRight: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], float], UndefinedType
        ] = Undefined,
        cursor: Union[
            Union[
                Union[
                    "Cursor",
                    Literal[
                        "auto",
                        "default",
                        "none",
                        "context-menu",
                        "help",
                        "pointer",
                        "progress",
                        "wait",
                        "cell",
                        "crosshair",
                        "text",
                        "vertical-text",
                        "alias",
                        "copy",
                        "move",
                        "no-drop",
                        "not-allowed",
                        "e-resize",
                        "n-resize",
                        "ne-resize",
                        "nw-resize",
                        "s-resize",
                        "se-resize",
                        "sw-resize",
                        "w-resize",
                        "ew-resize",
                        "ns-resize",
                        "nesw-resize",
                        "nwse-resize",
                        "col-resize",
                        "row-resize",
                        "all-scroll",
                        "zoom-in",
                        "zoom-out",
                        "grab",
                        "grabbing",
                    ],
                ],
                Union["ExprRef", "_ParameterProtocol", dict],
            ],
            UndefinedType,
        ] = Undefined,
        description: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], str], UndefinedType
        ] = Undefined,
        dir: Union[
            Union[
                Union["ExprRef", "_ParameterProtocol", dict],
                Union["TextDirection", Literal["ltr", "rtl"]],
            ],
            UndefinedType,
        ] = Undefined,
        dx: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], float], UndefinedType
        ] = Undefined,
        dy: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], float], UndefinedType
        ] = Undefined,
        ellipsis: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], str], UndefinedType
        ] = Undefined,
        endAngle: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], float], UndefinedType
        ] = Undefined,
        fill: Union[
            Union[
                None,
                Union[
                    "Color",
                    Union[
                        "ColorName",
                        Literal[
                            "black",
                            "silver",
                            "gray",
                            "white",
                            "maroon",
                            "red",
                            "purple",
                            "fuchsia",
                            "green",
                            "lime",
                            "olive",
                            "yellow",
                            "navy",
                            "blue",
                            "teal",
                            "aqua",
                            "orange",
                            "aliceblue",
                            "antiquewhite",
                            "aquamarine",
                            "azure",
                            "beige",
                            "bisque",
                            "blanchedalmond",
                            "blueviolet",
                            "brown",
                            "burlywood",
                            "cadetblue",
                            "chartreuse",
                            "chocolate",
                            "coral",
                            "cornflowerblue",
                            "cornsilk",
                            "crimson",
                            "cyan",
                            "darkblue",
                            "darkcyan",
                            "darkgoldenrod",
                            "darkgray",
                            "darkgreen",
                            "darkgrey",
                            "darkkhaki",
                            "darkmagenta",
                            "darkolivegreen",
                            "darkorange",
                            "darkorchid",
                            "darkred",
                            "darksalmon",
                            "darkseagreen",
                            "darkslateblue",
                            "darkslategray",
                            "darkslategrey",
                            "darkturquoise",
                            "darkviolet",
                            "deeppink",
                            "deepskyblue",
                            "dimgray",
                            "dimgrey",
                            "dodgerblue",
                            "firebrick",
                            "floralwhite",
                            "forestgreen",
                            "gainsboro",
                            "ghostwhite",
                            "gold",
                            "goldenrod",
                            "greenyellow",
                            "grey",
                            "honeydew",
                            "hotpink",
                            "indianred",
                            "indigo",
                            "ivory",
                            "khaki",
                            "lavender",
                            "lavenderblush",
                            "lawngreen",
                            "lemonchiffon",
                            "lightblue",
                            "lightcoral",
                            "lightcyan",
                            "lightgoldenrodyellow",
                            "lightgray",
                            "lightgreen",
                            "lightgrey",
                            "lightpink",
                            "lightsalmon",
                            "lightseagreen",
                            "lightskyblue",
                            "lightslategray",
                            "lightslategrey",
                            "lightsteelblue",
                            "lightyellow",
                            "limegreen",
                            "linen",
                            "magenta",
                            "mediumaquamarine",
                            "mediumblue",
                            "mediumorchid",
                            "mediumpurple",
                            "mediumseagreen",
                            "mediumslateblue",
                            "mediumspringgreen",
                            "mediumturquoise",
                            "mediumvioletred",
                            "midnightblue",
                            "mintcream",
                            "mistyrose",
                            "moccasin",
                            "navajowhite",
                            "oldlace",
                            "olivedrab",
                            "orangered",
                            "orchid",
                            "palegoldenrod",
                            "palegreen",
                            "paleturquoise",
                            "palevioletred",
                            "papayawhip",
                            "peachpuff",
                            "peru",
                            "pink",
                            "plum",
                            "powderblue",
                            "rosybrown",
                            "royalblue",
                            "saddlebrown",
                            "salmon",
                            "sandybrown",
                            "seagreen",
                            "seashell",
                            "sienna",
                            "skyblue",
                            "slateblue",
                            "slategray",
                            "slategrey",
                            "snow",
                            "springgreen",
                            "steelblue",
                            "tan",
                            "thistle",
                            "tomato",
                            "turquoise",
                            "violet",
                            "wheat",
                            "whitesmoke",
                            "yellowgreen",
                            "rebeccapurple",
                        ],
                    ],
                    Union["HexColor", str],
                    str,
                ],
                Union["ExprRef", "_ParameterProtocol", dict],
                Union[
                    "Gradient",
                    Union["LinearGradient", dict],
                    Union["RadialGradient", dict],
                ],
            ],
            UndefinedType,
        ] = Undefined,
        fillOpacity: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], float], UndefinedType
        ] = Undefined,
        filled: Union[bool, UndefinedType] = Undefined,
        font: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], str], UndefinedType
        ] = Undefined,
        fontSize: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], float], UndefinedType
        ] = Undefined,
        fontStyle: Union[
            Union[
                Union["ExprRef", "_ParameterProtocol", dict], Union["FontStyle", str]
            ],
            UndefinedType,
        ] = Undefined,
        fontWeight: Union[
            Union[
                Union["ExprRef", "_ParameterProtocol", dict],
                Union[
                    "FontWeight",
                    Literal[
                        "normal",
                        "bold",
                        "lighter",
                        "bolder",
                        100,
                        200,
                        300,
                        400,
                        500,
                        600,
                        700,
                        800,
                        900,
                    ],
                ],
            ],
            UndefinedType,
        ] = Undefined,
        height: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], float], UndefinedType
        ] = Undefined,
        href: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], Union["URI", str]],
            UndefinedType,
        ] = Undefined,
        innerRadius: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], float], UndefinedType
        ] = Undefined,
        interpolate: Union[
            Union[
                Union["ExprRef", "_ParameterProtocol", dict],
                Union[
                    "Interpolate",
                    Literal[
                        "basis",
                        "basis-open",
                        "basis-closed",
                        "bundle",
                        "cardinal",
                        "cardinal-open",
                        "cardinal-closed",
                        "catmull-rom",
                        "linear",
                        "linear-closed",
                        "monotone",
                        "natural",
                        "step",
                        "step-before",
                        "step-after",
                    ],
                ],
            ],
            UndefinedType,
        ] = Undefined,
        invalid: Union[Literal["filter", None], UndefinedType] = Undefined,
        limit: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], float], UndefinedType
        ] = Undefined,
        lineBreak: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], str], UndefinedType
        ] = Undefined,
        lineHeight: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], float], UndefinedType
        ] = Undefined,
        opacity: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], float], UndefinedType
        ] = Undefined,
        order: Union[Union[None, bool], UndefinedType] = Undefined,
        orient: Union[
            Union["Orientation", Literal["horizontal", "vertical"]], UndefinedType
        ] = Undefined,
        outerRadius: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], float], UndefinedType
        ] = Undefined,
        padAngle: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], float], UndefinedType
        ] = Undefined,
        radius: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], float], UndefinedType
        ] = Undefined,
        radius2: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], float], UndefinedType
        ] = Undefined,
        radius2Offset: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], float], UndefinedType
        ] = Undefined,
        radiusOffset: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], float], UndefinedType
        ] = Undefined,
        shape: Union[
            Union[
                Union["ExprRef", "_ParameterProtocol", dict],
                Union[Union["SymbolShape", str], str],
            ],
            UndefinedType,
        ] = Undefined,
        size: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], float], UndefinedType
        ] = Undefined,
        smooth: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], bool], UndefinedType
        ] = Undefined,
        startAngle: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], float], UndefinedType
        ] = Undefined,
        stroke: Union[
            Union[
                None,
                Union[
                    "Color",
                    Union[
                        "ColorName",
                        Literal[
                            "black",
                            "silver",
                            "gray",
                            "white",
                            "maroon",
                            "red",
                            "purple",
                            "fuchsia",
                            "green",
                            "lime",
                            "olive",
                            "yellow",
                            "navy",
                            "blue",
                            "teal",
                            "aqua",
                            "orange",
                            "aliceblue",
                            "antiquewhite",
                            "aquamarine",
                            "azure",
                            "beige",
                            "bisque",
                            "blanchedalmond",
                            "blueviolet",
                            "brown",
                            "burlywood",
                            "cadetblue",
                            "chartreuse",
                            "chocolate",
                            "coral",
                            "cornflowerblue",
                            "cornsilk",
                            "crimson",
                            "cyan",
                            "darkblue",
                            "darkcyan",
                            "darkgoldenrod",
                            "darkgray",
                            "darkgreen",
                            "darkgrey",
                            "darkkhaki",
                            "darkmagenta",
                            "darkolivegreen",
                            "darkorange",
                            "darkorchid",
                            "darkred",
                            "darksalmon",
                            "darkseagreen",
                            "darkslateblue",
                            "darkslategray",
                            "darkslategrey",
                            "darkturquoise",
                            "darkviolet",
                            "deeppink",
                            "deepskyblue",
                            "dimgray",
                            "dimgrey",
                            "dodgerblue",
                            "firebrick",
                            "floralwhite",
                            "forestgreen",
                            "gainsboro",
                            "ghostwhite",
                            "gold",
                            "goldenrod",
                            "greenyellow",
                            "grey",
                            "honeydew",
                            "hotpink",
                            "indianred",
                            "indigo",
                            "ivory",
                            "khaki",
                            "lavender",
                            "lavenderblush",
                            "lawngreen",
                            "lemonchiffon",
                            "lightblue",
                            "lightcoral",
                            "lightcyan",
                            "lightgoldenrodyellow",
                            "lightgray",
                            "lightgreen",
                            "lightgrey",
                            "lightpink",
                            "lightsalmon",
                            "lightseagreen",
                            "lightskyblue",
                            "lightslategray",
                            "lightslategrey",
                            "lightsteelblue",
                            "lightyellow",
                            "limegreen",
                            "linen",
                            "magenta",
                            "mediumaquamarine",
                            "mediumblue",
                            "mediumorchid",
                            "mediumpurple",
                            "mediumseagreen",
                            "mediumslateblue",
                            "mediumspringgreen",
                            "mediumturquoise",
                            "mediumvioletred",
                            "midnightblue",
                            "mintcream",
                            "mistyrose",
                            "moccasin",
                            "navajowhite",
                            "oldlace",
                            "olivedrab",
                            "orangered",
                            "orchid",
                            "palegoldenrod",
                            "palegreen",
                            "paleturquoise",
                            "palevioletred",
                            "papayawhip",
                            "peachpuff",
                            "peru",
                            "pink",
                            "plum",
                            "powderblue",
                            "rosybrown",
                            "royalblue",
                            "saddlebrown",
                            "salmon",
                            "sandybrown",
                            "seagreen",
                            "seashell",
                            "sienna",
                            "skyblue",
                            "slateblue",
                            "slategray",
                            "slategrey",
                            "snow",
                            "springgreen",
                            "steelblue",
                            "tan",
                            "thistle",
                            "tomato",
                            "turquoise",
                            "violet",
                            "wheat",
                            "whitesmoke",
                            "yellowgreen",
                            "rebeccapurple",
                        ],
                    ],
                    Union["HexColor", str],
                    str,
                ],
                Union["ExprRef", "_ParameterProtocol", dict],
                Union[
                    "Gradient",
                    Union["LinearGradient", dict],
                    Union["RadialGradient", dict],
                ],
            ],
            UndefinedType,
        ] = Undefined,
        strokeCap: Union[
            Union[
                Union["ExprRef", "_ParameterProtocol", dict],
                Union["StrokeCap", Literal["butt", "round", "square"]],
            ],
            UndefinedType,
        ] = Undefined,
        strokeDash: Union[
            Union[List[float], Union["ExprRef", "_ParameterProtocol", dict]],
            UndefinedType,
        ] = Undefined,
        strokeDashOffset: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], float], UndefinedType
        ] = Undefined,
        strokeJoin: Union[
            Union[
                Union["ExprRef", "_ParameterProtocol", dict],
                Union["StrokeJoin", Literal["miter", "round", "bevel"]],
            ],
            UndefinedType,
        ] = Undefined,
        strokeMiterLimit: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], float], UndefinedType
        ] = Undefined,
        strokeOffset: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], float], UndefinedType
        ] = Undefined,
        strokeOpacity: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], float], UndefinedType
        ] = Undefined,
        strokeWidth: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], float], UndefinedType
        ] = Undefined,
        style: Union[Union[List[str], str], UndefinedType] = Undefined,
        tension: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], float], UndefinedType
        ] = Undefined,
        text: Union[
            Union[
                Union["ExprRef", "_ParameterProtocol", dict],
                Union["Text", List[str], str],
            ],
            UndefinedType,
        ] = Undefined,
        theta: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], float], UndefinedType
        ] = Undefined,
        theta2: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], float], UndefinedType
        ] = Undefined,
        theta2Offset: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], float], UndefinedType
        ] = Undefined,
        thetaOffset: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], float], UndefinedType
        ] = Undefined,
        timeUnitBandPosition: Union[float, UndefinedType] = Undefined,
        timeUnitBandSize: Union[float, UndefinedType] = Undefined,
        tooltip: Union[
            Union[
                None,
                Union["ExprRef", "_ParameterProtocol", dict],
                Union["TooltipContent", dict],
                bool,
                float,
                str,
            ],
            UndefinedType,
        ] = Undefined,
        url: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], Union["URI", str]],
            UndefinedType,
        ] = Undefined,
        width: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], float], UndefinedType
        ] = Undefined,
        x: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], float, str],
            UndefinedType,
        ] = Undefined,
        x2: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], float, str],
            UndefinedType,
        ] = Undefined,
        x2Offset: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], float], UndefinedType
        ] = Undefined,
        xOffset: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], float], UndefinedType
        ] = Undefined,
        y: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], float, str],
            UndefinedType,
        ] = Undefined,
        y2: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], float, str],
            UndefinedType,
        ] = Undefined,
        y2Offset: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], float], UndefinedType
        ] = Undefined,
        yOffset: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], float], UndefinedType
        ] = Undefined,
        **kwds
    ):
        super(OverlayMarkDef, self).__init__(
            align=align,
            angle=angle,
            aria=aria,
            ariaRole=ariaRole,
            ariaRoleDescription=ariaRoleDescription,
            aspect=aspect,
            baseline=baseline,
            blend=blend,
            clip=clip,
            color=color,
            cornerRadius=cornerRadius,
            cornerRadiusBottomLeft=cornerRadiusBottomLeft,
            cornerRadiusBottomRight=cornerRadiusBottomRight,
            cornerRadiusTopLeft=cornerRadiusTopLeft,
            cornerRadiusTopRight=cornerRadiusTopRight,
            cursor=cursor,
            description=description,
            dir=dir,
            dx=dx,
            dy=dy,
            ellipsis=ellipsis,
            endAngle=endAngle,
            fill=fill,
            fillOpacity=fillOpacity,
            filled=filled,
            font=font,
            fontSize=fontSize,
            fontStyle=fontStyle,
            fontWeight=fontWeight,
            height=height,
            href=href,
            innerRadius=innerRadius,
            interpolate=interpolate,
            invalid=invalid,
            limit=limit,
            lineBreak=lineBreak,
            lineHeight=lineHeight,
            opacity=opacity,
            order=order,
            orient=orient,
            outerRadius=outerRadius,
            padAngle=padAngle,
            radius=radius,
            radius2=radius2,
            radius2Offset=radius2Offset,
            radiusOffset=radiusOffset,
            shape=shape,
            size=size,
            smooth=smooth,
            startAngle=startAngle,
            stroke=stroke,
            strokeCap=strokeCap,
            strokeDash=strokeDash,
            strokeDashOffset=strokeDashOffset,
            strokeJoin=strokeJoin,
            strokeMiterLimit=strokeMiterLimit,
            strokeOffset=strokeOffset,
            strokeOpacity=strokeOpacity,
            strokeWidth=strokeWidth,
            style=style,
            tension=tension,
            text=text,
            theta=theta,
            theta2=theta2,
            theta2Offset=theta2Offset,
            thetaOffset=thetaOffset,
            timeUnitBandPosition=timeUnitBandPosition,
            timeUnitBandSize=timeUnitBandSize,
            tooltip=tooltip,
            url=url,
            width=width,
            x=x,
            x2=x2,
            x2Offset=x2Offset,
            xOffset=xOffset,
            y=y,
            y2=y2,
            y2Offset=y2Offset,
            yOffset=yOffset,
            **kwds
        )


class Padding(VegaLiteSchema):
    """Padding schema wrapper

    Union[:class:`Padding`, Dict[required=[]], float]
    """

    _schema = {"$ref": "#/definitions/Padding"}

    def __init__(self, *args, **kwds):
        super(Padding, self).__init__(*args, **kwds)


class ParameterExtent(BinExtent):
    """ParameterExtent schema wrapper

    Union[:class:`ParameterExtent`, Dict[required=[param]]]
    """

    _schema = {"$ref": "#/definitions/ParameterExtent"}

    def __init__(self, *args, **kwds):
        super(ParameterExtent, self).__init__(*args, **kwds)


class ParameterName(VegaLiteSchema):
    """ParameterName schema wrapper

    Union[:class:`ParameterName`, str]
    """

    _schema = {"$ref": "#/definitions/ParameterName"}

    def __init__(self, *args):
        super(ParameterName, self).__init__(*args)


class Parse(VegaLiteSchema):
    """Parse schema wrapper

    Union[:class:`Parse`, Dict[required=[]]]
    """

    _schema = {"$ref": "#/definitions/Parse"}

    def __init__(self, **kwds):
        super(Parse, self).__init__(**kwds)


class ParseValue(VegaLiteSchema):
    """ParseValue schema wrapper

    Union[:class:`ParseValue`, None, str]
    """

    _schema = {"$ref": "#/definitions/ParseValue"}

    def __init__(self, *args, **kwds):
        super(ParseValue, self).__init__(*args, **kwds)


class Point(Geometry):
    """Point schema wrapper

    Union[:class:`Point`, Dict[required=[coordinates, type]]]
    Point geometry object. https://tools.ietf.org/html/rfc7946#section-3.1.2

    Parameters
    ----------

    coordinates : Union[:class:`Position`, List[float]]
        A Position is an array of coordinates.
        https://tools.ietf.org/html/rfc7946#section-3.1.1 Array should contain between two
        and three elements. The previous GeoJSON specification allowed more elements (e.g.,
        which could be used to represent M values), but the current specification only
        allows X, Y, and (optionally) Z to be defined.
    type : str
        Specifies the type of GeoJSON object.
    bbox : Union[:class:`BBox`, List[float]]
        Bounding box of the coordinate range of the object's Geometries, Features, or
        Feature Collections. https://tools.ietf.org/html/rfc7946#section-5
    """

    _schema = {"$ref": "#/definitions/Point"}

    def __init__(
        self,
        coordinates: Union[Union["Position", List[float]], UndefinedType] = Undefined,
        type: Union[str, UndefinedType] = Undefined,
        bbox: Union[Union["BBox", List[float]], UndefinedType] = Undefined,
        **kwds
    ):
        super(Point, self).__init__(
            coordinates=coordinates, type=type, bbox=bbox, **kwds
        )


class PointSelectionConfig(VegaLiteSchema):
    """PointSelectionConfig schema wrapper

    Union[:class:`PointSelectionConfig`, Dict[required=[type]]]

    Parameters
    ----------

    type : str
        Determines the default event processing and data query for the selection. Vega-Lite
        currently supports two selection types:


        * ``"point"`` -- to select multiple discrete data values; the first value is
          selected on ``click`` and additional values toggled on shift-click.
        * ``"interval"`` -- to select a continuous range of data values on ``drag``.
    clear : Union[Union[:class:`Stream`, Union[:class:`DerivedStream`, Dict[required=[stream]]], Union[:class:`EventStream`, Dict[required=[source, type]], Dict[required=[type]]], Union[:class:`MergedStream`, Dict[required=[merge]]]], bool, str]
        Clears the selection, emptying it of all values. This property can be a `Event
        Stream <https://vega.github.io/vega/docs/event-streams/>`__ or ``false`` to disable
        clear.

        **Default value:** ``dblclick``.

        **See also:** `clear examples
        <https://vega.github.io/vega-lite/docs/selection.html#clear>`__ in the
        documentation.
    encodings : List[Union[:class:`SingleDefUnitChannel`, Literal['x', 'y', 'xOffset', 'yOffset', 'x2', 'y2', 'longitude', 'latitude', 'longitude2', 'latitude2', 'theta', 'theta2', 'radius', 'radius2', 'color', 'fill', 'stroke', 'opacity', 'fillOpacity', 'strokeOpacity', 'strokeWidth', 'strokeDash', 'size', 'angle', 'shape', 'key', 'text', 'href', 'url', 'description']]]
        An array of encoding channels. The corresponding data field values must match for a
        data tuple to fall within the selection.

        **See also:** The `projection with encodings and fields section
        <https://vega.github.io/vega-lite/docs/selection.html#project>`__ in the
        documentation.
    fields : List[Union[:class:`FieldName`, str]]
        An array of field names whose values must match for a data tuple to fall within the
        selection.

        **See also:** The `projection with encodings and fields section
        <https://vega.github.io/vega-lite/docs/selection.html#project>`__ in the
        documentation.
    nearest : bool
        When true, an invisible voronoi diagram is computed to accelerate discrete
        selection. The data value *nearest* the mouse cursor is added to the selection.

        **Default value:** ``false``, which means that data values must be interacted with
        directly (e.g., clicked on) to be added to the selection.

        **See also:** `nearest examples
        <https://vega.github.io/vega-lite/docs/selection.html#nearest>`__ documentation.
    on : Union[Union[:class:`Stream`, Union[:class:`DerivedStream`, Dict[required=[stream]]], Union[:class:`EventStream`, Dict[required=[source, type]], Dict[required=[type]]], Union[:class:`MergedStream`, Dict[required=[merge]]]], str]
        A `Vega event stream <https://vega.github.io/vega/docs/event-streams/>`__ (object or
        selector) that triggers the selection. For interval selections, the event stream
        must specify a `start and end
        <https://vega.github.io/vega/docs/event-streams/#between-filters>`__.

        **See also:** `on examples
        <https://vega.github.io/vega-lite/docs/selection.html#on>`__ in the documentation.
    resolve : Union[:class:`SelectionResolution`, Literal['global', 'union', 'intersect']]
        With layered and multi-view displays, a strategy that determines how selections'
        data queries are resolved when applied in a filter transform, conditional encoding
        rule, or scale domain.

        One of:


        * ``"global"`` -- only one brush exists for the entire SPLOM. When the user begins
          to drag, any previous brushes are cleared, and a new one is constructed.
        * ``"union"`` -- each cell contains its own brush, and points are highlighted if
          they lie within *any* of these individual brushes.
        * ``"intersect"`` -- each cell contains its own brush, and points are highlighted
          only if they fall within *all* of these individual brushes.

        **Default value:** ``global``.

        **See also:** `resolve examples
        <https://vega.github.io/vega-lite/docs/selection.html#resolve>`__ in the
        documentation.
    toggle : Union[bool, str]
        Controls whether data values should be toggled (inserted or removed from a point
        selection) or only ever inserted into point selections.

        One of:


        * ``true`` -- the default behavior, which corresponds to ``"event.shiftKey"``.  As a
          result, data values are toggled when the user interacts with the shift-key
          pressed.
        * ``false`` -- disables toggling behaviour; the selection will only ever contain a
          single data value corresponding to the most recent interaction.
        * A `Vega expression <https://vega.github.io/vega/docs/expressions/>`__ which is
          re-evaluated as the user interacts. If the expression evaluates to ``true``, the
          data value is toggled into or out of the point selection. If the expression
          evaluates to ``false``, the point selection is first cleared, and the data value
          is then inserted. For example, setting the value to the Vega expression ``"true"``
          will toggle data values without the user pressing the shift-key.

        **Default value:** ``true``

        **See also:** `toggle examples
        <https://vega.github.io/vega-lite/docs/selection.html#toggle>`__ in the
        documentation.
    """

    _schema = {"$ref": "#/definitions/PointSelectionConfig"}

    def __init__(
        self,
        type: Union[str, UndefinedType] = Undefined,
        clear: Union[
            Union[
                Union[
                    "Stream",
                    Union["DerivedStream", dict],
                    Union["EventStream", dict],
                    Union["MergedStream", dict],
                ],
                bool,
                str,
            ],
            UndefinedType,
        ] = Undefined,
        encodings: Union[
            Union[
                List["SingleDefUnitChannel"],
                List[
                    Literal[
                        "x",
                        "y",
                        "xOffset",
                        "yOffset",
                        "x2",
                        "y2",
                        "longitude",
                        "latitude",
                        "longitude2",
                        "latitude2",
                        "theta",
                        "theta2",
                        "radius",
                        "radius2",
                        "color",
                        "fill",
                        "stroke",
                        "opacity",
                        "fillOpacity",
                        "strokeOpacity",
                        "strokeWidth",
                        "strokeDash",
                        "size",
                        "angle",
                        "shape",
                        "key",
                        "text",
                        "href",
                        "url",
                        "description",
                    ]
                ],
            ],
            UndefinedType,
        ] = Undefined,
        fields: Union[Union[List["FieldName"], List[str]], UndefinedType] = Undefined,
        nearest: Union[bool, UndefinedType] = Undefined,
        on: Union[
            Union[
                Union[
                    "Stream",
                    Union["DerivedStream", dict],
                    Union["EventStream", dict],
                    Union["MergedStream", dict],
                ],
                str,
            ],
            UndefinedType,
        ] = Undefined,
        resolve: Union[
            Union["SelectionResolution", Literal["global", "union", "intersect"]],
            UndefinedType,
        ] = Undefined,
        toggle: Union[Union[bool, str], UndefinedType] = Undefined,
        **kwds
    ):
        super(PointSelectionConfig, self).__init__(
            type=type,
            clear=clear,
            encodings=encodings,
            fields=fields,
            nearest=nearest,
            on=on,
            resolve=resolve,
            toggle=toggle,
            **kwds
        )


class PointSelectionConfigWithoutType(VegaLiteSchema):
    """PointSelectionConfigWithoutType schema wrapper

    Union[:class:`PointSelectionConfigWithoutType`, Dict[required=[]]]

    Parameters
    ----------

    clear : Union[Union[:class:`Stream`, Union[:class:`DerivedStream`, Dict[required=[stream]]], Union[:class:`EventStream`, Dict[required=[source, type]], Dict[required=[type]]], Union[:class:`MergedStream`, Dict[required=[merge]]]], bool, str]
        Clears the selection, emptying it of all values. This property can be a `Event
        Stream <https://vega.github.io/vega/docs/event-streams/>`__ or ``false`` to disable
        clear.

        **Default value:** ``dblclick``.

        **See also:** `clear examples
        <https://vega.github.io/vega-lite/docs/selection.html#clear>`__ in the
        documentation.
    encodings : List[Union[:class:`SingleDefUnitChannel`, Literal['x', 'y', 'xOffset', 'yOffset', 'x2', 'y2', 'longitude', 'latitude', 'longitude2', 'latitude2', 'theta', 'theta2', 'radius', 'radius2', 'color', 'fill', 'stroke', 'opacity', 'fillOpacity', 'strokeOpacity', 'strokeWidth', 'strokeDash', 'size', 'angle', 'shape', 'key', 'text', 'href', 'url', 'description']]]
        An array of encoding channels. The corresponding data field values must match for a
        data tuple to fall within the selection.

        **See also:** The `projection with encodings and fields section
        <https://vega.github.io/vega-lite/docs/selection.html#project>`__ in the
        documentation.
    fields : List[Union[:class:`FieldName`, str]]
        An array of field names whose values must match for a data tuple to fall within the
        selection.

        **See also:** The `projection with encodings and fields section
        <https://vega.github.io/vega-lite/docs/selection.html#project>`__ in the
        documentation.
    nearest : bool
        When true, an invisible voronoi diagram is computed to accelerate discrete
        selection. The data value *nearest* the mouse cursor is added to the selection.

        **Default value:** ``false``, which means that data values must be interacted with
        directly (e.g., clicked on) to be added to the selection.

        **See also:** `nearest examples
        <https://vega.github.io/vega-lite/docs/selection.html#nearest>`__ documentation.
    on : Union[Union[:class:`Stream`, Union[:class:`DerivedStream`, Dict[required=[stream]]], Union[:class:`EventStream`, Dict[required=[source, type]], Dict[required=[type]]], Union[:class:`MergedStream`, Dict[required=[merge]]]], str]
        A `Vega event stream <https://vega.github.io/vega/docs/event-streams/>`__ (object or
        selector) that triggers the selection. For interval selections, the event stream
        must specify a `start and end
        <https://vega.github.io/vega/docs/event-streams/#between-filters>`__.

        **See also:** `on examples
        <https://vega.github.io/vega-lite/docs/selection.html#on>`__ in the documentation.
    resolve : Union[:class:`SelectionResolution`, Literal['global', 'union', 'intersect']]
        With layered and multi-view displays, a strategy that determines how selections'
        data queries are resolved when applied in a filter transform, conditional encoding
        rule, or scale domain.

        One of:


        * ``"global"`` -- only one brush exists for the entire SPLOM. When the user begins
          to drag, any previous brushes are cleared, and a new one is constructed.
        * ``"union"`` -- each cell contains its own brush, and points are highlighted if
          they lie within *any* of these individual brushes.
        * ``"intersect"`` -- each cell contains its own brush, and points are highlighted
          only if they fall within *all* of these individual brushes.

        **Default value:** ``global``.

        **See also:** `resolve examples
        <https://vega.github.io/vega-lite/docs/selection.html#resolve>`__ in the
        documentation.
    toggle : Union[bool, str]
        Controls whether data values should be toggled (inserted or removed from a point
        selection) or only ever inserted into point selections.

        One of:


        * ``true`` -- the default behavior, which corresponds to ``"event.shiftKey"``.  As a
          result, data values are toggled when the user interacts with the shift-key
          pressed.
        * ``false`` -- disables toggling behaviour; the selection will only ever contain a
          single data value corresponding to the most recent interaction.
        * A `Vega expression <https://vega.github.io/vega/docs/expressions/>`__ which is
          re-evaluated as the user interacts. If the expression evaluates to ``true``, the
          data value is toggled into or out of the point selection. If the expression
          evaluates to ``false``, the point selection is first cleared, and the data value
          is then inserted. For example, setting the value to the Vega expression ``"true"``
          will toggle data values without the user pressing the shift-key.

        **Default value:** ``true``

        **See also:** `toggle examples
        <https://vega.github.io/vega-lite/docs/selection.html#toggle>`__ in the
        documentation.
    """

    _schema = {"$ref": "#/definitions/PointSelectionConfigWithoutType"}

    def __init__(
        self,
        clear: Union[
            Union[
                Union[
                    "Stream",
                    Union["DerivedStream", dict],
                    Union["EventStream", dict],
                    Union["MergedStream", dict],
                ],
                bool,
                str,
            ],
            UndefinedType,
        ] = Undefined,
        encodings: Union[
            Union[
                List["SingleDefUnitChannel"],
                List[
                    Literal[
                        "x",
                        "y",
                        "xOffset",
                        "yOffset",
                        "x2",
                        "y2",
                        "longitude",
                        "latitude",
                        "longitude2",
                        "latitude2",
                        "theta",
                        "theta2",
                        "radius",
                        "radius2",
                        "color",
                        "fill",
                        "stroke",
                        "opacity",
                        "fillOpacity",
                        "strokeOpacity",
                        "strokeWidth",
                        "strokeDash",
                        "size",
                        "angle",
                        "shape",
                        "key",
                        "text",
                        "href",
                        "url",
                        "description",
                    ]
                ],
            ],
            UndefinedType,
        ] = Undefined,
        fields: Union[Union[List["FieldName"], List[str]], UndefinedType] = Undefined,
        nearest: Union[bool, UndefinedType] = Undefined,
        on: Union[
            Union[
                Union[
                    "Stream",
                    Union["DerivedStream", dict],
                    Union["EventStream", dict],
                    Union["MergedStream", dict],
                ],
                str,
            ],
            UndefinedType,
        ] = Undefined,
        resolve: Union[
            Union["SelectionResolution", Literal["global", "union", "intersect"]],
            UndefinedType,
        ] = Undefined,
        toggle: Union[Union[bool, str], UndefinedType] = Undefined,
        **kwds
    ):
        super(PointSelectionConfigWithoutType, self).__init__(
            clear=clear,
            encodings=encodings,
            fields=fields,
            nearest=nearest,
            on=on,
            resolve=resolve,
            toggle=toggle,
            **kwds
        )


class PolarDef(VegaLiteSchema):
    """PolarDef schema wrapper

    Union[:class:`PolarDef`, Union[:class:`PositionDatumDefBase`, Dict[required=[]]],
    Union[:class:`PositionFieldDefBase`, Dict[required=[]]], Union[:class:`PositionValueDef`,
    Dict[required=[value]]]]
    """

    _schema = {"$ref": "#/definitions/PolarDef"}

    def __init__(self, *args, **kwds):
        super(PolarDef, self).__init__(*args, **kwds)


class Polygon(Geometry):
    """Polygon schema wrapper

    Union[:class:`Polygon`, Dict[required=[coordinates, type]]]
    Polygon geometry object. https://tools.ietf.org/html/rfc7946#section-3.1.6

    Parameters
    ----------

    coordinates : List[List[Union[:class:`Position`, List[float]]]]

    type : str
        Specifies the type of GeoJSON object.
    bbox : Union[:class:`BBox`, List[float]]
        Bounding box of the coordinate range of the object's Geometries, Features, or
        Feature Collections. https://tools.ietf.org/html/rfc7946#section-5
    """

    _schema = {"$ref": "#/definitions/Polygon"}

    def __init__(
        self,
        coordinates: Union[
            Union[List[List["Position"]], List[List[List[float]]]], UndefinedType
        ] = Undefined,
        type: Union[str, UndefinedType] = Undefined,
        bbox: Union[Union["BBox", List[float]], UndefinedType] = Undefined,
        **kwds
    ):
        super(Polygon, self).__init__(
            coordinates=coordinates, type=type, bbox=bbox, **kwds
        )


class Position(VegaLiteSchema):
    """Position schema wrapper

    Union[:class:`Position`, List[float]]
    A Position is an array of coordinates. https://tools.ietf.org/html/rfc7946#section-3.1.1
    Array should contain between two and three elements. The previous GeoJSON specification
    allowed more elements (e.g., which could be used to represent M values), but the current
    specification only allows X, Y, and (optionally) Z to be defined.
    """

    _schema = {"$ref": "#/definitions/Position"}

    def __init__(self, *args):
        super(Position, self).__init__(*args)


class Position2Def(VegaLiteSchema):
    """Position2Def schema wrapper

    Union[:class:`Position2Def`, Union[:class:`DatumDef`, Dict[required=[]]],
    Union[:class:`PositionValueDef`, Dict[required=[value]]], Union[:class:`SecondaryFieldDef`,
    Dict[required=[]]]]
    """

    _schema = {"$ref": "#/definitions/Position2Def"}

    def __init__(self, *args, **kwds):
        super(Position2Def, self).__init__(*args, **kwds)


class DatumDef(LatLongDef, Position2Def):
    """DatumDef schema wrapper

    Union[:class:`DatumDef`, Dict[required=[]]]

    Parameters
    ----------

    bandPosition : float
        Relative position on a band of a stacked, binned, time unit, or band scale. For
        example, the marks will be positioned at the beginning of the band if set to ``0``,
        and at the middle of the band if set to ``0.5``.
    datum : Union[Union[:class:`DateTime`, Dict[required=[]]], Union[:class:`ExprRef`, Dict[required=[expr]]], Union[:class:`PrimitiveValue`, None, bool, float, str], Union[:class:`RepeatRef`, Dict[required=[repeat]]]]
        A constant value in data domain.
    title : Union[None, Union[:class:`Text`, List[str], str]]
        A title for the field. If ``null``, the title will be removed.

        **Default value:**  derived from the field's name and transformation function (
        ``aggregate``, ``bin`` and ``timeUnit`` ). If the field has an aggregate function,
        the function is displayed as part of the title (e.g., ``"Sum of Profit"`` ). If the
        field is binned or has a time unit applied, the applied function is shown in
        parentheses (e.g., ``"Profit (binned)"``, ``"Transaction Date (year-month)"`` ).
        Otherwise, the title is simply the field name.

        **Notes** :

        1) You can customize the default field title format by providing the `fieldTitle
        <https://vega.github.io/vega-lite/docs/config.html#top-level-config>`__ property in
        the `config <https://vega.github.io/vega-lite/docs/config.html>`__ or `fieldTitle
        function via the compile function's options
        <https://vega.github.io/vega-lite/usage/compile.html#field-title>`__.

        2) If both field definition's ``title`` and axis, header, or legend ``title`` are
        defined, axis/header/legend title will be used.
    type : Union[:class:`Type`, Literal['quantitative', 'ordinal', 'temporal', 'nominal', 'geojson']]
        The type of measurement ( ``"quantitative"``, ``"temporal"``, ``"ordinal"``, or
        ``"nominal"`` ) for the encoded field or constant value ( ``datum`` ). It can also
        be a ``"geojson"`` type for encoding `'geoshape'
        <https://vega.github.io/vega-lite/docs/geoshape.html>`__.

        Vega-Lite automatically infers data types in many cases as discussed below. However,
        type is required for a field if: (1) the field is not nominal and the field encoding
        has no specified ``aggregate`` (except ``argmin`` and ``argmax`` ), ``bin``, scale
        type, custom ``sort`` order, nor ``timeUnit`` or (2) if you wish to use an ordinal
        scale for a field with ``bin`` or ``timeUnit``.

        **Default value:**

        1) For a data ``field``, ``"nominal"`` is the default data type unless the field
        encoding has ``aggregate``, ``channel``, ``bin``, scale type, ``sort``, or
        ``timeUnit`` that satisfies the following criteria:


        * ``"quantitative"`` is the default type if (1) the encoded field contains ``bin``
          or ``aggregate`` except ``"argmin"`` and ``"argmax"``, (2) the encoding channel is
          ``latitude`` or ``longitude`` channel or (3) if the specified scale type is `a
          quantitative scale <https://vega.github.io/vega-lite/docs/scale.html#type>`__.
        * ``"temporal"`` is the default type if (1) the encoded field contains ``timeUnit``
          or (2) the specified scale type is a time or utc scale
        * ``"ordinal"`` is the default type if (1) the encoded field contains a `custom sort
          order
          <https://vega.github.io/vega-lite/docs/sort.html#specifying-custom-sort-order>`__,
          (2) the specified scale type is an ordinal/point/band scale, or (3) the encoding
          channel is ``order``.

        2) For a constant value in data domain ( ``datum`` ):


        * ``"quantitative"`` if the datum is a number
        * ``"nominal"`` if the datum is a string
        * ``"temporal"`` if the datum is `a date time object
          <https://vega.github.io/vega-lite/docs/datetime.html>`__

        **Note:**


        * Data ``type`` describes the semantics of the data rather than the primitive data
          types (number, string, etc.). The same primitive data type can have different
          types of measurement. For example, numeric data can represent quantitative,
          ordinal, or nominal data.
        * Data values for a temporal field can be either a date-time string (e.g.,
          ``"2015-03-07 12:32:17"``, ``"17:01"``, ``"2015-03-16"``. ``"2015"`` ) or a
          timestamp number (e.g., ``1552199579097`` ).
        * When using with `bin <https://vega.github.io/vega-lite/docs/bin.html>`__, the
          ``type`` property can be either ``"quantitative"`` (for using a linear bin scale)
          or `"ordinal" (for using an ordinal bin scale)
          <https://vega.github.io/vega-lite/docs/type.html#cast-bin>`__.
        * When using with `timeUnit
          <https://vega.github.io/vega-lite/docs/timeunit.html>`__, the ``type`` property
          can be either ``"temporal"`` (default, for using a temporal scale) or `"ordinal"
          (for using an ordinal scale)
          <https://vega.github.io/vega-lite/docs/type.html#cast-bin>`__.
        * When using with `aggregate
          <https://vega.github.io/vega-lite/docs/aggregate.html>`__, the ``type`` property
          refers to the post-aggregation data type. For example, we can calculate count
          ``distinct`` of a categorical field ``"cat"`` using ``{"aggregate": "distinct",
          "field": "cat"}``. The ``"type"`` of the aggregate output is ``"quantitative"``.
        * Secondary channels (e.g., ``x2``, ``y2``, ``xError``, ``yError`` ) do not have
          ``type`` as they must have exactly the same type as their primary channels (e.g.,
          ``x``, ``y`` ).

        **See also:** `type <https://vega.github.io/vega-lite/docs/type.html>`__
        documentation.
    """

    _schema = {"$ref": "#/definitions/DatumDef"}

    def __init__(
        self,
        bandPosition: Union[float, UndefinedType] = Undefined,
        datum: Union[
            Union[
                Union["DateTime", dict],
                Union["ExprRef", "_ParameterProtocol", dict],
                Union["PrimitiveValue", None, bool, float, str],
                Union["RepeatRef", dict],
            ],
            UndefinedType,
        ] = Undefined,
        title: Union[
            Union[None, Union["Text", List[str], str]], UndefinedType
        ] = Undefined,
        type: Union[
            Union[
                "Type",
                Literal["quantitative", "ordinal", "temporal", "nominal", "geojson"],
            ],
            UndefinedType,
        ] = Undefined,
        **kwds
    ):
        super(DatumDef, self).__init__(
            bandPosition=bandPosition, datum=datum, title=title, type=type, **kwds
        )


class PositionDatumDefBase(PolarDef):
    """PositionDatumDefBase schema wrapper

    Union[:class:`PositionDatumDefBase`, Dict[required=[]]]

    Parameters
    ----------

    bandPosition : float
        Relative position on a band of a stacked, binned, time unit, or band scale. For
        example, the marks will be positioned at the beginning of the band if set to ``0``,
        and at the middle of the band if set to ``0.5``.
    datum : Union[Union[:class:`DateTime`, Dict[required=[]]], Union[:class:`ExprRef`, Dict[required=[expr]]], Union[:class:`PrimitiveValue`, None, bool, float, str], Union[:class:`RepeatRef`, Dict[required=[repeat]]]]
        A constant value in data domain.
    scale : Union[None, Union[:class:`Scale`, Dict[required=[]]]]
        An object defining properties of the channel's scale, which is the function that
        transforms values in the data domain (numbers, dates, strings, etc) to visual values
        (pixels, colors, sizes) of the encoding channels.

        If ``null``, the scale will be `disabled and the data value will be directly encoded
        <https://vega.github.io/vega-lite/docs/scale.html#disable>`__.

        **Default value:** If undefined, default `scale properties
        <https://vega.github.io/vega-lite/docs/scale.html>`__ are applied.

        **See also:** `scale <https://vega.github.io/vega-lite/docs/scale.html>`__
        documentation.
    stack : Union[None, Union[:class:`StackOffset`, Literal['zero', 'center', 'normalize']], bool]
        Type of stacking offset if the field should be stacked. ``stack`` is only applicable
        for ``x``, ``y``, ``theta``, and ``radius`` channels with continuous domains. For
        example, ``stack`` of ``y`` can be used to customize stacking for a vertical bar
        chart.

        ``stack`` can be one of the following values:


        * ``"zero"`` or `true`: stacking with baseline offset at zero value of the scale
          (for creating typical stacked
          [bar](https://vega.github.io/vega-lite/docs/stack.html#bar) and `area
          <https://vega.github.io/vega-lite/docs/stack.html#area>`__ chart).
        * ``"normalize"`` - stacking with normalized domain (for creating `normalized
          stacked bar and area charts
          <https://vega.github.io/vega-lite/docs/stack.html#normalized>`__ and pie charts
          `with percentage tooltip
          <https://vega.github.io/vega-lite/docs/arc.html#tooltip>`__ ). :raw-html:`<br/>`
        * ``"center"`` - stacking with center baseline (for `streamgraph
          <https://vega.github.io/vega-lite/docs/stack.html#streamgraph>`__ ).
        * ``null`` or ``false`` - No-stacking. This will produce layered `bar
          <https://vega.github.io/vega-lite/docs/stack.html#layered-bar-chart>`__ and area
          chart.

        **Default value:** ``zero`` for plots with all of the following conditions are true:
        (1) the mark is ``bar``, ``area``, or ``arc`` ; (2) the stacked measure channel (x
        or y) has a linear scale; (3) At least one of non-position channels mapped to an
        unaggregated field that is different from x and y. Otherwise, ``null`` by default.

        **See also:** `stack <https://vega.github.io/vega-lite/docs/stack.html>`__
        documentation.
    title : Union[None, Union[:class:`Text`, List[str], str]]
        A title for the field. If ``null``, the title will be removed.

        **Default value:**  derived from the field's name and transformation function (
        ``aggregate``, ``bin`` and ``timeUnit`` ). If the field has an aggregate function,
        the function is displayed as part of the title (e.g., ``"Sum of Profit"`` ). If the
        field is binned or has a time unit applied, the applied function is shown in
        parentheses (e.g., ``"Profit (binned)"``, ``"Transaction Date (year-month)"`` ).
        Otherwise, the title is simply the field name.

        **Notes** :

        1) You can customize the default field title format by providing the `fieldTitle
        <https://vega.github.io/vega-lite/docs/config.html#top-level-config>`__ property in
        the `config <https://vega.github.io/vega-lite/docs/config.html>`__ or `fieldTitle
        function via the compile function's options
        <https://vega.github.io/vega-lite/usage/compile.html#field-title>`__.

        2) If both field definition's ``title`` and axis, header, or legend ``title`` are
        defined, axis/header/legend title will be used.
    type : Union[:class:`Type`, Literal['quantitative', 'ordinal', 'temporal', 'nominal', 'geojson']]
        The type of measurement ( ``"quantitative"``, ``"temporal"``, ``"ordinal"``, or
        ``"nominal"`` ) for the encoded field or constant value ( ``datum`` ). It can also
        be a ``"geojson"`` type for encoding `'geoshape'
        <https://vega.github.io/vega-lite/docs/geoshape.html>`__.

        Vega-Lite automatically infers data types in many cases as discussed below. However,
        type is required for a field if: (1) the field is not nominal and the field encoding
        has no specified ``aggregate`` (except ``argmin`` and ``argmax`` ), ``bin``, scale
        type, custom ``sort`` order, nor ``timeUnit`` or (2) if you wish to use an ordinal
        scale for a field with ``bin`` or ``timeUnit``.

        **Default value:**

        1) For a data ``field``, ``"nominal"`` is the default data type unless the field
        encoding has ``aggregate``, ``channel``, ``bin``, scale type, ``sort``, or
        ``timeUnit`` that satisfies the following criteria:


        * ``"quantitative"`` is the default type if (1) the encoded field contains ``bin``
          or ``aggregate`` except ``"argmin"`` and ``"argmax"``, (2) the encoding channel is
          ``latitude`` or ``longitude`` channel or (3) if the specified scale type is `a
          quantitative scale <https://vega.github.io/vega-lite/docs/scale.html#type>`__.
        * ``"temporal"`` is the default type if (1) the encoded field contains ``timeUnit``
          or (2) the specified scale type is a time or utc scale
        * ``"ordinal"`` is the default type if (1) the encoded field contains a `custom sort
          order
          <https://vega.github.io/vega-lite/docs/sort.html#specifying-custom-sort-order>`__,
          (2) the specified scale type is an ordinal/point/band scale, or (3) the encoding
          channel is ``order``.

        2) For a constant value in data domain ( ``datum`` ):


        * ``"quantitative"`` if the datum is a number
        * ``"nominal"`` if the datum is a string
        * ``"temporal"`` if the datum is `a date time object
          <https://vega.github.io/vega-lite/docs/datetime.html>`__

        **Note:**


        * Data ``type`` describes the semantics of the data rather than the primitive data
          types (number, string, etc.). The same primitive data type can have different
          types of measurement. For example, numeric data can represent quantitative,
          ordinal, or nominal data.
        * Data values for a temporal field can be either a date-time string (e.g.,
          ``"2015-03-07 12:32:17"``, ``"17:01"``, ``"2015-03-16"``. ``"2015"`` ) or a
          timestamp number (e.g., ``1552199579097`` ).
        * When using with `bin <https://vega.github.io/vega-lite/docs/bin.html>`__, the
          ``type`` property can be either ``"quantitative"`` (for using a linear bin scale)
          or `"ordinal" (for using an ordinal bin scale)
          <https://vega.github.io/vega-lite/docs/type.html#cast-bin>`__.
        * When using with `timeUnit
          <https://vega.github.io/vega-lite/docs/timeunit.html>`__, the ``type`` property
          can be either ``"temporal"`` (default, for using a temporal scale) or `"ordinal"
          (for using an ordinal scale)
          <https://vega.github.io/vega-lite/docs/type.html#cast-bin>`__.
        * When using with `aggregate
          <https://vega.github.io/vega-lite/docs/aggregate.html>`__, the ``type`` property
          refers to the post-aggregation data type. For example, we can calculate count
          ``distinct`` of a categorical field ``"cat"`` using ``{"aggregate": "distinct",
          "field": "cat"}``. The ``"type"`` of the aggregate output is ``"quantitative"``.
        * Secondary channels (e.g., ``x2``, ``y2``, ``xError``, ``yError`` ) do not have
          ``type`` as they must have exactly the same type as their primary channels (e.g.,
          ``x``, ``y`` ).

        **See also:** `type <https://vega.github.io/vega-lite/docs/type.html>`__
        documentation.
    """

    _schema = {"$ref": "#/definitions/PositionDatumDefBase"}

    def __init__(
        self,
        bandPosition: Union[float, UndefinedType] = Undefined,
        datum: Union[
            Union[
                Union["DateTime", dict],
                Union["ExprRef", "_ParameterProtocol", dict],
                Union["PrimitiveValue", None, bool, float, str],
                Union["RepeatRef", dict],
            ],
            UndefinedType,
        ] = Undefined,
        scale: Union[Union[None, Union["Scale", dict]], UndefinedType] = Undefined,
        stack: Union[
            Union[
                None, Union["StackOffset", Literal["zero", "center", "normalize"]], bool
            ],
            UndefinedType,
        ] = Undefined,
        title: Union[
            Union[None, Union["Text", List[str], str]], UndefinedType
        ] = Undefined,
        type: Union[
            Union[
                "Type",
                Literal["quantitative", "ordinal", "temporal", "nominal", "geojson"],
            ],
            UndefinedType,
        ] = Undefined,
        **kwds
    ):
        super(PositionDatumDefBase, self).__init__(
            bandPosition=bandPosition,
            datum=datum,
            scale=scale,
            stack=stack,
            title=title,
            type=type,
            **kwds
        )


class PositionDef(VegaLiteSchema):
    """PositionDef schema wrapper

    Union[:class:`PositionDef`, Union[:class:`PositionDatumDef`, Dict[required=[]]],
    Union[:class:`PositionFieldDef`, Dict[required=[]]], Union[:class:`PositionValueDef`,
    Dict[required=[value]]]]
    """

    _schema = {"$ref": "#/definitions/PositionDef"}

    def __init__(self, *args, **kwds):
        super(PositionDef, self).__init__(*args, **kwds)


class PositionDatumDef(PositionDef):
    """PositionDatumDef schema wrapper

    Union[:class:`PositionDatumDef`, Dict[required=[]]]

    Parameters
    ----------

    axis : Union[None, Union[:class:`Axis`, Dict[required=[]]]]
        An object defining properties of axis's gridlines, ticks and labels. If ``null``,
        the axis for the encoding channel will be removed.

        **Default value:** If undefined, default `axis properties
        <https://vega.github.io/vega-lite/docs/axis.html>`__ are applied.

        **See also:** `axis <https://vega.github.io/vega-lite/docs/axis.html>`__
        documentation.
    bandPosition : float
        Relative position on a band of a stacked, binned, time unit, or band scale. For
        example, the marks will be positioned at the beginning of the band if set to ``0``,
        and at the middle of the band if set to ``0.5``.
    datum : Union[Union[:class:`DateTime`, Dict[required=[]]], Union[:class:`ExprRef`, Dict[required=[expr]]], Union[:class:`PrimitiveValue`, None, bool, float, str], Union[:class:`RepeatRef`, Dict[required=[repeat]]]]
        A constant value in data domain.
    impute : Union[None, Union[:class:`ImputeParams`, Dict[required=[]]]]
        An object defining the properties of the Impute Operation to be applied. The field
        value of the other positional channel is taken as ``key`` of the ``Impute``
        Operation. The field of the ``color`` channel if specified is used as ``groupby`` of
        the ``Impute`` Operation.

        **See also:** `impute <https://vega.github.io/vega-lite/docs/impute.html>`__
        documentation.
    scale : Union[None, Union[:class:`Scale`, Dict[required=[]]]]
        An object defining properties of the channel's scale, which is the function that
        transforms values in the data domain (numbers, dates, strings, etc) to visual values
        (pixels, colors, sizes) of the encoding channels.

        If ``null``, the scale will be `disabled and the data value will be directly encoded
        <https://vega.github.io/vega-lite/docs/scale.html#disable>`__.

        **Default value:** If undefined, default `scale properties
        <https://vega.github.io/vega-lite/docs/scale.html>`__ are applied.

        **See also:** `scale <https://vega.github.io/vega-lite/docs/scale.html>`__
        documentation.
    stack : Union[None, Union[:class:`StackOffset`, Literal['zero', 'center', 'normalize']], bool]
        Type of stacking offset if the field should be stacked. ``stack`` is only applicable
        for ``x``, ``y``, ``theta``, and ``radius`` channels with continuous domains. For
        example, ``stack`` of ``y`` can be used to customize stacking for a vertical bar
        chart.

        ``stack`` can be one of the following values:


        * ``"zero"`` or `true`: stacking with baseline offset at zero value of the scale
          (for creating typical stacked
          [bar](https://vega.github.io/vega-lite/docs/stack.html#bar) and `area
          <https://vega.github.io/vega-lite/docs/stack.html#area>`__ chart).
        * ``"normalize"`` - stacking with normalized domain (for creating `normalized
          stacked bar and area charts
          <https://vega.github.io/vega-lite/docs/stack.html#normalized>`__ and pie charts
          `with percentage tooltip
          <https://vega.github.io/vega-lite/docs/arc.html#tooltip>`__ ). :raw-html:`<br/>`
        * ``"center"`` - stacking with center baseline (for `streamgraph
          <https://vega.github.io/vega-lite/docs/stack.html#streamgraph>`__ ).
        * ``null`` or ``false`` - No-stacking. This will produce layered `bar
          <https://vega.github.io/vega-lite/docs/stack.html#layered-bar-chart>`__ and area
          chart.

        **Default value:** ``zero`` for plots with all of the following conditions are true:
        (1) the mark is ``bar``, ``area``, or ``arc`` ; (2) the stacked measure channel (x
        or y) has a linear scale; (3) At least one of non-position channels mapped to an
        unaggregated field that is different from x and y. Otherwise, ``null`` by default.

        **See also:** `stack <https://vega.github.io/vega-lite/docs/stack.html>`__
        documentation.
    title : Union[None, Union[:class:`Text`, List[str], str]]
        A title for the field. If ``null``, the title will be removed.

        **Default value:**  derived from the field's name and transformation function (
        ``aggregate``, ``bin`` and ``timeUnit`` ). If the field has an aggregate function,
        the function is displayed as part of the title (e.g., ``"Sum of Profit"`` ). If the
        field is binned or has a time unit applied, the applied function is shown in
        parentheses (e.g., ``"Profit (binned)"``, ``"Transaction Date (year-month)"`` ).
        Otherwise, the title is simply the field name.

        **Notes** :

        1) You can customize the default field title format by providing the `fieldTitle
        <https://vega.github.io/vega-lite/docs/config.html#top-level-config>`__ property in
        the `config <https://vega.github.io/vega-lite/docs/config.html>`__ or `fieldTitle
        function via the compile function's options
        <https://vega.github.io/vega-lite/usage/compile.html#field-title>`__.

        2) If both field definition's ``title`` and axis, header, or legend ``title`` are
        defined, axis/header/legend title will be used.
    type : Union[:class:`Type`, Literal['quantitative', 'ordinal', 'temporal', 'nominal', 'geojson']]
        The type of measurement ( ``"quantitative"``, ``"temporal"``, ``"ordinal"``, or
        ``"nominal"`` ) for the encoded field or constant value ( ``datum`` ). It can also
        be a ``"geojson"`` type for encoding `'geoshape'
        <https://vega.github.io/vega-lite/docs/geoshape.html>`__.

        Vega-Lite automatically infers data types in many cases as discussed below. However,
        type is required for a field if: (1) the field is not nominal and the field encoding
        has no specified ``aggregate`` (except ``argmin`` and ``argmax`` ), ``bin``, scale
        type, custom ``sort`` order, nor ``timeUnit`` or (2) if you wish to use an ordinal
        scale for a field with ``bin`` or ``timeUnit``.

        **Default value:**

        1) For a data ``field``, ``"nominal"`` is the default data type unless the field
        encoding has ``aggregate``, ``channel``, ``bin``, scale type, ``sort``, or
        ``timeUnit`` that satisfies the following criteria:


        * ``"quantitative"`` is the default type if (1) the encoded field contains ``bin``
          or ``aggregate`` except ``"argmin"`` and ``"argmax"``, (2) the encoding channel is
          ``latitude`` or ``longitude`` channel or (3) if the specified scale type is `a
          quantitative scale <https://vega.github.io/vega-lite/docs/scale.html#type>`__.
        * ``"temporal"`` is the default type if (1) the encoded field contains ``timeUnit``
          or (2) the specified scale type is a time or utc scale
        * ``"ordinal"`` is the default type if (1) the encoded field contains a `custom sort
          order
          <https://vega.github.io/vega-lite/docs/sort.html#specifying-custom-sort-order>`__,
          (2) the specified scale type is an ordinal/point/band scale, or (3) the encoding
          channel is ``order``.

        2) For a constant value in data domain ( ``datum`` ):


        * ``"quantitative"`` if the datum is a number
        * ``"nominal"`` if the datum is a string
        * ``"temporal"`` if the datum is `a date time object
          <https://vega.github.io/vega-lite/docs/datetime.html>`__

        **Note:**


        * Data ``type`` describes the semantics of the data rather than the primitive data
          types (number, string, etc.). The same primitive data type can have different
          types of measurement. For example, numeric data can represent quantitative,
          ordinal, or nominal data.
        * Data values for a temporal field can be either a date-time string (e.g.,
          ``"2015-03-07 12:32:17"``, ``"17:01"``, ``"2015-03-16"``. ``"2015"`` ) or a
          timestamp number (e.g., ``1552199579097`` ).
        * When using with `bin <https://vega.github.io/vega-lite/docs/bin.html>`__, the
          ``type`` property can be either ``"quantitative"`` (for using a linear bin scale)
          or `"ordinal" (for using an ordinal bin scale)
          <https://vega.github.io/vega-lite/docs/type.html#cast-bin>`__.
        * When using with `timeUnit
          <https://vega.github.io/vega-lite/docs/timeunit.html>`__, the ``type`` property
          can be either ``"temporal"`` (default, for using a temporal scale) or `"ordinal"
          (for using an ordinal scale)
          <https://vega.github.io/vega-lite/docs/type.html#cast-bin>`__.
        * When using with `aggregate
          <https://vega.github.io/vega-lite/docs/aggregate.html>`__, the ``type`` property
          refers to the post-aggregation data type. For example, we can calculate count
          ``distinct`` of a categorical field ``"cat"`` using ``{"aggregate": "distinct",
          "field": "cat"}``. The ``"type"`` of the aggregate output is ``"quantitative"``.
        * Secondary channels (e.g., ``x2``, ``y2``, ``xError``, ``yError`` ) do not have
          ``type`` as they must have exactly the same type as their primary channels (e.g.,
          ``x``, ``y`` ).

        **See also:** `type <https://vega.github.io/vega-lite/docs/type.html>`__
        documentation.
    """

    _schema = {"$ref": "#/definitions/PositionDatumDef"}

    def __init__(
        self,
        axis: Union[Union[None, Union["Axis", dict]], UndefinedType] = Undefined,
        bandPosition: Union[float, UndefinedType] = Undefined,
        datum: Union[
            Union[
                Union["DateTime", dict],
                Union["ExprRef", "_ParameterProtocol", dict],
                Union["PrimitiveValue", None, bool, float, str],
                Union["RepeatRef", dict],
            ],
            UndefinedType,
        ] = Undefined,
        impute: Union[
            Union[None, Union["ImputeParams", dict]], UndefinedType
        ] = Undefined,
        scale: Union[Union[None, Union["Scale", dict]], UndefinedType] = Undefined,
        stack: Union[
            Union[
                None, Union["StackOffset", Literal["zero", "center", "normalize"]], bool
            ],
            UndefinedType,
        ] = Undefined,
        title: Union[
            Union[None, Union["Text", List[str], str]], UndefinedType
        ] = Undefined,
        type: Union[
            Union[
                "Type",
                Literal["quantitative", "ordinal", "temporal", "nominal", "geojson"],
            ],
            UndefinedType,
        ] = Undefined,
        **kwds
    ):
        super(PositionDatumDef, self).__init__(
            axis=axis,
            bandPosition=bandPosition,
            datum=datum,
            impute=impute,
            scale=scale,
            stack=stack,
            title=title,
            type=type,
            **kwds
        )


class PositionFieldDef(PositionDef):
    """PositionFieldDef schema wrapper

    Union[:class:`PositionFieldDef`, Dict[required=[]]]

    Parameters
    ----------

    aggregate : Union[:class:`Aggregate`, Union[:class:`ArgmaxDef`, Dict[required=[argmax]]], Union[:class:`ArgminDef`, Dict[required=[argmin]]], Union[:class:`NonArgAggregateOp`, Literal['average', 'count', 'distinct', 'max', 'mean', 'median', 'min', 'missing', 'product', 'q1', 'q3', 'ci0', 'ci1', 'stderr', 'stdev', 'stdevp', 'sum', 'valid', 'values', 'variance', 'variancep']]]
        Aggregation function for the field (e.g., ``"mean"``, ``"sum"``, ``"median"``,
        ``"min"``, ``"max"``, ``"count"`` ).

        **Default value:** ``undefined`` (None)

        **See also:** `aggregate <https://vega.github.io/vega-lite/docs/aggregate.html>`__
        documentation.
    axis : Union[None, Union[:class:`Axis`, Dict[required=[]]]]
        An object defining properties of axis's gridlines, ticks and labels. If ``null``,
        the axis for the encoding channel will be removed.

        **Default value:** If undefined, default `axis properties
        <https://vega.github.io/vega-lite/docs/axis.html>`__ are applied.

        **See also:** `axis <https://vega.github.io/vega-lite/docs/axis.html>`__
        documentation.
    bandPosition : float
        Relative position on a band of a stacked, binned, time unit, or band scale. For
        example, the marks will be positioned at the beginning of the band if set to ``0``,
        and at the middle of the band if set to ``0.5``.
    bin : Union[None, Union[:class:`BinParams`, Dict[required=[]]], bool, str]
        A flag for binning a ``quantitative`` field, `an object defining binning parameters
        <https://vega.github.io/vega-lite/docs/bin.html#bin-parameters>`__, or indicating
        that the data for ``x`` or ``y`` channel are binned before they are imported into
        Vega-Lite ( ``"binned"`` ).


        If ``true``, default `binning parameters
        <https://vega.github.io/vega-lite/docs/bin.html#bin-parameters>`__ will be applied.

        If ``"binned"``, this indicates that the data for the ``x`` (or ``y`` ) channel are
        already binned. You can map the bin-start field to ``x`` (or ``y`` ) and the bin-end
        field to ``x2`` (or ``y2`` ). The scale and axis will be formatted similar to
        binning in Vega-Lite.  To adjust the axis ticks based on the bin step, you can also
        set the axis's `tickMinStep
        <https://vega.github.io/vega-lite/docs/axis.html#ticks>`__ property.

        **Default value:** ``false``

        **See also:** `bin <https://vega.github.io/vega-lite/docs/bin.html>`__
        documentation.
    field : Union[:class:`Field`, Union[:class:`FieldName`, str], Union[:class:`RepeatRef`, Dict[required=[repeat]]]]
        **Required.** A string defining the name of the field from which to pull a data
        value or an object defining iterated values from the `repeat
        <https://vega.github.io/vega-lite/docs/repeat.html>`__ operator.

        **See also:** `field <https://vega.github.io/vega-lite/docs/field.html>`__
        documentation.

        **Notes:** 1)  Dots ( ``.`` ) and brackets ( ``[`` and ``]`` ) can be used to access
        nested objects (e.g., ``"field": "foo.bar"`` and ``"field": "foo['bar']"`` ). If
        field names contain dots or brackets but are not nested, you can use ``\\`` to
        escape dots and brackets (e.g., ``"a\\.b"`` and ``"a\\[0\\]"`` ). See more details
        about escaping in the `field documentation
        <https://vega.github.io/vega-lite/docs/field.html>`__. 2) ``field`` is not required
        if ``aggregate`` is ``count``.
    impute : Union[None, Union[:class:`ImputeParams`, Dict[required=[]]]]
        An object defining the properties of the Impute Operation to be applied. The field
        value of the other positional channel is taken as ``key`` of the ``Impute``
        Operation. The field of the ``color`` channel if specified is used as ``groupby`` of
        the ``Impute`` Operation.

        **See also:** `impute <https://vega.github.io/vega-lite/docs/impute.html>`__
        documentation.
    scale : Union[None, Union[:class:`Scale`, Dict[required=[]]]]
        An object defining properties of the channel's scale, which is the function that
        transforms values in the data domain (numbers, dates, strings, etc) to visual values
        (pixels, colors, sizes) of the encoding channels.

        If ``null``, the scale will be `disabled and the data value will be directly encoded
        <https://vega.github.io/vega-lite/docs/scale.html#disable>`__.

        **Default value:** If undefined, default `scale properties
        <https://vega.github.io/vega-lite/docs/scale.html>`__ are applied.

        **See also:** `scale <https://vega.github.io/vega-lite/docs/scale.html>`__
        documentation.
    sort : Union[:class:`Sort`, None, Union[:class:`AllSortString`, Union[:class:`SortByChannelDesc`, Literal['-x', '-y', '-color', '-fill', '-stroke', '-strokeWidth', '-size', '-shape', '-fillOpacity', '-strokeOpacity', '-opacity', '-text']], Union[:class:`SortByChannel`, Literal['x', 'y', 'color', 'fill', 'stroke', 'strokeWidth', 'size', 'shape', 'fillOpacity', 'strokeOpacity', 'opacity', 'text']], Union[:class:`SortOrder`, Literal['ascending', 'descending']]], Union[:class:`EncodingSortField`, Dict[required=[]]], Union[:class:`SortArray`, List[Union[:class:`DateTime`, Dict[required=[]]]], List[bool], List[float], List[str]], Union[:class:`SortByEncoding`, Dict[required=[encoding]]]]
        Sort order for the encoded field.

        For continuous fields (quantitative or temporal), ``sort`` can be either
        ``"ascending"`` or ``"descending"``.

        For discrete fields, ``sort`` can be one of the following:


        * ``"ascending"`` or ``"descending"`` -- for sorting by the values' natural order in
          JavaScript.
        * `A string indicating an encoding channel name to sort by
          <https://vega.github.io/vega-lite/docs/sort.html#sort-by-encoding>`__ (e.g.,
          ``"x"`` or ``"y"`` ) with an optional minus prefix for descending sort (e.g.,
          ``"-x"`` to sort by x-field, descending). This channel string is short-form of `a
          sort-by-encoding definition
          <https://vega.github.io/vega-lite/docs/sort.html#sort-by-encoding>`__. For
          example, ``"sort": "-x"`` is equivalent to ``"sort": {"encoding": "x", "order":
          "descending"}``.
        * `A sort field definition
          <https://vega.github.io/vega-lite/docs/sort.html#sort-field>`__ for sorting by
          another field.
        * `An array specifying the field values in preferred order
          <https://vega.github.io/vega-lite/docs/sort.html#sort-array>`__. In this case, the
          sort order will obey the values in the array, followed by any unspecified values
          in their original order. For discrete time field, values in the sort array can be
          `date-time definition objects
          <https://vega.github.io/vega-lite/docs/datetime.html>`__. In addition, for time
          units ``"month"`` and ``"day"``, the values can be the month or day names (case
          insensitive) or their 3-letter initials (e.g., ``"Mon"``, ``"Tue"`` ).
        * ``null`` indicating no sort.

        **Default value:** ``"ascending"``

        **Note:** ``null`` and sorting by another channel is not supported for ``row`` and
        ``column``.

        **See also:** `sort <https://vega.github.io/vega-lite/docs/sort.html>`__
        documentation.
    stack : Union[None, Union[:class:`StackOffset`, Literal['zero', 'center', 'normalize']], bool]
        Type of stacking offset if the field should be stacked. ``stack`` is only applicable
        for ``x``, ``y``, ``theta``, and ``radius`` channels with continuous domains. For
        example, ``stack`` of ``y`` can be used to customize stacking for a vertical bar
        chart.

        ``stack`` can be one of the following values:


        * ``"zero"`` or `true`: stacking with baseline offset at zero value of the scale
          (for creating typical stacked
          [bar](https://vega.github.io/vega-lite/docs/stack.html#bar) and `area
          <https://vega.github.io/vega-lite/docs/stack.html#area>`__ chart).
        * ``"normalize"`` - stacking with normalized domain (for creating `normalized
          stacked bar and area charts
          <https://vega.github.io/vega-lite/docs/stack.html#normalized>`__ and pie charts
          `with percentage tooltip
          <https://vega.github.io/vega-lite/docs/arc.html#tooltip>`__ ). :raw-html:`<br/>`
        * ``"center"`` - stacking with center baseline (for `streamgraph
          <https://vega.github.io/vega-lite/docs/stack.html#streamgraph>`__ ).
        * ``null`` or ``false`` - No-stacking. This will produce layered `bar
          <https://vega.github.io/vega-lite/docs/stack.html#layered-bar-chart>`__ and area
          chart.

        **Default value:** ``zero`` for plots with all of the following conditions are true:
        (1) the mark is ``bar``, ``area``, or ``arc`` ; (2) the stacked measure channel (x
        or y) has a linear scale; (3) At least one of non-position channels mapped to an
        unaggregated field that is different from x and y. Otherwise, ``null`` by default.

        **See also:** `stack <https://vega.github.io/vega-lite/docs/stack.html>`__
        documentation.
    timeUnit : Union[Union[:class:`BinnedTimeUnit`, Literal['binnedutcyear', 'binnedutcyearquarter', 'binnedutcyearquartermonth', 'binnedutcyearmonth', 'binnedutcyearmonthdate', 'binnedutcyearmonthdatehours', 'binnedutcyearmonthdatehoursminutes', 'binnedutcyearmonthdatehoursminutesseconds', 'binnedutcyearweek', 'binnedutcyearweekday', 'binnedutcyearweekdayhours', 'binnedutcyearweekdayhoursminutes', 'binnedutcyearweekdayhoursminutesseconds', 'binnedutcyeardayofyear'], Literal['binnedyear', 'binnedyearquarter', 'binnedyearquartermonth', 'binnedyearmonth', 'binnedyearmonthdate', 'binnedyearmonthdatehours', 'binnedyearmonthdatehoursminutes', 'binnedyearmonthdatehoursminutesseconds', 'binnedyearweek', 'binnedyearweekday', 'binnedyearweekdayhours', 'binnedyearweekdayhoursminutes', 'binnedyearweekdayhoursminutesseconds', 'binnedyeardayofyear']], Union[:class:`TimeUnitParams`, Dict[required=[]]], Union[:class:`TimeUnit`, Union[:class:`MultiTimeUnit`, Union[:class:`LocalMultiTimeUnit`, Literal['yearquarter', 'yearquartermonth', 'yearmonth', 'yearmonthdate', 'yearmonthdatehours', 'yearmonthdatehoursminutes', 'yearmonthdatehoursminutesseconds', 'yearweek', 'yearweekday', 'yearweekdayhours', 'yearweekdayhoursminutes', 'yearweekdayhoursminutesseconds', 'yeardayofyear', 'quartermonth', 'monthdate', 'monthdatehours', 'monthdatehoursminutes', 'monthdatehoursminutesseconds', 'weekday', 'weeksdayhours', 'weekdayhoursminutes', 'weekdayhoursminutesseconds', 'dayhours', 'dayhoursminutes', 'dayhoursminutesseconds', 'hoursminutes', 'hoursminutesseconds', 'minutesseconds', 'secondsmilliseconds']], Union[:class:`UtcMultiTimeUnit`, Literal['utcyearquarter', 'utcyearquartermonth', 'utcyearmonth', 'utcyearmonthdate', 'utcyearmonthdatehours', 'utcyearmonthdatehoursminutes', 'utcyearmonthdatehoursminutesseconds', 'utcyearweek', 'utcyearweekday', 'utcyearweekdayhours', 'utcyearweekdayhoursminutes', 'utcyearweekdayhoursminutesseconds', 'utcyeardayofyear', 'utcquartermonth', 'utcmonthdate', 'utcmonthdatehours', 'utcmonthdatehoursminutes', 'utcmonthdatehoursminutesseconds', 'utcweekday', 'utcweeksdayhours', 'utcweekdayhoursminutes', 'utcweekdayhoursminutesseconds', 'utcdayhours', 'utcdayhoursminutes', 'utcdayhoursminutesseconds', 'utchoursminutes', 'utchoursminutesseconds', 'utcminutesseconds', 'utcsecondsmilliseconds']]], Union[:class:`SingleTimeUnit`, Union[:class:`LocalSingleTimeUnit`, Literal['year', 'quarter', 'month', 'week', 'day', 'dayofyear', 'date', 'hours', 'minutes', 'seconds', 'milliseconds']], Union[:class:`UtcSingleTimeUnit`, Literal['utcyear', 'utcquarter', 'utcmonth', 'utcweek', 'utcday', 'utcdayofyear', 'utcdate', 'utchours', 'utcminutes', 'utcseconds', 'utcmilliseconds']]]]]
        Time unit (e.g., ``year``, ``yearmonth``, ``month``, ``hours`` ) for a temporal
        field. or `a temporal field that gets casted as ordinal
        <https://vega.github.io/vega-lite/docs/type.html#cast>`__.

        **Default value:** ``undefined`` (None)

        **See also:** `timeUnit <https://vega.github.io/vega-lite/docs/timeunit.html>`__
        documentation.
    title : Union[None, Union[:class:`Text`, List[str], str]]
        A title for the field. If ``null``, the title will be removed.

        **Default value:**  derived from the field's name and transformation function (
        ``aggregate``, ``bin`` and ``timeUnit`` ). If the field has an aggregate function,
        the function is displayed as part of the title (e.g., ``"Sum of Profit"`` ). If the
        field is binned or has a time unit applied, the applied function is shown in
        parentheses (e.g., ``"Profit (binned)"``, ``"Transaction Date (year-month)"`` ).
        Otherwise, the title is simply the field name.

        **Notes** :

        1) You can customize the default field title format by providing the `fieldTitle
        <https://vega.github.io/vega-lite/docs/config.html#top-level-config>`__ property in
        the `config <https://vega.github.io/vega-lite/docs/config.html>`__ or `fieldTitle
        function via the compile function's options
        <https://vega.github.io/vega-lite/usage/compile.html#field-title>`__.

        2) If both field definition's ``title`` and axis, header, or legend ``title`` are
        defined, axis/header/legend title will be used.
    type : Union[:class:`StandardType`, Literal['quantitative', 'ordinal', 'temporal', 'nominal']]
        The type of measurement ( ``"quantitative"``, ``"temporal"``, ``"ordinal"``, or
        ``"nominal"`` ) for the encoded field or constant value ( ``datum`` ). It can also
        be a ``"geojson"`` type for encoding `'geoshape'
        <https://vega.github.io/vega-lite/docs/geoshape.html>`__.

        Vega-Lite automatically infers data types in many cases as discussed below. However,
        type is required for a field if: (1) the field is not nominal and the field encoding
        has no specified ``aggregate`` (except ``argmin`` and ``argmax`` ), ``bin``, scale
        type, custom ``sort`` order, nor ``timeUnit`` or (2) if you wish to use an ordinal
        scale for a field with ``bin`` or ``timeUnit``.

        **Default value:**

        1) For a data ``field``, ``"nominal"`` is the default data type unless the field
        encoding has ``aggregate``, ``channel``, ``bin``, scale type, ``sort``, or
        ``timeUnit`` that satisfies the following criteria:


        * ``"quantitative"`` is the default type if (1) the encoded field contains ``bin``
          or ``aggregate`` except ``"argmin"`` and ``"argmax"``, (2) the encoding channel is
          ``latitude`` or ``longitude`` channel or (3) if the specified scale type is `a
          quantitative scale <https://vega.github.io/vega-lite/docs/scale.html#type>`__.
        * ``"temporal"`` is the default type if (1) the encoded field contains ``timeUnit``
          or (2) the specified scale type is a time or utc scale
        * ``"ordinal"`` is the default type if (1) the encoded field contains a `custom sort
          order
          <https://vega.github.io/vega-lite/docs/sort.html#specifying-custom-sort-order>`__,
          (2) the specified scale type is an ordinal/point/band scale, or (3) the encoding
          channel is ``order``.

        2) For a constant value in data domain ( ``datum`` ):


        * ``"quantitative"`` if the datum is a number
        * ``"nominal"`` if the datum is a string
        * ``"temporal"`` if the datum is `a date time object
          <https://vega.github.io/vega-lite/docs/datetime.html>`__

        **Note:**


        * Data ``type`` describes the semantics of the data rather than the primitive data
          types (number, string, etc.). The same primitive data type can have different
          types of measurement. For example, numeric data can represent quantitative,
          ordinal, or nominal data.
        * Data values for a temporal field can be either a date-time string (e.g.,
          ``"2015-03-07 12:32:17"``, ``"17:01"``, ``"2015-03-16"``. ``"2015"`` ) or a
          timestamp number (e.g., ``1552199579097`` ).
        * When using with `bin <https://vega.github.io/vega-lite/docs/bin.html>`__, the
          ``type`` property can be either ``"quantitative"`` (for using a linear bin scale)
          or `"ordinal" (for using an ordinal bin scale)
          <https://vega.github.io/vega-lite/docs/type.html#cast-bin>`__.
        * When using with `timeUnit
          <https://vega.github.io/vega-lite/docs/timeunit.html>`__, the ``type`` property
          can be either ``"temporal"`` (default, for using a temporal scale) or `"ordinal"
          (for using an ordinal scale)
          <https://vega.github.io/vega-lite/docs/type.html#cast-bin>`__.
        * When using with `aggregate
          <https://vega.github.io/vega-lite/docs/aggregate.html>`__, the ``type`` property
          refers to the post-aggregation data type. For example, we can calculate count
          ``distinct`` of a categorical field ``"cat"`` using ``{"aggregate": "distinct",
          "field": "cat"}``. The ``"type"`` of the aggregate output is ``"quantitative"``.
        * Secondary channels (e.g., ``x2``, ``y2``, ``xError``, ``yError`` ) do not have
          ``type`` as they must have exactly the same type as their primary channels (e.g.,
          ``x``, ``y`` ).

        **See also:** `type <https://vega.github.io/vega-lite/docs/type.html>`__
        documentation.
    """

    _schema = {"$ref": "#/definitions/PositionFieldDef"}

    def __init__(
        self,
        aggregate: Union[
            Union[
                "Aggregate",
                Union["ArgmaxDef", dict],
                Union["ArgminDef", dict],
                Union[
                    "NonArgAggregateOp",
                    Literal[
                        "average",
                        "count",
                        "distinct",
                        "max",
                        "mean",
                        "median",
                        "min",
                        "missing",
                        "product",
                        "q1",
                        "q3",
                        "ci0",
                        "ci1",
                        "stderr",
                        "stdev",
                        "stdevp",
                        "sum",
                        "valid",
                        "values",
                        "variance",
                        "variancep",
                    ],
                ],
            ],
            UndefinedType,
        ] = Undefined,
        axis: Union[Union[None, Union["Axis", dict]], UndefinedType] = Undefined,
        bandPosition: Union[float, UndefinedType] = Undefined,
        bin: Union[
            Union[None, Union["BinParams", dict], bool, str], UndefinedType
        ] = Undefined,
        field: Union[
            Union["Field", Union["FieldName", str], Union["RepeatRef", dict]],
            UndefinedType,
        ] = Undefined,
        impute: Union[
            Union[None, Union["ImputeParams", dict]], UndefinedType
        ] = Undefined,
        scale: Union[Union[None, Union["Scale", dict]], UndefinedType] = Undefined,
        sort: Union[
            Union[
                "Sort",
                None,
                Union[
                    "AllSortString",
                    Union[
                        "SortByChannel",
                        Literal[
                            "x",
                            "y",
                            "color",
                            "fill",
                            "stroke",
                            "strokeWidth",
                            "size",
                            "shape",
                            "fillOpacity",
                            "strokeOpacity",
                            "opacity",
                            "text",
                        ],
                    ],
                    Union[
                        "SortByChannelDesc",
                        Literal[
                            "-x",
                            "-y",
                            "-color",
                            "-fill",
                            "-stroke",
                            "-strokeWidth",
                            "-size",
                            "-shape",
                            "-fillOpacity",
                            "-strokeOpacity",
                            "-opacity",
                            "-text",
                        ],
                    ],
                    Union["SortOrder", Literal["ascending", "descending"]],
                ],
                Union["EncodingSortField", dict],
                Union[
                    "SortArray",
                    List[bool],
                    List[float],
                    List[str],
                    Union[List["DateTime"], List[dict]],
                ],
                Union["SortByEncoding", dict],
            ],
            UndefinedType,
        ] = Undefined,
        stack: Union[
            Union[
                None, Union["StackOffset", Literal["zero", "center", "normalize"]], bool
            ],
            UndefinedType,
        ] = Undefined,
        timeUnit: Union[
            Union[
                Union[
                    "BinnedTimeUnit",
                    Literal[
                        "binnedutcyear",
                        "binnedutcyearquarter",
                        "binnedutcyearquartermonth",
                        "binnedutcyearmonth",
                        "binnedutcyearmonthdate",
                        "binnedutcyearmonthdatehours",
                        "binnedutcyearmonthdatehoursminutes",
                        "binnedutcyearmonthdatehoursminutesseconds",
                        "binnedutcyearweek",
                        "binnedutcyearweekday",
                        "binnedutcyearweekdayhours",
                        "binnedutcyearweekdayhoursminutes",
                        "binnedutcyearweekdayhoursminutesseconds",
                        "binnedutcyeardayofyear",
                    ],
                    Literal[
                        "binnedyear",
                        "binnedyearquarter",
                        "binnedyearquartermonth",
                        "binnedyearmonth",
                        "binnedyearmonthdate",
                        "binnedyearmonthdatehours",
                        "binnedyearmonthdatehoursminutes",
                        "binnedyearmonthdatehoursminutesseconds",
                        "binnedyearweek",
                        "binnedyearweekday",
                        "binnedyearweekdayhours",
                        "binnedyearweekdayhoursminutes",
                        "binnedyearweekdayhoursminutesseconds",
                        "binnedyeardayofyear",
                    ],
                ],
                Union[
                    "TimeUnit",
                    Union[
                        "MultiTimeUnit",
                        Union[
                            "LocalMultiTimeUnit",
                            Literal[
                                "yearquarter",
                                "yearquartermonth",
                                "yearmonth",
                                "yearmonthdate",
                                "yearmonthdatehours",
                                "yearmonthdatehoursminutes",
                                "yearmonthdatehoursminutesseconds",
                                "yearweek",
                                "yearweekday",
                                "yearweekdayhours",
                                "yearweekdayhoursminutes",
                                "yearweekdayhoursminutesseconds",
                                "yeardayofyear",
                                "quartermonth",
                                "monthdate",
                                "monthdatehours",
                                "monthdatehoursminutes",
                                "monthdatehoursminutesseconds",
                                "weekday",
                                "weeksdayhours",
                                "weekdayhoursminutes",
                                "weekdayhoursminutesseconds",
                                "dayhours",
                                "dayhoursminutes",
                                "dayhoursminutesseconds",
                                "hoursminutes",
                                "hoursminutesseconds",
                                "minutesseconds",
                                "secondsmilliseconds",
                            ],
                        ],
                        Union[
                            "UtcMultiTimeUnit",
                            Literal[
                                "utcyearquarter",
                                "utcyearquartermonth",
                                "utcyearmonth",
                                "utcyearmonthdate",
                                "utcyearmonthdatehours",
                                "utcyearmonthdatehoursminutes",
                                "utcyearmonthdatehoursminutesseconds",
                                "utcyearweek",
                                "utcyearweekday",
                                "utcyearweekdayhours",
                                "utcyearweekdayhoursminutes",
                                "utcyearweekdayhoursminutesseconds",
                                "utcyeardayofyear",
                                "utcquartermonth",
                                "utcmonthdate",
                                "utcmonthdatehours",
                                "utcmonthdatehoursminutes",
                                "utcmonthdatehoursminutesseconds",
                                "utcweekday",
                                "utcweeksdayhours",
                                "utcweekdayhoursminutes",
                                "utcweekdayhoursminutesseconds",
                                "utcdayhours",
                                "utcdayhoursminutes",
                                "utcdayhoursminutesseconds",
                                "utchoursminutes",
                                "utchoursminutesseconds",
                                "utcminutesseconds",
                                "utcsecondsmilliseconds",
                            ],
                        ],
                    ],
                    Union[
                        "SingleTimeUnit",
                        Union[
                            "LocalSingleTimeUnit",
                            Literal[
                                "year",
                                "quarter",
                                "month",
                                "week",
                                "day",
                                "dayofyear",
                                "date",
                                "hours",
                                "minutes",
                                "seconds",
                                "milliseconds",
                            ],
                        ],
                        Union[
                            "UtcSingleTimeUnit",
                            Literal[
                                "utcyear",
                                "utcquarter",
                                "utcmonth",
                                "utcweek",
                                "utcday",
                                "utcdayofyear",
                                "utcdate",
                                "utchours",
                                "utcminutes",
                                "utcseconds",
                                "utcmilliseconds",
                            ],
                        ],
                    ],
                ],
                Union["TimeUnitParams", dict],
            ],
            UndefinedType,
        ] = Undefined,
        title: Union[
            Union[None, Union["Text", List[str], str]], UndefinedType
        ] = Undefined,
        type: Union[
            Union[
                "StandardType",
                Literal["quantitative", "ordinal", "temporal", "nominal"],
            ],
            UndefinedType,
        ] = Undefined,
        **kwds
    ):
        super(PositionFieldDef, self).__init__(
            aggregate=aggregate,
            axis=axis,
            bandPosition=bandPosition,
            bin=bin,
            field=field,
            impute=impute,
            scale=scale,
            sort=sort,
            stack=stack,
            timeUnit=timeUnit,
            title=title,
            type=type,
            **kwds
        )


class PositionFieldDefBase(PolarDef):
    """PositionFieldDefBase schema wrapper

    Union[:class:`PositionFieldDefBase`, Dict[required=[]]]

    Parameters
    ----------

    aggregate : Union[:class:`Aggregate`, Union[:class:`ArgmaxDef`, Dict[required=[argmax]]], Union[:class:`ArgminDef`, Dict[required=[argmin]]], Union[:class:`NonArgAggregateOp`, Literal['average', 'count', 'distinct', 'max', 'mean', 'median', 'min', 'missing', 'product', 'q1', 'q3', 'ci0', 'ci1', 'stderr', 'stdev', 'stdevp', 'sum', 'valid', 'values', 'variance', 'variancep']]]
        Aggregation function for the field (e.g., ``"mean"``, ``"sum"``, ``"median"``,
        ``"min"``, ``"max"``, ``"count"`` ).

        **Default value:** ``undefined`` (None)

        **See also:** `aggregate <https://vega.github.io/vega-lite/docs/aggregate.html>`__
        documentation.
    bandPosition : float
        Relative position on a band of a stacked, binned, time unit, or band scale. For
        example, the marks will be positioned at the beginning of the band if set to ``0``,
        and at the middle of the band if set to ``0.5``.
    bin : Union[None, Union[:class:`BinParams`, Dict[required=[]]], bool, str]
        A flag for binning a ``quantitative`` field, `an object defining binning parameters
        <https://vega.github.io/vega-lite/docs/bin.html#bin-parameters>`__, or indicating
        that the data for ``x`` or ``y`` channel are binned before they are imported into
        Vega-Lite ( ``"binned"`` ).


        If ``true``, default `binning parameters
        <https://vega.github.io/vega-lite/docs/bin.html#bin-parameters>`__ will be applied.

        If ``"binned"``, this indicates that the data for the ``x`` (or ``y`` ) channel are
        already binned. You can map the bin-start field to ``x`` (or ``y`` ) and the bin-end
        field to ``x2`` (or ``y2`` ). The scale and axis will be formatted similar to
        binning in Vega-Lite.  To adjust the axis ticks based on the bin step, you can also
        set the axis's `tickMinStep
        <https://vega.github.io/vega-lite/docs/axis.html#ticks>`__ property.

        **Default value:** ``false``

        **See also:** `bin <https://vega.github.io/vega-lite/docs/bin.html>`__
        documentation.
    field : Union[:class:`Field`, Union[:class:`FieldName`, str], Union[:class:`RepeatRef`, Dict[required=[repeat]]]]
        **Required.** A string defining the name of the field from which to pull a data
        value or an object defining iterated values from the `repeat
        <https://vega.github.io/vega-lite/docs/repeat.html>`__ operator.

        **See also:** `field <https://vega.github.io/vega-lite/docs/field.html>`__
        documentation.

        **Notes:** 1)  Dots ( ``.`` ) and brackets ( ``[`` and ``]`` ) can be used to access
        nested objects (e.g., ``"field": "foo.bar"`` and ``"field": "foo['bar']"`` ). If
        field names contain dots or brackets but are not nested, you can use ``\\`` to
        escape dots and brackets (e.g., ``"a\\.b"`` and ``"a\\[0\\]"`` ). See more details
        about escaping in the `field documentation
        <https://vega.github.io/vega-lite/docs/field.html>`__. 2) ``field`` is not required
        if ``aggregate`` is ``count``.
    scale : Union[None, Union[:class:`Scale`, Dict[required=[]]]]
        An object defining properties of the channel's scale, which is the function that
        transforms values in the data domain (numbers, dates, strings, etc) to visual values
        (pixels, colors, sizes) of the encoding channels.

        If ``null``, the scale will be `disabled and the data value will be directly encoded
        <https://vega.github.io/vega-lite/docs/scale.html#disable>`__.

        **Default value:** If undefined, default `scale properties
        <https://vega.github.io/vega-lite/docs/scale.html>`__ are applied.

        **See also:** `scale <https://vega.github.io/vega-lite/docs/scale.html>`__
        documentation.
    sort : Union[:class:`Sort`, None, Union[:class:`AllSortString`, Union[:class:`SortByChannelDesc`, Literal['-x', '-y', '-color', '-fill', '-stroke', '-strokeWidth', '-size', '-shape', '-fillOpacity', '-strokeOpacity', '-opacity', '-text']], Union[:class:`SortByChannel`, Literal['x', 'y', 'color', 'fill', 'stroke', 'strokeWidth', 'size', 'shape', 'fillOpacity', 'strokeOpacity', 'opacity', 'text']], Union[:class:`SortOrder`, Literal['ascending', 'descending']]], Union[:class:`EncodingSortField`, Dict[required=[]]], Union[:class:`SortArray`, List[Union[:class:`DateTime`, Dict[required=[]]]], List[bool], List[float], List[str]], Union[:class:`SortByEncoding`, Dict[required=[encoding]]]]
        Sort order for the encoded field.

        For continuous fields (quantitative or temporal), ``sort`` can be either
        ``"ascending"`` or ``"descending"``.

        For discrete fields, ``sort`` can be one of the following:


        * ``"ascending"`` or ``"descending"`` -- for sorting by the values' natural order in
          JavaScript.
        * `A string indicating an encoding channel name to sort by
          <https://vega.github.io/vega-lite/docs/sort.html#sort-by-encoding>`__ (e.g.,
          ``"x"`` or ``"y"`` ) with an optional minus prefix for descending sort (e.g.,
          ``"-x"`` to sort by x-field, descending). This channel string is short-form of `a
          sort-by-encoding definition
          <https://vega.github.io/vega-lite/docs/sort.html#sort-by-encoding>`__. For
          example, ``"sort": "-x"`` is equivalent to ``"sort": {"encoding": "x", "order":
          "descending"}``.
        * `A sort field definition
          <https://vega.github.io/vega-lite/docs/sort.html#sort-field>`__ for sorting by
          another field.
        * `An array specifying the field values in preferred order
          <https://vega.github.io/vega-lite/docs/sort.html#sort-array>`__. In this case, the
          sort order will obey the values in the array, followed by any unspecified values
          in their original order. For discrete time field, values in the sort array can be
          `date-time definition objects
          <https://vega.github.io/vega-lite/docs/datetime.html>`__. In addition, for time
          units ``"month"`` and ``"day"``, the values can be the month or day names (case
          insensitive) or their 3-letter initials (e.g., ``"Mon"``, ``"Tue"`` ).
        * ``null`` indicating no sort.

        **Default value:** ``"ascending"``

        **Note:** ``null`` and sorting by another channel is not supported for ``row`` and
        ``column``.

        **See also:** `sort <https://vega.github.io/vega-lite/docs/sort.html>`__
        documentation.
    stack : Union[None, Union[:class:`StackOffset`, Literal['zero', 'center', 'normalize']], bool]
        Type of stacking offset if the field should be stacked. ``stack`` is only applicable
        for ``x``, ``y``, ``theta``, and ``radius`` channels with continuous domains. For
        example, ``stack`` of ``y`` can be used to customize stacking for a vertical bar
        chart.

        ``stack`` can be one of the following values:


        * ``"zero"`` or `true`: stacking with baseline offset at zero value of the scale
          (for creating typical stacked
          [bar](https://vega.github.io/vega-lite/docs/stack.html#bar) and `area
          <https://vega.github.io/vega-lite/docs/stack.html#area>`__ chart).
        * ``"normalize"`` - stacking with normalized domain (for creating `normalized
          stacked bar and area charts
          <https://vega.github.io/vega-lite/docs/stack.html#normalized>`__ and pie charts
          `with percentage tooltip
          <https://vega.github.io/vega-lite/docs/arc.html#tooltip>`__ ). :raw-html:`<br/>`
        * ``"center"`` - stacking with center baseline (for `streamgraph
          <https://vega.github.io/vega-lite/docs/stack.html#streamgraph>`__ ).
        * ``null`` or ``false`` - No-stacking. This will produce layered `bar
          <https://vega.github.io/vega-lite/docs/stack.html#layered-bar-chart>`__ and area
          chart.

        **Default value:** ``zero`` for plots with all of the following conditions are true:
        (1) the mark is ``bar``, ``area``, or ``arc`` ; (2) the stacked measure channel (x
        or y) has a linear scale; (3) At least one of non-position channels mapped to an
        unaggregated field that is different from x and y. Otherwise, ``null`` by default.

        **See also:** `stack <https://vega.github.io/vega-lite/docs/stack.html>`__
        documentation.
    timeUnit : Union[Union[:class:`BinnedTimeUnit`, Literal['binnedutcyear', 'binnedutcyearquarter', 'binnedutcyearquartermonth', 'binnedutcyearmonth', 'binnedutcyearmonthdate', 'binnedutcyearmonthdatehours', 'binnedutcyearmonthdatehoursminutes', 'binnedutcyearmonthdatehoursminutesseconds', 'binnedutcyearweek', 'binnedutcyearweekday', 'binnedutcyearweekdayhours', 'binnedutcyearweekdayhoursminutes', 'binnedutcyearweekdayhoursminutesseconds', 'binnedutcyeardayofyear'], Literal['binnedyear', 'binnedyearquarter', 'binnedyearquartermonth', 'binnedyearmonth', 'binnedyearmonthdate', 'binnedyearmonthdatehours', 'binnedyearmonthdatehoursminutes', 'binnedyearmonthdatehoursminutesseconds', 'binnedyearweek', 'binnedyearweekday', 'binnedyearweekdayhours', 'binnedyearweekdayhoursminutes', 'binnedyearweekdayhoursminutesseconds', 'binnedyeardayofyear']], Union[:class:`TimeUnitParams`, Dict[required=[]]], Union[:class:`TimeUnit`, Union[:class:`MultiTimeUnit`, Union[:class:`LocalMultiTimeUnit`, Literal['yearquarter', 'yearquartermonth', 'yearmonth', 'yearmonthdate', 'yearmonthdatehours', 'yearmonthdatehoursminutes', 'yearmonthdatehoursminutesseconds', 'yearweek', 'yearweekday', 'yearweekdayhours', 'yearweekdayhoursminutes', 'yearweekdayhoursminutesseconds', 'yeardayofyear', 'quartermonth', 'monthdate', 'monthdatehours', 'monthdatehoursminutes', 'monthdatehoursminutesseconds', 'weekday', 'weeksdayhours', 'weekdayhoursminutes', 'weekdayhoursminutesseconds', 'dayhours', 'dayhoursminutes', 'dayhoursminutesseconds', 'hoursminutes', 'hoursminutesseconds', 'minutesseconds', 'secondsmilliseconds']], Union[:class:`UtcMultiTimeUnit`, Literal['utcyearquarter', 'utcyearquartermonth', 'utcyearmonth', 'utcyearmonthdate', 'utcyearmonthdatehours', 'utcyearmonthdatehoursminutes', 'utcyearmonthdatehoursminutesseconds', 'utcyearweek', 'utcyearweekday', 'utcyearweekdayhours', 'utcyearweekdayhoursminutes', 'utcyearweekdayhoursminutesseconds', 'utcyeardayofyear', 'utcquartermonth', 'utcmonthdate', 'utcmonthdatehours', 'utcmonthdatehoursminutes', 'utcmonthdatehoursminutesseconds', 'utcweekday', 'utcweeksdayhours', 'utcweekdayhoursminutes', 'utcweekdayhoursminutesseconds', 'utcdayhours', 'utcdayhoursminutes', 'utcdayhoursminutesseconds', 'utchoursminutes', 'utchoursminutesseconds', 'utcminutesseconds', 'utcsecondsmilliseconds']]], Union[:class:`SingleTimeUnit`, Union[:class:`LocalSingleTimeUnit`, Literal['year', 'quarter', 'month', 'week', 'day', 'dayofyear', 'date', 'hours', 'minutes', 'seconds', 'milliseconds']], Union[:class:`UtcSingleTimeUnit`, Literal['utcyear', 'utcquarter', 'utcmonth', 'utcweek', 'utcday', 'utcdayofyear', 'utcdate', 'utchours', 'utcminutes', 'utcseconds', 'utcmilliseconds']]]]]
        Time unit (e.g., ``year``, ``yearmonth``, ``month``, ``hours`` ) for a temporal
        field. or `a temporal field that gets casted as ordinal
        <https://vega.github.io/vega-lite/docs/type.html#cast>`__.

        **Default value:** ``undefined`` (None)

        **See also:** `timeUnit <https://vega.github.io/vega-lite/docs/timeunit.html>`__
        documentation.
    title : Union[None, Union[:class:`Text`, List[str], str]]
        A title for the field. If ``null``, the title will be removed.

        **Default value:**  derived from the field's name and transformation function (
        ``aggregate``, ``bin`` and ``timeUnit`` ). If the field has an aggregate function,
        the function is displayed as part of the title (e.g., ``"Sum of Profit"`` ). If the
        field is binned or has a time unit applied, the applied function is shown in
        parentheses (e.g., ``"Profit (binned)"``, ``"Transaction Date (year-month)"`` ).
        Otherwise, the title is simply the field name.

        **Notes** :

        1) You can customize the default field title format by providing the `fieldTitle
        <https://vega.github.io/vega-lite/docs/config.html#top-level-config>`__ property in
        the `config <https://vega.github.io/vega-lite/docs/config.html>`__ or `fieldTitle
        function via the compile function's options
        <https://vega.github.io/vega-lite/usage/compile.html#field-title>`__.

        2) If both field definition's ``title`` and axis, header, or legend ``title`` are
        defined, axis/header/legend title will be used.
    type : Union[:class:`StandardType`, Literal['quantitative', 'ordinal', 'temporal', 'nominal']]
        The type of measurement ( ``"quantitative"``, ``"temporal"``, ``"ordinal"``, or
        ``"nominal"`` ) for the encoded field or constant value ( ``datum`` ). It can also
        be a ``"geojson"`` type for encoding `'geoshape'
        <https://vega.github.io/vega-lite/docs/geoshape.html>`__.

        Vega-Lite automatically infers data types in many cases as discussed below. However,
        type is required for a field if: (1) the field is not nominal and the field encoding
        has no specified ``aggregate`` (except ``argmin`` and ``argmax`` ), ``bin``, scale
        type, custom ``sort`` order, nor ``timeUnit`` or (2) if you wish to use an ordinal
        scale for a field with ``bin`` or ``timeUnit``.

        **Default value:**

        1) For a data ``field``, ``"nominal"`` is the default data type unless the field
        encoding has ``aggregate``, ``channel``, ``bin``, scale type, ``sort``, or
        ``timeUnit`` that satisfies the following criteria:


        * ``"quantitative"`` is the default type if (1) the encoded field contains ``bin``
          or ``aggregate`` except ``"argmin"`` and ``"argmax"``, (2) the encoding channel is
          ``latitude`` or ``longitude`` channel or (3) if the specified scale type is `a
          quantitative scale <https://vega.github.io/vega-lite/docs/scale.html#type>`__.
        * ``"temporal"`` is the default type if (1) the encoded field contains ``timeUnit``
          or (2) the specified scale type is a time or utc scale
        * ``"ordinal"`` is the default type if (1) the encoded field contains a `custom sort
          order
          <https://vega.github.io/vega-lite/docs/sort.html#specifying-custom-sort-order>`__,
          (2) the specified scale type is an ordinal/point/band scale, or (3) the encoding
          channel is ``order``.

        2) For a constant value in data domain ( ``datum`` ):


        * ``"quantitative"`` if the datum is a number
        * ``"nominal"`` if the datum is a string
        * ``"temporal"`` if the datum is `a date time object
          <https://vega.github.io/vega-lite/docs/datetime.html>`__

        **Note:**


        * Data ``type`` describes the semantics of the data rather than the primitive data
          types (number, string, etc.). The same primitive data type can have different
          types of measurement. For example, numeric data can represent quantitative,
          ordinal, or nominal data.
        * Data values for a temporal field can be either a date-time string (e.g.,
          ``"2015-03-07 12:32:17"``, ``"17:01"``, ``"2015-03-16"``. ``"2015"`` ) or a
          timestamp number (e.g., ``1552199579097`` ).
        * When using with `bin <https://vega.github.io/vega-lite/docs/bin.html>`__, the
          ``type`` property can be either ``"quantitative"`` (for using a linear bin scale)
          or `"ordinal" (for using an ordinal bin scale)
          <https://vega.github.io/vega-lite/docs/type.html#cast-bin>`__.
        * When using with `timeUnit
          <https://vega.github.io/vega-lite/docs/timeunit.html>`__, the ``type`` property
          can be either ``"temporal"`` (default, for using a temporal scale) or `"ordinal"
          (for using an ordinal scale)
          <https://vega.github.io/vega-lite/docs/type.html#cast-bin>`__.
        * When using with `aggregate
          <https://vega.github.io/vega-lite/docs/aggregate.html>`__, the ``type`` property
          refers to the post-aggregation data type. For example, we can calculate count
          ``distinct`` of a categorical field ``"cat"`` using ``{"aggregate": "distinct",
          "field": "cat"}``. The ``"type"`` of the aggregate output is ``"quantitative"``.
        * Secondary channels (e.g., ``x2``, ``y2``, ``xError``, ``yError`` ) do not have
          ``type`` as they must have exactly the same type as their primary channels (e.g.,
          ``x``, ``y`` ).

        **See also:** `type <https://vega.github.io/vega-lite/docs/type.html>`__
        documentation.
    """

    _schema = {"$ref": "#/definitions/PositionFieldDefBase"}

    def __init__(
        self,
        aggregate: Union[
            Union[
                "Aggregate",
                Union["ArgmaxDef", dict],
                Union["ArgminDef", dict],
                Union[
                    "NonArgAggregateOp",
                    Literal[
                        "average",
                        "count",
                        "distinct",
                        "max",
                        "mean",
                        "median",
                        "min",
                        "missing",
                        "product",
                        "q1",
                        "q3",
                        "ci0",
                        "ci1",
                        "stderr",
                        "stdev",
                        "stdevp",
                        "sum",
                        "valid",
                        "values",
                        "variance",
                        "variancep",
                    ],
                ],
            ],
            UndefinedType,
        ] = Undefined,
        bandPosition: Union[float, UndefinedType] = Undefined,
        bin: Union[
            Union[None, Union["BinParams", dict], bool, str], UndefinedType
        ] = Undefined,
        field: Union[
            Union["Field", Union["FieldName", str], Union["RepeatRef", dict]],
            UndefinedType,
        ] = Undefined,
        scale: Union[Union[None, Union["Scale", dict]], UndefinedType] = Undefined,
        sort: Union[
            Union[
                "Sort",
                None,
                Union[
                    "AllSortString",
                    Union[
                        "SortByChannel",
                        Literal[
                            "x",
                            "y",
                            "color",
                            "fill",
                            "stroke",
                            "strokeWidth",
                            "size",
                            "shape",
                            "fillOpacity",
                            "strokeOpacity",
                            "opacity",
                            "text",
                        ],
                    ],
                    Union[
                        "SortByChannelDesc",
                        Literal[
                            "-x",
                            "-y",
                            "-color",
                            "-fill",
                            "-stroke",
                            "-strokeWidth",
                            "-size",
                            "-shape",
                            "-fillOpacity",
                            "-strokeOpacity",
                            "-opacity",
                            "-text",
                        ],
                    ],
                    Union["SortOrder", Literal["ascending", "descending"]],
                ],
                Union["EncodingSortField", dict],
                Union[
                    "SortArray",
                    List[bool],
                    List[float],
                    List[str],
                    Union[List["DateTime"], List[dict]],
                ],
                Union["SortByEncoding", dict],
            ],
            UndefinedType,
        ] = Undefined,
        stack: Union[
            Union[
                None, Union["StackOffset", Literal["zero", "center", "normalize"]], bool
            ],
            UndefinedType,
        ] = Undefined,
        timeUnit: Union[
            Union[
                Union[
                    "BinnedTimeUnit",
                    Literal[
                        "binnedutcyear",
                        "binnedutcyearquarter",
                        "binnedutcyearquartermonth",
                        "binnedutcyearmonth",
                        "binnedutcyearmonthdate",
                        "binnedutcyearmonthdatehours",
                        "binnedutcyearmonthdatehoursminutes",
                        "binnedutcyearmonthdatehoursminutesseconds",
                        "binnedutcyearweek",
                        "binnedutcyearweekday",
                        "binnedutcyearweekdayhours",
                        "binnedutcyearweekdayhoursminutes",
                        "binnedutcyearweekdayhoursminutesseconds",
                        "binnedutcyeardayofyear",
                    ],
                    Literal[
                        "binnedyear",
                        "binnedyearquarter",
                        "binnedyearquartermonth",
                        "binnedyearmonth",
                        "binnedyearmonthdate",
                        "binnedyearmonthdatehours",
                        "binnedyearmonthdatehoursminutes",
                        "binnedyearmonthdatehoursminutesseconds",
                        "binnedyearweek",
                        "binnedyearweekday",
                        "binnedyearweekdayhours",
                        "binnedyearweekdayhoursminutes",
                        "binnedyearweekdayhoursminutesseconds",
                        "binnedyeardayofyear",
                    ],
                ],
                Union[
                    "TimeUnit",
                    Union[
                        "MultiTimeUnit",
                        Union[
                            "LocalMultiTimeUnit",
                            Literal[
                                "yearquarter",
                                "yearquartermonth",
                                "yearmonth",
                                "yearmonthdate",
                                "yearmonthdatehours",
                                "yearmonthdatehoursminutes",
                                "yearmonthdatehoursminutesseconds",
                                "yearweek",
                                "yearweekday",
                                "yearweekdayhours",
                                "yearweekdayhoursminutes",
                                "yearweekdayhoursminutesseconds",
                                "yeardayofyear",
                                "quartermonth",
                                "monthdate",
                                "monthdatehours",
                                "monthdatehoursminutes",
                                "monthdatehoursminutesseconds",
                                "weekday",
                                "weeksdayhours",
                                "weekdayhoursminutes",
                                "weekdayhoursminutesseconds",
                                "dayhours",
                                "dayhoursminutes",
                                "dayhoursminutesseconds",
                                "hoursminutes",
                                "hoursminutesseconds",
                                "minutesseconds",
                                "secondsmilliseconds",
                            ],
                        ],
                        Union[
                            "UtcMultiTimeUnit",
                            Literal[
                                "utcyearquarter",
                                "utcyearquartermonth",
                                "utcyearmonth",
                                "utcyearmonthdate",
                                "utcyearmonthdatehours",
                                "utcyearmonthdatehoursminutes",
                                "utcyearmonthdatehoursminutesseconds",
                                "utcyearweek",
                                "utcyearweekday",
                                "utcyearweekdayhours",
                                "utcyearweekdayhoursminutes",
                                "utcyearweekdayhoursminutesseconds",
                                "utcyeardayofyear",
                                "utcquartermonth",
                                "utcmonthdate",
                                "utcmonthdatehours",
                                "utcmonthdatehoursminutes",
                                "utcmonthdatehoursminutesseconds",
                                "utcweekday",
                                "utcweeksdayhours",
                                "utcweekdayhoursminutes",
                                "utcweekdayhoursminutesseconds",
                                "utcdayhours",
                                "utcdayhoursminutes",
                                "utcdayhoursminutesseconds",
                                "utchoursminutes",
                                "utchoursminutesseconds",
                                "utcminutesseconds",
                                "utcsecondsmilliseconds",
                            ],
                        ],
                    ],
                    Union[
                        "SingleTimeUnit",
                        Union[
                            "LocalSingleTimeUnit",
                            Literal[
                                "year",
                                "quarter",
                                "month",
                                "week",
                                "day",
                                "dayofyear",
                                "date",
                                "hours",
                                "minutes",
                                "seconds",
                                "milliseconds",
                            ],
                        ],
                        Union[
                            "UtcSingleTimeUnit",
                            Literal[
                                "utcyear",
                                "utcquarter",
                                "utcmonth",
                                "utcweek",
                                "utcday",
                                "utcdayofyear",
                                "utcdate",
                                "utchours",
                                "utcminutes",
                                "utcseconds",
                                "utcmilliseconds",
                            ],
                        ],
                    ],
                ],
                Union["TimeUnitParams", dict],
            ],
            UndefinedType,
        ] = Undefined,
        title: Union[
            Union[None, Union["Text", List[str], str]], UndefinedType
        ] = Undefined,
        type: Union[
            Union[
                "StandardType",
                Literal["quantitative", "ordinal", "temporal", "nominal"],
            ],
            UndefinedType,
        ] = Undefined,
        **kwds
    ):
        super(PositionFieldDefBase, self).__init__(
            aggregate=aggregate,
            bandPosition=bandPosition,
            bin=bin,
            field=field,
            scale=scale,
            sort=sort,
            stack=stack,
            timeUnit=timeUnit,
            title=title,
            type=type,
            **kwds
        )


class PositionValueDef(PolarDef, Position2Def, PositionDef):
    """PositionValueDef schema wrapper

    Union[:class:`PositionValueDef`, Dict[required=[value]]]
    Definition object for a constant value (primitive value or gradient definition) of an
    encoding channel.

    Parameters
    ----------

    value : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], float, str]
        A constant value in visual domain (e.g., ``"red"`` / ``"#0099ff"`` / `gradient
        definition <https://vega.github.io/vega-lite/docs/types.html#gradient>`__ for color,
        values between ``0`` to ``1`` for opacity).
    """

    _schema = {"$ref": "#/definitions/PositionValueDef"}

    def __init__(
        self,
        value: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], float, str],
            UndefinedType,
        ] = Undefined,
        **kwds
    ):
        super(PositionValueDef, self).__init__(value=value, **kwds)


class PredicateComposition(VegaLiteSchema):
    """PredicateComposition schema wrapper

    Union[:class:`PredicateComposition`, Union[:class:`LogicalAndPredicate`,
    Dict[required=[and]]], Union[:class:`LogicalNotPredicate`, Dict[required=[not]]],
    Union[:class:`LogicalOrPredicate`, Dict[required=[or]]], Union[:class:`Predicate`,
    Union[:class:`FieldEqualPredicate`, Dict[required=[equal, field]]],
    Union[:class:`FieldGTEPredicate`, Dict[required=[field, gte]]],
    Union[:class:`FieldGTPredicate`, Dict[required=[field, gt]]],
    Union[:class:`FieldLTEPredicate`, Dict[required=[field, lte]]],
    Union[:class:`FieldLTPredicate`, Dict[required=[field, lt]]],
    Union[:class:`FieldOneOfPredicate`, Dict[required=[field, oneOf]]],
    Union[:class:`FieldRangePredicate`, Dict[required=[field, range]]],
    Union[:class:`FieldValidPredicate`, Dict[required=[field, valid]]],
    Union[:class:`ParameterPredicate`, Dict[required=[param]]], str]]
    """

    _schema = {"$ref": "#/definitions/PredicateComposition"}

    def __init__(self, *args, **kwds):
        super(PredicateComposition, self).__init__(*args, **kwds)


class LogicalAndPredicate(PredicateComposition):
    """LogicalAndPredicate schema wrapper

    Union[:class:`LogicalAndPredicate`, Dict[required=[and]]]

    Parameters
    ----------

    and : List[Union[:class:`PredicateComposition`, Union[:class:`LogicalAndPredicate`, Dict[required=[and]]], Union[:class:`LogicalNotPredicate`, Dict[required=[not]]], Union[:class:`LogicalOrPredicate`, Dict[required=[or]]], Union[:class:`Predicate`, Union[:class:`FieldEqualPredicate`, Dict[required=[equal, field]]], Union[:class:`FieldGTEPredicate`, Dict[required=[field, gte]]], Union[:class:`FieldGTPredicate`, Dict[required=[field, gt]]], Union[:class:`FieldLTEPredicate`, Dict[required=[field, lte]]], Union[:class:`FieldLTPredicate`, Dict[required=[field, lt]]], Union[:class:`FieldOneOfPredicate`, Dict[required=[field, oneOf]]], Union[:class:`FieldRangePredicate`, Dict[required=[field, range]]], Union[:class:`FieldValidPredicate`, Dict[required=[field, valid]]], Union[:class:`ParameterPredicate`, Dict[required=[param]]], str]]]

    """

    _schema = {"$ref": "#/definitions/LogicalAnd<Predicate>"}

    def __init__(self, **kwds):
        super(LogicalAndPredicate, self).__init__(**kwds)


class LogicalNotPredicate(PredicateComposition):
    """LogicalNotPredicate schema wrapper

    Union[:class:`LogicalNotPredicate`, Dict[required=[not]]]

    Parameters
    ----------

    not : Union[:class:`PredicateComposition`, Union[:class:`LogicalAndPredicate`, Dict[required=[and]]], Union[:class:`LogicalNotPredicate`, Dict[required=[not]]], Union[:class:`LogicalOrPredicate`, Dict[required=[or]]], Union[:class:`Predicate`, Union[:class:`FieldEqualPredicate`, Dict[required=[equal, field]]], Union[:class:`FieldGTEPredicate`, Dict[required=[field, gte]]], Union[:class:`FieldGTPredicate`, Dict[required=[field, gt]]], Union[:class:`FieldLTEPredicate`, Dict[required=[field, lte]]], Union[:class:`FieldLTPredicate`, Dict[required=[field, lt]]], Union[:class:`FieldOneOfPredicate`, Dict[required=[field, oneOf]]], Union[:class:`FieldRangePredicate`, Dict[required=[field, range]]], Union[:class:`FieldValidPredicate`, Dict[required=[field, valid]]], Union[:class:`ParameterPredicate`, Dict[required=[param]]], str]]

    """

    _schema = {"$ref": "#/definitions/LogicalNot<Predicate>"}

    def __init__(self, **kwds):
        super(LogicalNotPredicate, self).__init__(**kwds)


class LogicalOrPredicate(PredicateComposition):
    """LogicalOrPredicate schema wrapper

    Union[:class:`LogicalOrPredicate`, Dict[required=[or]]]

    Parameters
    ----------

    or : List[Union[:class:`PredicateComposition`, Union[:class:`LogicalAndPredicate`, Dict[required=[and]]], Union[:class:`LogicalNotPredicate`, Dict[required=[not]]], Union[:class:`LogicalOrPredicate`, Dict[required=[or]]], Union[:class:`Predicate`, Union[:class:`FieldEqualPredicate`, Dict[required=[equal, field]]], Union[:class:`FieldGTEPredicate`, Dict[required=[field, gte]]], Union[:class:`FieldGTPredicate`, Dict[required=[field, gt]]], Union[:class:`FieldLTEPredicate`, Dict[required=[field, lte]]], Union[:class:`FieldLTPredicate`, Dict[required=[field, lt]]], Union[:class:`FieldOneOfPredicate`, Dict[required=[field, oneOf]]], Union[:class:`FieldRangePredicate`, Dict[required=[field, range]]], Union[:class:`FieldValidPredicate`, Dict[required=[field, valid]]], Union[:class:`ParameterPredicate`, Dict[required=[param]]], str]]]

    """

    _schema = {"$ref": "#/definitions/LogicalOr<Predicate>"}

    def __init__(self, **kwds):
        super(LogicalOrPredicate, self).__init__(**kwds)


class Predicate(PredicateComposition):
    """Predicate schema wrapper

    Union[:class:`Predicate`, Union[:class:`FieldEqualPredicate`, Dict[required=[equal,
    field]]], Union[:class:`FieldGTEPredicate`, Dict[required=[field, gte]]],
    Union[:class:`FieldGTPredicate`, Dict[required=[field, gt]]],
    Union[:class:`FieldLTEPredicate`, Dict[required=[field, lte]]],
    Union[:class:`FieldLTPredicate`, Dict[required=[field, lt]]],
    Union[:class:`FieldOneOfPredicate`, Dict[required=[field, oneOf]]],
    Union[:class:`FieldRangePredicate`, Dict[required=[field, range]]],
    Union[:class:`FieldValidPredicate`, Dict[required=[field, valid]]],
    Union[:class:`ParameterPredicate`, Dict[required=[param]]], str]
    """

    _schema = {"$ref": "#/definitions/Predicate"}

    def __init__(self, *args, **kwds):
        super(Predicate, self).__init__(*args, **kwds)


class FieldEqualPredicate(Predicate):
    """FieldEqualPredicate schema wrapper

    Union[:class:`FieldEqualPredicate`, Dict[required=[equal, field]]]

    Parameters
    ----------

    equal : Union[Union[:class:`DateTime`, Dict[required=[]]], Union[:class:`ExprRef`, Dict[required=[expr]]], bool, float, str]
        The value that the field should be equal to.
    field : Union[:class:`FieldName`, str]
        Field to be tested.
    timeUnit : Union[Union[:class:`BinnedTimeUnit`, Literal['binnedutcyear', 'binnedutcyearquarter', 'binnedutcyearquartermonth', 'binnedutcyearmonth', 'binnedutcyearmonthdate', 'binnedutcyearmonthdatehours', 'binnedutcyearmonthdatehoursminutes', 'binnedutcyearmonthdatehoursminutesseconds', 'binnedutcyearweek', 'binnedutcyearweekday', 'binnedutcyearweekdayhours', 'binnedutcyearweekdayhoursminutes', 'binnedutcyearweekdayhoursminutesseconds', 'binnedutcyeardayofyear'], Literal['binnedyear', 'binnedyearquarter', 'binnedyearquartermonth', 'binnedyearmonth', 'binnedyearmonthdate', 'binnedyearmonthdatehours', 'binnedyearmonthdatehoursminutes', 'binnedyearmonthdatehoursminutesseconds', 'binnedyearweek', 'binnedyearweekday', 'binnedyearweekdayhours', 'binnedyearweekdayhoursminutes', 'binnedyearweekdayhoursminutesseconds', 'binnedyeardayofyear']], Union[:class:`TimeUnitParams`, Dict[required=[]]], Union[:class:`TimeUnit`, Union[:class:`MultiTimeUnit`, Union[:class:`LocalMultiTimeUnit`, Literal['yearquarter', 'yearquartermonth', 'yearmonth', 'yearmonthdate', 'yearmonthdatehours', 'yearmonthdatehoursminutes', 'yearmonthdatehoursminutesseconds', 'yearweek', 'yearweekday', 'yearweekdayhours', 'yearweekdayhoursminutes', 'yearweekdayhoursminutesseconds', 'yeardayofyear', 'quartermonth', 'monthdate', 'monthdatehours', 'monthdatehoursminutes', 'monthdatehoursminutesseconds', 'weekday', 'weeksdayhours', 'weekdayhoursminutes', 'weekdayhoursminutesseconds', 'dayhours', 'dayhoursminutes', 'dayhoursminutesseconds', 'hoursminutes', 'hoursminutesseconds', 'minutesseconds', 'secondsmilliseconds']], Union[:class:`UtcMultiTimeUnit`, Literal['utcyearquarter', 'utcyearquartermonth', 'utcyearmonth', 'utcyearmonthdate', 'utcyearmonthdatehours', 'utcyearmonthdatehoursminutes', 'utcyearmonthdatehoursminutesseconds', 'utcyearweek', 'utcyearweekday', 'utcyearweekdayhours', 'utcyearweekdayhoursminutes', 'utcyearweekdayhoursminutesseconds', 'utcyeardayofyear', 'utcquartermonth', 'utcmonthdate', 'utcmonthdatehours', 'utcmonthdatehoursminutes', 'utcmonthdatehoursminutesseconds', 'utcweekday', 'utcweeksdayhours', 'utcweekdayhoursminutes', 'utcweekdayhoursminutesseconds', 'utcdayhours', 'utcdayhoursminutes', 'utcdayhoursminutesseconds', 'utchoursminutes', 'utchoursminutesseconds', 'utcminutesseconds', 'utcsecondsmilliseconds']]], Union[:class:`SingleTimeUnit`, Union[:class:`LocalSingleTimeUnit`, Literal['year', 'quarter', 'month', 'week', 'day', 'dayofyear', 'date', 'hours', 'minutes', 'seconds', 'milliseconds']], Union[:class:`UtcSingleTimeUnit`, Literal['utcyear', 'utcquarter', 'utcmonth', 'utcweek', 'utcday', 'utcdayofyear', 'utcdate', 'utchours', 'utcminutes', 'utcseconds', 'utcmilliseconds']]]]]
        Time unit for the field to be tested.
    """

    _schema = {"$ref": "#/definitions/FieldEqualPredicate"}

    def __init__(
        self,
        equal: Union[
            Union[
                Union["DateTime", dict],
                Union["ExprRef", "_ParameterProtocol", dict],
                bool,
                float,
                str,
            ],
            UndefinedType,
        ] = Undefined,
        field: Union[Union["FieldName", str], UndefinedType] = Undefined,
        timeUnit: Union[
            Union[
                Union[
                    "BinnedTimeUnit",
                    Literal[
                        "binnedutcyear",
                        "binnedutcyearquarter",
                        "binnedutcyearquartermonth",
                        "binnedutcyearmonth",
                        "binnedutcyearmonthdate",
                        "binnedutcyearmonthdatehours",
                        "binnedutcyearmonthdatehoursminutes",
                        "binnedutcyearmonthdatehoursminutesseconds",
                        "binnedutcyearweek",
                        "binnedutcyearweekday",
                        "binnedutcyearweekdayhours",
                        "binnedutcyearweekdayhoursminutes",
                        "binnedutcyearweekdayhoursminutesseconds",
                        "binnedutcyeardayofyear",
                    ],
                    Literal[
                        "binnedyear",
                        "binnedyearquarter",
                        "binnedyearquartermonth",
                        "binnedyearmonth",
                        "binnedyearmonthdate",
                        "binnedyearmonthdatehours",
                        "binnedyearmonthdatehoursminutes",
                        "binnedyearmonthdatehoursminutesseconds",
                        "binnedyearweek",
                        "binnedyearweekday",
                        "binnedyearweekdayhours",
                        "binnedyearweekdayhoursminutes",
                        "binnedyearweekdayhoursminutesseconds",
                        "binnedyeardayofyear",
                    ],
                ],
                Union[
                    "TimeUnit",
                    Union[
                        "MultiTimeUnit",
                        Union[
                            "LocalMultiTimeUnit",
                            Literal[
                                "yearquarter",
                                "yearquartermonth",
                                "yearmonth",
                                "yearmonthdate",
                                "yearmonthdatehours",
                                "yearmonthdatehoursminutes",
                                "yearmonthdatehoursminutesseconds",
                                "yearweek",
                                "yearweekday",
                                "yearweekdayhours",
                                "yearweekdayhoursminutes",
                                "yearweekdayhoursminutesseconds",
                                "yeardayofyear",
                                "quartermonth",
                                "monthdate",
                                "monthdatehours",
                                "monthdatehoursminutes",
                                "monthdatehoursminutesseconds",
                                "weekday",
                                "weeksdayhours",
                                "weekdayhoursminutes",
                                "weekdayhoursminutesseconds",
                                "dayhours",
                                "dayhoursminutes",
                                "dayhoursminutesseconds",
                                "hoursminutes",
                                "hoursminutesseconds",
                                "minutesseconds",
                                "secondsmilliseconds",
                            ],
                        ],
                        Union[
                            "UtcMultiTimeUnit",
                            Literal[
                                "utcyearquarter",
                                "utcyearquartermonth",
                                "utcyearmonth",
                                "utcyearmonthdate",
                                "utcyearmonthdatehours",
                                "utcyearmonthdatehoursminutes",
                                "utcyearmonthdatehoursminutesseconds",
                                "utcyearweek",
                                "utcyearweekday",
                                "utcyearweekdayhours",
                                "utcyearweekdayhoursminutes",
                                "utcyearweekdayhoursminutesseconds",
                                "utcyeardayofyear",
                                "utcquartermonth",
                                "utcmonthdate",
                                "utcmonthdatehours",
                                "utcmonthdatehoursminutes",
                                "utcmonthdatehoursminutesseconds",
                                "utcweekday",
                                "utcweeksdayhours",
                                "utcweekdayhoursminutes",
                                "utcweekdayhoursminutesseconds",
                                "utcdayhours",
                                "utcdayhoursminutes",
                                "utcdayhoursminutesseconds",
                                "utchoursminutes",
                                "utchoursminutesseconds",
                                "utcminutesseconds",
                                "utcsecondsmilliseconds",
                            ],
                        ],
                    ],
                    Union[
                        "SingleTimeUnit",
                        Union[
                            "LocalSingleTimeUnit",
                            Literal[
                                "year",
                                "quarter",
                                "month",
                                "week",
                                "day",
                                "dayofyear",
                                "date",
                                "hours",
                                "minutes",
                                "seconds",
                                "milliseconds",
                            ],
                        ],
                        Union[
                            "UtcSingleTimeUnit",
                            Literal[
                                "utcyear",
                                "utcquarter",
                                "utcmonth",
                                "utcweek",
                                "utcday",
                                "utcdayofyear",
                                "utcdate",
                                "utchours",
                                "utcminutes",
                                "utcseconds",
                                "utcmilliseconds",
                            ],
                        ],
                    ],
                ],
                Union["TimeUnitParams", dict],
            ],
            UndefinedType,
        ] = Undefined,
        **kwds
    ):
        super(FieldEqualPredicate, self).__init__(
            equal=equal, field=field, timeUnit=timeUnit, **kwds
        )


class FieldGTEPredicate(Predicate):
    """FieldGTEPredicate schema wrapper

    Union[:class:`FieldGTEPredicate`, Dict[required=[field, gte]]]

    Parameters
    ----------

    field : Union[:class:`FieldName`, str]
        Field to be tested.
    gte : Union[Union[:class:`DateTime`, Dict[required=[]]], Union[:class:`ExprRef`, Dict[required=[expr]]], float, str]
        The value that the field should be greater than or equals to.
    timeUnit : Union[Union[:class:`BinnedTimeUnit`, Literal['binnedutcyear', 'binnedutcyearquarter', 'binnedutcyearquartermonth', 'binnedutcyearmonth', 'binnedutcyearmonthdate', 'binnedutcyearmonthdatehours', 'binnedutcyearmonthdatehoursminutes', 'binnedutcyearmonthdatehoursminutesseconds', 'binnedutcyearweek', 'binnedutcyearweekday', 'binnedutcyearweekdayhours', 'binnedutcyearweekdayhoursminutes', 'binnedutcyearweekdayhoursminutesseconds', 'binnedutcyeardayofyear'], Literal['binnedyear', 'binnedyearquarter', 'binnedyearquartermonth', 'binnedyearmonth', 'binnedyearmonthdate', 'binnedyearmonthdatehours', 'binnedyearmonthdatehoursminutes', 'binnedyearmonthdatehoursminutesseconds', 'binnedyearweek', 'binnedyearweekday', 'binnedyearweekdayhours', 'binnedyearweekdayhoursminutes', 'binnedyearweekdayhoursminutesseconds', 'binnedyeardayofyear']], Union[:class:`TimeUnitParams`, Dict[required=[]]], Union[:class:`TimeUnit`, Union[:class:`MultiTimeUnit`, Union[:class:`LocalMultiTimeUnit`, Literal['yearquarter', 'yearquartermonth', 'yearmonth', 'yearmonthdate', 'yearmonthdatehours', 'yearmonthdatehoursminutes', 'yearmonthdatehoursminutesseconds', 'yearweek', 'yearweekday', 'yearweekdayhours', 'yearweekdayhoursminutes', 'yearweekdayhoursminutesseconds', 'yeardayofyear', 'quartermonth', 'monthdate', 'monthdatehours', 'monthdatehoursminutes', 'monthdatehoursminutesseconds', 'weekday', 'weeksdayhours', 'weekdayhoursminutes', 'weekdayhoursminutesseconds', 'dayhours', 'dayhoursminutes', 'dayhoursminutesseconds', 'hoursminutes', 'hoursminutesseconds', 'minutesseconds', 'secondsmilliseconds']], Union[:class:`UtcMultiTimeUnit`, Literal['utcyearquarter', 'utcyearquartermonth', 'utcyearmonth', 'utcyearmonthdate', 'utcyearmonthdatehours', 'utcyearmonthdatehoursminutes', 'utcyearmonthdatehoursminutesseconds', 'utcyearweek', 'utcyearweekday', 'utcyearweekdayhours', 'utcyearweekdayhoursminutes', 'utcyearweekdayhoursminutesseconds', 'utcyeardayofyear', 'utcquartermonth', 'utcmonthdate', 'utcmonthdatehours', 'utcmonthdatehoursminutes', 'utcmonthdatehoursminutesseconds', 'utcweekday', 'utcweeksdayhours', 'utcweekdayhoursminutes', 'utcweekdayhoursminutesseconds', 'utcdayhours', 'utcdayhoursminutes', 'utcdayhoursminutesseconds', 'utchoursminutes', 'utchoursminutesseconds', 'utcminutesseconds', 'utcsecondsmilliseconds']]], Union[:class:`SingleTimeUnit`, Union[:class:`LocalSingleTimeUnit`, Literal['year', 'quarter', 'month', 'week', 'day', 'dayofyear', 'date', 'hours', 'minutes', 'seconds', 'milliseconds']], Union[:class:`UtcSingleTimeUnit`, Literal['utcyear', 'utcquarter', 'utcmonth', 'utcweek', 'utcday', 'utcdayofyear', 'utcdate', 'utchours', 'utcminutes', 'utcseconds', 'utcmilliseconds']]]]]
        Time unit for the field to be tested.
    """

    _schema = {"$ref": "#/definitions/FieldGTEPredicate"}

    def __init__(
        self,
        field: Union[Union["FieldName", str], UndefinedType] = Undefined,
        gte: Union[
            Union[
                Union["DateTime", dict],
                Union["ExprRef", "_ParameterProtocol", dict],
                float,
                str,
            ],
            UndefinedType,
        ] = Undefined,
        timeUnit: Union[
            Union[
                Union[
                    "BinnedTimeUnit",
                    Literal[
                        "binnedutcyear",
                        "binnedutcyearquarter",
                        "binnedutcyearquartermonth",
                        "binnedutcyearmonth",
                        "binnedutcyearmonthdate",
                        "binnedutcyearmonthdatehours",
                        "binnedutcyearmonthdatehoursminutes",
                        "binnedutcyearmonthdatehoursminutesseconds",
                        "binnedutcyearweek",
                        "binnedutcyearweekday",
                        "binnedutcyearweekdayhours",
                        "binnedutcyearweekdayhoursminutes",
                        "binnedutcyearweekdayhoursminutesseconds",
                        "binnedutcyeardayofyear",
                    ],
                    Literal[
                        "binnedyear",
                        "binnedyearquarter",
                        "binnedyearquartermonth",
                        "binnedyearmonth",
                        "binnedyearmonthdate",
                        "binnedyearmonthdatehours",
                        "binnedyearmonthdatehoursminutes",
                        "binnedyearmonthdatehoursminutesseconds",
                        "binnedyearweek",
                        "binnedyearweekday",
                        "binnedyearweekdayhours",
                        "binnedyearweekdayhoursminutes",
                        "binnedyearweekdayhoursminutesseconds",
                        "binnedyeardayofyear",
                    ],
                ],
                Union[
                    "TimeUnit",
                    Union[
                        "MultiTimeUnit",
                        Union[
                            "LocalMultiTimeUnit",
                            Literal[
                                "yearquarter",
                                "yearquartermonth",
                                "yearmonth",
                                "yearmonthdate",
                                "yearmonthdatehours",
                                "yearmonthdatehoursminutes",
                                "yearmonthdatehoursminutesseconds",
                                "yearweek",
                                "yearweekday",
                                "yearweekdayhours",
                                "yearweekdayhoursminutes",
                                "yearweekdayhoursminutesseconds",
                                "yeardayofyear",
                                "quartermonth",
                                "monthdate",
                                "monthdatehours",
                                "monthdatehoursminutes",
                                "monthdatehoursminutesseconds",
                                "weekday",
                                "weeksdayhours",
                                "weekdayhoursminutes",
                                "weekdayhoursminutesseconds",
                                "dayhours",
                                "dayhoursminutes",
                                "dayhoursminutesseconds",
                                "hoursminutes",
                                "hoursminutesseconds",
                                "minutesseconds",
                                "secondsmilliseconds",
                            ],
                        ],
                        Union[
                            "UtcMultiTimeUnit",
                            Literal[
                                "utcyearquarter",
                                "utcyearquartermonth",
                                "utcyearmonth",
                                "utcyearmonthdate",
                                "utcyearmonthdatehours",
                                "utcyearmonthdatehoursminutes",
                                "utcyearmonthdatehoursminutesseconds",
                                "utcyearweek",
                                "utcyearweekday",
                                "utcyearweekdayhours",
                                "utcyearweekdayhoursminutes",
                                "utcyearweekdayhoursminutesseconds",
                                "utcyeardayofyear",
                                "utcquartermonth",
                                "utcmonthdate",
                                "utcmonthdatehours",
                                "utcmonthdatehoursminutes",
                                "utcmonthdatehoursminutesseconds",
                                "utcweekday",
                                "utcweeksdayhours",
                                "utcweekdayhoursminutes",
                                "utcweekdayhoursminutesseconds",
                                "utcdayhours",
                                "utcdayhoursminutes",
                                "utcdayhoursminutesseconds",
                                "utchoursminutes",
                                "utchoursminutesseconds",
                                "utcminutesseconds",
                                "utcsecondsmilliseconds",
                            ],
                        ],
                    ],
                    Union[
                        "SingleTimeUnit",
                        Union[
                            "LocalSingleTimeUnit",
                            Literal[
                                "year",
                                "quarter",
                                "month",
                                "week",
                                "day",
                                "dayofyear",
                                "date",
                                "hours",
                                "minutes",
                                "seconds",
                                "milliseconds",
                            ],
                        ],
                        Union[
                            "UtcSingleTimeUnit",
                            Literal[
                                "utcyear",
                                "utcquarter",
                                "utcmonth",
                                "utcweek",
                                "utcday",
                                "utcdayofyear",
                                "utcdate",
                                "utchours",
                                "utcminutes",
                                "utcseconds",
                                "utcmilliseconds",
                            ],
                        ],
                    ],
                ],
                Union["TimeUnitParams", dict],
            ],
            UndefinedType,
        ] = Undefined,
        **kwds
    ):
        super(FieldGTEPredicate, self).__init__(
            field=field, gte=gte, timeUnit=timeUnit, **kwds
        )


class FieldGTPredicate(Predicate):
    """FieldGTPredicate schema wrapper

    Union[:class:`FieldGTPredicate`, Dict[required=[field, gt]]]

    Parameters
    ----------

    field : Union[:class:`FieldName`, str]
        Field to be tested.
    gt : Union[Union[:class:`DateTime`, Dict[required=[]]], Union[:class:`ExprRef`, Dict[required=[expr]]], float, str]
        The value that the field should be greater than.
    timeUnit : Union[Union[:class:`BinnedTimeUnit`, Literal['binnedutcyear', 'binnedutcyearquarter', 'binnedutcyearquartermonth', 'binnedutcyearmonth', 'binnedutcyearmonthdate', 'binnedutcyearmonthdatehours', 'binnedutcyearmonthdatehoursminutes', 'binnedutcyearmonthdatehoursminutesseconds', 'binnedutcyearweek', 'binnedutcyearweekday', 'binnedutcyearweekdayhours', 'binnedutcyearweekdayhoursminutes', 'binnedutcyearweekdayhoursminutesseconds', 'binnedutcyeardayofyear'], Literal['binnedyear', 'binnedyearquarter', 'binnedyearquartermonth', 'binnedyearmonth', 'binnedyearmonthdate', 'binnedyearmonthdatehours', 'binnedyearmonthdatehoursminutes', 'binnedyearmonthdatehoursminutesseconds', 'binnedyearweek', 'binnedyearweekday', 'binnedyearweekdayhours', 'binnedyearweekdayhoursminutes', 'binnedyearweekdayhoursminutesseconds', 'binnedyeardayofyear']], Union[:class:`TimeUnitParams`, Dict[required=[]]], Union[:class:`TimeUnit`, Union[:class:`MultiTimeUnit`, Union[:class:`LocalMultiTimeUnit`, Literal['yearquarter', 'yearquartermonth', 'yearmonth', 'yearmonthdate', 'yearmonthdatehours', 'yearmonthdatehoursminutes', 'yearmonthdatehoursminutesseconds', 'yearweek', 'yearweekday', 'yearweekdayhours', 'yearweekdayhoursminutes', 'yearweekdayhoursminutesseconds', 'yeardayofyear', 'quartermonth', 'monthdate', 'monthdatehours', 'monthdatehoursminutes', 'monthdatehoursminutesseconds', 'weekday', 'weeksdayhours', 'weekdayhoursminutes', 'weekdayhoursminutesseconds', 'dayhours', 'dayhoursminutes', 'dayhoursminutesseconds', 'hoursminutes', 'hoursminutesseconds', 'minutesseconds', 'secondsmilliseconds']], Union[:class:`UtcMultiTimeUnit`, Literal['utcyearquarter', 'utcyearquartermonth', 'utcyearmonth', 'utcyearmonthdate', 'utcyearmonthdatehours', 'utcyearmonthdatehoursminutes', 'utcyearmonthdatehoursminutesseconds', 'utcyearweek', 'utcyearweekday', 'utcyearweekdayhours', 'utcyearweekdayhoursminutes', 'utcyearweekdayhoursminutesseconds', 'utcyeardayofyear', 'utcquartermonth', 'utcmonthdate', 'utcmonthdatehours', 'utcmonthdatehoursminutes', 'utcmonthdatehoursminutesseconds', 'utcweekday', 'utcweeksdayhours', 'utcweekdayhoursminutes', 'utcweekdayhoursminutesseconds', 'utcdayhours', 'utcdayhoursminutes', 'utcdayhoursminutesseconds', 'utchoursminutes', 'utchoursminutesseconds', 'utcminutesseconds', 'utcsecondsmilliseconds']]], Union[:class:`SingleTimeUnit`, Union[:class:`LocalSingleTimeUnit`, Literal['year', 'quarter', 'month', 'week', 'day', 'dayofyear', 'date', 'hours', 'minutes', 'seconds', 'milliseconds']], Union[:class:`UtcSingleTimeUnit`, Literal['utcyear', 'utcquarter', 'utcmonth', 'utcweek', 'utcday', 'utcdayofyear', 'utcdate', 'utchours', 'utcminutes', 'utcseconds', 'utcmilliseconds']]]]]
        Time unit for the field to be tested.
    """

    _schema = {"$ref": "#/definitions/FieldGTPredicate"}

    def __init__(
        self,
        field: Union[Union["FieldName", str], UndefinedType] = Undefined,
        gt: Union[
            Union[
                Union["DateTime", dict],
                Union["ExprRef", "_ParameterProtocol", dict],
                float,
                str,
            ],
            UndefinedType,
        ] = Undefined,
        timeUnit: Union[
            Union[
                Union[
                    "BinnedTimeUnit",
                    Literal[
                        "binnedutcyear",
                        "binnedutcyearquarter",
                        "binnedutcyearquartermonth",
                        "binnedutcyearmonth",
                        "binnedutcyearmonthdate",
                        "binnedutcyearmonthdatehours",
                        "binnedutcyearmonthdatehoursminutes",
                        "binnedutcyearmonthdatehoursminutesseconds",
                        "binnedutcyearweek",
                        "binnedutcyearweekday",
                        "binnedutcyearweekdayhours",
                        "binnedutcyearweekdayhoursminutes",
                        "binnedutcyearweekdayhoursminutesseconds",
                        "binnedutcyeardayofyear",
                    ],
                    Literal[
                        "binnedyear",
                        "binnedyearquarter",
                        "binnedyearquartermonth",
                        "binnedyearmonth",
                        "binnedyearmonthdate",
                        "binnedyearmonthdatehours",
                        "binnedyearmonthdatehoursminutes",
                        "binnedyearmonthdatehoursminutesseconds",
                        "binnedyearweek",
                        "binnedyearweekday",
                        "binnedyearweekdayhours",
                        "binnedyearweekdayhoursminutes",
                        "binnedyearweekdayhoursminutesseconds",
                        "binnedyeardayofyear",
                    ],
                ],
                Union[
                    "TimeUnit",
                    Union[
                        "MultiTimeUnit",
                        Union[
                            "LocalMultiTimeUnit",
                            Literal[
                                "yearquarter",
                                "yearquartermonth",
                                "yearmonth",
                                "yearmonthdate",
                                "yearmonthdatehours",
                                "yearmonthdatehoursminutes",
                                "yearmonthdatehoursminutesseconds",
                                "yearweek",
                                "yearweekday",
                                "yearweekdayhours",
                                "yearweekdayhoursminutes",
                                "yearweekdayhoursminutesseconds",
                                "yeardayofyear",
                                "quartermonth",
                                "monthdate",
                                "monthdatehours",
                                "monthdatehoursminutes",
                                "monthdatehoursminutesseconds",
                                "weekday",
                                "weeksdayhours",
                                "weekdayhoursminutes",
                                "weekdayhoursminutesseconds",
                                "dayhours",
                                "dayhoursminutes",
                                "dayhoursminutesseconds",
                                "hoursminutes",
                                "hoursminutesseconds",
                                "minutesseconds",
                                "secondsmilliseconds",
                            ],
                        ],
                        Union[
                            "UtcMultiTimeUnit",
                            Literal[
                                "utcyearquarter",
                                "utcyearquartermonth",
                                "utcyearmonth",
                                "utcyearmonthdate",
                                "utcyearmonthdatehours",
                                "utcyearmonthdatehoursminutes",
                                "utcyearmonthdatehoursminutesseconds",
                                "utcyearweek",
                                "utcyearweekday",
                                "utcyearweekdayhours",
                                "utcyearweekdayhoursminutes",
                                "utcyearweekdayhoursminutesseconds",
                                "utcyeardayofyear",
                                "utcquartermonth",
                                "utcmonthdate",
                                "utcmonthdatehours",
                                "utcmonthdatehoursminutes",
                                "utcmonthdatehoursminutesseconds",
                                "utcweekday",
                                "utcweeksdayhours",
                                "utcweekdayhoursminutes",
                                "utcweekdayhoursminutesseconds",
                                "utcdayhours",
                                "utcdayhoursminutes",
                                "utcdayhoursminutesseconds",
                                "utchoursminutes",
                                "utchoursminutesseconds",
                                "utcminutesseconds",
                                "utcsecondsmilliseconds",
                            ],
                        ],
                    ],
                    Union[
                        "SingleTimeUnit",
                        Union[
                            "LocalSingleTimeUnit",
                            Literal[
                                "year",
                                "quarter",
                                "month",
                                "week",
                                "day",
                                "dayofyear",
                                "date",
                                "hours",
                                "minutes",
                                "seconds",
                                "milliseconds",
                            ],
                        ],
                        Union[
                            "UtcSingleTimeUnit",
                            Literal[
                                "utcyear",
                                "utcquarter",
                                "utcmonth",
                                "utcweek",
                                "utcday",
                                "utcdayofyear",
                                "utcdate",
                                "utchours",
                                "utcminutes",
                                "utcseconds",
                                "utcmilliseconds",
                            ],
                        ],
                    ],
                ],
                Union["TimeUnitParams", dict],
            ],
            UndefinedType,
        ] = Undefined,
        **kwds
    ):
        super(FieldGTPredicate, self).__init__(
            field=field, gt=gt, timeUnit=timeUnit, **kwds
        )


class FieldLTEPredicate(Predicate):
    """FieldLTEPredicate schema wrapper

    Union[:class:`FieldLTEPredicate`, Dict[required=[field, lte]]]

    Parameters
    ----------

    field : Union[:class:`FieldName`, str]
        Field to be tested.
    lte : Union[Union[:class:`DateTime`, Dict[required=[]]], Union[:class:`ExprRef`, Dict[required=[expr]]], float, str]
        The value that the field should be less than or equals to.
    timeUnit : Union[Union[:class:`BinnedTimeUnit`, Literal['binnedutcyear', 'binnedutcyearquarter', 'binnedutcyearquartermonth', 'binnedutcyearmonth', 'binnedutcyearmonthdate', 'binnedutcyearmonthdatehours', 'binnedutcyearmonthdatehoursminutes', 'binnedutcyearmonthdatehoursminutesseconds', 'binnedutcyearweek', 'binnedutcyearweekday', 'binnedutcyearweekdayhours', 'binnedutcyearweekdayhoursminutes', 'binnedutcyearweekdayhoursminutesseconds', 'binnedutcyeardayofyear'], Literal['binnedyear', 'binnedyearquarter', 'binnedyearquartermonth', 'binnedyearmonth', 'binnedyearmonthdate', 'binnedyearmonthdatehours', 'binnedyearmonthdatehoursminutes', 'binnedyearmonthdatehoursminutesseconds', 'binnedyearweek', 'binnedyearweekday', 'binnedyearweekdayhours', 'binnedyearweekdayhoursminutes', 'binnedyearweekdayhoursminutesseconds', 'binnedyeardayofyear']], Union[:class:`TimeUnitParams`, Dict[required=[]]], Union[:class:`TimeUnit`, Union[:class:`MultiTimeUnit`, Union[:class:`LocalMultiTimeUnit`, Literal['yearquarter', 'yearquartermonth', 'yearmonth', 'yearmonthdate', 'yearmonthdatehours', 'yearmonthdatehoursminutes', 'yearmonthdatehoursminutesseconds', 'yearweek', 'yearweekday', 'yearweekdayhours', 'yearweekdayhoursminutes', 'yearweekdayhoursminutesseconds', 'yeardayofyear', 'quartermonth', 'monthdate', 'monthdatehours', 'monthdatehoursminutes', 'monthdatehoursminutesseconds', 'weekday', 'weeksdayhours', 'weekdayhoursminutes', 'weekdayhoursminutesseconds', 'dayhours', 'dayhoursminutes', 'dayhoursminutesseconds', 'hoursminutes', 'hoursminutesseconds', 'minutesseconds', 'secondsmilliseconds']], Union[:class:`UtcMultiTimeUnit`, Literal['utcyearquarter', 'utcyearquartermonth', 'utcyearmonth', 'utcyearmonthdate', 'utcyearmonthdatehours', 'utcyearmonthdatehoursminutes', 'utcyearmonthdatehoursminutesseconds', 'utcyearweek', 'utcyearweekday', 'utcyearweekdayhours', 'utcyearweekdayhoursminutes', 'utcyearweekdayhoursminutesseconds', 'utcyeardayofyear', 'utcquartermonth', 'utcmonthdate', 'utcmonthdatehours', 'utcmonthdatehoursminutes', 'utcmonthdatehoursminutesseconds', 'utcweekday', 'utcweeksdayhours', 'utcweekdayhoursminutes', 'utcweekdayhoursminutesseconds', 'utcdayhours', 'utcdayhoursminutes', 'utcdayhoursminutesseconds', 'utchoursminutes', 'utchoursminutesseconds', 'utcminutesseconds', 'utcsecondsmilliseconds']]], Union[:class:`SingleTimeUnit`, Union[:class:`LocalSingleTimeUnit`, Literal['year', 'quarter', 'month', 'week', 'day', 'dayofyear', 'date', 'hours', 'minutes', 'seconds', 'milliseconds']], Union[:class:`UtcSingleTimeUnit`, Literal['utcyear', 'utcquarter', 'utcmonth', 'utcweek', 'utcday', 'utcdayofyear', 'utcdate', 'utchours', 'utcminutes', 'utcseconds', 'utcmilliseconds']]]]]
        Time unit for the field to be tested.
    """

    _schema = {"$ref": "#/definitions/FieldLTEPredicate"}

    def __init__(
        self,
        field: Union[Union["FieldName", str], UndefinedType] = Undefined,
        lte: Union[
            Union[
                Union["DateTime", dict],
                Union["ExprRef", "_ParameterProtocol", dict],
                float,
                str,
            ],
            UndefinedType,
        ] = Undefined,
        timeUnit: Union[
            Union[
                Union[
                    "BinnedTimeUnit",
                    Literal[
                        "binnedutcyear",
                        "binnedutcyearquarter",
                        "binnedutcyearquartermonth",
                        "binnedutcyearmonth",
                        "binnedutcyearmonthdate",
                        "binnedutcyearmonthdatehours",
                        "binnedutcyearmonthdatehoursminutes",
                        "binnedutcyearmonthdatehoursminutesseconds",
                        "binnedutcyearweek",
                        "binnedutcyearweekday",
                        "binnedutcyearweekdayhours",
                        "binnedutcyearweekdayhoursminutes",
                        "binnedutcyearweekdayhoursminutesseconds",
                        "binnedutcyeardayofyear",
                    ],
                    Literal[
                        "binnedyear",
                        "binnedyearquarter",
                        "binnedyearquartermonth",
                        "binnedyearmonth",
                        "binnedyearmonthdate",
                        "binnedyearmonthdatehours",
                        "binnedyearmonthdatehoursminutes",
                        "binnedyearmonthdatehoursminutesseconds",
                        "binnedyearweek",
                        "binnedyearweekday",
                        "binnedyearweekdayhours",
                        "binnedyearweekdayhoursminutes",
                        "binnedyearweekdayhoursminutesseconds",
                        "binnedyeardayofyear",
                    ],
                ],
                Union[
                    "TimeUnit",
                    Union[
                        "MultiTimeUnit",
                        Union[
                            "LocalMultiTimeUnit",
                            Literal[
                                "yearquarter",
                                "yearquartermonth",
                                "yearmonth",
                                "yearmonthdate",
                                "yearmonthdatehours",
                                "yearmonthdatehoursminutes",
                                "yearmonthdatehoursminutesseconds",
                                "yearweek",
                                "yearweekday",
                                "yearweekdayhours",
                                "yearweekdayhoursminutes",
                                "yearweekdayhoursminutesseconds",
                                "yeardayofyear",
                                "quartermonth",
                                "monthdate",
                                "monthdatehours",
                                "monthdatehoursminutes",
                                "monthdatehoursminutesseconds",
                                "weekday",
                                "weeksdayhours",
                                "weekdayhoursminutes",
                                "weekdayhoursminutesseconds",
                                "dayhours",
                                "dayhoursminutes",
                                "dayhoursminutesseconds",
                                "hoursminutes",
                                "hoursminutesseconds",
                                "minutesseconds",
                                "secondsmilliseconds",
                            ],
                        ],
                        Union[
                            "UtcMultiTimeUnit",
                            Literal[
                                "utcyearquarter",
                                "utcyearquartermonth",
                                "utcyearmonth",
                                "utcyearmonthdate",
                                "utcyearmonthdatehours",
                                "utcyearmonthdatehoursminutes",
                                "utcyearmonthdatehoursminutesseconds",
                                "utcyearweek",
                                "utcyearweekday",
                                "utcyearweekdayhours",
                                "utcyearweekdayhoursminutes",
                                "utcyearweekdayhoursminutesseconds",
                                "utcyeardayofyear",
                                "utcquartermonth",
                                "utcmonthdate",
                                "utcmonthdatehours",
                                "utcmonthdatehoursminutes",
                                "utcmonthdatehoursminutesseconds",
                                "utcweekday",
                                "utcweeksdayhours",
                                "utcweekdayhoursminutes",
                                "utcweekdayhoursminutesseconds",
                                "utcdayhours",
                                "utcdayhoursminutes",
                                "utcdayhoursminutesseconds",
                                "utchoursminutes",
                                "utchoursminutesseconds",
                                "utcminutesseconds",
                                "utcsecondsmilliseconds",
                            ],
                        ],
                    ],
                    Union[
                        "SingleTimeUnit",
                        Union[
                            "LocalSingleTimeUnit",
                            Literal[
                                "year",
                                "quarter",
                                "month",
                                "week",
                                "day",
                                "dayofyear",
                                "date",
                                "hours",
                                "minutes",
                                "seconds",
                                "milliseconds",
                            ],
                        ],
                        Union[
                            "UtcSingleTimeUnit",
                            Literal[
                                "utcyear",
                                "utcquarter",
                                "utcmonth",
                                "utcweek",
                                "utcday",
                                "utcdayofyear",
                                "utcdate",
                                "utchours",
                                "utcminutes",
                                "utcseconds",
                                "utcmilliseconds",
                            ],
                        ],
                    ],
                ],
                Union["TimeUnitParams", dict],
            ],
            UndefinedType,
        ] = Undefined,
        **kwds
    ):
        super(FieldLTEPredicate, self).__init__(
            field=field, lte=lte, timeUnit=timeUnit, **kwds
        )


class FieldLTPredicate(Predicate):
    """FieldLTPredicate schema wrapper

    Union[:class:`FieldLTPredicate`, Dict[required=[field, lt]]]

    Parameters
    ----------

    field : Union[:class:`FieldName`, str]
        Field to be tested.
    lt : Union[Union[:class:`DateTime`, Dict[required=[]]], Union[:class:`ExprRef`, Dict[required=[expr]]], float, str]
        The value that the field should be less than.
    timeUnit : Union[Union[:class:`BinnedTimeUnit`, Literal['binnedutcyear', 'binnedutcyearquarter', 'binnedutcyearquartermonth', 'binnedutcyearmonth', 'binnedutcyearmonthdate', 'binnedutcyearmonthdatehours', 'binnedutcyearmonthdatehoursminutes', 'binnedutcyearmonthdatehoursminutesseconds', 'binnedutcyearweek', 'binnedutcyearweekday', 'binnedutcyearweekdayhours', 'binnedutcyearweekdayhoursminutes', 'binnedutcyearweekdayhoursminutesseconds', 'binnedutcyeardayofyear'], Literal['binnedyear', 'binnedyearquarter', 'binnedyearquartermonth', 'binnedyearmonth', 'binnedyearmonthdate', 'binnedyearmonthdatehours', 'binnedyearmonthdatehoursminutes', 'binnedyearmonthdatehoursminutesseconds', 'binnedyearweek', 'binnedyearweekday', 'binnedyearweekdayhours', 'binnedyearweekdayhoursminutes', 'binnedyearweekdayhoursminutesseconds', 'binnedyeardayofyear']], Union[:class:`TimeUnitParams`, Dict[required=[]]], Union[:class:`TimeUnit`, Union[:class:`MultiTimeUnit`, Union[:class:`LocalMultiTimeUnit`, Literal['yearquarter', 'yearquartermonth', 'yearmonth', 'yearmonthdate', 'yearmonthdatehours', 'yearmonthdatehoursminutes', 'yearmonthdatehoursminutesseconds', 'yearweek', 'yearweekday', 'yearweekdayhours', 'yearweekdayhoursminutes', 'yearweekdayhoursminutesseconds', 'yeardayofyear', 'quartermonth', 'monthdate', 'monthdatehours', 'monthdatehoursminutes', 'monthdatehoursminutesseconds', 'weekday', 'weeksdayhours', 'weekdayhoursminutes', 'weekdayhoursminutesseconds', 'dayhours', 'dayhoursminutes', 'dayhoursminutesseconds', 'hoursminutes', 'hoursminutesseconds', 'minutesseconds', 'secondsmilliseconds']], Union[:class:`UtcMultiTimeUnit`, Literal['utcyearquarter', 'utcyearquartermonth', 'utcyearmonth', 'utcyearmonthdate', 'utcyearmonthdatehours', 'utcyearmonthdatehoursminutes', 'utcyearmonthdatehoursminutesseconds', 'utcyearweek', 'utcyearweekday', 'utcyearweekdayhours', 'utcyearweekdayhoursminutes', 'utcyearweekdayhoursminutesseconds', 'utcyeardayofyear', 'utcquartermonth', 'utcmonthdate', 'utcmonthdatehours', 'utcmonthdatehoursminutes', 'utcmonthdatehoursminutesseconds', 'utcweekday', 'utcweeksdayhours', 'utcweekdayhoursminutes', 'utcweekdayhoursminutesseconds', 'utcdayhours', 'utcdayhoursminutes', 'utcdayhoursminutesseconds', 'utchoursminutes', 'utchoursminutesseconds', 'utcminutesseconds', 'utcsecondsmilliseconds']]], Union[:class:`SingleTimeUnit`, Union[:class:`LocalSingleTimeUnit`, Literal['year', 'quarter', 'month', 'week', 'day', 'dayofyear', 'date', 'hours', 'minutes', 'seconds', 'milliseconds']], Union[:class:`UtcSingleTimeUnit`, Literal['utcyear', 'utcquarter', 'utcmonth', 'utcweek', 'utcday', 'utcdayofyear', 'utcdate', 'utchours', 'utcminutes', 'utcseconds', 'utcmilliseconds']]]]]
        Time unit for the field to be tested.
    """

    _schema = {"$ref": "#/definitions/FieldLTPredicate"}

    def __init__(
        self,
        field: Union[Union["FieldName", str], UndefinedType] = Undefined,
        lt: Union[
            Union[
                Union["DateTime", dict],
                Union["ExprRef", "_ParameterProtocol", dict],
                float,
                str,
            ],
            UndefinedType,
        ] = Undefined,
        timeUnit: Union[
            Union[
                Union[
                    "BinnedTimeUnit",
                    Literal[
                        "binnedutcyear",
                        "binnedutcyearquarter",
                        "binnedutcyearquartermonth",
                        "binnedutcyearmonth",
                        "binnedutcyearmonthdate",
                        "binnedutcyearmonthdatehours",
                        "binnedutcyearmonthdatehoursminutes",
                        "binnedutcyearmonthdatehoursminutesseconds",
                        "binnedutcyearweek",
                        "binnedutcyearweekday",
                        "binnedutcyearweekdayhours",
                        "binnedutcyearweekdayhoursminutes",
                        "binnedutcyearweekdayhoursminutesseconds",
                        "binnedutcyeardayofyear",
                    ],
                    Literal[
                        "binnedyear",
                        "binnedyearquarter",
                        "binnedyearquartermonth",
                        "binnedyearmonth",
                        "binnedyearmonthdate",
                        "binnedyearmonthdatehours",
                        "binnedyearmonthdatehoursminutes",
                        "binnedyearmonthdatehoursminutesseconds",
                        "binnedyearweek",
                        "binnedyearweekday",
                        "binnedyearweekdayhours",
                        "binnedyearweekdayhoursminutes",
                        "binnedyearweekdayhoursminutesseconds",
                        "binnedyeardayofyear",
                    ],
                ],
                Union[
                    "TimeUnit",
                    Union[
                        "MultiTimeUnit",
                        Union[
                            "LocalMultiTimeUnit",
                            Literal[
                                "yearquarter",
                                "yearquartermonth",
                                "yearmonth",
                                "yearmonthdate",
                                "yearmonthdatehours",
                                "yearmonthdatehoursminutes",
                                "yearmonthdatehoursminutesseconds",
                                "yearweek",
                                "yearweekday",
                                "yearweekdayhours",
                                "yearweekdayhoursminutes",
                                "yearweekdayhoursminutesseconds",
                                "yeardayofyear",
                                "quartermonth",
                                "monthdate",
                                "monthdatehours",
                                "monthdatehoursminutes",
                                "monthdatehoursminutesseconds",
                                "weekday",
                                "weeksdayhours",
                                "weekdayhoursminutes",
                                "weekdayhoursminutesseconds",
                                "dayhours",
                                "dayhoursminutes",
                                "dayhoursminutesseconds",
                                "hoursminutes",
                                "hoursminutesseconds",
                                "minutesseconds",
                                "secondsmilliseconds",
                            ],
                        ],
                        Union[
                            "UtcMultiTimeUnit",
                            Literal[
                                "utcyearquarter",
                                "utcyearquartermonth",
                                "utcyearmonth",
                                "utcyearmonthdate",
                                "utcyearmonthdatehours",
                                "utcyearmonthdatehoursminutes",
                                "utcyearmonthdatehoursminutesseconds",
                                "utcyearweek",
                                "utcyearweekday",
                                "utcyearweekdayhours",
                                "utcyearweekdayhoursminutes",
                                "utcyearweekdayhoursminutesseconds",
                                "utcyeardayofyear",
                                "utcquartermonth",
                                "utcmonthdate",
                                "utcmonthdatehours",
                                "utcmonthdatehoursminutes",
                                "utcmonthdatehoursminutesseconds",
                                "utcweekday",
                                "utcweeksdayhours",
                                "utcweekdayhoursminutes",
                                "utcweekdayhoursminutesseconds",
                                "utcdayhours",
                                "utcdayhoursminutes",
                                "utcdayhoursminutesseconds",
                                "utchoursminutes",
                                "utchoursminutesseconds",
                                "utcminutesseconds",
                                "utcsecondsmilliseconds",
                            ],
                        ],
                    ],
                    Union[
                        "SingleTimeUnit",
                        Union[
                            "LocalSingleTimeUnit",
                            Literal[
                                "year",
                                "quarter",
                                "month",
                                "week",
                                "day",
                                "dayofyear",
                                "date",
                                "hours",
                                "minutes",
                                "seconds",
                                "milliseconds",
                            ],
                        ],
                        Union[
                            "UtcSingleTimeUnit",
                            Literal[
                                "utcyear",
                                "utcquarter",
                                "utcmonth",
                                "utcweek",
                                "utcday",
                                "utcdayofyear",
                                "utcdate",
                                "utchours",
                                "utcminutes",
                                "utcseconds",
                                "utcmilliseconds",
                            ],
                        ],
                    ],
                ],
                Union["TimeUnitParams", dict],
            ],
            UndefinedType,
        ] = Undefined,
        **kwds
    ):
        super(FieldLTPredicate, self).__init__(
            field=field, lt=lt, timeUnit=timeUnit, **kwds
        )


class FieldOneOfPredicate(Predicate):
    """FieldOneOfPredicate schema wrapper

    Union[:class:`FieldOneOfPredicate`, Dict[required=[field, oneOf]]]

    Parameters
    ----------

    field : Union[:class:`FieldName`, str]
        Field to be tested.
    oneOf : Union[List[Union[:class:`DateTime`, Dict[required=[]]]], List[bool], List[float], List[str]]
        A set of values that the ``field`` 's value should be a member of, for a data item
        included in the filtered data.
    timeUnit : Union[Union[:class:`BinnedTimeUnit`, Literal['binnedutcyear', 'binnedutcyearquarter', 'binnedutcyearquartermonth', 'binnedutcyearmonth', 'binnedutcyearmonthdate', 'binnedutcyearmonthdatehours', 'binnedutcyearmonthdatehoursminutes', 'binnedutcyearmonthdatehoursminutesseconds', 'binnedutcyearweek', 'binnedutcyearweekday', 'binnedutcyearweekdayhours', 'binnedutcyearweekdayhoursminutes', 'binnedutcyearweekdayhoursminutesseconds', 'binnedutcyeardayofyear'], Literal['binnedyear', 'binnedyearquarter', 'binnedyearquartermonth', 'binnedyearmonth', 'binnedyearmonthdate', 'binnedyearmonthdatehours', 'binnedyearmonthdatehoursminutes', 'binnedyearmonthdatehoursminutesseconds', 'binnedyearweek', 'binnedyearweekday', 'binnedyearweekdayhours', 'binnedyearweekdayhoursminutes', 'binnedyearweekdayhoursminutesseconds', 'binnedyeardayofyear']], Union[:class:`TimeUnitParams`, Dict[required=[]]], Union[:class:`TimeUnit`, Union[:class:`MultiTimeUnit`, Union[:class:`LocalMultiTimeUnit`, Literal['yearquarter', 'yearquartermonth', 'yearmonth', 'yearmonthdate', 'yearmonthdatehours', 'yearmonthdatehoursminutes', 'yearmonthdatehoursminutesseconds', 'yearweek', 'yearweekday', 'yearweekdayhours', 'yearweekdayhoursminutes', 'yearweekdayhoursminutesseconds', 'yeardayofyear', 'quartermonth', 'monthdate', 'monthdatehours', 'monthdatehoursminutes', 'monthdatehoursminutesseconds', 'weekday', 'weeksdayhours', 'weekdayhoursminutes', 'weekdayhoursminutesseconds', 'dayhours', 'dayhoursminutes', 'dayhoursminutesseconds', 'hoursminutes', 'hoursminutesseconds', 'minutesseconds', 'secondsmilliseconds']], Union[:class:`UtcMultiTimeUnit`, Literal['utcyearquarter', 'utcyearquartermonth', 'utcyearmonth', 'utcyearmonthdate', 'utcyearmonthdatehours', 'utcyearmonthdatehoursminutes', 'utcyearmonthdatehoursminutesseconds', 'utcyearweek', 'utcyearweekday', 'utcyearweekdayhours', 'utcyearweekdayhoursminutes', 'utcyearweekdayhoursminutesseconds', 'utcyeardayofyear', 'utcquartermonth', 'utcmonthdate', 'utcmonthdatehours', 'utcmonthdatehoursminutes', 'utcmonthdatehoursminutesseconds', 'utcweekday', 'utcweeksdayhours', 'utcweekdayhoursminutes', 'utcweekdayhoursminutesseconds', 'utcdayhours', 'utcdayhoursminutes', 'utcdayhoursminutesseconds', 'utchoursminutes', 'utchoursminutesseconds', 'utcminutesseconds', 'utcsecondsmilliseconds']]], Union[:class:`SingleTimeUnit`, Union[:class:`LocalSingleTimeUnit`, Literal['year', 'quarter', 'month', 'week', 'day', 'dayofyear', 'date', 'hours', 'minutes', 'seconds', 'milliseconds']], Union[:class:`UtcSingleTimeUnit`, Literal['utcyear', 'utcquarter', 'utcmonth', 'utcweek', 'utcday', 'utcdayofyear', 'utcdate', 'utchours', 'utcminutes', 'utcseconds', 'utcmilliseconds']]]]]
        Time unit for the field to be tested.
    """

    _schema = {"$ref": "#/definitions/FieldOneOfPredicate"}

    def __init__(
        self,
        field: Union[Union["FieldName", str], UndefinedType] = Undefined,
        oneOf: Union[
            Union[
                List[bool], List[float], List[str], Union[List["DateTime"], List[dict]]
            ],
            UndefinedType,
        ] = Undefined,
        timeUnit: Union[
            Union[
                Union[
                    "BinnedTimeUnit",
                    Literal[
                        "binnedutcyear",
                        "binnedutcyearquarter",
                        "binnedutcyearquartermonth",
                        "binnedutcyearmonth",
                        "binnedutcyearmonthdate",
                        "binnedutcyearmonthdatehours",
                        "binnedutcyearmonthdatehoursminutes",
                        "binnedutcyearmonthdatehoursminutesseconds",
                        "binnedutcyearweek",
                        "binnedutcyearweekday",
                        "binnedutcyearweekdayhours",
                        "binnedutcyearweekdayhoursminutes",
                        "binnedutcyearweekdayhoursminutesseconds",
                        "binnedutcyeardayofyear",
                    ],
                    Literal[
                        "binnedyear",
                        "binnedyearquarter",
                        "binnedyearquartermonth",
                        "binnedyearmonth",
                        "binnedyearmonthdate",
                        "binnedyearmonthdatehours",
                        "binnedyearmonthdatehoursminutes",
                        "binnedyearmonthdatehoursminutesseconds",
                        "binnedyearweek",
                        "binnedyearweekday",
                        "binnedyearweekdayhours",
                        "binnedyearweekdayhoursminutes",
                        "binnedyearweekdayhoursminutesseconds",
                        "binnedyeardayofyear",
                    ],
                ],
                Union[
                    "TimeUnit",
                    Union[
                        "MultiTimeUnit",
                        Union[
                            "LocalMultiTimeUnit",
                            Literal[
                                "yearquarter",
                                "yearquartermonth",
                                "yearmonth",
                                "yearmonthdate",
                                "yearmonthdatehours",
                                "yearmonthdatehoursminutes",
                                "yearmonthdatehoursminutesseconds",
                                "yearweek",
                                "yearweekday",
                                "yearweekdayhours",
                                "yearweekdayhoursminutes",
                                "yearweekdayhoursminutesseconds",
                                "yeardayofyear",
                                "quartermonth",
                                "monthdate",
                                "monthdatehours",
                                "monthdatehoursminutes",
                                "monthdatehoursminutesseconds",
                                "weekday",
                                "weeksdayhours",
                                "weekdayhoursminutes",
                                "weekdayhoursminutesseconds",
                                "dayhours",
                                "dayhoursminutes",
                                "dayhoursminutesseconds",
                                "hoursminutes",
                                "hoursminutesseconds",
                                "minutesseconds",
                                "secondsmilliseconds",
                            ],
                        ],
                        Union[
                            "UtcMultiTimeUnit",
                            Literal[
                                "utcyearquarter",
                                "utcyearquartermonth",
                                "utcyearmonth",
                                "utcyearmonthdate",
                                "utcyearmonthdatehours",
                                "utcyearmonthdatehoursminutes",
                                "utcyearmonthdatehoursminutesseconds",
                                "utcyearweek",
                                "utcyearweekday",
                                "utcyearweekdayhours",
                                "utcyearweekdayhoursminutes",
                                "utcyearweekdayhoursminutesseconds",
                                "utcyeardayofyear",
                                "utcquartermonth",
                                "utcmonthdate",
                                "utcmonthdatehours",
                                "utcmonthdatehoursminutes",
                                "utcmonthdatehoursminutesseconds",
                                "utcweekday",
                                "utcweeksdayhours",
                                "utcweekdayhoursminutes",
                                "utcweekdayhoursminutesseconds",
                                "utcdayhours",
                                "utcdayhoursminutes",
                                "utcdayhoursminutesseconds",
                                "utchoursminutes",
                                "utchoursminutesseconds",
                                "utcminutesseconds",
                                "utcsecondsmilliseconds",
                            ],
                        ],
                    ],
                    Union[
                        "SingleTimeUnit",
                        Union[
                            "LocalSingleTimeUnit",
                            Literal[
                                "year",
                                "quarter",
                                "month",
                                "week",
                                "day",
                                "dayofyear",
                                "date",
                                "hours",
                                "minutes",
                                "seconds",
                                "milliseconds",
                            ],
                        ],
                        Union[
                            "UtcSingleTimeUnit",
                            Literal[
                                "utcyear",
                                "utcquarter",
                                "utcmonth",
                                "utcweek",
                                "utcday",
                                "utcdayofyear",
                                "utcdate",
                                "utchours",
                                "utcminutes",
                                "utcseconds",
                                "utcmilliseconds",
                            ],
                        ],
                    ],
                ],
                Union["TimeUnitParams", dict],
            ],
            UndefinedType,
        ] = Undefined,
        **kwds
    ):
        super(FieldOneOfPredicate, self).__init__(
            field=field, oneOf=oneOf, timeUnit=timeUnit, **kwds
        )


class FieldRangePredicate(Predicate):
    """FieldRangePredicate schema wrapper

    Union[:class:`FieldRangePredicate`, Dict[required=[field, range]]]

    Parameters
    ----------

    field : Union[:class:`FieldName`, str]
        Field to be tested.
    range : Union[List[Union[None, Union[:class:`DateTime`, Dict[required=[]]], Union[:class:`ExprRef`, Dict[required=[expr]]], float]], Union[:class:`ExprRef`, Dict[required=[expr]]]]
        An array of inclusive minimum and maximum values for a field value of a data item to
        be included in the filtered data.
    timeUnit : Union[Union[:class:`BinnedTimeUnit`, Literal['binnedutcyear', 'binnedutcyearquarter', 'binnedutcyearquartermonth', 'binnedutcyearmonth', 'binnedutcyearmonthdate', 'binnedutcyearmonthdatehours', 'binnedutcyearmonthdatehoursminutes', 'binnedutcyearmonthdatehoursminutesseconds', 'binnedutcyearweek', 'binnedutcyearweekday', 'binnedutcyearweekdayhours', 'binnedutcyearweekdayhoursminutes', 'binnedutcyearweekdayhoursminutesseconds', 'binnedutcyeardayofyear'], Literal['binnedyear', 'binnedyearquarter', 'binnedyearquartermonth', 'binnedyearmonth', 'binnedyearmonthdate', 'binnedyearmonthdatehours', 'binnedyearmonthdatehoursminutes', 'binnedyearmonthdatehoursminutesseconds', 'binnedyearweek', 'binnedyearweekday', 'binnedyearweekdayhours', 'binnedyearweekdayhoursminutes', 'binnedyearweekdayhoursminutesseconds', 'binnedyeardayofyear']], Union[:class:`TimeUnitParams`, Dict[required=[]]], Union[:class:`TimeUnit`, Union[:class:`MultiTimeUnit`, Union[:class:`LocalMultiTimeUnit`, Literal['yearquarter', 'yearquartermonth', 'yearmonth', 'yearmonthdate', 'yearmonthdatehours', 'yearmonthdatehoursminutes', 'yearmonthdatehoursminutesseconds', 'yearweek', 'yearweekday', 'yearweekdayhours', 'yearweekdayhoursminutes', 'yearweekdayhoursminutesseconds', 'yeardayofyear', 'quartermonth', 'monthdate', 'monthdatehours', 'monthdatehoursminutes', 'monthdatehoursminutesseconds', 'weekday', 'weeksdayhours', 'weekdayhoursminutes', 'weekdayhoursminutesseconds', 'dayhours', 'dayhoursminutes', 'dayhoursminutesseconds', 'hoursminutes', 'hoursminutesseconds', 'minutesseconds', 'secondsmilliseconds']], Union[:class:`UtcMultiTimeUnit`, Literal['utcyearquarter', 'utcyearquartermonth', 'utcyearmonth', 'utcyearmonthdate', 'utcyearmonthdatehours', 'utcyearmonthdatehoursminutes', 'utcyearmonthdatehoursminutesseconds', 'utcyearweek', 'utcyearweekday', 'utcyearweekdayhours', 'utcyearweekdayhoursminutes', 'utcyearweekdayhoursminutesseconds', 'utcyeardayofyear', 'utcquartermonth', 'utcmonthdate', 'utcmonthdatehours', 'utcmonthdatehoursminutes', 'utcmonthdatehoursminutesseconds', 'utcweekday', 'utcweeksdayhours', 'utcweekdayhoursminutes', 'utcweekdayhoursminutesseconds', 'utcdayhours', 'utcdayhoursminutes', 'utcdayhoursminutesseconds', 'utchoursminutes', 'utchoursminutesseconds', 'utcminutesseconds', 'utcsecondsmilliseconds']]], Union[:class:`SingleTimeUnit`, Union[:class:`LocalSingleTimeUnit`, Literal['year', 'quarter', 'month', 'week', 'day', 'dayofyear', 'date', 'hours', 'minutes', 'seconds', 'milliseconds']], Union[:class:`UtcSingleTimeUnit`, Literal['utcyear', 'utcquarter', 'utcmonth', 'utcweek', 'utcday', 'utcdayofyear', 'utcdate', 'utchours', 'utcminutes', 'utcseconds', 'utcmilliseconds']]]]]
        Time unit for the field to be tested.
    """

    _schema = {"$ref": "#/definitions/FieldRangePredicate"}

    def __init__(
        self,
        field: Union[Union["FieldName", str], UndefinedType] = Undefined,
        range: Union[
            Union[
                Union["ExprRef", "_ParameterProtocol", dict],
                Union[
                    List[None],
                    List[Union["DateTime", dict]],
                    List[Union["ExprRef", "_ParameterProtocol", dict]],
                    List[float],
                ],
            ],
            UndefinedType,
        ] = Undefined,
        timeUnit: Union[
            Union[
                Union[
                    "BinnedTimeUnit",
                    Literal[
                        "binnedutcyear",
                        "binnedutcyearquarter",
                        "binnedutcyearquartermonth",
                        "binnedutcyearmonth",
                        "binnedutcyearmonthdate",
                        "binnedutcyearmonthdatehours",
                        "binnedutcyearmonthdatehoursminutes",
                        "binnedutcyearmonthdatehoursminutesseconds",
                        "binnedutcyearweek",
                        "binnedutcyearweekday",
                        "binnedutcyearweekdayhours",
                        "binnedutcyearweekdayhoursminutes",
                        "binnedutcyearweekdayhoursminutesseconds",
                        "binnedutcyeardayofyear",
                    ],
                    Literal[
                        "binnedyear",
                        "binnedyearquarter",
                        "binnedyearquartermonth",
                        "binnedyearmonth",
                        "binnedyearmonthdate",
                        "binnedyearmonthdatehours",
                        "binnedyearmonthdatehoursminutes",
                        "binnedyearmonthdatehoursminutesseconds",
                        "binnedyearweek",
                        "binnedyearweekday",
                        "binnedyearweekdayhours",
                        "binnedyearweekdayhoursminutes",
                        "binnedyearweekdayhoursminutesseconds",
                        "binnedyeardayofyear",
                    ],
                ],
                Union[
                    "TimeUnit",
                    Union[
                        "MultiTimeUnit",
                        Union[
                            "LocalMultiTimeUnit",
                            Literal[
                                "yearquarter",
                                "yearquartermonth",
                                "yearmonth",
                                "yearmonthdate",
                                "yearmonthdatehours",
                                "yearmonthdatehoursminutes",
                                "yearmonthdatehoursminutesseconds",
                                "yearweek",
                                "yearweekday",
                                "yearweekdayhours",
                                "yearweekdayhoursminutes",
                                "yearweekdayhoursminutesseconds",
                                "yeardayofyear",
                                "quartermonth",
                                "monthdate",
                                "monthdatehours",
                                "monthdatehoursminutes",
                                "monthdatehoursminutesseconds",
                                "weekday",
                                "weeksdayhours",
                                "weekdayhoursminutes",
                                "weekdayhoursminutesseconds",
                                "dayhours",
                                "dayhoursminutes",
                                "dayhoursminutesseconds",
                                "hoursminutes",
                                "hoursminutesseconds",
                                "minutesseconds",
                                "secondsmilliseconds",
                            ],
                        ],
                        Union[
                            "UtcMultiTimeUnit",
                            Literal[
                                "utcyearquarter",
                                "utcyearquartermonth",
                                "utcyearmonth",
                                "utcyearmonthdate",
                                "utcyearmonthdatehours",
                                "utcyearmonthdatehoursminutes",
                                "utcyearmonthdatehoursminutesseconds",
                                "utcyearweek",
                                "utcyearweekday",
                                "utcyearweekdayhours",
                                "utcyearweekdayhoursminutes",
                                "utcyearweekdayhoursminutesseconds",
                                "utcyeardayofyear",
                                "utcquartermonth",
                                "utcmonthdate",
                                "utcmonthdatehours",
                                "utcmonthdatehoursminutes",
                                "utcmonthdatehoursminutesseconds",
                                "utcweekday",
                                "utcweeksdayhours",
                                "utcweekdayhoursminutes",
                                "utcweekdayhoursminutesseconds",
                                "utcdayhours",
                                "utcdayhoursminutes",
                                "utcdayhoursminutesseconds",
                                "utchoursminutes",
                                "utchoursminutesseconds",
                                "utcminutesseconds",
                                "utcsecondsmilliseconds",
                            ],
                        ],
                    ],
                    Union[
                        "SingleTimeUnit",
                        Union[
                            "LocalSingleTimeUnit",
                            Literal[
                                "year",
                                "quarter",
                                "month",
                                "week",
                                "day",
                                "dayofyear",
                                "date",
                                "hours",
                                "minutes",
                                "seconds",
                                "milliseconds",
                            ],
                        ],
                        Union[
                            "UtcSingleTimeUnit",
                            Literal[
                                "utcyear",
                                "utcquarter",
                                "utcmonth",
                                "utcweek",
                                "utcday",
                                "utcdayofyear",
                                "utcdate",
                                "utchours",
                                "utcminutes",
                                "utcseconds",
                                "utcmilliseconds",
                            ],
                        ],
                    ],
                ],
                Union["TimeUnitParams", dict],
            ],
            UndefinedType,
        ] = Undefined,
        **kwds
    ):
        super(FieldRangePredicate, self).__init__(
            field=field, range=range, timeUnit=timeUnit, **kwds
        )


class FieldValidPredicate(Predicate):
    """FieldValidPredicate schema wrapper

    Union[:class:`FieldValidPredicate`, Dict[required=[field, valid]]]

    Parameters
    ----------

    field : Union[:class:`FieldName`, str]
        Field to be tested.
    valid : bool
        If set to true the field's value has to be valid, meaning both not ``null`` and not
        `NaN
        <https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/NaN>`__.
    timeUnit : Union[Union[:class:`BinnedTimeUnit`, Literal['binnedutcyear', 'binnedutcyearquarter', 'binnedutcyearquartermonth', 'binnedutcyearmonth', 'binnedutcyearmonthdate', 'binnedutcyearmonthdatehours', 'binnedutcyearmonthdatehoursminutes', 'binnedutcyearmonthdatehoursminutesseconds', 'binnedutcyearweek', 'binnedutcyearweekday', 'binnedutcyearweekdayhours', 'binnedutcyearweekdayhoursminutes', 'binnedutcyearweekdayhoursminutesseconds', 'binnedutcyeardayofyear'], Literal['binnedyear', 'binnedyearquarter', 'binnedyearquartermonth', 'binnedyearmonth', 'binnedyearmonthdate', 'binnedyearmonthdatehours', 'binnedyearmonthdatehoursminutes', 'binnedyearmonthdatehoursminutesseconds', 'binnedyearweek', 'binnedyearweekday', 'binnedyearweekdayhours', 'binnedyearweekdayhoursminutes', 'binnedyearweekdayhoursminutesseconds', 'binnedyeardayofyear']], Union[:class:`TimeUnitParams`, Dict[required=[]]], Union[:class:`TimeUnit`, Union[:class:`MultiTimeUnit`, Union[:class:`LocalMultiTimeUnit`, Literal['yearquarter', 'yearquartermonth', 'yearmonth', 'yearmonthdate', 'yearmonthdatehours', 'yearmonthdatehoursminutes', 'yearmonthdatehoursminutesseconds', 'yearweek', 'yearweekday', 'yearweekdayhours', 'yearweekdayhoursminutes', 'yearweekdayhoursminutesseconds', 'yeardayofyear', 'quartermonth', 'monthdate', 'monthdatehours', 'monthdatehoursminutes', 'monthdatehoursminutesseconds', 'weekday', 'weeksdayhours', 'weekdayhoursminutes', 'weekdayhoursminutesseconds', 'dayhours', 'dayhoursminutes', 'dayhoursminutesseconds', 'hoursminutes', 'hoursminutesseconds', 'minutesseconds', 'secondsmilliseconds']], Union[:class:`UtcMultiTimeUnit`, Literal['utcyearquarter', 'utcyearquartermonth', 'utcyearmonth', 'utcyearmonthdate', 'utcyearmonthdatehours', 'utcyearmonthdatehoursminutes', 'utcyearmonthdatehoursminutesseconds', 'utcyearweek', 'utcyearweekday', 'utcyearweekdayhours', 'utcyearweekdayhoursminutes', 'utcyearweekdayhoursminutesseconds', 'utcyeardayofyear', 'utcquartermonth', 'utcmonthdate', 'utcmonthdatehours', 'utcmonthdatehoursminutes', 'utcmonthdatehoursminutesseconds', 'utcweekday', 'utcweeksdayhours', 'utcweekdayhoursminutes', 'utcweekdayhoursminutesseconds', 'utcdayhours', 'utcdayhoursminutes', 'utcdayhoursminutesseconds', 'utchoursminutes', 'utchoursminutesseconds', 'utcminutesseconds', 'utcsecondsmilliseconds']]], Union[:class:`SingleTimeUnit`, Union[:class:`LocalSingleTimeUnit`, Literal['year', 'quarter', 'month', 'week', 'day', 'dayofyear', 'date', 'hours', 'minutes', 'seconds', 'milliseconds']], Union[:class:`UtcSingleTimeUnit`, Literal['utcyear', 'utcquarter', 'utcmonth', 'utcweek', 'utcday', 'utcdayofyear', 'utcdate', 'utchours', 'utcminutes', 'utcseconds', 'utcmilliseconds']]]]]
        Time unit for the field to be tested.
    """

    _schema = {"$ref": "#/definitions/FieldValidPredicate"}

    def __init__(
        self,
        field: Union[Union["FieldName", str], UndefinedType] = Undefined,
        valid: Union[bool, UndefinedType] = Undefined,
        timeUnit: Union[
            Union[
                Union[
                    "BinnedTimeUnit",
                    Literal[
                        "binnedutcyear",
                        "binnedutcyearquarter",
                        "binnedutcyearquartermonth",
                        "binnedutcyearmonth",
                        "binnedutcyearmonthdate",
                        "binnedutcyearmonthdatehours",
                        "binnedutcyearmonthdatehoursminutes",
                        "binnedutcyearmonthdatehoursminutesseconds",
                        "binnedutcyearweek",
                        "binnedutcyearweekday",
                        "binnedutcyearweekdayhours",
                        "binnedutcyearweekdayhoursminutes",
                        "binnedutcyearweekdayhoursminutesseconds",
                        "binnedutcyeardayofyear",
                    ],
                    Literal[
                        "binnedyear",
                        "binnedyearquarter",
                        "binnedyearquartermonth",
                        "binnedyearmonth",
                        "binnedyearmonthdate",
                        "binnedyearmonthdatehours",
                        "binnedyearmonthdatehoursminutes",
                        "binnedyearmonthdatehoursminutesseconds",
                        "binnedyearweek",
                        "binnedyearweekday",
                        "binnedyearweekdayhours",
                        "binnedyearweekdayhoursminutes",
                        "binnedyearweekdayhoursminutesseconds",
                        "binnedyeardayofyear",
                    ],
                ],
                Union[
                    "TimeUnit",
                    Union[
                        "MultiTimeUnit",
                        Union[
                            "LocalMultiTimeUnit",
                            Literal[
                                "yearquarter",
                                "yearquartermonth",
                                "yearmonth",
                                "yearmonthdate",
                                "yearmonthdatehours",
                                "yearmonthdatehoursminutes",
                                "yearmonthdatehoursminutesseconds",
                                "yearweek",
                                "yearweekday",
                                "yearweekdayhours",
                                "yearweekdayhoursminutes",
                                "yearweekdayhoursminutesseconds",
                                "yeardayofyear",
                                "quartermonth",
                                "monthdate",
                                "monthdatehours",
                                "monthdatehoursminutes",
                                "monthdatehoursminutesseconds",
                                "weekday",
                                "weeksdayhours",
                                "weekdayhoursminutes",
                                "weekdayhoursminutesseconds",
                                "dayhours",
                                "dayhoursminutes",
                                "dayhoursminutesseconds",
                                "hoursminutes",
                                "hoursminutesseconds",
                                "minutesseconds",
                                "secondsmilliseconds",
                            ],
                        ],
                        Union[
                            "UtcMultiTimeUnit",
                            Literal[
                                "utcyearquarter",
                                "utcyearquartermonth",
                                "utcyearmonth",
                                "utcyearmonthdate",
                                "utcyearmonthdatehours",
                                "utcyearmonthdatehoursminutes",
                                "utcyearmonthdatehoursminutesseconds",
                                "utcyearweek",
                                "utcyearweekday",
                                "utcyearweekdayhours",
                                "utcyearweekdayhoursminutes",
                                "utcyearweekdayhoursminutesseconds",
                                "utcyeardayofyear",
                                "utcquartermonth",
                                "utcmonthdate",
                                "utcmonthdatehours",
                                "utcmonthdatehoursminutes",
                                "utcmonthdatehoursminutesseconds",
                                "utcweekday",
                                "utcweeksdayhours",
                                "utcweekdayhoursminutes",
                                "utcweekdayhoursminutesseconds",
                                "utcdayhours",
                                "utcdayhoursminutes",
                                "utcdayhoursminutesseconds",
                                "utchoursminutes",
                                "utchoursminutesseconds",
                                "utcminutesseconds",
                                "utcsecondsmilliseconds",
                            ],
                        ],
                    ],
                    Union[
                        "SingleTimeUnit",
                        Union[
                            "LocalSingleTimeUnit",
                            Literal[
                                "year",
                                "quarter",
                                "month",
                                "week",
                                "day",
                                "dayofyear",
                                "date",
                                "hours",
                                "minutes",
                                "seconds",
                                "milliseconds",
                            ],
                        ],
                        Union[
                            "UtcSingleTimeUnit",
                            Literal[
                                "utcyear",
                                "utcquarter",
                                "utcmonth",
                                "utcweek",
                                "utcday",
                                "utcdayofyear",
                                "utcdate",
                                "utchours",
                                "utcminutes",
                                "utcseconds",
                                "utcmilliseconds",
                            ],
                        ],
                    ],
                ],
                Union["TimeUnitParams", dict],
            ],
            UndefinedType,
        ] = Undefined,
        **kwds
    ):
        super(FieldValidPredicate, self).__init__(
            field=field, valid=valid, timeUnit=timeUnit, **kwds
        )


class ParameterPredicate(Predicate):
    """ParameterPredicate schema wrapper

    Union[:class:`ParameterPredicate`, Dict[required=[param]]]

    Parameters
    ----------

    param : Union[:class:`ParameterName`, str]
        Filter using a parameter name.
    empty : bool
        For selection parameters, the predicate of empty selections returns true by default.
        Override this behavior, by setting this property ``empty: false``.
    """

    _schema = {"$ref": "#/definitions/ParameterPredicate"}

    def __init__(
        self,
        param: Union[Union["ParameterName", str], UndefinedType] = Undefined,
        empty: Union[bool, UndefinedType] = Undefined,
        **kwds
    ):
        super(ParameterPredicate, self).__init__(param=param, empty=empty, **kwds)


class Projection(VegaLiteSchema):
    """Projection schema wrapper

    Union[:class:`Projection`, Dict[required=[]]]

    Parameters
    ----------

    center : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], Union[:class:`Vector2number`, List[float]]]
        The projection's center, a two-element array of longitude and latitude in degrees.

        **Default value:** ``[0, 0]``
    clipAngle : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], float]
        The projection's clipping circle radius to the specified angle in degrees. If
        ``null``, switches to `antimeridian <http://bl.ocks.org/mbostock/3788999>`__ cutting
        rather than small-circle clipping.
    clipExtent : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], Union[:class:`Vector2Vector2number`, List[Union[:class:`Vector2number`, List[float]]]]]
        The projection's viewport clip extent to the specified bounds in pixels. The extent
        bounds are specified as an array ``[[x0, y0], [x1, y1]]``, where ``x0`` is the
        left-side of the viewport, ``y0`` is the top, ``x1`` is the right and ``y1`` is the
        bottom. If ``null``, no viewport clipping is performed.
    coefficient : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], float]
        The coefficient parameter for the ``hammer`` projection.

        **Default value:** ``2``
    distance : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], float]
        For the ``satellite`` projection, the distance from the center of the sphere to the
        point of view, as a proportion of the sphere’s radius. The recommended maximum clip
        angle for a given ``distance`` is acos(1 / distance) converted to degrees. If tilt
        is also applied, then more conservative clipping may be necessary.

        **Default value:** ``2.0``
    extent : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], Union[:class:`Vector2Vector2number`, List[Union[:class:`Vector2number`, List[float]]]]]

    fit : Union[List[Union[:class:`Fit`, List[Union[:class:`GeoJsonFeature`, Dict[required=[geometry, properties, type]]]], Union[:class:`GeoJsonFeatureCollection`, Dict[required=[features, type]]], Union[:class:`GeoJsonFeature`, Dict[required=[geometry, properties, type]]]]], Union[:class:`ExprRef`, Dict[required=[expr]]], Union[:class:`Fit`, List[Union[:class:`GeoJsonFeature`, Dict[required=[geometry, properties, type]]]], Union[:class:`GeoJsonFeatureCollection`, Dict[required=[features, type]]], Union[:class:`GeoJsonFeature`, Dict[required=[geometry, properties, type]]]]]

    fraction : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], float]
        The fraction parameter for the ``bottomley`` projection.

        **Default value:** ``0.5``, corresponding to a sin(ψ) where ψ = π/6.
    lobes : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], float]
        The number of lobes in projections that support multi-lobe views: ``berghaus``,
        ``gingery``, or ``healpix``. The default value varies based on the projection type.
    parallel : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], float]
        The parallel parameter for projections that support it: ``armadillo``, ``bonne``,
        ``craig``, ``cylindricalEqualArea``, ``cylindricalStereographic``,
        ``hammerRetroazimuthal``, ``loximuthal``, or ``rectangularPolyconic``. The default
        value varies based on the projection type.
    parallels : Union[List[float], Union[:class:`ExprRef`, Dict[required=[expr]]]]
        For conic projections, the `two standard parallels
        <https://en.wikipedia.org/wiki/Map_projection#Conic>`__ that define the map layout.
        The default depends on the specific conic projection used.
    pointRadius : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], float]
        The default radius (in pixels) to use when drawing GeoJSON ``Point`` and
        ``MultiPoint`` geometries. This parameter sets a constant default value. To modify
        the point radius in response to data, see the corresponding parameter of the GeoPath
        and GeoShape transforms.

        **Default value:** ``4.5``
    precision : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], float]
        The threshold for the projection's `adaptive resampling
        <http://bl.ocks.org/mbostock/3795544>`__ to the specified value in pixels. This
        value corresponds to the `Douglas–Peucker distance
        <http://en.wikipedia.org/wiki/Ramer%E2%80%93Douglas%E2%80%93Peucker_algorithm>`__.
        If precision is not specified, returns the projection's current resampling precision
        which defaults to ``√0.5 ≅ 0.70710…``.
    radius : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], float]
        The radius parameter for the ``airy`` or ``gingery`` projection. The default value
        varies based on the projection type.
    ratio : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], float]
        The ratio parameter for the ``hill``, ``hufnagel``, or ``wagner`` projections. The
        default value varies based on the projection type.
    reflectX : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], bool]
        Sets whether or not the x-dimension is reflected (negated) in the output.
    reflectY : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], bool]
        Sets whether or not the y-dimension is reflected (negated) in the output.
    rotate : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], Union[Union[:class:`Vector2number`, List[float]], Union[:class:`Vector3number`, List[float]]]]
        The projection's three-axis rotation to the specified angles, which must be a two-
        or three-element array of numbers [ ``lambda``, ``phi``, ``gamma`` ] specifying the
        rotation angles in degrees about each spherical axis. (These correspond to yaw,
        pitch and roll.)

        **Default value:** ``[0, 0, 0]``
    scale : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], float]
        The projection’s scale (zoom) factor, overriding automatic fitting. The default
        scale is projection-specific. The scale factor corresponds linearly to the distance
        between projected points; however, scale factor values are not equivalent across
        projections.
    size : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], Union[:class:`Vector2number`, List[float]]]
        Used in conjunction with fit, provides the width and height in pixels of the area to
        which the projection should be automatically fit.
    spacing : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], float]
        The spacing parameter for the ``lagrange`` projection.

        **Default value:** ``0.5``
    tilt : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], float]
        The tilt angle (in degrees) for the ``satellite`` projection.

        **Default value:** ``0``.
    translate : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], Union[:class:`Vector2number`, List[float]]]
        The projection’s translation offset as a two-element array ``[tx, ty]``.
    type : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], Union[:class:`ProjectionType`, Literal['albers', 'albersUsa', 'azimuthalEqualArea', 'azimuthalEquidistant', 'conicConformal', 'conicEqualArea', 'conicEquidistant', 'equalEarth', 'equirectangular', 'gnomonic', 'identity', 'mercator', 'naturalEarth1', 'orthographic', 'stereographic', 'transverseMercator']]]
        The cartographic projection to use. This value is case-insensitive, for example
        ``"albers"`` and ``"Albers"`` indicate the same projection type. You can find all
        valid projection types `in the documentation
        <https://vega.github.io/vega-lite/docs/projection.html#projection-types>`__.

        **Default value:** ``equalEarth``
    """

    _schema = {"$ref": "#/definitions/Projection"}

    def __init__(
        self,
        center: Union[
            Union[
                Union["ExprRef", "_ParameterProtocol", dict],
                Union["Vector2number", List[float]],
            ],
            UndefinedType,
        ] = Undefined,
        clipAngle: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], float], UndefinedType
        ] = Undefined,
        clipExtent: Union[
            Union[
                Union["ExprRef", "_ParameterProtocol", dict],
                Union["Vector2Vector2number", List["Vector2number"], List[List[float]]],
            ],
            UndefinedType,
        ] = Undefined,
        coefficient: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], float], UndefinedType
        ] = Undefined,
        distance: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], float], UndefinedType
        ] = Undefined,
        extent: Union[
            Union[
                Union["ExprRef", "_ParameterProtocol", dict],
                Union["Vector2Vector2number", List["Vector2number"], List[List[float]]],
            ],
            UndefinedType,
        ] = Undefined,
        fit: Union[
            Union[
                Union["ExprRef", "_ParameterProtocol", dict],
                Union[
                    "Fit",
                    Union["GeoJsonFeature", dict],
                    Union["GeoJsonFeatureCollection", dict],
                    Union[List["GeoJsonFeature"], List[dict]],
                ],
                Union[
                    List["Fit"],
                    List[Union["GeoJsonFeature", dict]],
                    List[Union["GeoJsonFeatureCollection", dict]],
                    List[Union[List["GeoJsonFeature"], List[dict]]],
                ],
            ],
            UndefinedType,
        ] = Undefined,
        fraction: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], float], UndefinedType
        ] = Undefined,
        lobes: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], float], UndefinedType
        ] = Undefined,
        parallel: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], float], UndefinedType
        ] = Undefined,
        parallels: Union[
            Union[List[float], Union["ExprRef", "_ParameterProtocol", dict]],
            UndefinedType,
        ] = Undefined,
        pointRadius: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], float], UndefinedType
        ] = Undefined,
        precision: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], float], UndefinedType
        ] = Undefined,
        radius: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], float], UndefinedType
        ] = Undefined,
        ratio: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], float], UndefinedType
        ] = Undefined,
        reflectX: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], bool], UndefinedType
        ] = Undefined,
        reflectY: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], bool], UndefinedType
        ] = Undefined,
        rotate: Union[
            Union[
                Union["ExprRef", "_ParameterProtocol", dict],
                Union[
                    Union["Vector2number", List[float]],
                    Union["Vector3number", List[float]],
                ],
            ],
            UndefinedType,
        ] = Undefined,
        scale: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], float], UndefinedType
        ] = Undefined,
        size: Union[
            Union[
                Union["ExprRef", "_ParameterProtocol", dict],
                Union["Vector2number", List[float]],
            ],
            UndefinedType,
        ] = Undefined,
        spacing: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], float], UndefinedType
        ] = Undefined,
        tilt: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], float], UndefinedType
        ] = Undefined,
        translate: Union[
            Union[
                Union["ExprRef", "_ParameterProtocol", dict],
                Union["Vector2number", List[float]],
            ],
            UndefinedType,
        ] = Undefined,
        type: Union[
            Union[
                Union["ExprRef", "_ParameterProtocol", dict],
                Union[
                    "ProjectionType",
                    Literal[
                        "albers",
                        "albersUsa",
                        "azimuthalEqualArea",
                        "azimuthalEquidistant",
                        "conicConformal",
                        "conicEqualArea",
                        "conicEquidistant",
                        "equalEarth",
                        "equirectangular",
                        "gnomonic",
                        "identity",
                        "mercator",
                        "naturalEarth1",
                        "orthographic",
                        "stereographic",
                        "transverseMercator",
                    ],
                ],
            ],
            UndefinedType,
        ] = Undefined,
        **kwds
    ):
        super(Projection, self).__init__(
            center=center,
            clipAngle=clipAngle,
            clipExtent=clipExtent,
            coefficient=coefficient,
            distance=distance,
            extent=extent,
            fit=fit,
            fraction=fraction,
            lobes=lobes,
            parallel=parallel,
            parallels=parallels,
            pointRadius=pointRadius,
            precision=precision,
            radius=radius,
            ratio=ratio,
            reflectX=reflectX,
            reflectY=reflectY,
            rotate=rotate,
            scale=scale,
            size=size,
            spacing=spacing,
            tilt=tilt,
            translate=translate,
            type=type,
            **kwds
        )


class ProjectionConfig(VegaLiteSchema):
    """ProjectionConfig schema wrapper

    Union[:class:`ProjectionConfig`, Dict[required=[]]]

    Parameters
    ----------

    center : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], Union[:class:`Vector2number`, List[float]]]
        The projection's center, a two-element array of longitude and latitude in degrees.

        **Default value:** ``[0, 0]``
    clipAngle : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], float]
        The projection's clipping circle radius to the specified angle in degrees. If
        ``null``, switches to `antimeridian <http://bl.ocks.org/mbostock/3788999>`__ cutting
        rather than small-circle clipping.
    clipExtent : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], Union[:class:`Vector2Vector2number`, List[Union[:class:`Vector2number`, List[float]]]]]
        The projection's viewport clip extent to the specified bounds in pixels. The extent
        bounds are specified as an array ``[[x0, y0], [x1, y1]]``, where ``x0`` is the
        left-side of the viewport, ``y0`` is the top, ``x1`` is the right and ``y1`` is the
        bottom. If ``null``, no viewport clipping is performed.
    coefficient : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], float]
        The coefficient parameter for the ``hammer`` projection.

        **Default value:** ``2``
    distance : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], float]
        For the ``satellite`` projection, the distance from the center of the sphere to the
        point of view, as a proportion of the sphere’s radius. The recommended maximum clip
        angle for a given ``distance`` is acos(1 / distance) converted to degrees. If tilt
        is also applied, then more conservative clipping may be necessary.

        **Default value:** ``2.0``
    extent : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], Union[:class:`Vector2Vector2number`, List[Union[:class:`Vector2number`, List[float]]]]]

    fit : Union[List[Union[:class:`Fit`, List[Union[:class:`GeoJsonFeature`, Dict[required=[geometry, properties, type]]]], Union[:class:`GeoJsonFeatureCollection`, Dict[required=[features, type]]], Union[:class:`GeoJsonFeature`, Dict[required=[geometry, properties, type]]]]], Union[:class:`ExprRef`, Dict[required=[expr]]], Union[:class:`Fit`, List[Union[:class:`GeoJsonFeature`, Dict[required=[geometry, properties, type]]]], Union[:class:`GeoJsonFeatureCollection`, Dict[required=[features, type]]], Union[:class:`GeoJsonFeature`, Dict[required=[geometry, properties, type]]]]]

    fraction : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], float]
        The fraction parameter for the ``bottomley`` projection.

        **Default value:** ``0.5``, corresponding to a sin(ψ) where ψ = π/6.
    lobes : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], float]
        The number of lobes in projections that support multi-lobe views: ``berghaus``,
        ``gingery``, or ``healpix``. The default value varies based on the projection type.
    parallel : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], float]
        The parallel parameter for projections that support it: ``armadillo``, ``bonne``,
        ``craig``, ``cylindricalEqualArea``, ``cylindricalStereographic``,
        ``hammerRetroazimuthal``, ``loximuthal``, or ``rectangularPolyconic``. The default
        value varies based on the projection type.
    parallels : Union[List[float], Union[:class:`ExprRef`, Dict[required=[expr]]]]
        For conic projections, the `two standard parallels
        <https://en.wikipedia.org/wiki/Map_projection#Conic>`__ that define the map layout.
        The default depends on the specific conic projection used.
    pointRadius : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], float]
        The default radius (in pixels) to use when drawing GeoJSON ``Point`` and
        ``MultiPoint`` geometries. This parameter sets a constant default value. To modify
        the point radius in response to data, see the corresponding parameter of the GeoPath
        and GeoShape transforms.

        **Default value:** ``4.5``
    precision : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], float]
        The threshold for the projection's `adaptive resampling
        <http://bl.ocks.org/mbostock/3795544>`__ to the specified value in pixels. This
        value corresponds to the `Douglas–Peucker distance
        <http://en.wikipedia.org/wiki/Ramer%E2%80%93Douglas%E2%80%93Peucker_algorithm>`__.
        If precision is not specified, returns the projection's current resampling precision
        which defaults to ``√0.5 ≅ 0.70710…``.
    radius : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], float]
        The radius parameter for the ``airy`` or ``gingery`` projection. The default value
        varies based on the projection type.
    ratio : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], float]
        The ratio parameter for the ``hill``, ``hufnagel``, or ``wagner`` projections. The
        default value varies based on the projection type.
    reflectX : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], bool]
        Sets whether or not the x-dimension is reflected (negated) in the output.
    reflectY : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], bool]
        Sets whether or not the y-dimension is reflected (negated) in the output.
    rotate : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], Union[Union[:class:`Vector2number`, List[float]], Union[:class:`Vector3number`, List[float]]]]
        The projection's three-axis rotation to the specified angles, which must be a two-
        or three-element array of numbers [ ``lambda``, ``phi``, ``gamma`` ] specifying the
        rotation angles in degrees about each spherical axis. (These correspond to yaw,
        pitch and roll.)

        **Default value:** ``[0, 0, 0]``
    scale : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], float]
        The projection’s scale (zoom) factor, overriding automatic fitting. The default
        scale is projection-specific. The scale factor corresponds linearly to the distance
        between projected points; however, scale factor values are not equivalent across
        projections.
    size : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], Union[:class:`Vector2number`, List[float]]]
        Used in conjunction with fit, provides the width and height in pixels of the area to
        which the projection should be automatically fit.
    spacing : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], float]
        The spacing parameter for the ``lagrange`` projection.

        **Default value:** ``0.5``
    tilt : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], float]
        The tilt angle (in degrees) for the ``satellite`` projection.

        **Default value:** ``0``.
    translate : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], Union[:class:`Vector2number`, List[float]]]
        The projection’s translation offset as a two-element array ``[tx, ty]``.
    type : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], Union[:class:`ProjectionType`, Literal['albers', 'albersUsa', 'azimuthalEqualArea', 'azimuthalEquidistant', 'conicConformal', 'conicEqualArea', 'conicEquidistant', 'equalEarth', 'equirectangular', 'gnomonic', 'identity', 'mercator', 'naturalEarth1', 'orthographic', 'stereographic', 'transverseMercator']]]
        The cartographic projection to use. This value is case-insensitive, for example
        ``"albers"`` and ``"Albers"`` indicate the same projection type. You can find all
        valid projection types `in the documentation
        <https://vega.github.io/vega-lite/docs/projection.html#projection-types>`__.

        **Default value:** ``equalEarth``
    """

    _schema = {"$ref": "#/definitions/ProjectionConfig"}

    def __init__(
        self,
        center: Union[
            Union[
                Union["ExprRef", "_ParameterProtocol", dict],
                Union["Vector2number", List[float]],
            ],
            UndefinedType,
        ] = Undefined,
        clipAngle: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], float], UndefinedType
        ] = Undefined,
        clipExtent: Union[
            Union[
                Union["ExprRef", "_ParameterProtocol", dict],
                Union["Vector2Vector2number", List["Vector2number"], List[List[float]]],
            ],
            UndefinedType,
        ] = Undefined,
        coefficient: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], float], UndefinedType
        ] = Undefined,
        distance: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], float], UndefinedType
        ] = Undefined,
        extent: Union[
            Union[
                Union["ExprRef", "_ParameterProtocol", dict],
                Union["Vector2Vector2number", List["Vector2number"], List[List[float]]],
            ],
            UndefinedType,
        ] = Undefined,
        fit: Union[
            Union[
                Union["ExprRef", "_ParameterProtocol", dict],
                Union[
                    "Fit",
                    Union["GeoJsonFeature", dict],
                    Union["GeoJsonFeatureCollection", dict],
                    Union[List["GeoJsonFeature"], List[dict]],
                ],
                Union[
                    List["Fit"],
                    List[Union["GeoJsonFeature", dict]],
                    List[Union["GeoJsonFeatureCollection", dict]],
                    List[Union[List["GeoJsonFeature"], List[dict]]],
                ],
            ],
            UndefinedType,
        ] = Undefined,
        fraction: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], float], UndefinedType
        ] = Undefined,
        lobes: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], float], UndefinedType
        ] = Undefined,
        parallel: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], float], UndefinedType
        ] = Undefined,
        parallels: Union[
            Union[List[float], Union["ExprRef", "_ParameterProtocol", dict]],
            UndefinedType,
        ] = Undefined,
        pointRadius: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], float], UndefinedType
        ] = Undefined,
        precision: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], float], UndefinedType
        ] = Undefined,
        radius: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], float], UndefinedType
        ] = Undefined,
        ratio: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], float], UndefinedType
        ] = Undefined,
        reflectX: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], bool], UndefinedType
        ] = Undefined,
        reflectY: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], bool], UndefinedType
        ] = Undefined,
        rotate: Union[
            Union[
                Union["ExprRef", "_ParameterProtocol", dict],
                Union[
                    Union["Vector2number", List[float]],
                    Union["Vector3number", List[float]],
                ],
            ],
            UndefinedType,
        ] = Undefined,
        scale: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], float], UndefinedType
        ] = Undefined,
        size: Union[
            Union[
                Union["ExprRef", "_ParameterProtocol", dict],
                Union["Vector2number", List[float]],
            ],
            UndefinedType,
        ] = Undefined,
        spacing: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], float], UndefinedType
        ] = Undefined,
        tilt: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], float], UndefinedType
        ] = Undefined,
        translate: Union[
            Union[
                Union["ExprRef", "_ParameterProtocol", dict],
                Union["Vector2number", List[float]],
            ],
            UndefinedType,
        ] = Undefined,
        type: Union[
            Union[
                Union["ExprRef", "_ParameterProtocol", dict],
                Union[
                    "ProjectionType",
                    Literal[
                        "albers",
                        "albersUsa",
                        "azimuthalEqualArea",
                        "azimuthalEquidistant",
                        "conicConformal",
                        "conicEqualArea",
                        "conicEquidistant",
                        "equalEarth",
                        "equirectangular",
                        "gnomonic",
                        "identity",
                        "mercator",
                        "naturalEarth1",
                        "orthographic",
                        "stereographic",
                        "transverseMercator",
                    ],
                ],
            ],
            UndefinedType,
        ] = Undefined,
        **kwds
    ):
        super(ProjectionConfig, self).__init__(
            center=center,
            clipAngle=clipAngle,
            clipExtent=clipExtent,
            coefficient=coefficient,
            distance=distance,
            extent=extent,
            fit=fit,
            fraction=fraction,
            lobes=lobes,
            parallel=parallel,
            parallels=parallels,
            pointRadius=pointRadius,
            precision=precision,
            radius=radius,
            ratio=ratio,
            reflectX=reflectX,
            reflectY=reflectY,
            rotate=rotate,
            scale=scale,
            size=size,
            spacing=spacing,
            tilt=tilt,
            translate=translate,
            type=type,
            **kwds
        )


class ProjectionType(VegaLiteSchema):
    """ProjectionType schema wrapper

    Union[:class:`ProjectionType`, Literal['albers', 'albersUsa', 'azimuthalEqualArea',
    'azimuthalEquidistant', 'conicConformal', 'conicEqualArea', 'conicEquidistant',
    'equalEarth', 'equirectangular', 'gnomonic', 'identity', 'mercator', 'naturalEarth1',
    'orthographic', 'stereographic', 'transverseMercator']]
    """

    _schema = {"$ref": "#/definitions/ProjectionType"}

    def __init__(self, *args):
        super(ProjectionType, self).__init__(*args)


class RadialGradient(Gradient):
    """RadialGradient schema wrapper

    Union[:class:`RadialGradient`, Dict[required=[gradient, stops]]]

    Parameters
    ----------

    gradient : str
        The type of gradient. Use ``"radial"`` for a radial gradient.
    stops : List[Union[:class:`GradientStop`, Dict[required=[offset, color]]]]
        An array of gradient stops defining the gradient color sequence.
    id : str

    r1 : float
        The radius length, in normalized [0, 1] coordinates, of the inner circle for the
        gradient.

        **Default value:** ``0``
    r2 : float
        The radius length, in normalized [0, 1] coordinates, of the outer circle for the
        gradient.

        **Default value:** ``0.5``
    x1 : float
        The x-coordinate, in normalized [0, 1] coordinates, for the center of the inner
        circle for the gradient.

        **Default value:** ``0.5``
    x2 : float
        The x-coordinate, in normalized [0, 1] coordinates, for the center of the outer
        circle for the gradient.

        **Default value:** ``0.5``
    y1 : float
        The y-coordinate, in normalized [0, 1] coordinates, for the center of the inner
        circle for the gradient.

        **Default value:** ``0.5``
    y2 : float
        The y-coordinate, in normalized [0, 1] coordinates, for the center of the outer
        circle for the gradient.

        **Default value:** ``0.5``
    """

    _schema = {"$ref": "#/definitions/RadialGradient"}

    def __init__(
        self,
        gradient: Union[str, UndefinedType] = Undefined,
        stops: Union[
            Union[List["GradientStop"], List[dict]], UndefinedType
        ] = Undefined,
        id: Union[str, UndefinedType] = Undefined,
        r1: Union[float, UndefinedType] = Undefined,
        r2: Union[float, UndefinedType] = Undefined,
        x1: Union[float, UndefinedType] = Undefined,
        x2: Union[float, UndefinedType] = Undefined,
        y1: Union[float, UndefinedType] = Undefined,
        y2: Union[float, UndefinedType] = Undefined,
        **kwds
    ):
        super(RadialGradient, self).__init__(
            gradient=gradient,
            stops=stops,
            id=id,
            r1=r1,
            r2=r2,
            x1=x1,
            x2=x2,
            y1=y1,
            y2=y2,
            **kwds
        )


class RangeConfig(VegaLiteSchema):
    """RangeConfig schema wrapper

    Union[:class:`RangeConfig`, Dict[required=[]]]

    Parameters
    ----------

    category : Union[List[Union[:class:`Color`, Union[:class:`ColorName`, Literal['black', 'silver', 'gray', 'white', 'maroon', 'red', 'purple', 'fuchsia', 'green', 'lime', 'olive', 'yellow', 'navy', 'blue', 'teal', 'aqua', 'orange', 'aliceblue', 'antiquewhite', 'aquamarine', 'azure', 'beige', 'bisque', 'blanchedalmond', 'blueviolet', 'brown', 'burlywood', 'cadetblue', 'chartreuse', 'chocolate', 'coral', 'cornflowerblue', 'cornsilk', 'crimson', 'cyan', 'darkblue', 'darkcyan', 'darkgoldenrod', 'darkgray', 'darkgreen', 'darkgrey', 'darkkhaki', 'darkmagenta', 'darkolivegreen', 'darkorange', 'darkorchid', 'darkred', 'darksalmon', 'darkseagreen', 'darkslateblue', 'darkslategray', 'darkslategrey', 'darkturquoise', 'darkviolet', 'deeppink', 'deepskyblue', 'dimgray', 'dimgrey', 'dodgerblue', 'firebrick', 'floralwhite', 'forestgreen', 'gainsboro', 'ghostwhite', 'gold', 'goldenrod', 'greenyellow', 'grey', 'honeydew', 'hotpink', 'indianred', 'indigo', 'ivory', 'khaki', 'lavender', 'lavenderblush', 'lawngreen', 'lemonchiffon', 'lightblue', 'lightcoral', 'lightcyan', 'lightgoldenrodyellow', 'lightgray', 'lightgreen', 'lightgrey', 'lightpink', 'lightsalmon', 'lightseagreen', 'lightskyblue', 'lightslategray', 'lightslategrey', 'lightsteelblue', 'lightyellow', 'limegreen', 'linen', 'magenta', 'mediumaquamarine', 'mediumblue', 'mediumorchid', 'mediumpurple', 'mediumseagreen', 'mediumslateblue', 'mediumspringgreen', 'mediumturquoise', 'mediumvioletred', 'midnightblue', 'mintcream', 'mistyrose', 'moccasin', 'navajowhite', 'oldlace', 'olivedrab', 'orangered', 'orchid', 'palegoldenrod', 'palegreen', 'paleturquoise', 'palevioletred', 'papayawhip', 'peachpuff', 'peru', 'pink', 'plum', 'powderblue', 'rosybrown', 'royalblue', 'saddlebrown', 'salmon', 'sandybrown', 'seagreen', 'seashell', 'sienna', 'skyblue', 'slateblue', 'slategray', 'slategrey', 'snow', 'springgreen', 'steelblue', 'tan', 'thistle', 'tomato', 'turquoise', 'violet', 'wheat', 'whitesmoke', 'yellowgreen', 'rebeccapurple']], Union[:class:`HexColor`, str], str]], Union[:class:`RangeScheme`, Dict[required=[scheme]], Union[:class:`RangeEnum`, Literal['width', 'height', 'symbol', 'category', 'ordinal', 'ramp', 'diverging', 'heatmap']], Union[:class:`RangeRaw`, List[Union[None, Union[:class:`RangeRawArray`, List[float]], bool, float, str]]]]]
        Default `color scheme <https://vega.github.io/vega/docs/schemes/>`__ for categorical
        data.
    diverging : Union[List[Union[:class:`Color`, Union[:class:`ColorName`, Literal['black', 'silver', 'gray', 'white', 'maroon', 'red', 'purple', 'fuchsia', 'green', 'lime', 'olive', 'yellow', 'navy', 'blue', 'teal', 'aqua', 'orange', 'aliceblue', 'antiquewhite', 'aquamarine', 'azure', 'beige', 'bisque', 'blanchedalmond', 'blueviolet', 'brown', 'burlywood', 'cadetblue', 'chartreuse', 'chocolate', 'coral', 'cornflowerblue', 'cornsilk', 'crimson', 'cyan', 'darkblue', 'darkcyan', 'darkgoldenrod', 'darkgray', 'darkgreen', 'darkgrey', 'darkkhaki', 'darkmagenta', 'darkolivegreen', 'darkorange', 'darkorchid', 'darkred', 'darksalmon', 'darkseagreen', 'darkslateblue', 'darkslategray', 'darkslategrey', 'darkturquoise', 'darkviolet', 'deeppink', 'deepskyblue', 'dimgray', 'dimgrey', 'dodgerblue', 'firebrick', 'floralwhite', 'forestgreen', 'gainsboro', 'ghostwhite', 'gold', 'goldenrod', 'greenyellow', 'grey', 'honeydew', 'hotpink', 'indianred', 'indigo', 'ivory', 'khaki', 'lavender', 'lavenderblush', 'lawngreen', 'lemonchiffon', 'lightblue', 'lightcoral', 'lightcyan', 'lightgoldenrodyellow', 'lightgray', 'lightgreen', 'lightgrey', 'lightpink', 'lightsalmon', 'lightseagreen', 'lightskyblue', 'lightslategray', 'lightslategrey', 'lightsteelblue', 'lightyellow', 'limegreen', 'linen', 'magenta', 'mediumaquamarine', 'mediumblue', 'mediumorchid', 'mediumpurple', 'mediumseagreen', 'mediumslateblue', 'mediumspringgreen', 'mediumturquoise', 'mediumvioletred', 'midnightblue', 'mintcream', 'mistyrose', 'moccasin', 'navajowhite', 'oldlace', 'olivedrab', 'orangered', 'orchid', 'palegoldenrod', 'palegreen', 'paleturquoise', 'palevioletred', 'papayawhip', 'peachpuff', 'peru', 'pink', 'plum', 'powderblue', 'rosybrown', 'royalblue', 'saddlebrown', 'salmon', 'sandybrown', 'seagreen', 'seashell', 'sienna', 'skyblue', 'slateblue', 'slategray', 'slategrey', 'snow', 'springgreen', 'steelblue', 'tan', 'thistle', 'tomato', 'turquoise', 'violet', 'wheat', 'whitesmoke', 'yellowgreen', 'rebeccapurple']], Union[:class:`HexColor`, str], str]], Union[:class:`RangeScheme`, Dict[required=[scheme]], Union[:class:`RangeEnum`, Literal['width', 'height', 'symbol', 'category', 'ordinal', 'ramp', 'diverging', 'heatmap']], Union[:class:`RangeRaw`, List[Union[None, Union[:class:`RangeRawArray`, List[float]], bool, float, str]]]]]
        Default `color scheme <https://vega.github.io/vega/docs/schemes/>`__ for diverging
        quantitative ramps.
    heatmap : Union[List[Union[:class:`Color`, Union[:class:`ColorName`, Literal['black', 'silver', 'gray', 'white', 'maroon', 'red', 'purple', 'fuchsia', 'green', 'lime', 'olive', 'yellow', 'navy', 'blue', 'teal', 'aqua', 'orange', 'aliceblue', 'antiquewhite', 'aquamarine', 'azure', 'beige', 'bisque', 'blanchedalmond', 'blueviolet', 'brown', 'burlywood', 'cadetblue', 'chartreuse', 'chocolate', 'coral', 'cornflowerblue', 'cornsilk', 'crimson', 'cyan', 'darkblue', 'darkcyan', 'darkgoldenrod', 'darkgray', 'darkgreen', 'darkgrey', 'darkkhaki', 'darkmagenta', 'darkolivegreen', 'darkorange', 'darkorchid', 'darkred', 'darksalmon', 'darkseagreen', 'darkslateblue', 'darkslategray', 'darkslategrey', 'darkturquoise', 'darkviolet', 'deeppink', 'deepskyblue', 'dimgray', 'dimgrey', 'dodgerblue', 'firebrick', 'floralwhite', 'forestgreen', 'gainsboro', 'ghostwhite', 'gold', 'goldenrod', 'greenyellow', 'grey', 'honeydew', 'hotpink', 'indianred', 'indigo', 'ivory', 'khaki', 'lavender', 'lavenderblush', 'lawngreen', 'lemonchiffon', 'lightblue', 'lightcoral', 'lightcyan', 'lightgoldenrodyellow', 'lightgray', 'lightgreen', 'lightgrey', 'lightpink', 'lightsalmon', 'lightseagreen', 'lightskyblue', 'lightslategray', 'lightslategrey', 'lightsteelblue', 'lightyellow', 'limegreen', 'linen', 'magenta', 'mediumaquamarine', 'mediumblue', 'mediumorchid', 'mediumpurple', 'mediumseagreen', 'mediumslateblue', 'mediumspringgreen', 'mediumturquoise', 'mediumvioletred', 'midnightblue', 'mintcream', 'mistyrose', 'moccasin', 'navajowhite', 'oldlace', 'olivedrab', 'orangered', 'orchid', 'palegoldenrod', 'palegreen', 'paleturquoise', 'palevioletred', 'papayawhip', 'peachpuff', 'peru', 'pink', 'plum', 'powderblue', 'rosybrown', 'royalblue', 'saddlebrown', 'salmon', 'sandybrown', 'seagreen', 'seashell', 'sienna', 'skyblue', 'slateblue', 'slategray', 'slategrey', 'snow', 'springgreen', 'steelblue', 'tan', 'thistle', 'tomato', 'turquoise', 'violet', 'wheat', 'whitesmoke', 'yellowgreen', 'rebeccapurple']], Union[:class:`HexColor`, str], str]], Union[:class:`RangeScheme`, Dict[required=[scheme]], Union[:class:`RangeEnum`, Literal['width', 'height', 'symbol', 'category', 'ordinal', 'ramp', 'diverging', 'heatmap']], Union[:class:`RangeRaw`, List[Union[None, Union[:class:`RangeRawArray`, List[float]], bool, float, str]]]]]
        Default `color scheme <https://vega.github.io/vega/docs/schemes/>`__ for
        quantitative heatmaps.
    ordinal : Union[List[Union[:class:`Color`, Union[:class:`ColorName`, Literal['black', 'silver', 'gray', 'white', 'maroon', 'red', 'purple', 'fuchsia', 'green', 'lime', 'olive', 'yellow', 'navy', 'blue', 'teal', 'aqua', 'orange', 'aliceblue', 'antiquewhite', 'aquamarine', 'azure', 'beige', 'bisque', 'blanchedalmond', 'blueviolet', 'brown', 'burlywood', 'cadetblue', 'chartreuse', 'chocolate', 'coral', 'cornflowerblue', 'cornsilk', 'crimson', 'cyan', 'darkblue', 'darkcyan', 'darkgoldenrod', 'darkgray', 'darkgreen', 'darkgrey', 'darkkhaki', 'darkmagenta', 'darkolivegreen', 'darkorange', 'darkorchid', 'darkred', 'darksalmon', 'darkseagreen', 'darkslateblue', 'darkslategray', 'darkslategrey', 'darkturquoise', 'darkviolet', 'deeppink', 'deepskyblue', 'dimgray', 'dimgrey', 'dodgerblue', 'firebrick', 'floralwhite', 'forestgreen', 'gainsboro', 'ghostwhite', 'gold', 'goldenrod', 'greenyellow', 'grey', 'honeydew', 'hotpink', 'indianred', 'indigo', 'ivory', 'khaki', 'lavender', 'lavenderblush', 'lawngreen', 'lemonchiffon', 'lightblue', 'lightcoral', 'lightcyan', 'lightgoldenrodyellow', 'lightgray', 'lightgreen', 'lightgrey', 'lightpink', 'lightsalmon', 'lightseagreen', 'lightskyblue', 'lightslategray', 'lightslategrey', 'lightsteelblue', 'lightyellow', 'limegreen', 'linen', 'magenta', 'mediumaquamarine', 'mediumblue', 'mediumorchid', 'mediumpurple', 'mediumseagreen', 'mediumslateblue', 'mediumspringgreen', 'mediumturquoise', 'mediumvioletred', 'midnightblue', 'mintcream', 'mistyrose', 'moccasin', 'navajowhite', 'oldlace', 'olivedrab', 'orangered', 'orchid', 'palegoldenrod', 'palegreen', 'paleturquoise', 'palevioletred', 'papayawhip', 'peachpuff', 'peru', 'pink', 'plum', 'powderblue', 'rosybrown', 'royalblue', 'saddlebrown', 'salmon', 'sandybrown', 'seagreen', 'seashell', 'sienna', 'skyblue', 'slateblue', 'slategray', 'slategrey', 'snow', 'springgreen', 'steelblue', 'tan', 'thistle', 'tomato', 'turquoise', 'violet', 'wheat', 'whitesmoke', 'yellowgreen', 'rebeccapurple']], Union[:class:`HexColor`, str], str]], Union[:class:`RangeScheme`, Dict[required=[scheme]], Union[:class:`RangeEnum`, Literal['width', 'height', 'symbol', 'category', 'ordinal', 'ramp', 'diverging', 'heatmap']], Union[:class:`RangeRaw`, List[Union[None, Union[:class:`RangeRawArray`, List[float]], bool, float, str]]]]]
        Default `color scheme <https://vega.github.io/vega/docs/schemes/>`__ for
        rank-ordered data.
    ramp : Union[List[Union[:class:`Color`, Union[:class:`ColorName`, Literal['black', 'silver', 'gray', 'white', 'maroon', 'red', 'purple', 'fuchsia', 'green', 'lime', 'olive', 'yellow', 'navy', 'blue', 'teal', 'aqua', 'orange', 'aliceblue', 'antiquewhite', 'aquamarine', 'azure', 'beige', 'bisque', 'blanchedalmond', 'blueviolet', 'brown', 'burlywood', 'cadetblue', 'chartreuse', 'chocolate', 'coral', 'cornflowerblue', 'cornsilk', 'crimson', 'cyan', 'darkblue', 'darkcyan', 'darkgoldenrod', 'darkgray', 'darkgreen', 'darkgrey', 'darkkhaki', 'darkmagenta', 'darkolivegreen', 'darkorange', 'darkorchid', 'darkred', 'darksalmon', 'darkseagreen', 'darkslateblue', 'darkslategray', 'darkslategrey', 'darkturquoise', 'darkviolet', 'deeppink', 'deepskyblue', 'dimgray', 'dimgrey', 'dodgerblue', 'firebrick', 'floralwhite', 'forestgreen', 'gainsboro', 'ghostwhite', 'gold', 'goldenrod', 'greenyellow', 'grey', 'honeydew', 'hotpink', 'indianred', 'indigo', 'ivory', 'khaki', 'lavender', 'lavenderblush', 'lawngreen', 'lemonchiffon', 'lightblue', 'lightcoral', 'lightcyan', 'lightgoldenrodyellow', 'lightgray', 'lightgreen', 'lightgrey', 'lightpink', 'lightsalmon', 'lightseagreen', 'lightskyblue', 'lightslategray', 'lightslategrey', 'lightsteelblue', 'lightyellow', 'limegreen', 'linen', 'magenta', 'mediumaquamarine', 'mediumblue', 'mediumorchid', 'mediumpurple', 'mediumseagreen', 'mediumslateblue', 'mediumspringgreen', 'mediumturquoise', 'mediumvioletred', 'midnightblue', 'mintcream', 'mistyrose', 'moccasin', 'navajowhite', 'oldlace', 'olivedrab', 'orangered', 'orchid', 'palegoldenrod', 'palegreen', 'paleturquoise', 'palevioletred', 'papayawhip', 'peachpuff', 'peru', 'pink', 'plum', 'powderblue', 'rosybrown', 'royalblue', 'saddlebrown', 'salmon', 'sandybrown', 'seagreen', 'seashell', 'sienna', 'skyblue', 'slateblue', 'slategray', 'slategrey', 'snow', 'springgreen', 'steelblue', 'tan', 'thistle', 'tomato', 'turquoise', 'violet', 'wheat', 'whitesmoke', 'yellowgreen', 'rebeccapurple']], Union[:class:`HexColor`, str], str]], Union[:class:`RangeScheme`, Dict[required=[scheme]], Union[:class:`RangeEnum`, Literal['width', 'height', 'symbol', 'category', 'ordinal', 'ramp', 'diverging', 'heatmap']], Union[:class:`RangeRaw`, List[Union[None, Union[:class:`RangeRawArray`, List[float]], bool, float, str]]]]]
        Default `color scheme <https://vega.github.io/vega/docs/schemes/>`__ for sequential
        quantitative ramps.
    symbol : List[Union[:class:`SymbolShape`, str]]
        Array of `symbol <https://vega.github.io/vega/docs/marks/symbol/>`__ names or paths
        for the default shape palette.
    """

    _schema = {"$ref": "#/definitions/RangeConfig"}

    def __init__(
        self,
        category: Union[
            Union[
                Union[
                    "RangeScheme",
                    Union[
                        "RangeEnum",
                        Literal[
                            "width",
                            "height",
                            "symbol",
                            "category",
                            "ordinal",
                            "ramp",
                            "diverging",
                            "heatmap",
                        ],
                    ],
                    Union[
                        "RangeRaw",
                        List[None],
                        List[Union["RangeRawArray", List[float]]],
                        List[bool],
                        List[float],
                        List[str],
                    ],
                    dict,
                ],
                Union[
                    List["Color"],
                    List[
                        Union[
                            "ColorName",
                            Literal[
                                "black",
                                "silver",
                                "gray",
                                "white",
                                "maroon",
                                "red",
                                "purple",
                                "fuchsia",
                                "green",
                                "lime",
                                "olive",
                                "yellow",
                                "navy",
                                "blue",
                                "teal",
                                "aqua",
                                "orange",
                                "aliceblue",
                                "antiquewhite",
                                "aquamarine",
                                "azure",
                                "beige",
                                "bisque",
                                "blanchedalmond",
                                "blueviolet",
                                "brown",
                                "burlywood",
                                "cadetblue",
                                "chartreuse",
                                "chocolate",
                                "coral",
                                "cornflowerblue",
                                "cornsilk",
                                "crimson",
                                "cyan",
                                "darkblue",
                                "darkcyan",
                                "darkgoldenrod",
                                "darkgray",
                                "darkgreen",
                                "darkgrey",
                                "darkkhaki",
                                "darkmagenta",
                                "darkolivegreen",
                                "darkorange",
                                "darkorchid",
                                "darkred",
                                "darksalmon",
                                "darkseagreen",
                                "darkslateblue",
                                "darkslategray",
                                "darkslategrey",
                                "darkturquoise",
                                "darkviolet",
                                "deeppink",
                                "deepskyblue",
                                "dimgray",
                                "dimgrey",
                                "dodgerblue",
                                "firebrick",
                                "floralwhite",
                                "forestgreen",
                                "gainsboro",
                                "ghostwhite",
                                "gold",
                                "goldenrod",
                                "greenyellow",
                                "grey",
                                "honeydew",
                                "hotpink",
                                "indianred",
                                "indigo",
                                "ivory",
                                "khaki",
                                "lavender",
                                "lavenderblush",
                                "lawngreen",
                                "lemonchiffon",
                                "lightblue",
                                "lightcoral",
                                "lightcyan",
                                "lightgoldenrodyellow",
                                "lightgray",
                                "lightgreen",
                                "lightgrey",
                                "lightpink",
                                "lightsalmon",
                                "lightseagreen",
                                "lightskyblue",
                                "lightslategray",
                                "lightslategrey",
                                "lightsteelblue",
                                "lightyellow",
                                "limegreen",
                                "linen",
                                "magenta",
                                "mediumaquamarine",
                                "mediumblue",
                                "mediumorchid",
                                "mediumpurple",
                                "mediumseagreen",
                                "mediumslateblue",
                                "mediumspringgreen",
                                "mediumturquoise",
                                "mediumvioletred",
                                "midnightblue",
                                "mintcream",
                                "mistyrose",
                                "moccasin",
                                "navajowhite",
                                "oldlace",
                                "olivedrab",
                                "orangered",
                                "orchid",
                                "palegoldenrod",
                                "palegreen",
                                "paleturquoise",
                                "palevioletred",
                                "papayawhip",
                                "peachpuff",
                                "peru",
                                "pink",
                                "plum",
                                "powderblue",
                                "rosybrown",
                                "royalblue",
                                "saddlebrown",
                                "salmon",
                                "sandybrown",
                                "seagreen",
                                "seashell",
                                "sienna",
                                "skyblue",
                                "slateblue",
                                "slategray",
                                "slategrey",
                                "snow",
                                "springgreen",
                                "steelblue",
                                "tan",
                                "thistle",
                                "tomato",
                                "turquoise",
                                "violet",
                                "wheat",
                                "whitesmoke",
                                "yellowgreen",
                                "rebeccapurple",
                            ],
                        ]
                    ],
                    List[Union["HexColor", str]],
                    List[str],
                ],
            ],
            UndefinedType,
        ] = Undefined,
        diverging: Union[
            Union[
                Union[
                    "RangeScheme",
                    Union[
                        "RangeEnum",
                        Literal[
                            "width",
                            "height",
                            "symbol",
                            "category",
                            "ordinal",
                            "ramp",
                            "diverging",
                            "heatmap",
                        ],
                    ],
                    Union[
                        "RangeRaw",
                        List[None],
                        List[Union["RangeRawArray", List[float]]],
                        List[bool],
                        List[float],
                        List[str],
                    ],
                    dict,
                ],
                Union[
                    List["Color"],
                    List[
                        Union[
                            "ColorName",
                            Literal[
                                "black",
                                "silver",
                                "gray",
                                "white",
                                "maroon",
                                "red",
                                "purple",
                                "fuchsia",
                                "green",
                                "lime",
                                "olive",
                                "yellow",
                                "navy",
                                "blue",
                                "teal",
                                "aqua",
                                "orange",
                                "aliceblue",
                                "antiquewhite",
                                "aquamarine",
                                "azure",
                                "beige",
                                "bisque",
                                "blanchedalmond",
                                "blueviolet",
                                "brown",
                                "burlywood",
                                "cadetblue",
                                "chartreuse",
                                "chocolate",
                                "coral",
                                "cornflowerblue",
                                "cornsilk",
                                "crimson",
                                "cyan",
                                "darkblue",
                                "darkcyan",
                                "darkgoldenrod",
                                "darkgray",
                                "darkgreen",
                                "darkgrey",
                                "darkkhaki",
                                "darkmagenta",
                                "darkolivegreen",
                                "darkorange",
                                "darkorchid",
                                "darkred",
                                "darksalmon",
                                "darkseagreen",
                                "darkslateblue",
                                "darkslategray",
                                "darkslategrey",
                                "darkturquoise",
                                "darkviolet",
                                "deeppink",
                                "deepskyblue",
                                "dimgray",
                                "dimgrey",
                                "dodgerblue",
                                "firebrick",
                                "floralwhite",
                                "forestgreen",
                                "gainsboro",
                                "ghostwhite",
                                "gold",
                                "goldenrod",
                                "greenyellow",
                                "grey",
                                "honeydew",
                                "hotpink",
                                "indianred",
                                "indigo",
                                "ivory",
                                "khaki",
                                "lavender",
                                "lavenderblush",
                                "lawngreen",
                                "lemonchiffon",
                                "lightblue",
                                "lightcoral",
                                "lightcyan",
                                "lightgoldenrodyellow",
                                "lightgray",
                                "lightgreen",
                                "lightgrey",
                                "lightpink",
                                "lightsalmon",
                                "lightseagreen",
                                "lightskyblue",
                                "lightslategray",
                                "lightslategrey",
                                "lightsteelblue",
                                "lightyellow",
                                "limegreen",
                                "linen",
                                "magenta",
                                "mediumaquamarine",
                                "mediumblue",
                                "mediumorchid",
                                "mediumpurple",
                                "mediumseagreen",
                                "mediumslateblue",
                                "mediumspringgreen",
                                "mediumturquoise",
                                "mediumvioletred",
                                "midnightblue",
                                "mintcream",
                                "mistyrose",
                                "moccasin",
                                "navajowhite",
                                "oldlace",
                                "olivedrab",
                                "orangered",
                                "orchid",
                                "palegoldenrod",
                                "palegreen",
                                "paleturquoise",
                                "palevioletred",
                                "papayawhip",
                                "peachpuff",
                                "peru",
                                "pink",
                                "plum",
                                "powderblue",
                                "rosybrown",
                                "royalblue",
                                "saddlebrown",
                                "salmon",
                                "sandybrown",
                                "seagreen",
                                "seashell",
                                "sienna",
                                "skyblue",
                                "slateblue",
                                "slategray",
                                "slategrey",
                                "snow",
                                "springgreen",
                                "steelblue",
                                "tan",
                                "thistle",
                                "tomato",
                                "turquoise",
                                "violet",
                                "wheat",
                                "whitesmoke",
                                "yellowgreen",
                                "rebeccapurple",
                            ],
                        ]
                    ],
                    List[Union["HexColor", str]],
                    List[str],
                ],
            ],
            UndefinedType,
        ] = Undefined,
        heatmap: Union[
            Union[
                Union[
                    "RangeScheme",
                    Union[
                        "RangeEnum",
                        Literal[
                            "width",
                            "height",
                            "symbol",
                            "category",
                            "ordinal",
                            "ramp",
                            "diverging",
                            "heatmap",
                        ],
                    ],
                    Union[
                        "RangeRaw",
                        List[None],
                        List[Union["RangeRawArray", List[float]]],
                        List[bool],
                        List[float],
                        List[str],
                    ],
                    dict,
                ],
                Union[
                    List["Color"],
                    List[
                        Union[
                            "ColorName",
                            Literal[
                                "black",
                                "silver",
                                "gray",
                                "white",
                                "maroon",
                                "red",
                                "purple",
                                "fuchsia",
                                "green",
                                "lime",
                                "olive",
                                "yellow",
                                "navy",
                                "blue",
                                "teal",
                                "aqua",
                                "orange",
                                "aliceblue",
                                "antiquewhite",
                                "aquamarine",
                                "azure",
                                "beige",
                                "bisque",
                                "blanchedalmond",
                                "blueviolet",
                                "brown",
                                "burlywood",
                                "cadetblue",
                                "chartreuse",
                                "chocolate",
                                "coral",
                                "cornflowerblue",
                                "cornsilk",
                                "crimson",
                                "cyan",
                                "darkblue",
                                "darkcyan",
                                "darkgoldenrod",
                                "darkgray",
                                "darkgreen",
                                "darkgrey",
                                "darkkhaki",
                                "darkmagenta",
                                "darkolivegreen",
                                "darkorange",
                                "darkorchid",
                                "darkred",
                                "darksalmon",
                                "darkseagreen",
                                "darkslateblue",
                                "darkslategray",
                                "darkslategrey",
                                "darkturquoise",
                                "darkviolet",
                                "deeppink",
                                "deepskyblue",
                                "dimgray",
                                "dimgrey",
                                "dodgerblue",
                                "firebrick",
                                "floralwhite",
                                "forestgreen",
                                "gainsboro",
                                "ghostwhite",
                                "gold",
                                "goldenrod",
                                "greenyellow",
                                "grey",
                                "honeydew",
                                "hotpink",
                                "indianred",
                                "indigo",
                                "ivory",
                                "khaki",
                                "lavender",
                                "lavenderblush",
                                "lawngreen",
                                "lemonchiffon",
                                "lightblue",
                                "lightcoral",
                                "lightcyan",
                                "lightgoldenrodyellow",
                                "lightgray",
                                "lightgreen",
                                "lightgrey",
                                "lightpink",
                                "lightsalmon",
                                "lightseagreen",
                                "lightskyblue",
                                "lightslategray",
                                "lightslategrey",
                                "lightsteelblue",
                                "lightyellow",
                                "limegreen",
                                "linen",
                                "magenta",
                                "mediumaquamarine",
                                "mediumblue",
                                "mediumorchid",
                                "mediumpurple",
                                "mediumseagreen",
                                "mediumslateblue",
                                "mediumspringgreen",
                                "mediumturquoise",
                                "mediumvioletred",
                                "midnightblue",
                                "mintcream",
                                "mistyrose",
                                "moccasin",
                                "navajowhite",
                                "oldlace",
                                "olivedrab",
                                "orangered",
                                "orchid",
                                "palegoldenrod",
                                "palegreen",
                                "paleturquoise",
                                "palevioletred",
                                "papayawhip",
                                "peachpuff",
                                "peru",
                                "pink",
                                "plum",
                                "powderblue",
                                "rosybrown",
                                "royalblue",
                                "saddlebrown",
                                "salmon",
                                "sandybrown",
                                "seagreen",
                                "seashell",
                                "sienna",
                                "skyblue",
                                "slateblue",
                                "slategray",
                                "slategrey",
                                "snow",
                                "springgreen",
                                "steelblue",
                                "tan",
                                "thistle",
                                "tomato",
                                "turquoise",
                                "violet",
                                "wheat",
                                "whitesmoke",
                                "yellowgreen",
                                "rebeccapurple",
                            ],
                        ]
                    ],
                    List[Union["HexColor", str]],
                    List[str],
                ],
            ],
            UndefinedType,
        ] = Undefined,
        ordinal: Union[
            Union[
                Union[
                    "RangeScheme",
                    Union[
                        "RangeEnum",
                        Literal[
                            "width",
                            "height",
                            "symbol",
                            "category",
                            "ordinal",
                            "ramp",
                            "diverging",
                            "heatmap",
                        ],
                    ],
                    Union[
                        "RangeRaw",
                        List[None],
                        List[Union["RangeRawArray", List[float]]],
                        List[bool],
                        List[float],
                        List[str],
                    ],
                    dict,
                ],
                Union[
                    List["Color"],
                    List[
                        Union[
                            "ColorName",
                            Literal[
                                "black",
                                "silver",
                                "gray",
                                "white",
                                "maroon",
                                "red",
                                "purple",
                                "fuchsia",
                                "green",
                                "lime",
                                "olive",
                                "yellow",
                                "navy",
                                "blue",
                                "teal",
                                "aqua",
                                "orange",
                                "aliceblue",
                                "antiquewhite",
                                "aquamarine",
                                "azure",
                                "beige",
                                "bisque",
                                "blanchedalmond",
                                "blueviolet",
                                "brown",
                                "burlywood",
                                "cadetblue",
                                "chartreuse",
                                "chocolate",
                                "coral",
                                "cornflowerblue",
                                "cornsilk",
                                "crimson",
                                "cyan",
                                "darkblue",
                                "darkcyan",
                                "darkgoldenrod",
                                "darkgray",
                                "darkgreen",
                                "darkgrey",
                                "darkkhaki",
                                "darkmagenta",
                                "darkolivegreen",
                                "darkorange",
                                "darkorchid",
                                "darkred",
                                "darksalmon",
                                "darkseagreen",
                                "darkslateblue",
                                "darkslategray",
                                "darkslategrey",
                                "darkturquoise",
                                "darkviolet",
                                "deeppink",
                                "deepskyblue",
                                "dimgray",
                                "dimgrey",
                                "dodgerblue",
                                "firebrick",
                                "floralwhite",
                                "forestgreen",
                                "gainsboro",
                                "ghostwhite",
                                "gold",
                                "goldenrod",
                                "greenyellow",
                                "grey",
                                "honeydew",
                                "hotpink",
                                "indianred",
                                "indigo",
                                "ivory",
                                "khaki",
                                "lavender",
                                "lavenderblush",
                                "lawngreen",
                                "lemonchiffon",
                                "lightblue",
                                "lightcoral",
                                "lightcyan",
                                "lightgoldenrodyellow",
                                "lightgray",
                                "lightgreen",
                                "lightgrey",
                                "lightpink",
                                "lightsalmon",
                                "lightseagreen",
                                "lightskyblue",
                                "lightslategray",
                                "lightslategrey",
                                "lightsteelblue",
                                "lightyellow",
                                "limegreen",
                                "linen",
                                "magenta",
                                "mediumaquamarine",
                                "mediumblue",
                                "mediumorchid",
                                "mediumpurple",
                                "mediumseagreen",
                                "mediumslateblue",
                                "mediumspringgreen",
                                "mediumturquoise",
                                "mediumvioletred",
                                "midnightblue",
                                "mintcream",
                                "mistyrose",
                                "moccasin",
                                "navajowhite",
                                "oldlace",
                                "olivedrab",
                                "orangered",
                                "orchid",
                                "palegoldenrod",
                                "palegreen",
                                "paleturquoise",
                                "palevioletred",
                                "papayawhip",
                                "peachpuff",
                                "peru",
                                "pink",
                                "plum",
                                "powderblue",
                                "rosybrown",
                                "royalblue",
                                "saddlebrown",
                                "salmon",
                                "sandybrown",
                                "seagreen",
                                "seashell",
                                "sienna",
                                "skyblue",
                                "slateblue",
                                "slategray",
                                "slategrey",
                                "snow",
                                "springgreen",
                                "steelblue",
                                "tan",
                                "thistle",
                                "tomato",
                                "turquoise",
                                "violet",
                                "wheat",
                                "whitesmoke",
                                "yellowgreen",
                                "rebeccapurple",
                            ],
                        ]
                    ],
                    List[Union["HexColor", str]],
                    List[str],
                ],
            ],
            UndefinedType,
        ] = Undefined,
        ramp: Union[
            Union[
                Union[
                    "RangeScheme",
                    Union[
                        "RangeEnum",
                        Literal[
                            "width",
                            "height",
                            "symbol",
                            "category",
                            "ordinal",
                            "ramp",
                            "diverging",
                            "heatmap",
                        ],
                    ],
                    Union[
                        "RangeRaw",
                        List[None],
                        List[Union["RangeRawArray", List[float]]],
                        List[bool],
                        List[float],
                        List[str],
                    ],
                    dict,
                ],
                Union[
                    List["Color"],
                    List[
                        Union[
                            "ColorName",
                            Literal[
                                "black",
                                "silver",
                                "gray",
                                "white",
                                "maroon",
                                "red",
                                "purple",
                                "fuchsia",
                                "green",
                                "lime",
                                "olive",
                                "yellow",
                                "navy",
                                "blue",
                                "teal",
                                "aqua",
                                "orange",
                                "aliceblue",
                                "antiquewhite",
                                "aquamarine",
                                "azure",
                                "beige",
                                "bisque",
                                "blanchedalmond",
                                "blueviolet",
                                "brown",
                                "burlywood",
                                "cadetblue",
                                "chartreuse",
                                "chocolate",
                                "coral",
                                "cornflowerblue",
                                "cornsilk",
                                "crimson",
                                "cyan",
                                "darkblue",
                                "darkcyan",
                                "darkgoldenrod",
                                "darkgray",
                                "darkgreen",
                                "darkgrey",
                                "darkkhaki",
                                "darkmagenta",
                                "darkolivegreen",
                                "darkorange",
                                "darkorchid",
                                "darkred",
                                "darksalmon",
                                "darkseagreen",
                                "darkslateblue",
                                "darkslategray",
                                "darkslategrey",
                                "darkturquoise",
                                "darkviolet",
                                "deeppink",
                                "deepskyblue",
                                "dimgray",
                                "dimgrey",
                                "dodgerblue",
                                "firebrick",
                                "floralwhite",
                                "forestgreen",
                                "gainsboro",
                                "ghostwhite",
                                "gold",
                                "goldenrod",
                                "greenyellow",
                                "grey",
                                "honeydew",
                                "hotpink",
                                "indianred",
                                "indigo",
                                "ivory",
                                "khaki",
                                "lavender",
                                "lavenderblush",
                                "lawngreen",
                                "lemonchiffon",
                                "lightblue",
                                "lightcoral",
                                "lightcyan",
                                "lightgoldenrodyellow",
                                "lightgray",
                                "lightgreen",
                                "lightgrey",
                                "lightpink",
                                "lightsalmon",
                                "lightseagreen",
                                "lightskyblue",
                                "lightslategray",
                                "lightslategrey",
                                "lightsteelblue",
                                "lightyellow",
                                "limegreen",
                                "linen",
                                "magenta",
                                "mediumaquamarine",
                                "mediumblue",
                                "mediumorchid",
                                "mediumpurple",
                                "mediumseagreen",
                                "mediumslateblue",
                                "mediumspringgreen",
                                "mediumturquoise",
                                "mediumvioletred",
                                "midnightblue",
                                "mintcream",
                                "mistyrose",
                                "moccasin",
                                "navajowhite",
                                "oldlace",
                                "olivedrab",
                                "orangered",
                                "orchid",
                                "palegoldenrod",
                                "palegreen",
                                "paleturquoise",
                                "palevioletred",
                                "papayawhip",
                                "peachpuff",
                                "peru",
                                "pink",
                                "plum",
                                "powderblue",
                                "rosybrown",
                                "royalblue",
                                "saddlebrown",
                                "salmon",
                                "sandybrown",
                                "seagreen",
                                "seashell",
                                "sienna",
                                "skyblue",
                                "slateblue",
                                "slategray",
                                "slategrey",
                                "snow",
                                "springgreen",
                                "steelblue",
                                "tan",
                                "thistle",
                                "tomato",
                                "turquoise",
                                "violet",
                                "wheat",
                                "whitesmoke",
                                "yellowgreen",
                                "rebeccapurple",
                            ],
                        ]
                    ],
                    List[Union["HexColor", str]],
                    List[str],
                ],
            ],
            UndefinedType,
        ] = Undefined,
        symbol: Union[Union[List["SymbolShape"], List[str]], UndefinedType] = Undefined,
        **kwds
    ):
        super(RangeConfig, self).__init__(
            category=category,
            diverging=diverging,
            heatmap=heatmap,
            ordinal=ordinal,
            ramp=ramp,
            symbol=symbol,
            **kwds
        )


class RangeRawArray(VegaLiteSchema):
    """RangeRawArray schema wrapper

    Union[:class:`RangeRawArray`, List[float]]
    """

    _schema = {"$ref": "#/definitions/RangeRawArray"}

    def __init__(self, *args):
        super(RangeRawArray, self).__init__(*args)


class RangeScheme(VegaLiteSchema):
    """RangeScheme schema wrapper

    Union[:class:`RangeScheme`, Dict[required=[scheme]], Union[:class:`RangeEnum`,
    Literal['width', 'height', 'symbol', 'category', 'ordinal', 'ramp', 'diverging',
    'heatmap']], Union[:class:`RangeRaw`, List[Union[None, Union[:class:`RangeRawArray`,
    List[float]], bool, float, str]]]]
    """

    _schema = {"$ref": "#/definitions/RangeScheme"}

    def __init__(self, *args, **kwds):
        super(RangeScheme, self).__init__(*args, **kwds)


class RangeEnum(RangeScheme):
    """RangeEnum schema wrapper

    Union[:class:`RangeEnum`, Literal['width', 'height', 'symbol', 'category', 'ordinal',
    'ramp', 'diverging', 'heatmap']]
    """

    _schema = {"$ref": "#/definitions/RangeEnum"}

    def __init__(self, *args):
        super(RangeEnum, self).__init__(*args)


class RangeRaw(RangeScheme):
    """RangeRaw schema wrapper

    Union[:class:`RangeRaw`, List[Union[None, Union[:class:`RangeRawArray`, List[float]], bool,
    float, str]]]
    """

    _schema = {"$ref": "#/definitions/RangeRaw"}

    def __init__(self, *args):
        super(RangeRaw, self).__init__(*args)


class RectConfig(AnyMarkConfig):
    """RectConfig schema wrapper

    Union[:class:`RectConfig`, Dict[required=[]]]

    Parameters
    ----------

    align : Union[Union[:class:`Align`, Literal['left', 'center', 'right']], Union[:class:`ExprRef`, Dict[required=[expr]]]]
        The horizontal alignment of the text or ranged marks (area, bar, image, rect, rule).
        One of ``"left"``, ``"right"``, ``"center"``.

        **Note:** Expression reference is *not* supported for range marks.
    angle : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], float]
        The rotation angle of the text, in degrees.
    aria : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], bool]
        A boolean flag indicating if `ARIA attributes
        <https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA>`__ should be
        included (SVG output only). If ``false``, the "aria-hidden" attribute will be set on
        the output SVG element, removing the mark item from the ARIA accessibility tree.
    ariaRole : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], str]
        Sets the type of user interface element of the mark item for `ARIA accessibility
        <https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA>`__ (SVG output
        only). If specified, this property determines the "role" attribute. Warning: this
        property is experimental and may be changed in the future.
    ariaRoleDescription : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], str]
        A human-readable, author-localized description for the role of the mark item for
        `ARIA accessibility
        <https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA>`__ (SVG output
        only). If specified, this property determines the "aria-roledescription" attribute.
        Warning: this property is experimental and may be changed in the future.
    aspect : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], bool]
        Whether to keep aspect ratio of image marks.
    baseline : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], Union[:class:`TextBaseline`, Union[:class:`Baseline`, Literal['top', 'middle', 'bottom']], str]]
        For text marks, the vertical text baseline. One of ``"alphabetic"`` (default),
        ``"top"``, ``"middle"``, ``"bottom"``, ``"line-top"``, ``"line-bottom"``, or an
        expression reference that provides one of the valid values. The ``"line-top"`` and
        ``"line-bottom"`` values operate similarly to ``"top"`` and ``"bottom"``, but are
        calculated relative to the ``lineHeight`` rather than ``fontSize`` alone.

        For range marks, the vertical alignment of the marks. One of ``"top"``,
        ``"middle"``, ``"bottom"``.

        **Note:** Expression reference is *not* supported for range marks.
    binSpacing : float
        Offset between bars for binned field. The ideal value for this is either 0
        (preferred by statisticians) or 1 (Vega-Lite default, D3 example style).

        **Default value:** ``1``
    blend : Union[Union[:class:`Blend`, Literal[None, 'multiply', 'screen', 'overlay', 'darken', 'lighten', 'color-dodge', 'color-burn', 'hard-light', 'soft-light', 'difference', 'exclusion', 'hue', 'saturation', 'color', 'luminosity']], Union[:class:`ExprRef`, Dict[required=[expr]]]]
        The color blend mode for drawing an item on its current background. Any valid `CSS
        mix-blend-mode <https://developer.mozilla.org/en-US/docs/Web/CSS/mix-blend-mode>`__
        value can be used.

        __Default value:__ ``"source-over"``
    color : Union[Union[:class:`Color`, Union[:class:`ColorName`, Literal['black', 'silver', 'gray', 'white', 'maroon', 'red', 'purple', 'fuchsia', 'green', 'lime', 'olive', 'yellow', 'navy', 'blue', 'teal', 'aqua', 'orange', 'aliceblue', 'antiquewhite', 'aquamarine', 'azure', 'beige', 'bisque', 'blanchedalmond', 'blueviolet', 'brown', 'burlywood', 'cadetblue', 'chartreuse', 'chocolate', 'coral', 'cornflowerblue', 'cornsilk', 'crimson', 'cyan', 'darkblue', 'darkcyan', 'darkgoldenrod', 'darkgray', 'darkgreen', 'darkgrey', 'darkkhaki', 'darkmagenta', 'darkolivegreen', 'darkorange', 'darkorchid', 'darkred', 'darksalmon', 'darkseagreen', 'darkslateblue', 'darkslategray', 'darkslategrey', 'darkturquoise', 'darkviolet', 'deeppink', 'deepskyblue', 'dimgray', 'dimgrey', 'dodgerblue', 'firebrick', 'floralwhite', 'forestgreen', 'gainsboro', 'ghostwhite', 'gold', 'goldenrod', 'greenyellow', 'grey', 'honeydew', 'hotpink', 'indianred', 'indigo', 'ivory', 'khaki', 'lavender', 'lavenderblush', 'lawngreen', 'lemonchiffon', 'lightblue', 'lightcoral', 'lightcyan', 'lightgoldenrodyellow', 'lightgray', 'lightgreen', 'lightgrey', 'lightpink', 'lightsalmon', 'lightseagreen', 'lightskyblue', 'lightslategray', 'lightslategrey', 'lightsteelblue', 'lightyellow', 'limegreen', 'linen', 'magenta', 'mediumaquamarine', 'mediumblue', 'mediumorchid', 'mediumpurple', 'mediumseagreen', 'mediumslateblue', 'mediumspringgreen', 'mediumturquoise', 'mediumvioletred', 'midnightblue', 'mintcream', 'mistyrose', 'moccasin', 'navajowhite', 'oldlace', 'olivedrab', 'orangered', 'orchid', 'palegoldenrod', 'palegreen', 'paleturquoise', 'palevioletred', 'papayawhip', 'peachpuff', 'peru', 'pink', 'plum', 'powderblue', 'rosybrown', 'royalblue', 'saddlebrown', 'salmon', 'sandybrown', 'seagreen', 'seashell', 'sienna', 'skyblue', 'slateblue', 'slategray', 'slategrey', 'snow', 'springgreen', 'steelblue', 'tan', 'thistle', 'tomato', 'turquoise', 'violet', 'wheat', 'whitesmoke', 'yellowgreen', 'rebeccapurple']], Union[:class:`HexColor`, str], str], Union[:class:`ExprRef`, Dict[required=[expr]]], Union[:class:`Gradient`, Union[:class:`LinearGradient`, Dict[required=[gradient, stops]]], Union[:class:`RadialGradient`, Dict[required=[gradient, stops]]]]]
        Default color.

        **Default value:** :raw-html:`<span style="color: #4682b4;">&#9632;</span>`
        ``"#4682b4"``

        **Note:**


        * This property cannot be used in a `style config
          <https://vega.github.io/vega-lite/docs/mark.html#style-config>`__.
        * The ``fill`` and ``stroke`` properties have higher precedence than ``color`` and
          will override ``color``.
    continuousBandSize : float
        The default size of the bars on continuous scales.

        **Default value:** ``5``
    cornerRadius : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], float]
        The radius in pixels of rounded rectangles or arcs' corners.

        **Default value:** ``0``
    cornerRadiusBottomLeft : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], float]
        The radius in pixels of rounded rectangles' bottom left corner.

        **Default value:** ``0``
    cornerRadiusBottomRight : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], float]
        The radius in pixels of rounded rectangles' bottom right corner.

        **Default value:** ``0``
    cornerRadiusTopLeft : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], float]
        The radius in pixels of rounded rectangles' top right corner.

        **Default value:** ``0``
    cornerRadiusTopRight : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], float]
        The radius in pixels of rounded rectangles' top left corner.

        **Default value:** ``0``
    cursor : Union[Union[:class:`Cursor`, Literal['auto', 'default', 'none', 'context-menu', 'help', 'pointer', 'progress', 'wait', 'cell', 'crosshair', 'text', 'vertical-text', 'alias', 'copy', 'move', 'no-drop', 'not-allowed', 'e-resize', 'n-resize', 'ne-resize', 'nw-resize', 's-resize', 'se-resize', 'sw-resize', 'w-resize', 'ew-resize', 'ns-resize', 'nesw-resize', 'nwse-resize', 'col-resize', 'row-resize', 'all-scroll', 'zoom-in', 'zoom-out', 'grab', 'grabbing']], Union[:class:`ExprRef`, Dict[required=[expr]]]]
        The mouse cursor used over the mark. Any valid `CSS cursor type
        <https://developer.mozilla.org/en-US/docs/Web/CSS/cursor#Values>`__ can be used.
    description : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], str]
        A text description of the mark item for `ARIA accessibility
        <https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA>`__ (SVG output
        only). If specified, this property determines the `"aria-label" attribute
        <https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/ARIA_Techniques/Using_the_aria-label_attribute>`__.
    dir : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], Union[:class:`TextDirection`, Literal['ltr', 'rtl']]]
        The direction of the text. One of ``"ltr"`` (left-to-right) or ``"rtl"``
        (right-to-left). This property determines on which side is truncated in response to
        the limit parameter.

        **Default value:** ``"ltr"``
    discreteBandSize : Union[Union[:class:`RelativeBandSize`, Dict[required=[band]]], float]
        The default size of the bars with discrete dimensions. If unspecified, the default
        size is  ``step-2``, which provides 2 pixel offset between bars.
    dx : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], float]
        The horizontal offset, in pixels, between the text label and its anchor point. The
        offset is applied after rotation by the *angle* property.
    dy : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], float]
        The vertical offset, in pixels, between the text label and its anchor point. The
        offset is applied after rotation by the *angle* property.
    ellipsis : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], str]
        The ellipsis string for text truncated in response to the limit parameter.

        **Default value:** ``"…"``
    endAngle : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], float]
        The end angle in radians for arc marks. A value of ``0`` indicates up (north),
        increasing values proceed clockwise.
    fill : Union[None, Union[:class:`Color`, Union[:class:`ColorName`, Literal['black', 'silver', 'gray', 'white', 'maroon', 'red', 'purple', 'fuchsia', 'green', 'lime', 'olive', 'yellow', 'navy', 'blue', 'teal', 'aqua', 'orange', 'aliceblue', 'antiquewhite', 'aquamarine', 'azure', 'beige', 'bisque', 'blanchedalmond', 'blueviolet', 'brown', 'burlywood', 'cadetblue', 'chartreuse', 'chocolate', 'coral', 'cornflowerblue', 'cornsilk', 'crimson', 'cyan', 'darkblue', 'darkcyan', 'darkgoldenrod', 'darkgray', 'darkgreen', 'darkgrey', 'darkkhaki', 'darkmagenta', 'darkolivegreen', 'darkorange', 'darkorchid', 'darkred', 'darksalmon', 'darkseagreen', 'darkslateblue', 'darkslategray', 'darkslategrey', 'darkturquoise', 'darkviolet', 'deeppink', 'deepskyblue', 'dimgray', 'dimgrey', 'dodgerblue', 'firebrick', 'floralwhite', 'forestgreen', 'gainsboro', 'ghostwhite', 'gold', 'goldenrod', 'greenyellow', 'grey', 'honeydew', 'hotpink', 'indianred', 'indigo', 'ivory', 'khaki', 'lavender', 'lavenderblush', 'lawngreen', 'lemonchiffon', 'lightblue', 'lightcoral', 'lightcyan', 'lightgoldenrodyellow', 'lightgray', 'lightgreen', 'lightgrey', 'lightpink', 'lightsalmon', 'lightseagreen', 'lightskyblue', 'lightslategray', 'lightslategrey', 'lightsteelblue', 'lightyellow', 'limegreen', 'linen', 'magenta', 'mediumaquamarine', 'mediumblue', 'mediumorchid', 'mediumpurple', 'mediumseagreen', 'mediumslateblue', 'mediumspringgreen', 'mediumturquoise', 'mediumvioletred', 'midnightblue', 'mintcream', 'mistyrose', 'moccasin', 'navajowhite', 'oldlace', 'olivedrab', 'orangered', 'orchid', 'palegoldenrod', 'palegreen', 'paleturquoise', 'palevioletred', 'papayawhip', 'peachpuff', 'peru', 'pink', 'plum', 'powderblue', 'rosybrown', 'royalblue', 'saddlebrown', 'salmon', 'sandybrown', 'seagreen', 'seashell', 'sienna', 'skyblue', 'slateblue', 'slategray', 'slategrey', 'snow', 'springgreen', 'steelblue', 'tan', 'thistle', 'tomato', 'turquoise', 'violet', 'wheat', 'whitesmoke', 'yellowgreen', 'rebeccapurple']], Union[:class:`HexColor`, str], str], Union[:class:`ExprRef`, Dict[required=[expr]]], Union[:class:`Gradient`, Union[:class:`LinearGradient`, Dict[required=[gradient, stops]]], Union[:class:`RadialGradient`, Dict[required=[gradient, stops]]]]]
        Default fill color. This property has higher precedence than ``config.color``. Set
        to ``null`` to remove fill.

        **Default value:** (None)
    fillOpacity : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], float]
        The fill opacity (value between [0,1]).

        **Default value:** ``1``
    filled : bool
        Whether the mark's color should be used as fill color instead of stroke color.

        **Default value:** ``false`` for all ``point``, ``line``, and ``rule`` marks as well
        as ``geoshape`` marks for `graticule
        <https://vega.github.io/vega-lite/docs/data.html#graticule>`__ data sources;
        otherwise, ``true``.

        **Note:** This property cannot be used in a `style config
        <https://vega.github.io/vega-lite/docs/mark.html#style-config>`__.
    font : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], str]
        The typeface to set the text in (e.g., ``"Helvetica Neue"`` ).
    fontSize : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], float]
        The font size, in pixels.

        **Default value:** ``11``
    fontStyle : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], Union[:class:`FontStyle`, str]]
        The font style (e.g., ``"italic"`` ).
    fontWeight : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], Union[:class:`FontWeight`, Literal['normal', 'bold', 'lighter', 'bolder', 100, 200, 300, 400, 500, 600, 700, 800, 900]]]
        The font weight. This can be either a string (e.g ``"bold"``, ``"normal"`` ) or a
        number ( ``100``, ``200``, ``300``, ..., ``900`` where ``"normal"`` = ``400`` and
        ``"bold"`` = ``700`` ).
    height : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], float]
        Height of the marks.
    href : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], Union[:class:`URI`, str]]
        A URL to load upon mouse click. If defined, the mark acts as a hyperlink.
    innerRadius : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], float]
        The inner radius in pixels of arc marks. ``innerRadius`` is an alias for
        ``radius2``.

        **Default value:** ``0``
    interpolate : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], Union[:class:`Interpolate`, Literal['basis', 'basis-open', 'basis-closed', 'bundle', 'cardinal', 'cardinal-open', 'cardinal-closed', 'catmull-rom', 'linear', 'linear-closed', 'monotone', 'natural', 'step', 'step-before', 'step-after']]]
        The line interpolation method to use for line and area marks. One of the following:


        * ``"linear"`` : piecewise linear segments, as in a polyline.
        * ``"linear-closed"`` : close the linear segments to form a polygon.
        * ``"step"`` : alternate between horizontal and vertical segments, as in a step
          function.
        * ``"step-before"`` : alternate between vertical and horizontal segments, as in a
          step function.
        * ``"step-after"`` : alternate between horizontal and vertical segments, as in a
          step function.
        * ``"basis"`` : a B-spline, with control point duplication on the ends.
        * ``"basis-open"`` : an open B-spline; may not intersect the start or end.
        * ``"basis-closed"`` : a closed B-spline, as in a loop.
        * ``"cardinal"`` : a Cardinal spline, with control point duplication on the ends.
        * ``"cardinal-open"`` : an open Cardinal spline; may not intersect the start or end,
          but will intersect other control points.
        * ``"cardinal-closed"`` : a closed Cardinal spline, as in a loop.
        * ``"bundle"`` : equivalent to basis, except the tension parameter is used to
          straighten the spline.
        * ``"monotone"`` : cubic interpolation that preserves monotonicity in y.
    invalid : Literal['filter', None]
        Defines how Vega-Lite should handle marks for invalid values ( ``null`` and ``NaN``
        ).


        * If set to ``"filter"`` (default), all data items with null values will be skipped
          (for line, trail, and area marks) or filtered (for other marks).
        * If ``null``, all data items are included. In this case, invalid values will be
          interpreted as zeroes.
    limit : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], float]
        The maximum length of the text mark in pixels. The text value will be automatically
        truncated if the rendered size exceeds the limit.

        **Default value:** ``0`` -- indicating no limit
    lineBreak : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], str]
        A delimiter, such as a newline character, upon which to break text strings into
        multiple lines. This property is ignored if the text is array-valued.
    lineHeight : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], float]
        The line height in pixels (the spacing between subsequent lines of text) for
        multi-line text marks.
    minBandSize : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], float]
        The minimum band size for bar and rectangle marks. **Default value:** ``0.25``
    opacity : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], float]
        The overall opacity (value between [0,1]).

        **Default value:** ``0.7`` for non-aggregate plots with ``point``, ``tick``,
        ``circle``, or ``square`` marks or layered ``bar`` charts and ``1`` otherwise.
    order : Union[None, bool]
        For line and trail marks, this ``order`` property can be set to ``null`` or
        ``false`` to make the lines use the original order in the data sources.
    orient : Union[:class:`Orientation`, Literal['horizontal', 'vertical']]
        The orientation of a non-stacked bar, tick, area, and line charts. The value is
        either horizontal (default) or vertical.


        * For bar, rule and tick, this determines whether the size of the bar and tick
          should be applied to x or y dimension.
        * For area, this property determines the orient property of the Vega output.
        * For line and trail marks, this property determines the sort order of the points in
          the line if ``config.sortLineBy`` is not specified. For stacked charts, this is
          always determined by the orientation of the stack; therefore explicitly specified
          value will be ignored.
    outerRadius : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], float]
        The outer radius in pixels of arc marks. ``outerRadius`` is an alias for ``radius``.

        **Default value:** ``0``
    padAngle : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], float]
        The angular padding applied to sides of the arc, in radians.
    radius : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], float]
        For arc mark, the primary (outer) radius in pixels.

        For text marks, polar coordinate radial offset, in pixels, of the text from the
        origin determined by the ``x`` and ``y`` properties.

        **Default value:** ``min(plot_width, plot_height)/2``
    radius2 : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], float]
        The secondary (inner) radius in pixels of arc marks.

        **Default value:** ``0``
    shape : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], Union[Union[:class:`SymbolShape`, str], str]]
        Shape of the point marks. Supported values include:


        * plotting shapes: ``"circle"``, ``"square"``, ``"cross"``, ``"diamond"``,
          ``"triangle-up"``, ``"triangle-down"``, ``"triangle-right"``, or
          ``"triangle-left"``.
        * the line symbol ``"stroke"``
        * centered directional shapes ``"arrow"``, ``"wedge"``, or ``"triangle"``
        * a custom `SVG path string
          <https://developer.mozilla.org/en-US/docs/Web/SVG/Tutorial/Paths>`__ (For correct
          sizing, custom shape paths should be defined within a square bounding box with
          coordinates ranging from -1 to 1 along both the x and y dimensions.)

        **Default value:** ``"circle"``
    size : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], float]
        Default size for marks.


        * For ``point`` / ``circle`` / ``square``, this represents the pixel area of the
          marks. Note that this value sets the area of the symbol; the side lengths will
          increase with the square root of this value.
        * For ``bar``, this represents the band size of the bar, in pixels.
        * For ``text``, this represents the font size, in pixels.

        **Default value:**


        * ``30`` for point, circle, square marks; width/height's ``step``
        * ``2`` for bar marks with discrete dimensions;
        * ``5`` for bar marks with continuous dimensions;
        * ``11`` for text marks.
    smooth : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], bool]
        A boolean flag (default true) indicating if the image should be smoothed when
        resized. If false, individual pixels should be scaled directly rather than
        interpolated with smoothing. For SVG rendering, this option may not work in some
        browsers due to lack of standardization.
    startAngle : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], float]
        The start angle in radians for arc marks. A value of ``0`` indicates up (north),
        increasing values proceed clockwise.
    stroke : Union[None, Union[:class:`Color`, Union[:class:`ColorName`, Literal['black', 'silver', 'gray', 'white', 'maroon', 'red', 'purple', 'fuchsia', 'green', 'lime', 'olive', 'yellow', 'navy', 'blue', 'teal', 'aqua', 'orange', 'aliceblue', 'antiquewhite', 'aquamarine', 'azure', 'beige', 'bisque', 'blanchedalmond', 'blueviolet', 'brown', 'burlywood', 'cadetblue', 'chartreuse', 'chocolate', 'coral', 'cornflowerblue', 'cornsilk', 'crimson', 'cyan', 'darkblue', 'darkcyan', 'darkgoldenrod', 'darkgray', 'darkgreen', 'darkgrey', 'darkkhaki', 'darkmagenta', 'darkolivegreen', 'darkorange', 'darkorchid', 'darkred', 'darksalmon', 'darkseagreen', 'darkslateblue', 'darkslategray', 'darkslategrey', 'darkturquoise', 'darkviolet', 'deeppink', 'deepskyblue', 'dimgray', 'dimgrey', 'dodgerblue', 'firebrick', 'floralwhite', 'forestgreen', 'gainsboro', 'ghostwhite', 'gold', 'goldenrod', 'greenyellow', 'grey', 'honeydew', 'hotpink', 'indianred', 'indigo', 'ivory', 'khaki', 'lavender', 'lavenderblush', 'lawngreen', 'lemonchiffon', 'lightblue', 'lightcoral', 'lightcyan', 'lightgoldenrodyellow', 'lightgray', 'lightgreen', 'lightgrey', 'lightpink', 'lightsalmon', 'lightseagreen', 'lightskyblue', 'lightslategray', 'lightslategrey', 'lightsteelblue', 'lightyellow', 'limegreen', 'linen', 'magenta', 'mediumaquamarine', 'mediumblue', 'mediumorchid', 'mediumpurple', 'mediumseagreen', 'mediumslateblue', 'mediumspringgreen', 'mediumturquoise', 'mediumvioletred', 'midnightblue', 'mintcream', 'mistyrose', 'moccasin', 'navajowhite', 'oldlace', 'olivedrab', 'orangered', 'orchid', 'palegoldenrod', 'palegreen', 'paleturquoise', 'palevioletred', 'papayawhip', 'peachpuff', 'peru', 'pink', 'plum', 'powderblue', 'rosybrown', 'royalblue', 'saddlebrown', 'salmon', 'sandybrown', 'seagreen', 'seashell', 'sienna', 'skyblue', 'slateblue', 'slategray', 'slategrey', 'snow', 'springgreen', 'steelblue', 'tan', 'thistle', 'tomato', 'turquoise', 'violet', 'wheat', 'whitesmoke', 'yellowgreen', 'rebeccapurple']], Union[:class:`HexColor`, str], str], Union[:class:`ExprRef`, Dict[required=[expr]]], Union[:class:`Gradient`, Union[:class:`LinearGradient`, Dict[required=[gradient, stops]]], Union[:class:`RadialGradient`, Dict[required=[gradient, stops]]]]]
        Default stroke color. This property has higher precedence than ``config.color``. Set
        to ``null`` to remove stroke.

        **Default value:** (None)
    strokeCap : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], Union[:class:`StrokeCap`, Literal['butt', 'round', 'square']]]
        The stroke cap for line ending style. One of ``"butt"``, ``"round"``, or
        ``"square"``.

        **Default value:** ``"butt"``
    strokeDash : Union[List[float], Union[:class:`ExprRef`, Dict[required=[expr]]]]
        An array of alternating stroke, space lengths for creating dashed or dotted lines.
    strokeDashOffset : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], float]
        The offset (in pixels) into which to begin drawing with the stroke dash array.
    strokeJoin : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], Union[:class:`StrokeJoin`, Literal['miter', 'round', 'bevel']]]
        The stroke line join method. One of ``"miter"``, ``"round"`` or ``"bevel"``.

        **Default value:** ``"miter"``
    strokeMiterLimit : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], float]
        The miter limit at which to bevel a line join.
    strokeOffset : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], float]
        The offset in pixels at which to draw the group stroke and fill. If unspecified, the
        default behavior is to dynamically offset stroked groups such that 1 pixel stroke
        widths align with the pixel grid.
    strokeOpacity : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], float]
        The stroke opacity (value between [0,1]).

        **Default value:** ``1``
    strokeWidth : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], float]
        The stroke width, in pixels.
    tension : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], float]
        Depending on the interpolation type, sets the tension parameter (for line and area
        marks).
    text : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], Union[:class:`Text`, List[str], str]]
        Placeholder text if the ``text`` channel is not specified
    theta : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], float]
        For arc marks, the arc length in radians if theta2 is not specified, otherwise the
        start arc angle. (A value of 0 indicates up or “north”, increasing values proceed
        clockwise.)

        For text marks, polar coordinate angle in radians.
    theta2 : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], float]
        The end angle of arc marks in radians. A value of 0 indicates up or “north”,
        increasing values proceed clockwise.
    timeUnitBandPosition : float
        Default relative band position for a time unit. If set to ``0``, the marks will be
        positioned at the beginning of the time unit band step. If set to ``0.5``, the marks
        will be positioned in the middle of the time unit band step.
    timeUnitBandSize : float
        Default relative band size for a time unit. If set to ``1``, the bandwidth of the
        marks will be equal to the time unit band step. If set to ``0.5``, bandwidth of the
        marks will be half of the time unit band step.
    tooltip : Union[None, Union[:class:`ExprRef`, Dict[required=[expr]]], Union[:class:`TooltipContent`, Dict[required=[content]]], bool, float, str]
        The tooltip text string to show upon mouse hover or an object defining which fields
        should the tooltip be derived from.


        * If ``tooltip`` is ``true`` or ``{"content": "encoding"}``, then all fields from
          ``encoding`` will be used.
        * If ``tooltip`` is ``{"content": "data"}``, then all fields that appear in the
          highlighted data point will be used.
        * If set to ``null`` or ``false``, then no tooltip will be used.

        See the `tooltip <https://vega.github.io/vega-lite/docs/tooltip.html>`__
        documentation for a detailed discussion about tooltip  in Vega-Lite.

        **Default value:** ``null``
    url : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], Union[:class:`URI`, str]]
        The URL of the image file for image marks.
    width : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], float]
        Width of the marks.
    x : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], float, str]
        X coordinates of the marks, or width of horizontal ``"bar"`` and ``"area"`` without
        specified ``x2`` or ``width``.

        The ``value`` of this channel can be a number or a string ``"width"`` for the width
        of the plot.
    x2 : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], float, str]
        X2 coordinates for ranged ``"area"``, ``"bar"``, ``"rect"``, and  ``"rule"``.

        The ``value`` of this channel can be a number or a string ``"width"`` for the width
        of the plot.
    y : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], float, str]
        Y coordinates of the marks, or height of vertical ``"bar"`` and ``"area"`` without
        specified ``y2`` or ``height``.

        The ``value`` of this channel can be a number or a string ``"height"`` for the
        height of the plot.
    y2 : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], float, str]
        Y2 coordinates for ranged ``"area"``, ``"bar"``, ``"rect"``, and  ``"rule"``.

        The ``value`` of this channel can be a number or a string ``"height"`` for the
        height of the plot.
    """

    _schema = {"$ref": "#/definitions/RectConfig"}

    def __init__(
        self,
        align: Union[
            Union[
                Union["Align", Literal["left", "center", "right"]],
                Union["ExprRef", "_ParameterProtocol", dict],
            ],
            UndefinedType,
        ] = Undefined,
        angle: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], float], UndefinedType
        ] = Undefined,
        aria: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], bool], UndefinedType
        ] = Undefined,
        ariaRole: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], str], UndefinedType
        ] = Undefined,
        ariaRoleDescription: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], str], UndefinedType
        ] = Undefined,
        aspect: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], bool], UndefinedType
        ] = Undefined,
        baseline: Union[
            Union[
                Union["ExprRef", "_ParameterProtocol", dict],
                Union[
                    "TextBaseline",
                    Union["Baseline", Literal["top", "middle", "bottom"]],
                    str,
                ],
            ],
            UndefinedType,
        ] = Undefined,
        binSpacing: Union[float, UndefinedType] = Undefined,
        blend: Union[
            Union[
                Union[
                    "Blend",
                    Literal[
                        None,
                        "multiply",
                        "screen",
                        "overlay",
                        "darken",
                        "lighten",
                        "color-dodge",
                        "color-burn",
                        "hard-light",
                        "soft-light",
                        "difference",
                        "exclusion",
                        "hue",
                        "saturation",
                        "color",
                        "luminosity",
                    ],
                ],
                Union["ExprRef", "_ParameterProtocol", dict],
            ],
            UndefinedType,
        ] = Undefined,
        color: Union[
            Union[
                Union[
                    "Color",
                    Union[
                        "ColorName",
                        Literal[
                            "black",
                            "silver",
                            "gray",
                            "white",
                            "maroon",
                            "red",
                            "purple",
                            "fuchsia",
                            "green",
                            "lime",
                            "olive",
                            "yellow",
                            "navy",
                            "blue",
                            "teal",
                            "aqua",
                            "orange",
                            "aliceblue",
                            "antiquewhite",
                            "aquamarine",
                            "azure",
                            "beige",
                            "bisque",
                            "blanchedalmond",
                            "blueviolet",
                            "brown",
                            "burlywood",
                            "cadetblue",
                            "chartreuse",
                            "chocolate",
                            "coral",
                            "cornflowerblue",
                            "cornsilk",
                            "crimson",
                            "cyan",
                            "darkblue",
                            "darkcyan",
                            "darkgoldenrod",
                            "darkgray",
                            "darkgreen",
                            "darkgrey",
                            "darkkhaki",
                            "darkmagenta",
                            "darkolivegreen",
                            "darkorange",
                            "darkorchid",
                            "darkred",
                            "darksalmon",
                            "darkseagreen",
                            "darkslateblue",
                            "darkslategray",
                            "darkslategrey",
                            "darkturquoise",
                            "darkviolet",
                            "deeppink",
                            "deepskyblue",
                            "dimgray",
                            "dimgrey",
                            "dodgerblue",
                            "firebrick",
                            "floralwhite",
                            "forestgreen",
                            "gainsboro",
                            "ghostwhite",
                            "gold",
                            "goldenrod",
                            "greenyellow",
                            "grey",
                            "honeydew",
                            "hotpink",
                            "indianred",
                            "indigo",
                            "ivory",
                            "khaki",
                            "lavender",
                            "lavenderblush",
                            "lawngreen",
                            "lemonchiffon",
                            "lightblue",
                            "lightcoral",
                            "lightcyan",
                            "lightgoldenrodyellow",
                            "lightgray",
                            "lightgreen",
                            "lightgrey",
                            "lightpink",
                            "lightsalmon",
                            "lightseagreen",
                            "lightskyblue",
                            "lightslategray",
                            "lightslategrey",
                            "lightsteelblue",
                            "lightyellow",
                            "limegreen",
                            "linen",
                            "magenta",
                            "mediumaquamarine",
                            "mediumblue",
                            "mediumorchid",
                            "mediumpurple",
                            "mediumseagreen",
                            "mediumslateblue",
                            "mediumspringgreen",
                            "mediumturquoise",
                            "mediumvioletred",
                            "midnightblue",
                            "mintcream",
                            "mistyrose",
                            "moccasin",
                            "navajowhite",
                            "oldlace",
                            "olivedrab",
                            "orangered",
                            "orchid",
                            "palegoldenrod",
                            "palegreen",
                            "paleturquoise",
                            "palevioletred",
                            "papayawhip",
                            "peachpuff",
                            "peru",
                            "pink",
                            "plum",
                            "powderblue",
                            "rosybrown",
                            "royalblue",
                            "saddlebrown",
                            "salmon",
                            "sandybrown",
                            "seagreen",
                            "seashell",
                            "sienna",
                            "skyblue",
                            "slateblue",
                            "slategray",
                            "slategrey",
                            "snow",
                            "springgreen",
                            "steelblue",
                            "tan",
                            "thistle",
                            "tomato",
                            "turquoise",
                            "violet",
                            "wheat",
                            "whitesmoke",
                            "yellowgreen",
                            "rebeccapurple",
                        ],
                    ],
                    Union["HexColor", str],
                    str,
                ],
                Union["ExprRef", "_ParameterProtocol", dict],
                Union[
                    "Gradient",
                    Union["LinearGradient", dict],
                    Union["RadialGradient", dict],
                ],
            ],
            UndefinedType,
        ] = Undefined,
        continuousBandSize: Union[float, UndefinedType] = Undefined,
        cornerRadius: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], float], UndefinedType
        ] = Undefined,
        cornerRadiusBottomLeft: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], float], UndefinedType
        ] = Undefined,
        cornerRadiusBottomRight: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], float], UndefinedType
        ] = Undefined,
        cornerRadiusTopLeft: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], float], UndefinedType
        ] = Undefined,
        cornerRadiusTopRight: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], float], UndefinedType
        ] = Undefined,
        cursor: Union[
            Union[
                Union[
                    "Cursor",
                    Literal[
                        "auto",
                        "default",
                        "none",
                        "context-menu",
                        "help",
                        "pointer",
                        "progress",
                        "wait",
                        "cell",
                        "crosshair",
                        "text",
                        "vertical-text",
                        "alias",
                        "copy",
                        "move",
                        "no-drop",
                        "not-allowed",
                        "e-resize",
                        "n-resize",
                        "ne-resize",
                        "nw-resize",
                        "s-resize",
                        "se-resize",
                        "sw-resize",
                        "w-resize",
                        "ew-resize",
                        "ns-resize",
                        "nesw-resize",
                        "nwse-resize",
                        "col-resize",
                        "row-resize",
                        "all-scroll",
                        "zoom-in",
                        "zoom-out",
                        "grab",
                        "grabbing",
                    ],
                ],
                Union["ExprRef", "_ParameterProtocol", dict],
            ],
            UndefinedType,
        ] = Undefined,
        description: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], str], UndefinedType
        ] = Undefined,
        dir: Union[
            Union[
                Union["ExprRef", "_ParameterProtocol", dict],
                Union["TextDirection", Literal["ltr", "rtl"]],
            ],
            UndefinedType,
        ] = Undefined,
        discreteBandSize: Union[
            Union[Union["RelativeBandSize", dict], float], UndefinedType
        ] = Undefined,
        dx: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], float], UndefinedType
        ] = Undefined,
        dy: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], float], UndefinedType
        ] = Undefined,
        ellipsis: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], str], UndefinedType
        ] = Undefined,
        endAngle: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], float], UndefinedType
        ] = Undefined,
        fill: Union[
            Union[
                None,
                Union[
                    "Color",
                    Union[
                        "ColorName",
                        Literal[
                            "black",
                            "silver",
                            "gray",
                            "white",
                            "maroon",
                            "red",
                            "purple",
                            "fuchsia",
                            "green",
                            "lime",
                            "olive",
                            "yellow",
                            "navy",
                            "blue",
                            "teal",
                            "aqua",
                            "orange",
                            "aliceblue",
                            "antiquewhite",
                            "aquamarine",
                            "azure",
                            "beige",
                            "bisque",
                            "blanchedalmond",
                            "blueviolet",
                            "brown",
                            "burlywood",
                            "cadetblue",
                            "chartreuse",
                            "chocolate",
                            "coral",
                            "cornflowerblue",
                            "cornsilk",
                            "crimson",
                            "cyan",
                            "darkblue",
                            "darkcyan",
                            "darkgoldenrod",
                            "darkgray",
                            "darkgreen",
                            "darkgrey",
                            "darkkhaki",
                            "darkmagenta",
                            "darkolivegreen",
                            "darkorange",
                            "darkorchid",
                            "darkred",
                            "darksalmon",
                            "darkseagreen",
                            "darkslateblue",
                            "darkslategray",
                            "darkslategrey",
                            "darkturquoise",
                            "darkviolet",
                            "deeppink",
                            "deepskyblue",
                            "dimgray",
                            "dimgrey",
                            "dodgerblue",
                            "firebrick",
                            "floralwhite",
                            "forestgreen",
                            "gainsboro",
                            "ghostwhite",
                            "gold",
                            "goldenrod",
                            "greenyellow",
                            "grey",
                            "honeydew",
                            "hotpink",
                            "indianred",
                            "indigo",
                            "ivory",
                            "khaki",
                            "lavender",
                            "lavenderblush",
                            "lawngreen",
                            "lemonchiffon",
                            "lightblue",
                            "lightcoral",
                            "lightcyan",
                            "lightgoldenrodyellow",
                            "lightgray",
                            "lightgreen",
                            "lightgrey",
                            "lightpink",
                            "lightsalmon",
                            "lightseagreen",
                            "lightskyblue",
                            "lightslategray",
                            "lightslategrey",
                            "lightsteelblue",
                            "lightyellow",
                            "limegreen",
                            "linen",
                            "magenta",
                            "mediumaquamarine",
                            "mediumblue",
                            "mediumorchid",
                            "mediumpurple",
                            "mediumseagreen",
                            "mediumslateblue",
                            "mediumspringgreen",
                            "mediumturquoise",
                            "mediumvioletred",
                            "midnightblue",
                            "mintcream",
                            "mistyrose",
                            "moccasin",
                            "navajowhite",
                            "oldlace",
                            "olivedrab",
                            "orangered",
                            "orchid",
                            "palegoldenrod",
                            "palegreen",
                            "paleturquoise",
                            "palevioletred",
                            "papayawhip",
                            "peachpuff",
                            "peru",
                            "pink",
                            "plum",
                            "powderblue",
                            "rosybrown",
                            "royalblue",
                            "saddlebrown",
                            "salmon",
                            "sandybrown",
                            "seagreen",
                            "seashell",
                            "sienna",
                            "skyblue",
                            "slateblue",
                            "slategray",
                            "slategrey",
                            "snow",
                            "springgreen",
                            "steelblue",
                            "tan",
                            "thistle",
                            "tomato",
                            "turquoise",
                            "violet",
                            "wheat",
                            "whitesmoke",
                            "yellowgreen",
                            "rebeccapurple",
                        ],
                    ],
                    Union["HexColor", str],
                    str,
                ],
                Union["ExprRef", "_ParameterProtocol", dict],
                Union[
                    "Gradient",
                    Union["LinearGradient", dict],
                    Union["RadialGradient", dict],
                ],
            ],
            UndefinedType,
        ] = Undefined,
        fillOpacity: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], float], UndefinedType
        ] = Undefined,
        filled: Union[bool, UndefinedType] = Undefined,
        font: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], str], UndefinedType
        ] = Undefined,
        fontSize: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], float], UndefinedType
        ] = Undefined,
        fontStyle: Union[
            Union[
                Union["ExprRef", "_ParameterProtocol", dict], Union["FontStyle", str]
            ],
            UndefinedType,
        ] = Undefined,
        fontWeight: Union[
            Union[
                Union["ExprRef", "_ParameterProtocol", dict],
                Union[
                    "FontWeight",
                    Literal[
                        "normal",
                        "bold",
                        "lighter",
                        "bolder",
                        100,
                        200,
                        300,
                        400,
                        500,
                        600,
                        700,
                        800,
                        900,
                    ],
                ],
            ],
            UndefinedType,
        ] = Undefined,
        height: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], float], UndefinedType
        ] = Undefined,
        href: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], Union["URI", str]],
            UndefinedType,
        ] = Undefined,
        innerRadius: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], float], UndefinedType
        ] = Undefined,
        interpolate: Union[
            Union[
                Union["ExprRef", "_ParameterProtocol", dict],
                Union[
                    "Interpolate",
                    Literal[
                        "basis",
                        "basis-open",
                        "basis-closed",
                        "bundle",
                        "cardinal",
                        "cardinal-open",
                        "cardinal-closed",
                        "catmull-rom",
                        "linear",
                        "linear-closed",
                        "monotone",
                        "natural",
                        "step",
                        "step-before",
                        "step-after",
                    ],
                ],
            ],
            UndefinedType,
        ] = Undefined,
        invalid: Union[Literal["filter", None], UndefinedType] = Undefined,
        limit: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], float], UndefinedType
        ] = Undefined,
        lineBreak: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], str], UndefinedType
        ] = Undefined,
        lineHeight: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], float], UndefinedType
        ] = Undefined,
        minBandSize: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], float], UndefinedType
        ] = Undefined,
        opacity: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], float], UndefinedType
        ] = Undefined,
        order: Union[Union[None, bool], UndefinedType] = Undefined,
        orient: Union[
            Union["Orientation", Literal["horizontal", "vertical"]], UndefinedType
        ] = Undefined,
        outerRadius: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], float], UndefinedType
        ] = Undefined,
        padAngle: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], float], UndefinedType
        ] = Undefined,
        radius: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], float], UndefinedType
        ] = Undefined,
        radius2: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], float], UndefinedType
        ] = Undefined,
        shape: Union[
            Union[
                Union["ExprRef", "_ParameterProtocol", dict],
                Union[Union["SymbolShape", str], str],
            ],
            UndefinedType,
        ] = Undefined,
        size: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], float], UndefinedType
        ] = Undefined,
        smooth: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], bool], UndefinedType
        ] = Undefined,
        startAngle: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], float], UndefinedType
        ] = Undefined,
        stroke: Union[
            Union[
                None,
                Union[
                    "Color",
                    Union[
                        "ColorName",
                        Literal[
                            "black",
                            "silver",
                            "gray",
                            "white",
                            "maroon",
                            "red",
                            "purple",
                            "fuchsia",
                            "green",
                            "lime",
                            "olive",
                            "yellow",
                            "navy",
                            "blue",
                            "teal",
                            "aqua",
                            "orange",
                            "aliceblue",
                            "antiquewhite",
                            "aquamarine",
                            "azure",
                            "beige",
                            "bisque",
                            "blanchedalmond",
                            "blueviolet",
                            "brown",
                            "burlywood",
                            "cadetblue",
                            "chartreuse",
                            "chocolate",
                            "coral",
                            "cornflowerblue",
                            "cornsilk",
                            "crimson",
                            "cyan",
                            "darkblue",
                            "darkcyan",
                            "darkgoldenrod",
                            "darkgray",
                            "darkgreen",
                            "darkgrey",
                            "darkkhaki",
                            "darkmagenta",
                            "darkolivegreen",
                            "darkorange",
                            "darkorchid",
                            "darkred",
                            "darksalmon",
                            "darkseagreen",
                            "darkslateblue",
                            "darkslategray",
                            "darkslategrey",
                            "darkturquoise",
                            "darkviolet",
                            "deeppink",
                            "deepskyblue",
                            "dimgray",
                            "dimgrey",
                            "dodgerblue",
                            "firebrick",
                            "floralwhite",
                            "forestgreen",
                            "gainsboro",
                            "ghostwhite",
                            "gold",
                            "goldenrod",
                            "greenyellow",
                            "grey",
                            "honeydew",
                            "hotpink",
                            "indianred",
                            "indigo",
                            "ivory",
                            "khaki",
                            "lavender",
                            "lavenderblush",
                            "lawngreen",
                            "lemonchiffon",
                            "lightblue",
                            "lightcoral",
                            "lightcyan",
                            "lightgoldenrodyellow",
                            "lightgray",
                            "lightgreen",
                            "lightgrey",
                            "lightpink",
                            "lightsalmon",
                            "lightseagreen",
                            "lightskyblue",
                            "lightslategray",
                            "lightslategrey",
                            "lightsteelblue",
                            "lightyellow",
                            "limegreen",
                            "linen",
                            "magenta",
                            "mediumaquamarine",
                            "mediumblue",
                            "mediumorchid",
                            "mediumpurple",
                            "mediumseagreen",
                            "mediumslateblue",
                            "mediumspringgreen",
                            "mediumturquoise",
                            "mediumvioletred",
                            "midnightblue",
                            "mintcream",
                            "mistyrose",
                            "moccasin",
                            "navajowhite",
                            "oldlace",
                            "olivedrab",
                            "orangered",
                            "orchid",
                            "palegoldenrod",
                            "palegreen",
                            "paleturquoise",
                            "palevioletred",
                            "papayawhip",
                            "peachpuff",
                            "peru",
                            "pink",
                            "plum",
                            "powderblue",
                            "rosybrown",
                            "royalblue",
                            "saddlebrown",
                            "salmon",
                            "sandybrown",
                            "seagreen",
                            "seashell",
                            "sienna",
                            "skyblue",
                            "slateblue",
                            "slategray",
                            "slategrey",
                            "snow",
                            "springgreen",
                            "steelblue",
                            "tan",
                            "thistle",
                            "tomato",
                            "turquoise",
                            "violet",
                            "wheat",
                            "whitesmoke",
                            "yellowgreen",
                            "rebeccapurple",
                        ],
                    ],
                    Union["HexColor", str],
                    str,
                ],
                Union["ExprRef", "_ParameterProtocol", dict],
                Union[
                    "Gradient",
                    Union["LinearGradient", dict],
                    Union["RadialGradient", dict],
                ],
            ],
            UndefinedType,
        ] = Undefined,
        strokeCap: Union[
            Union[
                Union["ExprRef", "_ParameterProtocol", dict],
                Union["StrokeCap", Literal["butt", "round", "square"]],
            ],
            UndefinedType,
        ] = Undefined,
        strokeDash: Union[
            Union[List[float], Union["ExprRef", "_ParameterProtocol", dict]],
            UndefinedType,
        ] = Undefined,
        strokeDashOffset: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], float], UndefinedType
        ] = Undefined,
        strokeJoin: Union[
            Union[
                Union["ExprRef", "_ParameterProtocol", dict],
                Union["StrokeJoin", Literal["miter", "round", "bevel"]],
            ],
            UndefinedType,
        ] = Undefined,
        strokeMiterLimit: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], float], UndefinedType
        ] = Undefined,
        strokeOffset: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], float], UndefinedType
        ] = Undefined,
        strokeOpacity: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], float], UndefinedType
        ] = Undefined,
        strokeWidth: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], float], UndefinedType
        ] = Undefined,
        tension: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], float], UndefinedType
        ] = Undefined,
        text: Union[
            Union[
                Union["ExprRef", "_ParameterProtocol", dict],
                Union["Text", List[str], str],
            ],
            UndefinedType,
        ] = Undefined,
        theta: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], float], UndefinedType
        ] = Undefined,
        theta2: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], float], UndefinedType
        ] = Undefined,
        timeUnitBandPosition: Union[float, UndefinedType] = Undefined,
        timeUnitBandSize: Union[float, UndefinedType] = Undefined,
        tooltip: Union[
            Union[
                None,
                Union["ExprRef", "_ParameterProtocol", dict],
                Union["TooltipContent", dict],
                bool,
                float,
                str,
            ],
            UndefinedType,
        ] = Undefined,
        url: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], Union["URI", str]],
            UndefinedType,
        ] = Undefined,
        width: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], float], UndefinedType
        ] = Undefined,
        x: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], float, str],
            UndefinedType,
        ] = Undefined,
        x2: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], float, str],
            UndefinedType,
        ] = Undefined,
        y: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], float, str],
            UndefinedType,
        ] = Undefined,
        y2: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], float, str],
            UndefinedType,
        ] = Undefined,
        **kwds
    ):
        super(RectConfig, self).__init__(
            align=align,
            angle=angle,
            aria=aria,
            ariaRole=ariaRole,
            ariaRoleDescription=ariaRoleDescription,
            aspect=aspect,
            baseline=baseline,
            binSpacing=binSpacing,
            blend=blend,
            color=color,
            continuousBandSize=continuousBandSize,
            cornerRadius=cornerRadius,
            cornerRadiusBottomLeft=cornerRadiusBottomLeft,
            cornerRadiusBottomRight=cornerRadiusBottomRight,
            cornerRadiusTopLeft=cornerRadiusTopLeft,
            cornerRadiusTopRight=cornerRadiusTopRight,
            cursor=cursor,
            description=description,
            dir=dir,
            discreteBandSize=discreteBandSize,
            dx=dx,
            dy=dy,
            ellipsis=ellipsis,
            endAngle=endAngle,
            fill=fill,
            fillOpacity=fillOpacity,
            filled=filled,
            font=font,
            fontSize=fontSize,
            fontStyle=fontStyle,
            fontWeight=fontWeight,
            height=height,
            href=href,
            innerRadius=innerRadius,
            interpolate=interpolate,
            invalid=invalid,
            limit=limit,
            lineBreak=lineBreak,
            lineHeight=lineHeight,
            minBandSize=minBandSize,
            opacity=opacity,
            order=order,
            orient=orient,
            outerRadius=outerRadius,
            padAngle=padAngle,
            radius=radius,
            radius2=radius2,
            shape=shape,
            size=size,
            smooth=smooth,
            startAngle=startAngle,
            stroke=stroke,
            strokeCap=strokeCap,
            strokeDash=strokeDash,
            strokeDashOffset=strokeDashOffset,
            strokeJoin=strokeJoin,
            strokeMiterLimit=strokeMiterLimit,
            strokeOffset=strokeOffset,
            strokeOpacity=strokeOpacity,
            strokeWidth=strokeWidth,
            tension=tension,
            text=text,
            theta=theta,
            theta2=theta2,
            timeUnitBandPosition=timeUnitBandPosition,
            timeUnitBandSize=timeUnitBandSize,
            tooltip=tooltip,
            url=url,
            width=width,
            x=x,
            x2=x2,
            y=y,
            y2=y2,
            **kwds
        )


class RelativeBandSize(VegaLiteSchema):
    """RelativeBandSize schema wrapper

    Union[:class:`RelativeBandSize`, Dict[required=[band]]]

    Parameters
    ----------

    band : float
        The relative band size.  For example ``0.5`` means half of the band scale's band
        width.
    """

    _schema = {"$ref": "#/definitions/RelativeBandSize"}

    def __init__(self, band: Union[float, UndefinedType] = Undefined, **kwds):
        super(RelativeBandSize, self).__init__(band=band, **kwds)


class RepeatMapping(VegaLiteSchema):
    """RepeatMapping schema wrapper

    Union[:class:`RepeatMapping`, Dict[required=[]]]

    Parameters
    ----------

    column : List[str]
        An array of fields to be repeated horizontally.
    row : List[str]
        An array of fields to be repeated vertically.
    """

    _schema = {"$ref": "#/definitions/RepeatMapping"}

    def __init__(
        self,
        column: Union[List[str], UndefinedType] = Undefined,
        row: Union[List[str], UndefinedType] = Undefined,
        **kwds
    ):
        super(RepeatMapping, self).__init__(column=column, row=row, **kwds)


class RepeatRef(Field):
    """RepeatRef schema wrapper

    Union[:class:`RepeatRef`, Dict[required=[repeat]]]
    Reference to a repeated value.

    Parameters
    ----------

    repeat : Literal['row', 'column', 'repeat', 'layer']

    """

    _schema = {"$ref": "#/definitions/RepeatRef"}

    def __init__(
        self,
        repeat: Union[
            Literal["row", "column", "repeat", "layer"], UndefinedType
        ] = Undefined,
        **kwds
    ):
        super(RepeatRef, self).__init__(repeat=repeat, **kwds)


class Resolve(VegaLiteSchema):
    """Resolve schema wrapper

    Union[:class:`Resolve`, Dict[required=[]]]
    Defines how scales, axes, and legends from different specs should be combined. Resolve is a
    mapping from ``scale``, ``axis``, and ``legend`` to a mapping from channels to resolutions.
    Scales and guides can be resolved to be ``"independent"`` or ``"shared"``.

    Parameters
    ----------

    axis : Union[:class:`AxisResolveMap`, Dict[required=[]]]

    legend : Union[:class:`LegendResolveMap`, Dict[required=[]]]

    scale : Union[:class:`ScaleResolveMap`, Dict[required=[]]]

    """

    _schema = {"$ref": "#/definitions/Resolve"}

    def __init__(
        self,
        axis: Union[Union["AxisResolveMap", dict], UndefinedType] = Undefined,
        legend: Union[Union["LegendResolveMap", dict], UndefinedType] = Undefined,
        scale: Union[Union["ScaleResolveMap", dict], UndefinedType] = Undefined,
        **kwds
    ):
        super(Resolve, self).__init__(axis=axis, legend=legend, scale=scale, **kwds)


class ResolveMode(VegaLiteSchema):
    """ResolveMode schema wrapper

    Union[:class:`ResolveMode`, Literal['independent', 'shared']]
    """

    _schema = {"$ref": "#/definitions/ResolveMode"}

    def __init__(self, *args):
        super(ResolveMode, self).__init__(*args)


class RowColLayoutAlign(VegaLiteSchema):
    """RowColLayoutAlign schema wrapper

    Union[:class:`RowColLayoutAlign`, Dict[required=[]]]

    Parameters
    ----------

    column : Union[:class:`LayoutAlign`, Literal['all', 'each', 'none']]

    row : Union[:class:`LayoutAlign`, Literal['all', 'each', 'none']]

    """

    _schema = {"$ref": "#/definitions/RowCol<LayoutAlign>"}

    def __init__(
        self,
        column: Union[
            Union["LayoutAlign", Literal["all", "each", "none"]], UndefinedType
        ] = Undefined,
        row: Union[
            Union["LayoutAlign", Literal["all", "each", "none"]], UndefinedType
        ] = Undefined,
        **kwds
    ):
        super(RowColLayoutAlign, self).__init__(column=column, row=row, **kwds)


class RowColboolean(VegaLiteSchema):
    """RowColboolean schema wrapper

    Union[:class:`RowColboolean`, Dict[required=[]]]

    Parameters
    ----------

    column : bool

    row : bool

    """

    _schema = {"$ref": "#/definitions/RowCol<boolean>"}

    def __init__(
        self,
        column: Union[bool, UndefinedType] = Undefined,
        row: Union[bool, UndefinedType] = Undefined,
        **kwds
    ):
        super(RowColboolean, self).__init__(column=column, row=row, **kwds)


class RowColnumber(VegaLiteSchema):
    """RowColnumber schema wrapper

    Union[:class:`RowColnumber`, Dict[required=[]]]

    Parameters
    ----------

    column : float

    row : float

    """

    _schema = {"$ref": "#/definitions/RowCol<number>"}

    def __init__(
        self,
        column: Union[float, UndefinedType] = Undefined,
        row: Union[float, UndefinedType] = Undefined,
        **kwds
    ):
        super(RowColnumber, self).__init__(column=column, row=row, **kwds)


class RowColumnEncodingFieldDef(VegaLiteSchema):
    """RowColumnEncodingFieldDef schema wrapper

    Union[:class:`RowColumnEncodingFieldDef`, Dict[required=[]]]

    Parameters
    ----------

    aggregate : Union[:class:`Aggregate`, Union[:class:`ArgmaxDef`, Dict[required=[argmax]]], Union[:class:`ArgminDef`, Dict[required=[argmin]]], Union[:class:`NonArgAggregateOp`, Literal['average', 'count', 'distinct', 'max', 'mean', 'median', 'min', 'missing', 'product', 'q1', 'q3', 'ci0', 'ci1', 'stderr', 'stdev', 'stdevp', 'sum', 'valid', 'values', 'variance', 'variancep']]]
        Aggregation function for the field (e.g., ``"mean"``, ``"sum"``, ``"median"``,
        ``"min"``, ``"max"``, ``"count"`` ).

        **Default value:** ``undefined`` (None)

        **See also:** `aggregate <https://vega.github.io/vega-lite/docs/aggregate.html>`__
        documentation.
    align : Union[:class:`LayoutAlign`, Literal['all', 'each', 'none']]
        The alignment to apply to row/column facet's subplot. The supported string values
        are ``"all"``, ``"each"``, and ``"none"``.


        * For ``"none"``, a flow layout will be used, in which adjacent subviews are simply
          placed one after the other.
        * For ``"each"``, subviews will be aligned into a clean grid structure, but each row
          or column may be of variable size.
        * For ``"all"``, subviews will be aligned and each row or column will be sized
          identically based on the maximum observed size. String values for this property
          will be applied to both grid rows and columns.

        **Default value:** ``"all"``.
    bandPosition : float
        Relative position on a band of a stacked, binned, time unit, or band scale. For
        example, the marks will be positioned at the beginning of the band if set to ``0``,
        and at the middle of the band if set to ``0.5``.
    bin : Union[None, Union[:class:`BinParams`, Dict[required=[]]], bool]
        A flag for binning a ``quantitative`` field, `an object defining binning parameters
        <https://vega.github.io/vega-lite/docs/bin.html#bin-parameters>`__, or indicating
        that the data for ``x`` or ``y`` channel are binned before they are imported into
        Vega-Lite ( ``"binned"`` ).


        If ``true``, default `binning parameters
        <https://vega.github.io/vega-lite/docs/bin.html#bin-parameters>`__ will be applied.

        If ``"binned"``, this indicates that the data for the ``x`` (or ``y`` ) channel are
        already binned. You can map the bin-start field to ``x`` (or ``y`` ) and the bin-end
        field to ``x2`` (or ``y2`` ). The scale and axis will be formatted similar to
        binning in Vega-Lite.  To adjust the axis ticks based on the bin step, you can also
        set the axis's `tickMinStep
        <https://vega.github.io/vega-lite/docs/axis.html#ticks>`__ property.

        **Default value:** ``false``

        **See also:** `bin <https://vega.github.io/vega-lite/docs/bin.html>`__
        documentation.
    center : bool
        Boolean flag indicating if facet's subviews should be centered relative to their
        respective rows or columns.

        **Default value:** ``false``
    field : Union[:class:`Field`, Union[:class:`FieldName`, str], Union[:class:`RepeatRef`, Dict[required=[repeat]]]]
        **Required.** A string defining the name of the field from which to pull a data
        value or an object defining iterated values from the `repeat
        <https://vega.github.io/vega-lite/docs/repeat.html>`__ operator.

        **See also:** `field <https://vega.github.io/vega-lite/docs/field.html>`__
        documentation.

        **Notes:** 1)  Dots ( ``.`` ) and brackets ( ``[`` and ``]`` ) can be used to access
        nested objects (e.g., ``"field": "foo.bar"`` and ``"field": "foo['bar']"`` ). If
        field names contain dots or brackets but are not nested, you can use ``\\`` to
        escape dots and brackets (e.g., ``"a\\.b"`` and ``"a\\[0\\]"`` ). See more details
        about escaping in the `field documentation
        <https://vega.github.io/vega-lite/docs/field.html>`__. 2) ``field`` is not required
        if ``aggregate`` is ``count``.
    header : Union[None, Union[:class:`Header`, Dict[required=[]]]]
        An object defining properties of a facet's header.
    sort : Union[None, Union[:class:`EncodingSortField`, Dict[required=[]]], Union[:class:`SortArray`, List[Union[:class:`DateTime`, Dict[required=[]]]], List[bool], List[float], List[str]], Union[:class:`SortOrder`, Literal['ascending', 'descending']]]
        Sort order for the encoded field.

        For continuous fields (quantitative or temporal), ``sort`` can be either
        ``"ascending"`` or ``"descending"``.

        For discrete fields, ``sort`` can be one of the following:


        * ``"ascending"`` or ``"descending"`` -- for sorting by the values' natural order in
          JavaScript.
        * `A sort field definition
          <https://vega.github.io/vega-lite/docs/sort.html#sort-field>`__ for sorting by
          another field.
        * `An array specifying the field values in preferred order
          <https://vega.github.io/vega-lite/docs/sort.html#sort-array>`__. In this case, the
          sort order will obey the values in the array, followed by any unspecified values
          in their original order. For discrete time field, values in the sort array can be
          `date-time definition objects
          <https://vega.github.io/vega-lite/docs/datetime.html>`__. In addition, for time
          units ``"month"`` and ``"day"``, the values can be the month or day names (case
          insensitive) or their 3-letter initials (e.g., ``"Mon"``, ``"Tue"`` ).
        * ``null`` indicating no sort.

        **Default value:** ``"ascending"``

        **Note:** ``null`` is not supported for ``row`` and ``column``.
    spacing : float
        The spacing in pixels between facet's sub-views.

        **Default value** : Depends on ``"spacing"`` property of `the view composition
        configuration <https://vega.github.io/vega-lite/docs/config.html#view-config>`__ (
        ``20`` by default)
    timeUnit : Union[Union[:class:`BinnedTimeUnit`, Literal['binnedutcyear', 'binnedutcyearquarter', 'binnedutcyearquartermonth', 'binnedutcyearmonth', 'binnedutcyearmonthdate', 'binnedutcyearmonthdatehours', 'binnedutcyearmonthdatehoursminutes', 'binnedutcyearmonthdatehoursminutesseconds', 'binnedutcyearweek', 'binnedutcyearweekday', 'binnedutcyearweekdayhours', 'binnedutcyearweekdayhoursminutes', 'binnedutcyearweekdayhoursminutesseconds', 'binnedutcyeardayofyear'], Literal['binnedyear', 'binnedyearquarter', 'binnedyearquartermonth', 'binnedyearmonth', 'binnedyearmonthdate', 'binnedyearmonthdatehours', 'binnedyearmonthdatehoursminutes', 'binnedyearmonthdatehoursminutesseconds', 'binnedyearweek', 'binnedyearweekday', 'binnedyearweekdayhours', 'binnedyearweekdayhoursminutes', 'binnedyearweekdayhoursminutesseconds', 'binnedyeardayofyear']], Union[:class:`TimeUnitParams`, Dict[required=[]]], Union[:class:`TimeUnit`, Union[:class:`MultiTimeUnit`, Union[:class:`LocalMultiTimeUnit`, Literal['yearquarter', 'yearquartermonth', 'yearmonth', 'yearmonthdate', 'yearmonthdatehours', 'yearmonthdatehoursminutes', 'yearmonthdatehoursminutesseconds', 'yearweek', 'yearweekday', 'yearweekdayhours', 'yearweekdayhoursminutes', 'yearweekdayhoursminutesseconds', 'yeardayofyear', 'quartermonth', 'monthdate', 'monthdatehours', 'monthdatehoursminutes', 'monthdatehoursminutesseconds', 'weekday', 'weeksdayhours', 'weekdayhoursminutes', 'weekdayhoursminutesseconds', 'dayhours', 'dayhoursminutes', 'dayhoursminutesseconds', 'hoursminutes', 'hoursminutesseconds', 'minutesseconds', 'secondsmilliseconds']], Union[:class:`UtcMultiTimeUnit`, Literal['utcyearquarter', 'utcyearquartermonth', 'utcyearmonth', 'utcyearmonthdate', 'utcyearmonthdatehours', 'utcyearmonthdatehoursminutes', 'utcyearmonthdatehoursminutesseconds', 'utcyearweek', 'utcyearweekday', 'utcyearweekdayhours', 'utcyearweekdayhoursminutes', 'utcyearweekdayhoursminutesseconds', 'utcyeardayofyear', 'utcquartermonth', 'utcmonthdate', 'utcmonthdatehours', 'utcmonthdatehoursminutes', 'utcmonthdatehoursminutesseconds', 'utcweekday', 'utcweeksdayhours', 'utcweekdayhoursminutes', 'utcweekdayhoursminutesseconds', 'utcdayhours', 'utcdayhoursminutes', 'utcdayhoursminutesseconds', 'utchoursminutes', 'utchoursminutesseconds', 'utcminutesseconds', 'utcsecondsmilliseconds']]], Union[:class:`SingleTimeUnit`, Union[:class:`LocalSingleTimeUnit`, Literal['year', 'quarter', 'month', 'week', 'day', 'dayofyear', 'date', 'hours', 'minutes', 'seconds', 'milliseconds']], Union[:class:`UtcSingleTimeUnit`, Literal['utcyear', 'utcquarter', 'utcmonth', 'utcweek', 'utcday', 'utcdayofyear', 'utcdate', 'utchours', 'utcminutes', 'utcseconds', 'utcmilliseconds']]]]]
        Time unit (e.g., ``year``, ``yearmonth``, ``month``, ``hours`` ) for a temporal
        field. or `a temporal field that gets casted as ordinal
        <https://vega.github.io/vega-lite/docs/type.html#cast>`__.

        **Default value:** ``undefined`` (None)

        **See also:** `timeUnit <https://vega.github.io/vega-lite/docs/timeunit.html>`__
        documentation.
    title : Union[None, Union[:class:`Text`, List[str], str]]
        A title for the field. If ``null``, the title will be removed.

        **Default value:**  derived from the field's name and transformation function (
        ``aggregate``, ``bin`` and ``timeUnit`` ). If the field has an aggregate function,
        the function is displayed as part of the title (e.g., ``"Sum of Profit"`` ). If the
        field is binned or has a time unit applied, the applied function is shown in
        parentheses (e.g., ``"Profit (binned)"``, ``"Transaction Date (year-month)"`` ).
        Otherwise, the title is simply the field name.

        **Notes** :

        1) You can customize the default field title format by providing the `fieldTitle
        <https://vega.github.io/vega-lite/docs/config.html#top-level-config>`__ property in
        the `config <https://vega.github.io/vega-lite/docs/config.html>`__ or `fieldTitle
        function via the compile function's options
        <https://vega.github.io/vega-lite/usage/compile.html#field-title>`__.

        2) If both field definition's ``title`` and axis, header, or legend ``title`` are
        defined, axis/header/legend title will be used.
    type : Union[:class:`StandardType`, Literal['quantitative', 'ordinal', 'temporal', 'nominal']]
        The type of measurement ( ``"quantitative"``, ``"temporal"``, ``"ordinal"``, or
        ``"nominal"`` ) for the encoded field or constant value ( ``datum`` ). It can also
        be a ``"geojson"`` type for encoding `'geoshape'
        <https://vega.github.io/vega-lite/docs/geoshape.html>`__.

        Vega-Lite automatically infers data types in many cases as discussed below. However,
        type is required for a field if: (1) the field is not nominal and the field encoding
        has no specified ``aggregate`` (except ``argmin`` and ``argmax`` ), ``bin``, scale
        type, custom ``sort`` order, nor ``timeUnit`` or (2) if you wish to use an ordinal
        scale for a field with ``bin`` or ``timeUnit``.

        **Default value:**

        1) For a data ``field``, ``"nominal"`` is the default data type unless the field
        encoding has ``aggregate``, ``channel``, ``bin``, scale type, ``sort``, or
        ``timeUnit`` that satisfies the following criteria:


        * ``"quantitative"`` is the default type if (1) the encoded field contains ``bin``
          or ``aggregate`` except ``"argmin"`` and ``"argmax"``, (2) the encoding channel is
          ``latitude`` or ``longitude`` channel or (3) if the specified scale type is `a
          quantitative scale <https://vega.github.io/vega-lite/docs/scale.html#type>`__.
        * ``"temporal"`` is the default type if (1) the encoded field contains ``timeUnit``
          or (2) the specified scale type is a time or utc scale
        * ``"ordinal"`` is the default type if (1) the encoded field contains a `custom sort
          order
          <https://vega.github.io/vega-lite/docs/sort.html#specifying-custom-sort-order>`__,
          (2) the specified scale type is an ordinal/point/band scale, or (3) the encoding
          channel is ``order``.

        2) For a constant value in data domain ( ``datum`` ):


        * ``"quantitative"`` if the datum is a number
        * ``"nominal"`` if the datum is a string
        * ``"temporal"`` if the datum is `a date time object
          <https://vega.github.io/vega-lite/docs/datetime.html>`__

        **Note:**


        * Data ``type`` describes the semantics of the data rather than the primitive data
          types (number, string, etc.). The same primitive data type can have different
          types of measurement. For example, numeric data can represent quantitative,
          ordinal, or nominal data.
        * Data values for a temporal field can be either a date-time string (e.g.,
          ``"2015-03-07 12:32:17"``, ``"17:01"``, ``"2015-03-16"``. ``"2015"`` ) or a
          timestamp number (e.g., ``1552199579097`` ).
        * When using with `bin <https://vega.github.io/vega-lite/docs/bin.html>`__, the
          ``type`` property can be either ``"quantitative"`` (for using a linear bin scale)
          or `"ordinal" (for using an ordinal bin scale)
          <https://vega.github.io/vega-lite/docs/type.html#cast-bin>`__.
        * When using with `timeUnit
          <https://vega.github.io/vega-lite/docs/timeunit.html>`__, the ``type`` property
          can be either ``"temporal"`` (default, for using a temporal scale) or `"ordinal"
          (for using an ordinal scale)
          <https://vega.github.io/vega-lite/docs/type.html#cast-bin>`__.
        * When using with `aggregate
          <https://vega.github.io/vega-lite/docs/aggregate.html>`__, the ``type`` property
          refers to the post-aggregation data type. For example, we can calculate count
          ``distinct`` of a categorical field ``"cat"`` using ``{"aggregate": "distinct",
          "field": "cat"}``. The ``"type"`` of the aggregate output is ``"quantitative"``.
        * Secondary channels (e.g., ``x2``, ``y2``, ``xError``, ``yError`` ) do not have
          ``type`` as they must have exactly the same type as their primary channels (e.g.,
          ``x``, ``y`` ).

        **See also:** `type <https://vega.github.io/vega-lite/docs/type.html>`__
        documentation.
    """

    _schema = {"$ref": "#/definitions/RowColumnEncodingFieldDef"}

    def __init__(
        self,
        aggregate: Union[
            Union[
                "Aggregate",
                Union["ArgmaxDef", dict],
                Union["ArgminDef", dict],
                Union[
                    "NonArgAggregateOp",
                    Literal[
                        "average",
                        "count",
                        "distinct",
                        "max",
                        "mean",
                        "median",
                        "min",
                        "missing",
                        "product",
                        "q1",
                        "q3",
                        "ci0",
                        "ci1",
                        "stderr",
                        "stdev",
                        "stdevp",
                        "sum",
                        "valid",
                        "values",
                        "variance",
                        "variancep",
                    ],
                ],
            ],
            UndefinedType,
        ] = Undefined,
        align: Union[
            Union["LayoutAlign", Literal["all", "each", "none"]], UndefinedType
        ] = Undefined,
        bandPosition: Union[float, UndefinedType] = Undefined,
        bin: Union[
            Union[None, Union["BinParams", dict], bool], UndefinedType
        ] = Undefined,
        center: Union[bool, UndefinedType] = Undefined,
        field: Union[
            Union["Field", Union["FieldName", str], Union["RepeatRef", dict]],
            UndefinedType,
        ] = Undefined,
        header: Union[Union[None, Union["Header", dict]], UndefinedType] = Undefined,
        sort: Union[
            Union[
                None,
                Union["EncodingSortField", dict],
                Union[
                    "SortArray",
                    List[bool],
                    List[float],
                    List[str],
                    Union[List["DateTime"], List[dict]],
                ],
                Union["SortOrder", Literal["ascending", "descending"]],
            ],
            UndefinedType,
        ] = Undefined,
        spacing: Union[float, UndefinedType] = Undefined,
        timeUnit: Union[
            Union[
                Union[
                    "BinnedTimeUnit",
                    Literal[
                        "binnedutcyear",
                        "binnedutcyearquarter",
                        "binnedutcyearquartermonth",
                        "binnedutcyearmonth",
                        "binnedutcyearmonthdate",
                        "binnedutcyearmonthdatehours",
                        "binnedutcyearmonthdatehoursminutes",
                        "binnedutcyearmonthdatehoursminutesseconds",
                        "binnedutcyearweek",
                        "binnedutcyearweekday",
                        "binnedutcyearweekdayhours",
                        "binnedutcyearweekdayhoursminutes",
                        "binnedutcyearweekdayhoursminutesseconds",
                        "binnedutcyeardayofyear",
                    ],
                    Literal[
                        "binnedyear",
                        "binnedyearquarter",
                        "binnedyearquartermonth",
                        "binnedyearmonth",
                        "binnedyearmonthdate",
                        "binnedyearmonthdatehours",
                        "binnedyearmonthdatehoursminutes",
                        "binnedyearmonthdatehoursminutesseconds",
                        "binnedyearweek",
                        "binnedyearweekday",
                        "binnedyearweekdayhours",
                        "binnedyearweekdayhoursminutes",
                        "binnedyearweekdayhoursminutesseconds",
                        "binnedyeardayofyear",
                    ],
                ],
                Union[
                    "TimeUnit",
                    Union[
                        "MultiTimeUnit",
                        Union[
                            "LocalMultiTimeUnit",
                            Literal[
                                "yearquarter",
                                "yearquartermonth",
                                "yearmonth",
                                "yearmonthdate",
                                "yearmonthdatehours",
                                "yearmonthdatehoursminutes",
                                "yearmonthdatehoursminutesseconds",
                                "yearweek",
                                "yearweekday",
                                "yearweekdayhours",
                                "yearweekdayhoursminutes",
                                "yearweekdayhoursminutesseconds",
                                "yeardayofyear",
                                "quartermonth",
                                "monthdate",
                                "monthdatehours",
                                "monthdatehoursminutes",
                                "monthdatehoursminutesseconds",
                                "weekday",
                                "weeksdayhours",
                                "weekdayhoursminutes",
                                "weekdayhoursminutesseconds",
                                "dayhours",
                                "dayhoursminutes",
                                "dayhoursminutesseconds",
                                "hoursminutes",
                                "hoursminutesseconds",
                                "minutesseconds",
                                "secondsmilliseconds",
                            ],
                        ],
                        Union[
                            "UtcMultiTimeUnit",
                            Literal[
                                "utcyearquarter",
                                "utcyearquartermonth",
                                "utcyearmonth",
                                "utcyearmonthdate",
                                "utcyearmonthdatehours",
                                "utcyearmonthdatehoursminutes",
                                "utcyearmonthdatehoursminutesseconds",
                                "utcyearweek",
                                "utcyearweekday",
                                "utcyearweekdayhours",
                                "utcyearweekdayhoursminutes",
                                "utcyearweekdayhoursminutesseconds",
                                "utcyeardayofyear",
                                "utcquartermonth",
                                "utcmonthdate",
                                "utcmonthdatehours",
                                "utcmonthdatehoursminutes",
                                "utcmonthdatehoursminutesseconds",
                                "utcweekday",
                                "utcweeksdayhours",
                                "utcweekdayhoursminutes",
                                "utcweekdayhoursminutesseconds",
                                "utcdayhours",
                                "utcdayhoursminutes",
                                "utcdayhoursminutesseconds",
                                "utchoursminutes",
                                "utchoursminutesseconds",
                                "utcminutesseconds",
                                "utcsecondsmilliseconds",
                            ],
                        ],
                    ],
                    Union[
                        "SingleTimeUnit",
                        Union[
                            "LocalSingleTimeUnit",
                            Literal[
                                "year",
                                "quarter",
                                "month",
                                "week",
                                "day",
                                "dayofyear",
                                "date",
                                "hours",
                                "minutes",
                                "seconds",
                                "milliseconds",
                            ],
                        ],
                        Union[
                            "UtcSingleTimeUnit",
                            Literal[
                                "utcyear",
                                "utcquarter",
                                "utcmonth",
                                "utcweek",
                                "utcday",
                                "utcdayofyear",
                                "utcdate",
                                "utchours",
                                "utcminutes",
                                "utcseconds",
                                "utcmilliseconds",
                            ],
                        ],
                    ],
                ],
                Union["TimeUnitParams", dict],
            ],
            UndefinedType,
        ] = Undefined,
        title: Union[
            Union[None, Union["Text", List[str], str]], UndefinedType
        ] = Undefined,
        type: Union[
            Union[
                "StandardType",
                Literal["quantitative", "ordinal", "temporal", "nominal"],
            ],
            UndefinedType,
        ] = Undefined,
        **kwds
    ):
        super(RowColumnEncodingFieldDef, self).__init__(
            aggregate=aggregate,
            align=align,
            bandPosition=bandPosition,
            bin=bin,
            center=center,
            field=field,
            header=header,
            sort=sort,
            spacing=spacing,
            timeUnit=timeUnit,
            title=title,
            type=type,
            **kwds
        )


class Scale(VegaLiteSchema):
    """Scale schema wrapper

    Union[:class:`Scale`, Dict[required=[]]]

    Parameters
    ----------

    align : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], float]
        The alignment of the steps within the scale range.

        This value must lie in the range ``[0,1]``. A value of ``0.5`` indicates that the
        steps should be centered within the range. A value of ``0`` or ``1`` may be used to
        shift the bands to one side, say to position them adjacent to an axis.

        **Default value:** ``0.5``
    base : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], float]
        The logarithm base of the ``log`` scale (default ``10`` ).
    bins : Union[:class:`ScaleBins`, List[float], Union[:class:`ScaleBinParams`, Dict[required=[step]]]]
        Bin boundaries can be provided to scales as either an explicit array of bin
        boundaries or as a bin specification object. The legal values are:


        * An `array <../types/#Array>`__ literal of bin boundary values. For example, ``[0,
          5, 10, 15, 20]``. The array must include both starting and ending boundaries. The
          previous example uses five values to indicate a total of four bin intervals:
          [0-5), [5-10), [10-15), [15-20]. Array literals may include signal references as
          elements.
        * A `bin specification object
          <https://vega.github.io/vega-lite/docs/scale.html#bins>`__ that indicates the bin
          *step* size, and optionally the *start* and *stop* boundaries.
        * An array of bin boundaries over the scale domain. If provided, axes and legends
          will use the bin boundaries to inform the choice of tick marks and text labels.
    clamp : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], bool]
        If ``true``, values that exceed the data domain are clamped to either the minimum or
        maximum range value

        **Default value:** derived from the `scale config
        <https://vega.github.io/vega-lite/docs/config.html#scale-config>`__ 's ``clamp`` (
        ``true`` by default).
    constant : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], float]
        A constant determining the slope of the symlog function around zero. Only used for
        ``symlog`` scales.

        **Default value:** ``1``
    domain : Union[List[Union[None, Union[:class:`DateTime`, Dict[required=[]]], Union[:class:`ExprRef`, Dict[required=[expr]]], bool, float, str]], Union[:class:`DomainUnionWith`, Dict[required=[unionWith]]], Union[:class:`ExprRef`, Dict[required=[expr]]], Union[:class:`ParameterExtent`, Dict[required=[param]]], str]
        Customized domain values in the form of constant values or dynamic values driven by
        a parameter.

        1) Constant ``domain`` for *quantitative* fields can take one of the following
        forms:


        * A two-element array with minimum and maximum values. To create a diverging scale,
          this two-element array can be combined with the ``domainMid`` property.
        * An array with more than two entries, for `Piecewise quantitative scales
          <https://vega.github.io/vega-lite/docs/scale.html#piecewise>`__.
        * A string value ``"unaggregated"``, if the input field is aggregated, to indicate
          that the domain should include the raw data values prior to the aggregation.

        2) Constant ``domain`` for *temporal* fields can be a two-element array with minimum
        and maximum values, in the form of either timestamps or the `DateTime definition
        objects <https://vega.github.io/vega-lite/docs/types.html#datetime>`__.

        3) Constant ``domain`` for *ordinal* and *nominal* fields can be an array that lists
        valid input values.

        4) To combine (union) specified constant domain with the field's values, ``domain``
        can be an object with a ``unionWith`` property that specify constant domain to be
        combined. For example, ``domain: {unionWith: [0, 100]}`` for a quantitative scale
        means that the scale domain always includes ``[0, 100]``, but will include other
        values in the fields beyond ``[0, 100]``.

        5) Domain can also takes an object defining a field or encoding of a parameter that
        `interactively determines
        <https://vega.github.io/vega-lite/docs/selection.html#scale-domains>`__ the scale
        domain.
    domainMax : Union[Union[:class:`DateTime`, Dict[required=[]]], Union[:class:`ExprRef`, Dict[required=[expr]]], float]
        Sets the maximum value in the scale domain, overriding the ``domain`` property. This
        property is only intended for use with scales having continuous domains.
    domainMid : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], float]
        Inserts a single mid-point value into a two-element domain. The mid-point value must
        lie between the domain minimum and maximum values. This property can be useful for
        setting a midpoint for `diverging color scales
        <https://vega.github.io/vega-lite/docs/scale.html#piecewise>`__. The domainMid
        property is only intended for use with scales supporting continuous, piecewise
        domains.
    domainMin : Union[Union[:class:`DateTime`, Dict[required=[]]], Union[:class:`ExprRef`, Dict[required=[expr]]], float]
        Sets the minimum value in the scale domain, overriding the domain property. This
        property is only intended for use with scales having continuous domains.
    domainRaw : Union[:class:`ExprRef`, Dict[required=[expr]]]
        An expression for an array of raw values that, if non-null, directly overrides the
        *domain* property. This is useful for supporting interactions such as panning or
        zooming a scale. The scale may be initially determined using a data-driven domain,
        then modified in response to user input by setting the rawDomain value.
    exponent : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], float]
        The exponent of the ``pow`` scale.
    interpolate : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], Union[:class:`ScaleInterpolateEnum`, Literal['rgb', 'lab', 'hcl', 'hsl', 'hsl-long', 'hcl-long', 'cubehelix', 'cubehelix-long']], Union[:class:`ScaleInterpolateParams`, Dict[required=[type]]]]
        The interpolation method for range values. By default, a general interpolator for
        numbers, dates, strings and colors (in HCL space) is used. For color ranges, this
        property allows interpolation in alternative color spaces. Legal values include
        ``rgb``, ``hsl``, ``hsl-long``, ``lab``, ``hcl``, ``hcl-long``, ``cubehelix`` and
        ``cubehelix-long`` ('-long' variants use longer paths in polar coordinate spaces).
        If object-valued, this property accepts an object with a string-valued *type*
        property and an optional numeric *gamma* property applicable to rgb and cubehelix
        interpolators. For more, see the `d3-interpolate documentation
        <https://github.com/d3/d3-interpolate>`__.


        * **Default value:** ``hcl``
    nice : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], Union[:class:`TimeIntervalStep`, Dict[required=[interval, step]]], Union[:class:`TimeInterval`, Literal['millisecond', 'second', 'minute', 'hour', 'day', 'week', 'month', 'year']], bool, float]
        Extending the domain so that it starts and ends on nice round values. This method
        typically modifies the scale’s domain, and may only extend the bounds to the nearest
        round value. Nicing is useful if the domain is computed from data and may be
        irregular. For example, for a domain of *[0.201479…, 0.996679…]*, a nice domain
        might be *[0.2, 1.0]*.

        For quantitative scales such as linear, ``nice`` can be either a boolean flag or a
        number. If ``nice`` is a number, it will represent a desired tick count. This allows
        greater control over the step size used to extend the bounds, guaranteeing that the
        returned ticks will exactly cover the domain.

        For temporal fields with time and utc scales, the ``nice`` value can be a string
        indicating the desired time interval. Legal values are ``"millisecond"``,
        ``"second"``, ``"minute"``, ``"hour"``, ``"day"``, ``"week"``, ``"month"``, and
        ``"year"``. Alternatively, ``time`` and ``utc`` scales can accept an object-valued
        interval specifier of the form ``{"interval": "month", "step": 3}``, which includes
        a desired number of interval steps. Here, the domain would snap to quarter (Jan,
        Apr, Jul, Oct) boundaries.

        **Default value:** ``true`` for unbinned *quantitative* fields without explicit
        domain bounds; ``false`` otherwise.
    padding : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], float]
        For * `continuous <https://vega.github.io/vega-lite/docs/scale.html#continuous>`__ *
        scales, expands the scale domain to accommodate the specified number of pixels on
        each of the scale range. The scale range must represent pixels for this parameter to
        function as intended. Padding adjustment is performed prior to all other
        adjustments, including the effects of the  ``zero``,  ``nice``,  ``domainMin``, and
        ``domainMax``  properties.

        For * `band <https://vega.github.io/vega-lite/docs/scale.html#band>`__ * scales,
        shortcut for setting ``paddingInner`` and ``paddingOuter`` to the same value.

        For * `point <https://vega.github.io/vega-lite/docs/scale.html#point>`__ * scales,
        alias for ``paddingOuter``.

        **Default value:** For *continuous* scales, derived from the `scale config
        <https://vega.github.io/vega-lite/docs/scale.html#config>`__ 's
        ``continuousPadding``. For *band and point* scales, see ``paddingInner`` and
        ``paddingOuter``. By default, Vega-Lite sets padding such that *width/height =
        number of unique values * step*.
    paddingInner : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], float]
        The inner padding (spacing) within each band step of band scales, as a fraction of
        the step size. This value must lie in the range [0,1].

        For point scale, this property is invalid as point scales do not have internal band
        widths (only step sizes between bands).

        **Default value:** derived from the `scale config
        <https://vega.github.io/vega-lite/docs/scale.html#config>`__ 's
        ``bandPaddingInner``.
    paddingOuter : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], float]
        The outer padding (spacing) at the ends of the range of band and point scales, as a
        fraction of the step size. This value must lie in the range [0,1].

        **Default value:** derived from the `scale config
        <https://vega.github.io/vega-lite/docs/scale.html#config>`__ 's ``bandPaddingOuter``
        for band scales and ``pointPadding`` for point scales. By default, Vega-Lite sets
        outer padding such that *width/height = number of unique values * step*.
    range : Union[List[Union[List[float], Union[:class:`ExprRef`, Dict[required=[expr]]], float, str]], Union[:class:`FieldRange`, Dict[required=[field]]], Union[:class:`RangeEnum`, Literal['width', 'height', 'symbol', 'category', 'ordinal', 'ramp', 'diverging', 'heatmap']]]
        The range of the scale. One of:


        A string indicating a `pre-defined named scale range
        <https://vega.github.io/vega-lite/docs/scale.html#range-config>`__ (e.g., example,
        ``"symbol"``, or ``"diverging"`` ).

        For `continuous scales
        <https://vega.github.io/vega-lite/docs/scale.html#continuous>`__, two-element array
        indicating  minimum and maximum values, or an array with more than two entries for
        specifying a `piecewise scale
        <https://vega.github.io/vega-lite/docs/scale.html#piecewise>`__.

        For `discrete <https://vega.github.io/vega-lite/docs/scale.html#discrete>`__ and
        `discretizing <https://vega.github.io/vega-lite/docs/scale.html#discretizing>`__
        scales, an array of desired output values or an object with a ``field`` property
        representing the range values.  For example, if a field ``color`` contains CSS color
        names, we can set ``range`` to ``{field: "color"}``.

        **Notes:**

        1) For color scales you can also specify a color `scheme
        <https://vega.github.io/vega-lite/docs/scale.html#scheme>`__ instead of ``range``.

        2) Any directly specified ``range`` for ``x`` and ``y`` channels will be ignored.
        Range can be customized via the view's corresponding `size
        <https://vega.github.io/vega-lite/docs/size.html>`__ ( ``width`` and ``height`` ).
    rangeMax : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], float, str]
        Sets the maximum value in the scale range, overriding the ``range`` property or the
        default range. This property is only intended for use with scales having continuous
        ranges.
    rangeMin : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], float, str]
        Sets the minimum value in the scale range, overriding the ``range`` property or the
        default range. This property is only intended for use with scales having continuous
        ranges.
    reverse : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], bool]
        If true, reverses the order of the scale range. **Default value:** ``false``.
    round : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], bool]
        If ``true``, rounds numeric output values to integers. This can be helpful for
        snapping to the pixel grid.

        **Default value:** ``false``.
    scheme : Union[Union[:class:`ColorScheme`, Union[:class:`Categorical`, Literal['accent', 'category10', 'category20', 'category20b', 'category20c', 'dark2', 'paired', 'pastel1', 'pastel2', 'set1', 'set2', 'set3', 'tableau10', 'tableau20']], Union[:class:`Cyclical`, Literal['rainbow', 'sinebow']], Union[:class:`Diverging`, Literal['blueorange', 'blueorange-3', 'blueorange-4', 'blueorange-5', 'blueorange-6', 'blueorange-7', 'blueorange-8', 'blueorange-9', 'blueorange-10', 'blueorange-11', 'brownbluegreen', 'brownbluegreen-3', 'brownbluegreen-4', 'brownbluegreen-5', 'brownbluegreen-6', 'brownbluegreen-7', 'brownbluegreen-8', 'brownbluegreen-9', 'brownbluegreen-10', 'brownbluegreen-11', 'purplegreen', 'purplegreen-3', 'purplegreen-4', 'purplegreen-5', 'purplegreen-6', 'purplegreen-7', 'purplegreen-8', 'purplegreen-9', 'purplegreen-10', 'purplegreen-11', 'pinkyellowgreen', 'pinkyellowgreen-3', 'pinkyellowgreen-4', 'pinkyellowgreen-5', 'pinkyellowgreen-6', 'pinkyellowgreen-7', 'pinkyellowgreen-8', 'pinkyellowgreen-9', 'pinkyellowgreen-10', 'pinkyellowgreen-11', 'purpleorange', 'purpleorange-3', 'purpleorange-4', 'purpleorange-5', 'purpleorange-6', 'purpleorange-7', 'purpleorange-8', 'purpleorange-9', 'purpleorange-10', 'purpleorange-11', 'redblue', 'redblue-3', 'redblue-4', 'redblue-5', 'redblue-6', 'redblue-7', 'redblue-8', 'redblue-9', 'redblue-10', 'redblue-11', 'redgrey', 'redgrey-3', 'redgrey-4', 'redgrey-5', 'redgrey-6', 'redgrey-7', 'redgrey-8', 'redgrey-9', 'redgrey-10', 'redgrey-11', 'redyellowblue', 'redyellowblue-3', 'redyellowblue-4', 'redyellowblue-5', 'redyellowblue-6', 'redyellowblue-7', 'redyellowblue-8', 'redyellowblue-9', 'redyellowblue-10', 'redyellowblue-11', 'redyellowgreen', 'redyellowgreen-3', 'redyellowgreen-4', 'redyellowgreen-5', 'redyellowgreen-6', 'redyellowgreen-7', 'redyellowgreen-8', 'redyellowgreen-9', 'redyellowgreen-10', 'redyellowgreen-11', 'spectral', 'spectral-3', 'spectral-4', 'spectral-5', 'spectral-6', 'spectral-7', 'spectral-8', 'spectral-9', 'spectral-10', 'spectral-11']], Union[:class:`SequentialMultiHue`, Literal['turbo', 'viridis', 'inferno', 'magma', 'plasma', 'cividis', 'bluegreen', 'bluegreen-3', 'bluegreen-4', 'bluegreen-5', 'bluegreen-6', 'bluegreen-7', 'bluegreen-8', 'bluegreen-9', 'bluepurple', 'bluepurple-3', 'bluepurple-4', 'bluepurple-5', 'bluepurple-6', 'bluepurple-7', 'bluepurple-8', 'bluepurple-9', 'goldgreen', 'goldgreen-3', 'goldgreen-4', 'goldgreen-5', 'goldgreen-6', 'goldgreen-7', 'goldgreen-8', 'goldgreen-9', 'goldorange', 'goldorange-3', 'goldorange-4', 'goldorange-5', 'goldorange-6', 'goldorange-7', 'goldorange-8', 'goldorange-9', 'goldred', 'goldred-3', 'goldred-4', 'goldred-5', 'goldred-6', 'goldred-7', 'goldred-8', 'goldred-9', 'greenblue', 'greenblue-3', 'greenblue-4', 'greenblue-5', 'greenblue-6', 'greenblue-7', 'greenblue-8', 'greenblue-9', 'orangered', 'orangered-3', 'orangered-4', 'orangered-5', 'orangered-6', 'orangered-7', 'orangered-8', 'orangered-9', 'purplebluegreen', 'purplebluegreen-3', 'purplebluegreen-4', 'purplebluegreen-5', 'purplebluegreen-6', 'purplebluegreen-7', 'purplebluegreen-8', 'purplebluegreen-9', 'purpleblue', 'purpleblue-3', 'purpleblue-4', 'purpleblue-5', 'purpleblue-6', 'purpleblue-7', 'purpleblue-8', 'purpleblue-9', 'purplered', 'purplered-3', 'purplered-4', 'purplered-5', 'purplered-6', 'purplered-7', 'purplered-8', 'purplered-9', 'redpurple', 'redpurple-3', 'redpurple-4', 'redpurple-5', 'redpurple-6', 'redpurple-7', 'redpurple-8', 'redpurple-9', 'yellowgreenblue', 'yellowgreenblue-3', 'yellowgreenblue-4', 'yellowgreenblue-5', 'yellowgreenblue-6', 'yellowgreenblue-7', 'yellowgreenblue-8', 'yellowgreenblue-9', 'yellowgreen', 'yellowgreen-3', 'yellowgreen-4', 'yellowgreen-5', 'yellowgreen-6', 'yellowgreen-7', 'yellowgreen-8', 'yellowgreen-9', 'yelloworangebrown', 'yelloworangebrown-3', 'yelloworangebrown-4', 'yelloworangebrown-5', 'yelloworangebrown-6', 'yelloworangebrown-7', 'yelloworangebrown-8', 'yelloworangebrown-9', 'yelloworangered', 'yelloworangered-3', 'yelloworangered-4', 'yelloworangered-5', 'yelloworangered-6', 'yelloworangered-7', 'yelloworangered-8', 'yelloworangered-9', 'darkblue', 'darkblue-3', 'darkblue-4', 'darkblue-5', 'darkblue-6', 'darkblue-7', 'darkblue-8', 'darkblue-9', 'darkgold', 'darkgold-3', 'darkgold-4', 'darkgold-5', 'darkgold-6', 'darkgold-7', 'darkgold-8', 'darkgold-9', 'darkgreen', 'darkgreen-3', 'darkgreen-4', 'darkgreen-5', 'darkgreen-6', 'darkgreen-7', 'darkgreen-8', 'darkgreen-9', 'darkmulti', 'darkmulti-3', 'darkmulti-4', 'darkmulti-5', 'darkmulti-6', 'darkmulti-7', 'darkmulti-8', 'darkmulti-9', 'darkred', 'darkred-3', 'darkred-4', 'darkred-5', 'darkred-6', 'darkred-7', 'darkred-8', 'darkred-9', 'lightgreyred', 'lightgreyred-3', 'lightgreyred-4', 'lightgreyred-5', 'lightgreyred-6', 'lightgreyred-7', 'lightgreyred-8', 'lightgreyred-9', 'lightgreyteal', 'lightgreyteal-3', 'lightgreyteal-4', 'lightgreyteal-5', 'lightgreyteal-6', 'lightgreyteal-7', 'lightgreyteal-8', 'lightgreyteal-9', 'lightmulti', 'lightmulti-3', 'lightmulti-4', 'lightmulti-5', 'lightmulti-6', 'lightmulti-7', 'lightmulti-8', 'lightmulti-9', 'lightorange', 'lightorange-3', 'lightorange-4', 'lightorange-5', 'lightorange-6', 'lightorange-7', 'lightorange-8', 'lightorange-9', 'lighttealblue', 'lighttealblue-3', 'lighttealblue-4', 'lighttealblue-5', 'lighttealblue-6', 'lighttealblue-7', 'lighttealblue-8', 'lighttealblue-9']], Union[:class:`SequentialSingleHue`, Literal['blues', 'tealblues', 'teals', 'greens', 'browns', 'greys', 'purples', 'warmgreys', 'reds', 'oranges']]], Union[:class:`ExprRef`, Dict[required=[expr]]], Union[:class:`SchemeParams`, Dict[required=[name]]]]
        A string indicating a color `scheme
        <https://vega.github.io/vega-lite/docs/scale.html#scheme>`__ name (e.g.,
        ``"category10"`` or ``"blues"`` ) or a `scheme parameter object
        <https://vega.github.io/vega-lite/docs/scale.html#scheme-params>`__.

        Discrete color schemes may be used with `discrete
        <https://vega.github.io/vega-lite/docs/scale.html#discrete>`__ or `discretizing
        <https://vega.github.io/vega-lite/docs/scale.html#discretizing>`__ scales.
        Continuous color schemes are intended for use with color scales.

        For the full list of supported schemes, please refer to the `Vega Scheme
        <https://vega.github.io/vega/docs/schemes/#reference>`__ reference.
    type : Union[:class:`ScaleType`, Literal['linear', 'log', 'pow', 'sqrt', 'symlog', 'identity', 'sequential', 'time', 'utc', 'quantile', 'quantize', 'threshold', 'bin-ordinal', 'ordinal', 'point', 'band']]
        The type of scale. Vega-Lite supports the following categories of scale types:

        1) `Continuous Scales
        <https://vega.github.io/vega-lite/docs/scale.html#continuous>`__ -- mapping
        continuous domains to continuous output ranges ( `"linear"
        <https://vega.github.io/vega-lite/docs/scale.html#linear>`__, `"pow"
        <https://vega.github.io/vega-lite/docs/scale.html#pow>`__, `"sqrt"
        <https://vega.github.io/vega-lite/docs/scale.html#sqrt>`__, `"symlog"
        <https://vega.github.io/vega-lite/docs/scale.html#symlog>`__, `"log"
        <https://vega.github.io/vega-lite/docs/scale.html#log>`__, `"time"
        <https://vega.github.io/vega-lite/docs/scale.html#time>`__, `"utc"
        <https://vega.github.io/vega-lite/docs/scale.html#utc>`__.

        2) `Discrete Scales <https://vega.github.io/vega-lite/docs/scale.html#discrete>`__
        -- mapping discrete domains to discrete ( `"ordinal"
        <https://vega.github.io/vega-lite/docs/scale.html#ordinal>`__ ) or continuous (
        `"band" <https://vega.github.io/vega-lite/docs/scale.html#band>`__ and `"point"
        <https://vega.github.io/vega-lite/docs/scale.html#point>`__ ) output ranges.

        3) `Discretizing Scales
        <https://vega.github.io/vega-lite/docs/scale.html#discretizing>`__ -- mapping
        continuous domains to discrete output ranges `"bin-ordinal"
        <https://vega.github.io/vega-lite/docs/scale.html#bin-ordinal>`__, `"quantile"
        <https://vega.github.io/vega-lite/docs/scale.html#quantile>`__, `"quantize"
        <https://vega.github.io/vega-lite/docs/scale.html#quantize>`__ and `"threshold"
        <https://vega.github.io/vega-lite/docs/scale.html#threshold>`__.

        **Default value:** please see the `scale type table
        <https://vega.github.io/vega-lite/docs/scale.html#type>`__.
    zero : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], bool]
        If ``true``, ensures that a zero baseline value is included in the scale domain.

        **Default value:** ``true`` for x and y channels if the quantitative field is not
        binned and no custom ``domain`` is provided; ``false`` otherwise.

        **Note:** Log, time, and utc scales do not support ``zero``.
    """

    _schema = {"$ref": "#/definitions/Scale"}

    def __init__(
        self,
        align: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], float], UndefinedType
        ] = Undefined,
        base: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], float], UndefinedType
        ] = Undefined,
        bins: Union[
            Union["ScaleBins", List[float], Union["ScaleBinParams", dict]],
            UndefinedType,
        ] = Undefined,
        clamp: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], bool], UndefinedType
        ] = Undefined,
        constant: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], float], UndefinedType
        ] = Undefined,
        domain: Union[
            Union[
                Union["DomainUnionWith", dict],
                Union["ExprRef", "_ParameterProtocol", dict],
                Union["ParameterExtent", dict],
                Union[
                    List[None],
                    List[Union["DateTime", dict]],
                    List[Union["ExprRef", "_ParameterProtocol", dict]],
                    List[bool],
                    List[float],
                    List[str],
                ],
                str,
            ],
            UndefinedType,
        ] = Undefined,
        domainMax: Union[
            Union[
                Union["DateTime", dict],
                Union["ExprRef", "_ParameterProtocol", dict],
                float,
            ],
            UndefinedType,
        ] = Undefined,
        domainMid: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], float], UndefinedType
        ] = Undefined,
        domainMin: Union[
            Union[
                Union["DateTime", dict],
                Union["ExprRef", "_ParameterProtocol", dict],
                float,
            ],
            UndefinedType,
        ] = Undefined,
        domainRaw: Union[
            Union["ExprRef", "_ParameterProtocol", dict], UndefinedType
        ] = Undefined,
        exponent: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], float], UndefinedType
        ] = Undefined,
        interpolate: Union[
            Union[
                Union["ExprRef", "_ParameterProtocol", dict],
                Union[
                    "ScaleInterpolateEnum",
                    Literal[
                        "rgb",
                        "lab",
                        "hcl",
                        "hsl",
                        "hsl-long",
                        "hcl-long",
                        "cubehelix",
                        "cubehelix-long",
                    ],
                ],
                Union["ScaleInterpolateParams", dict],
            ],
            UndefinedType,
        ] = Undefined,
        nice: Union[
            Union[
                Union["ExprRef", "_ParameterProtocol", dict],
                Union[
                    "TimeInterval",
                    Literal[
                        "millisecond",
                        "second",
                        "minute",
                        "hour",
                        "day",
                        "week",
                        "month",
                        "year",
                    ],
                ],
                Union["TimeIntervalStep", dict],
                bool,
                float,
            ],
            UndefinedType,
        ] = Undefined,
        padding: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], float], UndefinedType
        ] = Undefined,
        paddingInner: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], float], UndefinedType
        ] = Undefined,
        paddingOuter: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], float], UndefinedType
        ] = Undefined,
        range: Union[
            Union[
                Union["FieldRange", dict],
                Union[
                    "RangeEnum",
                    Literal[
                        "width",
                        "height",
                        "symbol",
                        "category",
                        "ordinal",
                        "ramp",
                        "diverging",
                        "heatmap",
                    ],
                ],
                Union[
                    List[List[float]],
                    List[Union["ExprRef", "_ParameterProtocol", dict]],
                    List[float],
                    List[str],
                ],
            ],
            UndefinedType,
        ] = Undefined,
        rangeMax: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], float, str],
            UndefinedType,
        ] = Undefined,
        rangeMin: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], float, str],
            UndefinedType,
        ] = Undefined,
        reverse: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], bool], UndefinedType
        ] = Undefined,
        round: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], bool], UndefinedType
        ] = Undefined,
        scheme: Union[
            Union[
                Union[
                    "ColorScheme",
                    Union[
                        "Categorical",
                        Literal[
                            "accent",
                            "category10",
                            "category20",
                            "category20b",
                            "category20c",
                            "dark2",
                            "paired",
                            "pastel1",
                            "pastel2",
                            "set1",
                            "set2",
                            "set3",
                            "tableau10",
                            "tableau20",
                        ],
                    ],
                    Union["Cyclical", Literal["rainbow", "sinebow"]],
                    Union[
                        "Diverging",
                        Literal[
                            "blueorange",
                            "blueorange-3",
                            "blueorange-4",
                            "blueorange-5",
                            "blueorange-6",
                            "blueorange-7",
                            "blueorange-8",
                            "blueorange-9",
                            "blueorange-10",
                            "blueorange-11",
                            "brownbluegreen",
                            "brownbluegreen-3",
                            "brownbluegreen-4",
                            "brownbluegreen-5",
                            "brownbluegreen-6",
                            "brownbluegreen-7",
                            "brownbluegreen-8",
                            "brownbluegreen-9",
                            "brownbluegreen-10",
                            "brownbluegreen-11",
                            "purplegreen",
                            "purplegreen-3",
                            "purplegreen-4",
                            "purplegreen-5",
                            "purplegreen-6",
                            "purplegreen-7",
                            "purplegreen-8",
                            "purplegreen-9",
                            "purplegreen-10",
                            "purplegreen-11",
                            "pinkyellowgreen",
                            "pinkyellowgreen-3",
                            "pinkyellowgreen-4",
                            "pinkyellowgreen-5",
                            "pinkyellowgreen-6",
                            "pinkyellowgreen-7",
                            "pinkyellowgreen-8",
                            "pinkyellowgreen-9",
                            "pinkyellowgreen-10",
                            "pinkyellowgreen-11",
                            "purpleorange",
                            "purpleorange-3",
                            "purpleorange-4",
                            "purpleorange-5",
                            "purpleorange-6",
                            "purpleorange-7",
                            "purpleorange-8",
                            "purpleorange-9",
                            "purpleorange-10",
                            "purpleorange-11",
                            "redblue",
                            "redblue-3",
                            "redblue-4",
                            "redblue-5",
                            "redblue-6",
                            "redblue-7",
                            "redblue-8",
                            "redblue-9",
                            "redblue-10",
                            "redblue-11",
                            "redgrey",
                            "redgrey-3",
                            "redgrey-4",
                            "redgrey-5",
                            "redgrey-6",
                            "redgrey-7",
                            "redgrey-8",
                            "redgrey-9",
                            "redgrey-10",
                            "redgrey-11",
                            "redyellowblue",
                            "redyellowblue-3",
                            "redyellowblue-4",
                            "redyellowblue-5",
                            "redyellowblue-6",
                            "redyellowblue-7",
                            "redyellowblue-8",
                            "redyellowblue-9",
                            "redyellowblue-10",
                            "redyellowblue-11",
                            "redyellowgreen",
                            "redyellowgreen-3",
                            "redyellowgreen-4",
                            "redyellowgreen-5",
                            "redyellowgreen-6",
                            "redyellowgreen-7",
                            "redyellowgreen-8",
                            "redyellowgreen-9",
                            "redyellowgreen-10",
                            "redyellowgreen-11",
                            "spectral",
                            "spectral-3",
                            "spectral-4",
                            "spectral-5",
                            "spectral-6",
                            "spectral-7",
                            "spectral-8",
                            "spectral-9",
                            "spectral-10",
                            "spectral-11",
                        ],
                    ],
                    Union[
                        "SequentialMultiHue",
                        Literal[
                            "turbo",
                            "viridis",
                            "inferno",
                            "magma",
                            "plasma",
                            "cividis",
                            "bluegreen",
                            "bluegreen-3",
                            "bluegreen-4",
                            "bluegreen-5",
                            "bluegreen-6",
                            "bluegreen-7",
                            "bluegreen-8",
                            "bluegreen-9",
                            "bluepurple",
                            "bluepurple-3",
                            "bluepurple-4",
                            "bluepurple-5",
                            "bluepurple-6",
                            "bluepurple-7",
                            "bluepurple-8",
                            "bluepurple-9",
                            "goldgreen",
                            "goldgreen-3",
                            "goldgreen-4",
                            "goldgreen-5",
                            "goldgreen-6",
                            "goldgreen-7",
                            "goldgreen-8",
                            "goldgreen-9",
                            "goldorange",
                            "goldorange-3",
                            "goldorange-4",
                            "goldorange-5",
                            "goldorange-6",
                            "goldorange-7",
                            "goldorange-8",
                            "goldorange-9",
                            "goldred",
                            "goldred-3",
                            "goldred-4",
                            "goldred-5",
                            "goldred-6",
                            "goldred-7",
                            "goldred-8",
                            "goldred-9",
                            "greenblue",
                            "greenblue-3",
                            "greenblue-4",
                            "greenblue-5",
                            "greenblue-6",
                            "greenblue-7",
                            "greenblue-8",
                            "greenblue-9",
                            "orangered",
                            "orangered-3",
                            "orangered-4",
                            "orangered-5",
                            "orangered-6",
                            "orangered-7",
                            "orangered-8",
                            "orangered-9",
                            "purplebluegreen",
                            "purplebluegreen-3",
                            "purplebluegreen-4",
                            "purplebluegreen-5",
                            "purplebluegreen-6",
                            "purplebluegreen-7",
                            "purplebluegreen-8",
                            "purplebluegreen-9",
                            "purpleblue",
                            "purpleblue-3",
                            "purpleblue-4",
                            "purpleblue-5",
                            "purpleblue-6",
                            "purpleblue-7",
                            "purpleblue-8",
                            "purpleblue-9",
                            "purplered",
                            "purplered-3",
                            "purplered-4",
                            "purplered-5",
                            "purplered-6",
                            "purplered-7",
                            "purplered-8",
                            "purplered-9",
                            "redpurple",
                            "redpurple-3",
                            "redpurple-4",
                            "redpurple-5",
                            "redpurple-6",
                            "redpurple-7",
                            "redpurple-8",
                            "redpurple-9",
                            "yellowgreenblue",
                            "yellowgreenblue-3",
                            "yellowgreenblue-4",
                            "yellowgreenblue-5",
                            "yellowgreenblue-6",
                            "yellowgreenblue-7",
                            "yellowgreenblue-8",
                            "yellowgreenblue-9",
                            "yellowgreen",
                            "yellowgreen-3",
                            "yellowgreen-4",
                            "yellowgreen-5",
                            "yellowgreen-6",
                            "yellowgreen-7",
                            "yellowgreen-8",
                            "yellowgreen-9",
                            "yelloworangebrown",
                            "yelloworangebrown-3",
                            "yelloworangebrown-4",
                            "yelloworangebrown-5",
                            "yelloworangebrown-6",
                            "yelloworangebrown-7",
                            "yelloworangebrown-8",
                            "yelloworangebrown-9",
                            "yelloworangered",
                            "yelloworangered-3",
                            "yelloworangered-4",
                            "yelloworangered-5",
                            "yelloworangered-6",
                            "yelloworangered-7",
                            "yelloworangered-8",
                            "yelloworangered-9",
                            "darkblue",
                            "darkblue-3",
                            "darkblue-4",
                            "darkblue-5",
                            "darkblue-6",
                            "darkblue-7",
                            "darkblue-8",
                            "darkblue-9",
                            "darkgold",
                            "darkgold-3",
                            "darkgold-4",
                            "darkgold-5",
                            "darkgold-6",
                            "darkgold-7",
                            "darkgold-8",
                            "darkgold-9",
                            "darkgreen",
                            "darkgreen-3",
                            "darkgreen-4",
                            "darkgreen-5",
                            "darkgreen-6",
                            "darkgreen-7",
                            "darkgreen-8",
                            "darkgreen-9",
                            "darkmulti",
                            "darkmulti-3",
                            "darkmulti-4",
                            "darkmulti-5",
                            "darkmulti-6",
                            "darkmulti-7",
                            "darkmulti-8",
                            "darkmulti-9",
                            "darkred",
                            "darkred-3",
                            "darkred-4",
                            "darkred-5",
                            "darkred-6",
                            "darkred-7",
                            "darkred-8",
                            "darkred-9",
                            "lightgreyred",
                            "lightgreyred-3",
                            "lightgreyred-4",
                            "lightgreyred-5",
                            "lightgreyred-6",
                            "lightgreyred-7",
                            "lightgreyred-8",
                            "lightgreyred-9",
                            "lightgreyteal",
                            "lightgreyteal-3",
                            "lightgreyteal-4",
                            "lightgreyteal-5",
                            "lightgreyteal-6",
                            "lightgreyteal-7",
                            "lightgreyteal-8",
                            "lightgreyteal-9",
                            "lightmulti",
                            "lightmulti-3",
                            "lightmulti-4",
                            "lightmulti-5",
                            "lightmulti-6",
                            "lightmulti-7",
                            "lightmulti-8",
                            "lightmulti-9",
                            "lightorange",
                            "lightorange-3",
                            "lightorange-4",
                            "lightorange-5",
                            "lightorange-6",
                            "lightorange-7",
                            "lightorange-8",
                            "lightorange-9",
                            "lighttealblue",
                            "lighttealblue-3",
                            "lighttealblue-4",
                            "lighttealblue-5",
                            "lighttealblue-6",
                            "lighttealblue-7",
                            "lighttealblue-8",
                            "lighttealblue-9",
                        ],
                    ],
                    Union[
                        "SequentialSingleHue",
                        Literal[
                            "blues",
                            "tealblues",
                            "teals",
                            "greens",
                            "browns",
                            "greys",
                            "purples",
                            "warmgreys",
                            "reds",
                            "oranges",
                        ],
                    ],
                ],
                Union["ExprRef", "_ParameterProtocol", dict],
                Union["SchemeParams", dict],
            ],
            UndefinedType,
        ] = Undefined,
        type: Union[
            Union[
                "ScaleType",
                Literal[
                    "linear",
                    "log",
                    "pow",
                    "sqrt",
                    "symlog",
                    "identity",
                    "sequential",
                    "time",
                    "utc",
                    "quantile",
                    "quantize",
                    "threshold",
                    "bin-ordinal",
                    "ordinal",
                    "point",
                    "band",
                ],
            ],
            UndefinedType,
        ] = Undefined,
        zero: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], bool], UndefinedType
        ] = Undefined,
        **kwds
    ):
        super(Scale, self).__init__(
            align=align,
            base=base,
            bins=bins,
            clamp=clamp,
            constant=constant,
            domain=domain,
            domainMax=domainMax,
            domainMid=domainMid,
            domainMin=domainMin,
            domainRaw=domainRaw,
            exponent=exponent,
            interpolate=interpolate,
            nice=nice,
            padding=padding,
            paddingInner=paddingInner,
            paddingOuter=paddingOuter,
            range=range,
            rangeMax=rangeMax,
            rangeMin=rangeMin,
            reverse=reverse,
            round=round,
            scheme=scheme,
            type=type,
            zero=zero,
            **kwds
        )


class ScaleBins(VegaLiteSchema):
    """ScaleBins schema wrapper

    Union[:class:`ScaleBins`, List[float], Union[:class:`ScaleBinParams`,
    Dict[required=[step]]]]
    """

    _schema = {"$ref": "#/definitions/ScaleBins"}

    def __init__(self, *args, **kwds):
        super(ScaleBins, self).__init__(*args, **kwds)


class ScaleBinParams(ScaleBins):
    """ScaleBinParams schema wrapper

    Union[:class:`ScaleBinParams`, Dict[required=[step]]]

    Parameters
    ----------

    step : float
        The step size defining the bin interval width.
    start : float
        The starting (lowest-valued) bin boundary.

        **Default value:** The lowest value of the scale domain will be used.
    stop : float
        The stopping (highest-valued) bin boundary.

        **Default value:** The highest value of the scale domain will be used.
    """

    _schema = {"$ref": "#/definitions/ScaleBinParams"}

    def __init__(
        self,
        step: Union[float, UndefinedType] = Undefined,
        start: Union[float, UndefinedType] = Undefined,
        stop: Union[float, UndefinedType] = Undefined,
        **kwds
    ):
        super(ScaleBinParams, self).__init__(step=step, start=start, stop=stop, **kwds)


class ScaleConfig(VegaLiteSchema):
    """ScaleConfig schema wrapper

    Union[:class:`ScaleConfig`, Dict[required=[]]]

    Parameters
    ----------

    bandPaddingInner : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], float]
        Default inner padding for ``x`` and ``y`` band scales.

        **Default value:**


        * ``nestedOffsetPaddingInner`` for x/y scales with nested x/y offset scales.
        * ``barBandPaddingInner`` for bar marks ( ``0.1`` by default)
        * ``rectBandPaddingInner`` for rect and other marks ( ``0`` by default)
    bandPaddingOuter : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], float]
        Default outer padding for ``x`` and ``y`` band scales.

        **Default value:** ``paddingInner/2`` (which makes *width/height = number of unique
        values * step* )
    bandWithNestedOffsetPaddingInner : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], float]
        Default inner padding for ``x`` and ``y`` band scales with nested ``xOffset`` and
        ``yOffset`` encoding.

        **Default value:** ``0.2``
    bandWithNestedOffsetPaddingOuter : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], float]
        Default outer padding for ``x`` and ``y`` band scales with nested ``xOffset`` and
        ``yOffset`` encoding.

        **Default value:** ``0.2``
    barBandPaddingInner : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], float]
        Default inner padding for ``x`` and ``y`` band-ordinal scales of ``"bar"`` marks.

        **Default value:** ``0.1``
    clamp : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], bool]
        If true, values that exceed the data domain are clamped to either the minimum or
        maximum range value
    continuousPadding : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], float]
        Default padding for continuous x/y scales.

        **Default:** The bar width for continuous x-scale of a vertical bar and continuous
        y-scale of a horizontal bar.; ``0`` otherwise.
    maxBandSize : float
        The default max value for mapping quantitative fields to bar's size/bandSize.

        If undefined (default), we will use the axis's size (width or height) - 1.
    maxFontSize : float
        The default max value for mapping quantitative fields to text's size/fontSize.

        **Default value:** ``40``
    maxOpacity : float
        Default max opacity for mapping a field to opacity.

        **Default value:** ``0.8``
    maxSize : float
        Default max value for point size scale.
    maxStrokeWidth : float
        Default max strokeWidth for the scale of strokeWidth for rule and line marks and of
        size for trail marks.

        **Default value:** ``4``
    minBandSize : float
        The default min value for mapping quantitative fields to bar and tick's
        size/bandSize scale with zero=false.

        **Default value:** ``2``
    minFontSize : float
        The default min value for mapping quantitative fields to tick's size/fontSize scale
        with zero=false

        **Default value:** ``8``
    minOpacity : float
        Default minimum opacity for mapping a field to opacity.

        **Default value:** ``0.3``
    minSize : float
        Default minimum value for point size scale with zero=false.

        **Default value:** ``9``
    minStrokeWidth : float
        Default minimum strokeWidth for the scale of strokeWidth for rule and line marks and
        of size for trail marks with zero=false.

        **Default value:** ``1``
    offsetBandPaddingInner : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], float]
        Default padding inner for xOffset/yOffset's band scales.

        **Default Value:** ``0``
    offsetBandPaddingOuter : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], float]
        Default padding outer for xOffset/yOffset's band scales.

        **Default Value:** ``0``
    pointPadding : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], float]
        Default outer padding for ``x`` and ``y`` point-ordinal scales.

        **Default value:** ``0.5`` (which makes *width/height = number of unique values *
        step* )
    quantileCount : float
        Default range cardinality for `quantile
        <https://vega.github.io/vega-lite/docs/scale.html#quantile>`__ scale.

        **Default value:** ``4``
    quantizeCount : float
        Default range cardinality for `quantize
        <https://vega.github.io/vega-lite/docs/scale.html#quantize>`__ scale.

        **Default value:** ``4``
    rectBandPaddingInner : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], float]
        Default inner padding for ``x`` and ``y`` band-ordinal scales of ``"rect"`` marks.

        **Default value:** ``0``
    round : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], bool]
        If true, rounds numeric output values to integers. This can be helpful for snapping
        to the pixel grid. (Only available for ``x``, ``y``, and ``size`` scales.)
    useUnaggregatedDomain : bool
        Use the source data range before aggregation as scale domain instead of aggregated
        data for aggregate axis.

        This is equivalent to setting ``domain`` to ``"unaggregate"`` for aggregated
        *quantitative* fields by default.

        This property only works with aggregate functions that produce values within the raw
        data domain ( ``"mean"``, ``"average"``, ``"median"``, ``"q1"``, ``"q3"``,
        ``"min"``, ``"max"`` ). For other aggregations that produce values outside of the
        raw data domain (e.g. ``"count"``, ``"sum"`` ), this property is ignored.

        **Default value:** ``false``
    xReverse : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], bool]
        Reverse x-scale by default (useful for right-to-left charts).
    zero : bool
        Default ``scale.zero`` for `continuous
        <https://vega.github.io/vega-lite/docs/scale.html#continuous>`__ scales except for
        (1) x/y-scales of non-ranged bar or area charts and (2) size scales.

        **Default value:** ``true``
    """

    _schema = {"$ref": "#/definitions/ScaleConfig"}

    def __init__(
        self,
        bandPaddingInner: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], float], UndefinedType
        ] = Undefined,
        bandPaddingOuter: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], float], UndefinedType
        ] = Undefined,
        bandWithNestedOffsetPaddingInner: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], float], UndefinedType
        ] = Undefined,
        bandWithNestedOffsetPaddingOuter: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], float], UndefinedType
        ] = Undefined,
        barBandPaddingInner: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], float], UndefinedType
        ] = Undefined,
        clamp: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], bool], UndefinedType
        ] = Undefined,
        continuousPadding: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], float], UndefinedType
        ] = Undefined,
        maxBandSize: Union[float, UndefinedType] = Undefined,
        maxFontSize: Union[float, UndefinedType] = Undefined,
        maxOpacity: Union[float, UndefinedType] = Undefined,
        maxSize: Union[float, UndefinedType] = Undefined,
        maxStrokeWidth: Union[float, UndefinedType] = Undefined,
        minBandSize: Union[float, UndefinedType] = Undefined,
        minFontSize: Union[float, UndefinedType] = Undefined,
        minOpacity: Union[float, UndefinedType] = Undefined,
        minSize: Union[float, UndefinedType] = Undefined,
        minStrokeWidth: Union[float, UndefinedType] = Undefined,
        offsetBandPaddingInner: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], float], UndefinedType
        ] = Undefined,
        offsetBandPaddingOuter: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], float], UndefinedType
        ] = Undefined,
        pointPadding: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], float], UndefinedType
        ] = Undefined,
        quantileCount: Union[float, UndefinedType] = Undefined,
        quantizeCount: Union[float, UndefinedType] = Undefined,
        rectBandPaddingInner: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], float], UndefinedType
        ] = Undefined,
        round: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], bool], UndefinedType
        ] = Undefined,
        useUnaggregatedDomain: Union[bool, UndefinedType] = Undefined,
        xReverse: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], bool], UndefinedType
        ] = Undefined,
        zero: Union[bool, UndefinedType] = Undefined,
        **kwds
    ):
        super(ScaleConfig, self).__init__(
            bandPaddingInner=bandPaddingInner,
            bandPaddingOuter=bandPaddingOuter,
            bandWithNestedOffsetPaddingInner=bandWithNestedOffsetPaddingInner,
            bandWithNestedOffsetPaddingOuter=bandWithNestedOffsetPaddingOuter,
            barBandPaddingInner=barBandPaddingInner,
            clamp=clamp,
            continuousPadding=continuousPadding,
            maxBandSize=maxBandSize,
            maxFontSize=maxFontSize,
            maxOpacity=maxOpacity,
            maxSize=maxSize,
            maxStrokeWidth=maxStrokeWidth,
            minBandSize=minBandSize,
            minFontSize=minFontSize,
            minOpacity=minOpacity,
            minSize=minSize,
            minStrokeWidth=minStrokeWidth,
            offsetBandPaddingInner=offsetBandPaddingInner,
            offsetBandPaddingOuter=offsetBandPaddingOuter,
            pointPadding=pointPadding,
            quantileCount=quantileCount,
            quantizeCount=quantizeCount,
            rectBandPaddingInner=rectBandPaddingInner,
            round=round,
            useUnaggregatedDomain=useUnaggregatedDomain,
            xReverse=xReverse,
            zero=zero,
            **kwds
        )


class ScaleDatumDef(OffsetDef):
    """ScaleDatumDef schema wrapper

    Union[:class:`ScaleDatumDef`, Dict[required=[]]]

    Parameters
    ----------

    bandPosition : float
        Relative position on a band of a stacked, binned, time unit, or band scale. For
        example, the marks will be positioned at the beginning of the band if set to ``0``,
        and at the middle of the band if set to ``0.5``.
    datum : Union[Union[:class:`DateTime`, Dict[required=[]]], Union[:class:`ExprRef`, Dict[required=[expr]]], Union[:class:`PrimitiveValue`, None, bool, float, str], Union[:class:`RepeatRef`, Dict[required=[repeat]]]]
        A constant value in data domain.
    scale : Union[None, Union[:class:`Scale`, Dict[required=[]]]]
        An object defining properties of the channel's scale, which is the function that
        transforms values in the data domain (numbers, dates, strings, etc) to visual values
        (pixels, colors, sizes) of the encoding channels.

        If ``null``, the scale will be `disabled and the data value will be directly encoded
        <https://vega.github.io/vega-lite/docs/scale.html#disable>`__.

        **Default value:** If undefined, default `scale properties
        <https://vega.github.io/vega-lite/docs/scale.html>`__ are applied.

        **See also:** `scale <https://vega.github.io/vega-lite/docs/scale.html>`__
        documentation.
    title : Union[None, Union[:class:`Text`, List[str], str]]
        A title for the field. If ``null``, the title will be removed.

        **Default value:**  derived from the field's name and transformation function (
        ``aggregate``, ``bin`` and ``timeUnit`` ). If the field has an aggregate function,
        the function is displayed as part of the title (e.g., ``"Sum of Profit"`` ). If the
        field is binned or has a time unit applied, the applied function is shown in
        parentheses (e.g., ``"Profit (binned)"``, ``"Transaction Date (year-month)"`` ).
        Otherwise, the title is simply the field name.

        **Notes** :

        1) You can customize the default field title format by providing the `fieldTitle
        <https://vega.github.io/vega-lite/docs/config.html#top-level-config>`__ property in
        the `config <https://vega.github.io/vega-lite/docs/config.html>`__ or `fieldTitle
        function via the compile function's options
        <https://vega.github.io/vega-lite/usage/compile.html#field-title>`__.

        2) If both field definition's ``title`` and axis, header, or legend ``title`` are
        defined, axis/header/legend title will be used.
    type : Union[:class:`Type`, Literal['quantitative', 'ordinal', 'temporal', 'nominal', 'geojson']]
        The type of measurement ( ``"quantitative"``, ``"temporal"``, ``"ordinal"``, or
        ``"nominal"`` ) for the encoded field or constant value ( ``datum`` ). It can also
        be a ``"geojson"`` type for encoding `'geoshape'
        <https://vega.github.io/vega-lite/docs/geoshape.html>`__.

        Vega-Lite automatically infers data types in many cases as discussed below. However,
        type is required for a field if: (1) the field is not nominal and the field encoding
        has no specified ``aggregate`` (except ``argmin`` and ``argmax`` ), ``bin``, scale
        type, custom ``sort`` order, nor ``timeUnit`` or (2) if you wish to use an ordinal
        scale for a field with ``bin`` or ``timeUnit``.

        **Default value:**

        1) For a data ``field``, ``"nominal"`` is the default data type unless the field
        encoding has ``aggregate``, ``channel``, ``bin``, scale type, ``sort``, or
        ``timeUnit`` that satisfies the following criteria:


        * ``"quantitative"`` is the default type if (1) the encoded field contains ``bin``
          or ``aggregate`` except ``"argmin"`` and ``"argmax"``, (2) the encoding channel is
          ``latitude`` or ``longitude`` channel or (3) if the specified scale type is `a
          quantitative scale <https://vega.github.io/vega-lite/docs/scale.html#type>`__.
        * ``"temporal"`` is the default type if (1) the encoded field contains ``timeUnit``
          or (2) the specified scale type is a time or utc scale
        * ``"ordinal"`` is the default type if (1) the encoded field contains a `custom sort
          order
          <https://vega.github.io/vega-lite/docs/sort.html#specifying-custom-sort-order>`__,
          (2) the specified scale type is an ordinal/point/band scale, or (3) the encoding
          channel is ``order``.

        2) For a constant value in data domain ( ``datum`` ):


        * ``"quantitative"`` if the datum is a number
        * ``"nominal"`` if the datum is a string
        * ``"temporal"`` if the datum is `a date time object
          <https://vega.github.io/vega-lite/docs/datetime.html>`__

        **Note:**


        * Data ``type`` describes the semantics of the data rather than the primitive data
          types (number, string, etc.). The same primitive data type can have different
          types of measurement. For example, numeric data can represent quantitative,
          ordinal, or nominal data.
        * Data values for a temporal field can be either a date-time string (e.g.,
          ``"2015-03-07 12:32:17"``, ``"17:01"``, ``"2015-03-16"``. ``"2015"`` ) or a
          timestamp number (e.g., ``1552199579097`` ).
        * When using with `bin <https://vega.github.io/vega-lite/docs/bin.html>`__, the
          ``type`` property can be either ``"quantitative"`` (for using a linear bin scale)
          or `"ordinal" (for using an ordinal bin scale)
          <https://vega.github.io/vega-lite/docs/type.html#cast-bin>`__.
        * When using with `timeUnit
          <https://vega.github.io/vega-lite/docs/timeunit.html>`__, the ``type`` property
          can be either ``"temporal"`` (default, for using a temporal scale) or `"ordinal"
          (for using an ordinal scale)
          <https://vega.github.io/vega-lite/docs/type.html#cast-bin>`__.
        * When using with `aggregate
          <https://vega.github.io/vega-lite/docs/aggregate.html>`__, the ``type`` property
          refers to the post-aggregation data type. For example, we can calculate count
          ``distinct`` of a categorical field ``"cat"`` using ``{"aggregate": "distinct",
          "field": "cat"}``. The ``"type"`` of the aggregate output is ``"quantitative"``.
        * Secondary channels (e.g., ``x2``, ``y2``, ``xError``, ``yError`` ) do not have
          ``type`` as they must have exactly the same type as their primary channels (e.g.,
          ``x``, ``y`` ).

        **See also:** `type <https://vega.github.io/vega-lite/docs/type.html>`__
        documentation.
    """

    _schema = {"$ref": "#/definitions/ScaleDatumDef"}

    def __init__(
        self,
        bandPosition: Union[float, UndefinedType] = Undefined,
        datum: Union[
            Union[
                Union["DateTime", dict],
                Union["ExprRef", "_ParameterProtocol", dict],
                Union["PrimitiveValue", None, bool, float, str],
                Union["RepeatRef", dict],
            ],
            UndefinedType,
        ] = Undefined,
        scale: Union[Union[None, Union["Scale", dict]], UndefinedType] = Undefined,
        title: Union[
            Union[None, Union["Text", List[str], str]], UndefinedType
        ] = Undefined,
        type: Union[
            Union[
                "Type",
                Literal["quantitative", "ordinal", "temporal", "nominal", "geojson"],
            ],
            UndefinedType,
        ] = Undefined,
        **kwds
    ):
        super(ScaleDatumDef, self).__init__(
            bandPosition=bandPosition,
            datum=datum,
            scale=scale,
            title=title,
            type=type,
            **kwds
        )


class ScaleFieldDef(OffsetDef):
    """ScaleFieldDef schema wrapper

    Union[:class:`ScaleFieldDef`, Dict[required=[]]]

    Parameters
    ----------

    aggregate : Union[:class:`Aggregate`, Union[:class:`ArgmaxDef`, Dict[required=[argmax]]], Union[:class:`ArgminDef`, Dict[required=[argmin]]], Union[:class:`NonArgAggregateOp`, Literal['average', 'count', 'distinct', 'max', 'mean', 'median', 'min', 'missing', 'product', 'q1', 'q3', 'ci0', 'ci1', 'stderr', 'stdev', 'stdevp', 'sum', 'valid', 'values', 'variance', 'variancep']]]
        Aggregation function for the field (e.g., ``"mean"``, ``"sum"``, ``"median"``,
        ``"min"``, ``"max"``, ``"count"`` ).

        **Default value:** ``undefined`` (None)

        **See also:** `aggregate <https://vega.github.io/vega-lite/docs/aggregate.html>`__
        documentation.
    bandPosition : float
        Relative position on a band of a stacked, binned, time unit, or band scale. For
        example, the marks will be positioned at the beginning of the band if set to ``0``,
        and at the middle of the band if set to ``0.5``.
    bin : Union[None, Union[:class:`BinParams`, Dict[required=[]]], bool]
        A flag for binning a ``quantitative`` field, `an object defining binning parameters
        <https://vega.github.io/vega-lite/docs/bin.html#bin-parameters>`__, or indicating
        that the data for ``x`` or ``y`` channel are binned before they are imported into
        Vega-Lite ( ``"binned"`` ).


        If ``true``, default `binning parameters
        <https://vega.github.io/vega-lite/docs/bin.html#bin-parameters>`__ will be applied.

        If ``"binned"``, this indicates that the data for the ``x`` (or ``y`` ) channel are
        already binned. You can map the bin-start field to ``x`` (or ``y`` ) and the bin-end
        field to ``x2`` (or ``y2`` ). The scale and axis will be formatted similar to
        binning in Vega-Lite.  To adjust the axis ticks based on the bin step, you can also
        set the axis's `tickMinStep
        <https://vega.github.io/vega-lite/docs/axis.html#ticks>`__ property.

        **Default value:** ``false``

        **See also:** `bin <https://vega.github.io/vega-lite/docs/bin.html>`__
        documentation.
    field : Union[:class:`Field`, Union[:class:`FieldName`, str], Union[:class:`RepeatRef`, Dict[required=[repeat]]]]
        **Required.** A string defining the name of the field from which to pull a data
        value or an object defining iterated values from the `repeat
        <https://vega.github.io/vega-lite/docs/repeat.html>`__ operator.

        **See also:** `field <https://vega.github.io/vega-lite/docs/field.html>`__
        documentation.

        **Notes:** 1)  Dots ( ``.`` ) and brackets ( ``[`` and ``]`` ) can be used to access
        nested objects (e.g., ``"field": "foo.bar"`` and ``"field": "foo['bar']"`` ). If
        field names contain dots or brackets but are not nested, you can use ``\\`` to
        escape dots and brackets (e.g., ``"a\\.b"`` and ``"a\\[0\\]"`` ). See more details
        about escaping in the `field documentation
        <https://vega.github.io/vega-lite/docs/field.html>`__. 2) ``field`` is not required
        if ``aggregate`` is ``count``.
    scale : Union[None, Union[:class:`Scale`, Dict[required=[]]]]
        An object defining properties of the channel's scale, which is the function that
        transforms values in the data domain (numbers, dates, strings, etc) to visual values
        (pixels, colors, sizes) of the encoding channels.

        If ``null``, the scale will be `disabled and the data value will be directly encoded
        <https://vega.github.io/vega-lite/docs/scale.html#disable>`__.

        **Default value:** If undefined, default `scale properties
        <https://vega.github.io/vega-lite/docs/scale.html>`__ are applied.

        **See also:** `scale <https://vega.github.io/vega-lite/docs/scale.html>`__
        documentation.
    sort : Union[:class:`Sort`, None, Union[:class:`AllSortString`, Union[:class:`SortByChannelDesc`, Literal['-x', '-y', '-color', '-fill', '-stroke', '-strokeWidth', '-size', '-shape', '-fillOpacity', '-strokeOpacity', '-opacity', '-text']], Union[:class:`SortByChannel`, Literal['x', 'y', 'color', 'fill', 'stroke', 'strokeWidth', 'size', 'shape', 'fillOpacity', 'strokeOpacity', 'opacity', 'text']], Union[:class:`SortOrder`, Literal['ascending', 'descending']]], Union[:class:`EncodingSortField`, Dict[required=[]]], Union[:class:`SortArray`, List[Union[:class:`DateTime`, Dict[required=[]]]], List[bool], List[float], List[str]], Union[:class:`SortByEncoding`, Dict[required=[encoding]]]]
        Sort order for the encoded field.

        For continuous fields (quantitative or temporal), ``sort`` can be either
        ``"ascending"`` or ``"descending"``.

        For discrete fields, ``sort`` can be one of the following:


        * ``"ascending"`` or ``"descending"`` -- for sorting by the values' natural order in
          JavaScript.
        * `A string indicating an encoding channel name to sort by
          <https://vega.github.io/vega-lite/docs/sort.html#sort-by-encoding>`__ (e.g.,
          ``"x"`` or ``"y"`` ) with an optional minus prefix for descending sort (e.g.,
          ``"-x"`` to sort by x-field, descending). This channel string is short-form of `a
          sort-by-encoding definition
          <https://vega.github.io/vega-lite/docs/sort.html#sort-by-encoding>`__. For
          example, ``"sort": "-x"`` is equivalent to ``"sort": {"encoding": "x", "order":
          "descending"}``.
        * `A sort field definition
          <https://vega.github.io/vega-lite/docs/sort.html#sort-field>`__ for sorting by
          another field.
        * `An array specifying the field values in preferred order
          <https://vega.github.io/vega-lite/docs/sort.html#sort-array>`__. In this case, the
          sort order will obey the values in the array, followed by any unspecified values
          in their original order. For discrete time field, values in the sort array can be
          `date-time definition objects
          <https://vega.github.io/vega-lite/docs/datetime.html>`__. In addition, for time
          units ``"month"`` and ``"day"``, the values can be the month or day names (case
          insensitive) or their 3-letter initials (e.g., ``"Mon"``, ``"Tue"`` ).
        * ``null`` indicating no sort.

        **Default value:** ``"ascending"``

        **Note:** ``null`` and sorting by another channel is not supported for ``row`` and
        ``column``.

        **See also:** `sort <https://vega.github.io/vega-lite/docs/sort.html>`__
        documentation.
    timeUnit : Union[Union[:class:`BinnedTimeUnit`, Literal['binnedutcyear', 'binnedutcyearquarter', 'binnedutcyearquartermonth', 'binnedutcyearmonth', 'binnedutcyearmonthdate', 'binnedutcyearmonthdatehours', 'binnedutcyearmonthdatehoursminutes', 'binnedutcyearmonthdatehoursminutesseconds', 'binnedutcyearweek', 'binnedutcyearweekday', 'binnedutcyearweekdayhours', 'binnedutcyearweekdayhoursminutes', 'binnedutcyearweekdayhoursminutesseconds', 'binnedutcyeardayofyear'], Literal['binnedyear', 'binnedyearquarter', 'binnedyearquartermonth', 'binnedyearmonth', 'binnedyearmonthdate', 'binnedyearmonthdatehours', 'binnedyearmonthdatehoursminutes', 'binnedyearmonthdatehoursminutesseconds', 'binnedyearweek', 'binnedyearweekday', 'binnedyearweekdayhours', 'binnedyearweekdayhoursminutes', 'binnedyearweekdayhoursminutesseconds', 'binnedyeardayofyear']], Union[:class:`TimeUnitParams`, Dict[required=[]]], Union[:class:`TimeUnit`, Union[:class:`MultiTimeUnit`, Union[:class:`LocalMultiTimeUnit`, Literal['yearquarter', 'yearquartermonth', 'yearmonth', 'yearmonthdate', 'yearmonthdatehours', 'yearmonthdatehoursminutes', 'yearmonthdatehoursminutesseconds', 'yearweek', 'yearweekday', 'yearweekdayhours', 'yearweekdayhoursminutes', 'yearweekdayhoursminutesseconds', 'yeardayofyear', 'quartermonth', 'monthdate', 'monthdatehours', 'monthdatehoursminutes', 'monthdatehoursminutesseconds', 'weekday', 'weeksdayhours', 'weekdayhoursminutes', 'weekdayhoursminutesseconds', 'dayhours', 'dayhoursminutes', 'dayhoursminutesseconds', 'hoursminutes', 'hoursminutesseconds', 'minutesseconds', 'secondsmilliseconds']], Union[:class:`UtcMultiTimeUnit`, Literal['utcyearquarter', 'utcyearquartermonth', 'utcyearmonth', 'utcyearmonthdate', 'utcyearmonthdatehours', 'utcyearmonthdatehoursminutes', 'utcyearmonthdatehoursminutesseconds', 'utcyearweek', 'utcyearweekday', 'utcyearweekdayhours', 'utcyearweekdayhoursminutes', 'utcyearweekdayhoursminutesseconds', 'utcyeardayofyear', 'utcquartermonth', 'utcmonthdate', 'utcmonthdatehours', 'utcmonthdatehoursminutes', 'utcmonthdatehoursminutesseconds', 'utcweekday', 'utcweeksdayhours', 'utcweekdayhoursminutes', 'utcweekdayhoursminutesseconds', 'utcdayhours', 'utcdayhoursminutes', 'utcdayhoursminutesseconds', 'utchoursminutes', 'utchoursminutesseconds', 'utcminutesseconds', 'utcsecondsmilliseconds']]], Union[:class:`SingleTimeUnit`, Union[:class:`LocalSingleTimeUnit`, Literal['year', 'quarter', 'month', 'week', 'day', 'dayofyear', 'date', 'hours', 'minutes', 'seconds', 'milliseconds']], Union[:class:`UtcSingleTimeUnit`, Literal['utcyear', 'utcquarter', 'utcmonth', 'utcweek', 'utcday', 'utcdayofyear', 'utcdate', 'utchours', 'utcminutes', 'utcseconds', 'utcmilliseconds']]]]]
        Time unit (e.g., ``year``, ``yearmonth``, ``month``, ``hours`` ) for a temporal
        field. or `a temporal field that gets casted as ordinal
        <https://vega.github.io/vega-lite/docs/type.html#cast>`__.

        **Default value:** ``undefined`` (None)

        **See also:** `timeUnit <https://vega.github.io/vega-lite/docs/timeunit.html>`__
        documentation.
    title : Union[None, Union[:class:`Text`, List[str], str]]
        A title for the field. If ``null``, the title will be removed.

        **Default value:**  derived from the field's name and transformation function (
        ``aggregate``, ``bin`` and ``timeUnit`` ). If the field has an aggregate function,
        the function is displayed as part of the title (e.g., ``"Sum of Profit"`` ). If the
        field is binned or has a time unit applied, the applied function is shown in
        parentheses (e.g., ``"Profit (binned)"``, ``"Transaction Date (year-month)"`` ).
        Otherwise, the title is simply the field name.

        **Notes** :

        1) You can customize the default field title format by providing the `fieldTitle
        <https://vega.github.io/vega-lite/docs/config.html#top-level-config>`__ property in
        the `config <https://vega.github.io/vega-lite/docs/config.html>`__ or `fieldTitle
        function via the compile function's options
        <https://vega.github.io/vega-lite/usage/compile.html#field-title>`__.

        2) If both field definition's ``title`` and axis, header, or legend ``title`` are
        defined, axis/header/legend title will be used.
    type : Union[:class:`StandardType`, Literal['quantitative', 'ordinal', 'temporal', 'nominal']]
        The type of measurement ( ``"quantitative"``, ``"temporal"``, ``"ordinal"``, or
        ``"nominal"`` ) for the encoded field or constant value ( ``datum`` ). It can also
        be a ``"geojson"`` type for encoding `'geoshape'
        <https://vega.github.io/vega-lite/docs/geoshape.html>`__.

        Vega-Lite automatically infers data types in many cases as discussed below. However,
        type is required for a field if: (1) the field is not nominal and the field encoding
        has no specified ``aggregate`` (except ``argmin`` and ``argmax`` ), ``bin``, scale
        type, custom ``sort`` order, nor ``timeUnit`` or (2) if you wish to use an ordinal
        scale for a field with ``bin`` or ``timeUnit``.

        **Default value:**

        1) For a data ``field``, ``"nominal"`` is the default data type unless the field
        encoding has ``aggregate``, ``channel``, ``bin``, scale type, ``sort``, or
        ``timeUnit`` that satisfies the following criteria:


        * ``"quantitative"`` is the default type if (1) the encoded field contains ``bin``
          or ``aggregate`` except ``"argmin"`` and ``"argmax"``, (2) the encoding channel is
          ``latitude`` or ``longitude`` channel or (3) if the specified scale type is `a
          quantitative scale <https://vega.github.io/vega-lite/docs/scale.html#type>`__.
        * ``"temporal"`` is the default type if (1) the encoded field contains ``timeUnit``
          or (2) the specified scale type is a time or utc scale
        * ``"ordinal"`` is the default type if (1) the encoded field contains a `custom sort
          order
          <https://vega.github.io/vega-lite/docs/sort.html#specifying-custom-sort-order>`__,
          (2) the specified scale type is an ordinal/point/band scale, or (3) the encoding
          channel is ``order``.

        2) For a constant value in data domain ( ``datum`` ):


        * ``"quantitative"`` if the datum is a number
        * ``"nominal"`` if the datum is a string
        * ``"temporal"`` if the datum is `a date time object
          <https://vega.github.io/vega-lite/docs/datetime.html>`__

        **Note:**


        * Data ``type`` describes the semantics of the data rather than the primitive data
          types (number, string, etc.). The same primitive data type can have different
          types of measurement. For example, numeric data can represent quantitative,
          ordinal, or nominal data.
        * Data values for a temporal field can be either a date-time string (e.g.,
          ``"2015-03-07 12:32:17"``, ``"17:01"``, ``"2015-03-16"``. ``"2015"`` ) or a
          timestamp number (e.g., ``1552199579097`` ).
        * When using with `bin <https://vega.github.io/vega-lite/docs/bin.html>`__, the
          ``type`` property can be either ``"quantitative"`` (for using a linear bin scale)
          or `"ordinal" (for using an ordinal bin scale)
          <https://vega.github.io/vega-lite/docs/type.html#cast-bin>`__.
        * When using with `timeUnit
          <https://vega.github.io/vega-lite/docs/timeunit.html>`__, the ``type`` property
          can be either ``"temporal"`` (default, for using a temporal scale) or `"ordinal"
          (for using an ordinal scale)
          <https://vega.github.io/vega-lite/docs/type.html#cast-bin>`__.
        * When using with `aggregate
          <https://vega.github.io/vega-lite/docs/aggregate.html>`__, the ``type`` property
          refers to the post-aggregation data type. For example, we can calculate count
          ``distinct`` of a categorical field ``"cat"`` using ``{"aggregate": "distinct",
          "field": "cat"}``. The ``"type"`` of the aggregate output is ``"quantitative"``.
        * Secondary channels (e.g., ``x2``, ``y2``, ``xError``, ``yError`` ) do not have
          ``type`` as they must have exactly the same type as their primary channels (e.g.,
          ``x``, ``y`` ).

        **See also:** `type <https://vega.github.io/vega-lite/docs/type.html>`__
        documentation.
    """

    _schema = {"$ref": "#/definitions/ScaleFieldDef"}

    def __init__(
        self,
        aggregate: Union[
            Union[
                "Aggregate",
                Union["ArgmaxDef", dict],
                Union["ArgminDef", dict],
                Union[
                    "NonArgAggregateOp",
                    Literal[
                        "average",
                        "count",
                        "distinct",
                        "max",
                        "mean",
                        "median",
                        "min",
                        "missing",
                        "product",
                        "q1",
                        "q3",
                        "ci0",
                        "ci1",
                        "stderr",
                        "stdev",
                        "stdevp",
                        "sum",
                        "valid",
                        "values",
                        "variance",
                        "variancep",
                    ],
                ],
            ],
            UndefinedType,
        ] = Undefined,
        bandPosition: Union[float, UndefinedType] = Undefined,
        bin: Union[
            Union[None, Union["BinParams", dict], bool], UndefinedType
        ] = Undefined,
        field: Union[
            Union["Field", Union["FieldName", str], Union["RepeatRef", dict]],
            UndefinedType,
        ] = Undefined,
        scale: Union[Union[None, Union["Scale", dict]], UndefinedType] = Undefined,
        sort: Union[
            Union[
                "Sort",
                None,
                Union[
                    "AllSortString",
                    Union[
                        "SortByChannel",
                        Literal[
                            "x",
                            "y",
                            "color",
                            "fill",
                            "stroke",
                            "strokeWidth",
                            "size",
                            "shape",
                            "fillOpacity",
                            "strokeOpacity",
                            "opacity",
                            "text",
                        ],
                    ],
                    Union[
                        "SortByChannelDesc",
                        Literal[
                            "-x",
                            "-y",
                            "-color",
                            "-fill",
                            "-stroke",
                            "-strokeWidth",
                            "-size",
                            "-shape",
                            "-fillOpacity",
                            "-strokeOpacity",
                            "-opacity",
                            "-text",
                        ],
                    ],
                    Union["SortOrder", Literal["ascending", "descending"]],
                ],
                Union["EncodingSortField", dict],
                Union[
                    "SortArray",
                    List[bool],
                    List[float],
                    List[str],
                    Union[List["DateTime"], List[dict]],
                ],
                Union["SortByEncoding", dict],
            ],
            UndefinedType,
        ] = Undefined,
        timeUnit: Union[
            Union[
                Union[
                    "BinnedTimeUnit",
                    Literal[
                        "binnedutcyear",
                        "binnedutcyearquarter",
                        "binnedutcyearquartermonth",
                        "binnedutcyearmonth",
                        "binnedutcyearmonthdate",
                        "binnedutcyearmonthdatehours",
                        "binnedutcyearmonthdatehoursminutes",
                        "binnedutcyearmonthdatehoursminutesseconds",
                        "binnedutcyearweek",
                        "binnedutcyearweekday",
                        "binnedutcyearweekdayhours",
                        "binnedutcyearweekdayhoursminutes",
                        "binnedutcyearweekdayhoursminutesseconds",
                        "binnedutcyeardayofyear",
                    ],
                    Literal[
                        "binnedyear",
                        "binnedyearquarter",
                        "binnedyearquartermonth",
                        "binnedyearmonth",
                        "binnedyearmonthdate",
                        "binnedyearmonthdatehours",
                        "binnedyearmonthdatehoursminutes",
                        "binnedyearmonthdatehoursminutesseconds",
                        "binnedyearweek",
                        "binnedyearweekday",
                        "binnedyearweekdayhours",
                        "binnedyearweekdayhoursminutes",
                        "binnedyearweekdayhoursminutesseconds",
                        "binnedyeardayofyear",
                    ],
                ],
                Union[
                    "TimeUnit",
                    Union[
                        "MultiTimeUnit",
                        Union[
                            "LocalMultiTimeUnit",
                            Literal[
                                "yearquarter",
                                "yearquartermonth",
                                "yearmonth",
                                "yearmonthdate",
                                "yearmonthdatehours",
                                "yearmonthdatehoursminutes",
                                "yearmonthdatehoursminutesseconds",
                                "yearweek",
                                "yearweekday",
                                "yearweekdayhours",
                                "yearweekdayhoursminutes",
                                "yearweekdayhoursminutesseconds",
                                "yeardayofyear",
                                "quartermonth",
                                "monthdate",
                                "monthdatehours",
                                "monthdatehoursminutes",
                                "monthdatehoursminutesseconds",
                                "weekday",
                                "weeksdayhours",
                                "weekdayhoursminutes",
                                "weekdayhoursminutesseconds",
                                "dayhours",
                                "dayhoursminutes",
                                "dayhoursminutesseconds",
                                "hoursminutes",
                                "hoursminutesseconds",
                                "minutesseconds",
                                "secondsmilliseconds",
                            ],
                        ],
                        Union[
                            "UtcMultiTimeUnit",
                            Literal[
                                "utcyearquarter",
                                "utcyearquartermonth",
                                "utcyearmonth",
                                "utcyearmonthdate",
                                "utcyearmonthdatehours",
                                "utcyearmonthdatehoursminutes",
                                "utcyearmonthdatehoursminutesseconds",
                                "utcyearweek",
                                "utcyearweekday",
                                "utcyearweekdayhours",
                                "utcyearweekdayhoursminutes",
                                "utcyearweekdayhoursminutesseconds",
                                "utcyeardayofyear",
                                "utcquartermonth",
                                "utcmonthdate",
                                "utcmonthdatehours",
                                "utcmonthdatehoursminutes",
                                "utcmonthdatehoursminutesseconds",
                                "utcweekday",
                                "utcweeksdayhours",
                                "utcweekdayhoursminutes",
                                "utcweekdayhoursminutesseconds",
                                "utcdayhours",
                                "utcdayhoursminutes",
                                "utcdayhoursminutesseconds",
                                "utchoursminutes",
                                "utchoursminutesseconds",
                                "utcminutesseconds",
                                "utcsecondsmilliseconds",
                            ],
                        ],
                    ],
                    Union[
                        "SingleTimeUnit",
                        Union[
                            "LocalSingleTimeUnit",
                            Literal[
                                "year",
                                "quarter",
                                "month",
                                "week",
                                "day",
                                "dayofyear",
                                "date",
                                "hours",
                                "minutes",
                                "seconds",
                                "milliseconds",
                            ],
                        ],
                        Union[
                            "UtcSingleTimeUnit",
                            Literal[
                                "utcyear",
                                "utcquarter",
                                "utcmonth",
                                "utcweek",
                                "utcday",
                                "utcdayofyear",
                                "utcdate",
                                "utchours",
                                "utcminutes",
                                "utcseconds",
                                "utcmilliseconds",
                            ],
                        ],
                    ],
                ],
                Union["TimeUnitParams", dict],
            ],
            UndefinedType,
        ] = Undefined,
        title: Union[
            Union[None, Union["Text", List[str], str]], UndefinedType
        ] = Undefined,
        type: Union[
            Union[
                "StandardType",
                Literal["quantitative", "ordinal", "temporal", "nominal"],
            ],
            UndefinedType,
        ] = Undefined,
        **kwds
    ):
        super(ScaleFieldDef, self).__init__(
            aggregate=aggregate,
            bandPosition=bandPosition,
            bin=bin,
            field=field,
            scale=scale,
            sort=sort,
            timeUnit=timeUnit,
            title=title,
            type=type,
            **kwds
        )


class ScaleInterpolateEnum(VegaLiteSchema):
    """ScaleInterpolateEnum schema wrapper

    Union[:class:`ScaleInterpolateEnum`, Literal['rgb', 'lab', 'hcl', 'hsl', 'hsl-long',
    'hcl-long', 'cubehelix', 'cubehelix-long']]
    """

    _schema = {"$ref": "#/definitions/ScaleInterpolateEnum"}

    def __init__(self, *args):
        super(ScaleInterpolateEnum, self).__init__(*args)


class ScaleInterpolateParams(VegaLiteSchema):
    """ScaleInterpolateParams schema wrapper

    Union[:class:`ScaleInterpolateParams`, Dict[required=[type]]]

    Parameters
    ----------

    type : Literal['rgb', 'cubehelix', 'cubehelix-long']

    gamma : float

    """

    _schema = {"$ref": "#/definitions/ScaleInterpolateParams"}

    def __init__(
        self,
        type: Union[
            Literal["rgb", "cubehelix", "cubehelix-long"], UndefinedType
        ] = Undefined,
        gamma: Union[float, UndefinedType] = Undefined,
        **kwds
    ):
        super(ScaleInterpolateParams, self).__init__(type=type, gamma=gamma, **kwds)


class ScaleResolveMap(VegaLiteSchema):
    """ScaleResolveMap schema wrapper

    Union[:class:`ScaleResolveMap`, Dict[required=[]]]

    Parameters
    ----------

    angle : Union[:class:`ResolveMode`, Literal['independent', 'shared']]

    color : Union[:class:`ResolveMode`, Literal['independent', 'shared']]

    fill : Union[:class:`ResolveMode`, Literal['independent', 'shared']]

    fillOpacity : Union[:class:`ResolveMode`, Literal['independent', 'shared']]

    opacity : Union[:class:`ResolveMode`, Literal['independent', 'shared']]

    radius : Union[:class:`ResolveMode`, Literal['independent', 'shared']]

    shape : Union[:class:`ResolveMode`, Literal['independent', 'shared']]

    size : Union[:class:`ResolveMode`, Literal['independent', 'shared']]

    stroke : Union[:class:`ResolveMode`, Literal['independent', 'shared']]

    strokeDash : Union[:class:`ResolveMode`, Literal['independent', 'shared']]

    strokeOpacity : Union[:class:`ResolveMode`, Literal['independent', 'shared']]

    strokeWidth : Union[:class:`ResolveMode`, Literal['independent', 'shared']]

    theta : Union[:class:`ResolveMode`, Literal['independent', 'shared']]

    x : Union[:class:`ResolveMode`, Literal['independent', 'shared']]

    xOffset : Union[:class:`ResolveMode`, Literal['independent', 'shared']]

    y : Union[:class:`ResolveMode`, Literal['independent', 'shared']]

    yOffset : Union[:class:`ResolveMode`, Literal['independent', 'shared']]

    """

    _schema = {"$ref": "#/definitions/ScaleResolveMap"}

    def __init__(
        self,
        angle: Union[
            Union["ResolveMode", Literal["independent", "shared"]], UndefinedType
        ] = Undefined,
        color: Union[
            Union["ResolveMode", Literal["independent", "shared"]], UndefinedType
        ] = Undefined,
        fill: Union[
            Union["ResolveMode", Literal["independent", "shared"]], UndefinedType
        ] = Undefined,
        fillOpacity: Union[
            Union["ResolveMode", Literal["independent", "shared"]], UndefinedType
        ] = Undefined,
        opacity: Union[
            Union["ResolveMode", Literal["independent", "shared"]], UndefinedType
        ] = Undefined,
        radius: Union[
            Union["ResolveMode", Literal["independent", "shared"]], UndefinedType
        ] = Undefined,
        shape: Union[
            Union["ResolveMode", Literal["independent", "shared"]], UndefinedType
        ] = Undefined,
        size: Union[
            Union["ResolveMode", Literal["independent", "shared"]], UndefinedType
        ] = Undefined,
        stroke: Union[
            Union["ResolveMode", Literal["independent", "shared"]], UndefinedType
        ] = Undefined,
        strokeDash: Union[
            Union["ResolveMode", Literal["independent", "shared"]], UndefinedType
        ] = Undefined,
        strokeOpacity: Union[
            Union["ResolveMode", Literal["independent", "shared"]], UndefinedType
        ] = Undefined,
        strokeWidth: Union[
            Union["ResolveMode", Literal["independent", "shared"]], UndefinedType
        ] = Undefined,
        theta: Union[
            Union["ResolveMode", Literal["independent", "shared"]], UndefinedType
        ] = Undefined,
        x: Union[
            Union["ResolveMode", Literal["independent", "shared"]], UndefinedType
        ] = Undefined,
        xOffset: Union[
            Union["ResolveMode", Literal["independent", "shared"]], UndefinedType
        ] = Undefined,
        y: Union[
            Union["ResolveMode", Literal["independent", "shared"]], UndefinedType
        ] = Undefined,
        yOffset: Union[
            Union["ResolveMode", Literal["independent", "shared"]], UndefinedType
        ] = Undefined,
        **kwds
    ):
        super(ScaleResolveMap, self).__init__(
            angle=angle,
            color=color,
            fill=fill,
            fillOpacity=fillOpacity,
            opacity=opacity,
            radius=radius,
            shape=shape,
            size=size,
            stroke=stroke,
            strokeDash=strokeDash,
            strokeOpacity=strokeOpacity,
            strokeWidth=strokeWidth,
            theta=theta,
            x=x,
            xOffset=xOffset,
            y=y,
            yOffset=yOffset,
            **kwds
        )


class ScaleType(VegaLiteSchema):
    """ScaleType schema wrapper

    Union[:class:`ScaleType`, Literal['linear', 'log', 'pow', 'sqrt', 'symlog', 'identity',
    'sequential', 'time', 'utc', 'quantile', 'quantize', 'threshold', 'bin-ordinal', 'ordinal',
    'point', 'band']]
    """

    _schema = {"$ref": "#/definitions/ScaleType"}

    def __init__(self, *args):
        super(ScaleType, self).__init__(*args)


class SchemeParams(VegaLiteSchema):
    """SchemeParams schema wrapper

    Union[:class:`SchemeParams`, Dict[required=[name]]]

    Parameters
    ----------

    name : Union[:class:`ColorScheme`, Union[:class:`Categorical`, Literal['accent', 'category10', 'category20', 'category20b', 'category20c', 'dark2', 'paired', 'pastel1', 'pastel2', 'set1', 'set2', 'set3', 'tableau10', 'tableau20']], Union[:class:`Cyclical`, Literal['rainbow', 'sinebow']], Union[:class:`Diverging`, Literal['blueorange', 'blueorange-3', 'blueorange-4', 'blueorange-5', 'blueorange-6', 'blueorange-7', 'blueorange-8', 'blueorange-9', 'blueorange-10', 'blueorange-11', 'brownbluegreen', 'brownbluegreen-3', 'brownbluegreen-4', 'brownbluegreen-5', 'brownbluegreen-6', 'brownbluegreen-7', 'brownbluegreen-8', 'brownbluegreen-9', 'brownbluegreen-10', 'brownbluegreen-11', 'purplegreen', 'purplegreen-3', 'purplegreen-4', 'purplegreen-5', 'purplegreen-6', 'purplegreen-7', 'purplegreen-8', 'purplegreen-9', 'purplegreen-10', 'purplegreen-11', 'pinkyellowgreen', 'pinkyellowgreen-3', 'pinkyellowgreen-4', 'pinkyellowgreen-5', 'pinkyellowgreen-6', 'pinkyellowgreen-7', 'pinkyellowgreen-8', 'pinkyellowgreen-9', 'pinkyellowgreen-10', 'pinkyellowgreen-11', 'purpleorange', 'purpleorange-3', 'purpleorange-4', 'purpleorange-5', 'purpleorange-6', 'purpleorange-7', 'purpleorange-8', 'purpleorange-9', 'purpleorange-10', 'purpleorange-11', 'redblue', 'redblue-3', 'redblue-4', 'redblue-5', 'redblue-6', 'redblue-7', 'redblue-8', 'redblue-9', 'redblue-10', 'redblue-11', 'redgrey', 'redgrey-3', 'redgrey-4', 'redgrey-5', 'redgrey-6', 'redgrey-7', 'redgrey-8', 'redgrey-9', 'redgrey-10', 'redgrey-11', 'redyellowblue', 'redyellowblue-3', 'redyellowblue-4', 'redyellowblue-5', 'redyellowblue-6', 'redyellowblue-7', 'redyellowblue-8', 'redyellowblue-9', 'redyellowblue-10', 'redyellowblue-11', 'redyellowgreen', 'redyellowgreen-3', 'redyellowgreen-4', 'redyellowgreen-5', 'redyellowgreen-6', 'redyellowgreen-7', 'redyellowgreen-8', 'redyellowgreen-9', 'redyellowgreen-10', 'redyellowgreen-11', 'spectral', 'spectral-3', 'spectral-4', 'spectral-5', 'spectral-6', 'spectral-7', 'spectral-8', 'spectral-9', 'spectral-10', 'spectral-11']], Union[:class:`SequentialMultiHue`, Literal['turbo', 'viridis', 'inferno', 'magma', 'plasma', 'cividis', 'bluegreen', 'bluegreen-3', 'bluegreen-4', 'bluegreen-5', 'bluegreen-6', 'bluegreen-7', 'bluegreen-8', 'bluegreen-9', 'bluepurple', 'bluepurple-3', 'bluepurple-4', 'bluepurple-5', 'bluepurple-6', 'bluepurple-7', 'bluepurple-8', 'bluepurple-9', 'goldgreen', 'goldgreen-3', 'goldgreen-4', 'goldgreen-5', 'goldgreen-6', 'goldgreen-7', 'goldgreen-8', 'goldgreen-9', 'goldorange', 'goldorange-3', 'goldorange-4', 'goldorange-5', 'goldorange-6', 'goldorange-7', 'goldorange-8', 'goldorange-9', 'goldred', 'goldred-3', 'goldred-4', 'goldred-5', 'goldred-6', 'goldred-7', 'goldred-8', 'goldred-9', 'greenblue', 'greenblue-3', 'greenblue-4', 'greenblue-5', 'greenblue-6', 'greenblue-7', 'greenblue-8', 'greenblue-9', 'orangered', 'orangered-3', 'orangered-4', 'orangered-5', 'orangered-6', 'orangered-7', 'orangered-8', 'orangered-9', 'purplebluegreen', 'purplebluegreen-3', 'purplebluegreen-4', 'purplebluegreen-5', 'purplebluegreen-6', 'purplebluegreen-7', 'purplebluegreen-8', 'purplebluegreen-9', 'purpleblue', 'purpleblue-3', 'purpleblue-4', 'purpleblue-5', 'purpleblue-6', 'purpleblue-7', 'purpleblue-8', 'purpleblue-9', 'purplered', 'purplered-3', 'purplered-4', 'purplered-5', 'purplered-6', 'purplered-7', 'purplered-8', 'purplered-9', 'redpurple', 'redpurple-3', 'redpurple-4', 'redpurple-5', 'redpurple-6', 'redpurple-7', 'redpurple-8', 'redpurple-9', 'yellowgreenblue', 'yellowgreenblue-3', 'yellowgreenblue-4', 'yellowgreenblue-5', 'yellowgreenblue-6', 'yellowgreenblue-7', 'yellowgreenblue-8', 'yellowgreenblue-9', 'yellowgreen', 'yellowgreen-3', 'yellowgreen-4', 'yellowgreen-5', 'yellowgreen-6', 'yellowgreen-7', 'yellowgreen-8', 'yellowgreen-9', 'yelloworangebrown', 'yelloworangebrown-3', 'yelloworangebrown-4', 'yelloworangebrown-5', 'yelloworangebrown-6', 'yelloworangebrown-7', 'yelloworangebrown-8', 'yelloworangebrown-9', 'yelloworangered', 'yelloworangered-3', 'yelloworangered-4', 'yelloworangered-5', 'yelloworangered-6', 'yelloworangered-7', 'yelloworangered-8', 'yelloworangered-9', 'darkblue', 'darkblue-3', 'darkblue-4', 'darkblue-5', 'darkblue-6', 'darkblue-7', 'darkblue-8', 'darkblue-9', 'darkgold', 'darkgold-3', 'darkgold-4', 'darkgold-5', 'darkgold-6', 'darkgold-7', 'darkgold-8', 'darkgold-9', 'darkgreen', 'darkgreen-3', 'darkgreen-4', 'darkgreen-5', 'darkgreen-6', 'darkgreen-7', 'darkgreen-8', 'darkgreen-9', 'darkmulti', 'darkmulti-3', 'darkmulti-4', 'darkmulti-5', 'darkmulti-6', 'darkmulti-7', 'darkmulti-8', 'darkmulti-9', 'darkred', 'darkred-3', 'darkred-4', 'darkred-5', 'darkred-6', 'darkred-7', 'darkred-8', 'darkred-9', 'lightgreyred', 'lightgreyred-3', 'lightgreyred-4', 'lightgreyred-5', 'lightgreyred-6', 'lightgreyred-7', 'lightgreyred-8', 'lightgreyred-9', 'lightgreyteal', 'lightgreyteal-3', 'lightgreyteal-4', 'lightgreyteal-5', 'lightgreyteal-6', 'lightgreyteal-7', 'lightgreyteal-8', 'lightgreyteal-9', 'lightmulti', 'lightmulti-3', 'lightmulti-4', 'lightmulti-5', 'lightmulti-6', 'lightmulti-7', 'lightmulti-8', 'lightmulti-9', 'lightorange', 'lightorange-3', 'lightorange-4', 'lightorange-5', 'lightorange-6', 'lightorange-7', 'lightorange-8', 'lightorange-9', 'lighttealblue', 'lighttealblue-3', 'lighttealblue-4', 'lighttealblue-5', 'lighttealblue-6', 'lighttealblue-7', 'lighttealblue-8', 'lighttealblue-9']], Union[:class:`SequentialSingleHue`, Literal['blues', 'tealblues', 'teals', 'greens', 'browns', 'greys', 'purples', 'warmgreys', 'reds', 'oranges']]]
        A color scheme name for ordinal scales (e.g., ``"category10"`` or ``"blues"`` ).

        For the full list of supported schemes, please refer to the `Vega Scheme
        <https://vega.github.io/vega/docs/schemes/#reference>`__ reference.
    count : float
        The number of colors to use in the scheme. This can be useful for scale types such
        as ``"quantize"``, which use the length of the scale range to determine the number
        of discrete bins for the scale domain.
    extent : List[float]
        The extent of the color range to use. For example ``[0.2, 1]`` will rescale the
        color scheme such that color values in the range *[0, 0.2)* are excluded from the
        scheme.
    """

    _schema = {"$ref": "#/definitions/SchemeParams"}

    def __init__(
        self,
        name: Union[
            Union[
                "ColorScheme",
                Union[
                    "Categorical",
                    Literal[
                        "accent",
                        "category10",
                        "category20",
                        "category20b",
                        "category20c",
                        "dark2",
                        "paired",
                        "pastel1",
                        "pastel2",
                        "set1",
                        "set2",
                        "set3",
                        "tableau10",
                        "tableau20",
                    ],
                ],
                Union["Cyclical", Literal["rainbow", "sinebow"]],
                Union[
                    "Diverging",
                    Literal[
                        "blueorange",
                        "blueorange-3",
                        "blueorange-4",
                        "blueorange-5",
                        "blueorange-6",
                        "blueorange-7",
                        "blueorange-8",
                        "blueorange-9",
                        "blueorange-10",
                        "blueorange-11",
                        "brownbluegreen",
                        "brownbluegreen-3",
                        "brownbluegreen-4",
                        "brownbluegreen-5",
                        "brownbluegreen-6",
                        "brownbluegreen-7",
                        "brownbluegreen-8",
                        "brownbluegreen-9",
                        "brownbluegreen-10",
                        "brownbluegreen-11",
                        "purplegreen",
                        "purplegreen-3",
                        "purplegreen-4",
                        "purplegreen-5",
                        "purplegreen-6",
                        "purplegreen-7",
                        "purplegreen-8",
                        "purplegreen-9",
                        "purplegreen-10",
                        "purplegreen-11",
                        "pinkyellowgreen",
                        "pinkyellowgreen-3",
                        "pinkyellowgreen-4",
                        "pinkyellowgreen-5",
                        "pinkyellowgreen-6",
                        "pinkyellowgreen-7",
                        "pinkyellowgreen-8",
                        "pinkyellowgreen-9",
                        "pinkyellowgreen-10",
                        "pinkyellowgreen-11",
                        "purpleorange",
                        "purpleorange-3",
                        "purpleorange-4",
                        "purpleorange-5",
                        "purpleorange-6",
                        "purpleorange-7",
                        "purpleorange-8",
                        "purpleorange-9",
                        "purpleorange-10",
                        "purpleorange-11",
                        "redblue",
                        "redblue-3",
                        "redblue-4",
                        "redblue-5",
                        "redblue-6",
                        "redblue-7",
                        "redblue-8",
                        "redblue-9",
                        "redblue-10",
                        "redblue-11",
                        "redgrey",
                        "redgrey-3",
                        "redgrey-4",
                        "redgrey-5",
                        "redgrey-6",
                        "redgrey-7",
                        "redgrey-8",
                        "redgrey-9",
                        "redgrey-10",
                        "redgrey-11",
                        "redyellowblue",
                        "redyellowblue-3",
                        "redyellowblue-4",
                        "redyellowblue-5",
                        "redyellowblue-6",
                        "redyellowblue-7",
                        "redyellowblue-8",
                        "redyellowblue-9",
                        "redyellowblue-10",
                        "redyellowblue-11",
                        "redyellowgreen",
                        "redyellowgreen-3",
                        "redyellowgreen-4",
                        "redyellowgreen-5",
                        "redyellowgreen-6",
                        "redyellowgreen-7",
                        "redyellowgreen-8",
                        "redyellowgreen-9",
                        "redyellowgreen-10",
                        "redyellowgreen-11",
                        "spectral",
                        "spectral-3",
                        "spectral-4",
                        "spectral-5",
                        "spectral-6",
                        "spectral-7",
                        "spectral-8",
                        "spectral-9",
                        "spectral-10",
                        "spectral-11",
                    ],
                ],
                Union[
                    "SequentialMultiHue",
                    Literal[
                        "turbo",
                        "viridis",
                        "inferno",
                        "magma",
                        "plasma",
                        "cividis",
                        "bluegreen",
                        "bluegreen-3",
                        "bluegreen-4",
                        "bluegreen-5",
                        "bluegreen-6",
                        "bluegreen-7",
                        "bluegreen-8",
                        "bluegreen-9",
                        "bluepurple",
                        "bluepurple-3",
                        "bluepurple-4",
                        "bluepurple-5",
                        "bluepurple-6",
                        "bluepurple-7",
                        "bluepurple-8",
                        "bluepurple-9",
                        "goldgreen",
                        "goldgreen-3",
                        "goldgreen-4",
                        "goldgreen-5",
                        "goldgreen-6",
                        "goldgreen-7",
                        "goldgreen-8",
                        "goldgreen-9",
                        "goldorange",
                        "goldorange-3",
                        "goldorange-4",
                        "goldorange-5",
                        "goldorange-6",
                        "goldorange-7",
                        "goldorange-8",
                        "goldorange-9",
                        "goldred",
                        "goldred-3",
                        "goldred-4",
                        "goldred-5",
                        "goldred-6",
                        "goldred-7",
                        "goldred-8",
                        "goldred-9",
                        "greenblue",
                        "greenblue-3",
                        "greenblue-4",
                        "greenblue-5",
                        "greenblue-6",
                        "greenblue-7",
                        "greenblue-8",
                        "greenblue-9",
                        "orangered",
                        "orangered-3",
                        "orangered-4",
                        "orangered-5",
                        "orangered-6",
                        "orangered-7",
                        "orangered-8",
                        "orangered-9",
                        "purplebluegreen",
                        "purplebluegreen-3",
                        "purplebluegreen-4",
                        "purplebluegreen-5",
                        "purplebluegreen-6",
                        "purplebluegreen-7",
                        "purplebluegreen-8",
                        "purplebluegreen-9",
                        "purpleblue",
                        "purpleblue-3",
                        "purpleblue-4",
                        "purpleblue-5",
                        "purpleblue-6",
                        "purpleblue-7",
                        "purpleblue-8",
                        "purpleblue-9",
                        "purplered",
                        "purplered-3",
                        "purplered-4",
                        "purplered-5",
                        "purplered-6",
                        "purplered-7",
                        "purplered-8",
                        "purplered-9",
                        "redpurple",
                        "redpurple-3",
                        "redpurple-4",
                        "redpurple-5",
                        "redpurple-6",
                        "redpurple-7",
                        "redpurple-8",
                        "redpurple-9",
                        "yellowgreenblue",
                        "yellowgreenblue-3",
                        "yellowgreenblue-4",
                        "yellowgreenblue-5",
                        "yellowgreenblue-6",
                        "yellowgreenblue-7",
                        "yellowgreenblue-8",
                        "yellowgreenblue-9",
                        "yellowgreen",
                        "yellowgreen-3",
                        "yellowgreen-4",
                        "yellowgreen-5",
                        "yellowgreen-6",
                        "yellowgreen-7",
                        "yellowgreen-8",
                        "yellowgreen-9",
                        "yelloworangebrown",
                        "yelloworangebrown-3",
                        "yelloworangebrown-4",
                        "yelloworangebrown-5",
                        "yelloworangebrown-6",
                        "yelloworangebrown-7",
                        "yelloworangebrown-8",
                        "yelloworangebrown-9",
                        "yelloworangered",
                        "yelloworangered-3",
                        "yelloworangered-4",
                        "yelloworangered-5",
                        "yelloworangered-6",
                        "yelloworangered-7",
                        "yelloworangered-8",
                        "yelloworangered-9",
                        "darkblue",
                        "darkblue-3",
                        "darkblue-4",
                        "darkblue-5",
                        "darkblue-6",
                        "darkblue-7",
                        "darkblue-8",
                        "darkblue-9",
                        "darkgold",
                        "darkgold-3",
                        "darkgold-4",
                        "darkgold-5",
                        "darkgold-6",
                        "darkgold-7",
                        "darkgold-8",
                        "darkgold-9",
                        "darkgreen",
                        "darkgreen-3",
                        "darkgreen-4",
                        "darkgreen-5",
                        "darkgreen-6",
                        "darkgreen-7",
                        "darkgreen-8",
                        "darkgreen-9",
                        "darkmulti",
                        "darkmulti-3",
                        "darkmulti-4",
                        "darkmulti-5",
                        "darkmulti-6",
                        "darkmulti-7",
                        "darkmulti-8",
                        "darkmulti-9",
                        "darkred",
                        "darkred-3",
                        "darkred-4",
                        "darkred-5",
                        "darkred-6",
                        "darkred-7",
                        "darkred-8",
                        "darkred-9",
                        "lightgreyred",
                        "lightgreyred-3",
                        "lightgreyred-4",
                        "lightgreyred-5",
                        "lightgreyred-6",
                        "lightgreyred-7",
                        "lightgreyred-8",
                        "lightgreyred-9",
                        "lightgreyteal",
                        "lightgreyteal-3",
                        "lightgreyteal-4",
                        "lightgreyteal-5",
                        "lightgreyteal-6",
                        "lightgreyteal-7",
                        "lightgreyteal-8",
                        "lightgreyteal-9",
                        "lightmulti",
                        "lightmulti-3",
                        "lightmulti-4",
                        "lightmulti-5",
                        "lightmulti-6",
                        "lightmulti-7",
                        "lightmulti-8",
                        "lightmulti-9",
                        "lightorange",
                        "lightorange-3",
                        "lightorange-4",
                        "lightorange-5",
                        "lightorange-6",
                        "lightorange-7",
                        "lightorange-8",
                        "lightorange-9",
                        "lighttealblue",
                        "lighttealblue-3",
                        "lighttealblue-4",
                        "lighttealblue-5",
                        "lighttealblue-6",
                        "lighttealblue-7",
                        "lighttealblue-8",
                        "lighttealblue-9",
                    ],
                ],
                Union[
                    "SequentialSingleHue",
                    Literal[
                        "blues",
                        "tealblues",
                        "teals",
                        "greens",
                        "browns",
                        "greys",
                        "purples",
                        "warmgreys",
                        "reds",
                        "oranges",
                    ],
                ],
            ],
            UndefinedType,
        ] = Undefined,
        count: Union[float, UndefinedType] = Undefined,
        extent: Union[List[float], UndefinedType] = Undefined,
        **kwds
    ):
        super(SchemeParams, self).__init__(
            name=name, count=count, extent=extent, **kwds
        )


class SecondaryFieldDef(Position2Def):
    """SecondaryFieldDef schema wrapper

    Union[:class:`SecondaryFieldDef`, Dict[required=[]]]
    A field definition of a secondary channel that shares a scale with another primary channel.
    For example, ``x2``, ``xError`` and ``xError2`` share the same scale with ``x``.

    Parameters
    ----------

    aggregate : Union[:class:`Aggregate`, Union[:class:`ArgmaxDef`, Dict[required=[argmax]]], Union[:class:`ArgminDef`, Dict[required=[argmin]]], Union[:class:`NonArgAggregateOp`, Literal['average', 'count', 'distinct', 'max', 'mean', 'median', 'min', 'missing', 'product', 'q1', 'q3', 'ci0', 'ci1', 'stderr', 'stdev', 'stdevp', 'sum', 'valid', 'values', 'variance', 'variancep']]]
        Aggregation function for the field (e.g., ``"mean"``, ``"sum"``, ``"median"``,
        ``"min"``, ``"max"``, ``"count"`` ).

        **Default value:** ``undefined`` (None)

        **See also:** `aggregate <https://vega.github.io/vega-lite/docs/aggregate.html>`__
        documentation.
    bandPosition : float
        Relative position on a band of a stacked, binned, time unit, or band scale. For
        example, the marks will be positioned at the beginning of the band if set to ``0``,
        and at the middle of the band if set to ``0.5``.
    bin : None
        A flag for binning a ``quantitative`` field, `an object defining binning parameters
        <https://vega.github.io/vega-lite/docs/bin.html#bin-parameters>`__, or indicating
        that the data for ``x`` or ``y`` channel are binned before they are imported into
        Vega-Lite ( ``"binned"`` ).


        If ``true``, default `binning parameters
        <https://vega.github.io/vega-lite/docs/bin.html#bin-parameters>`__ will be applied.

        If ``"binned"``, this indicates that the data for the ``x`` (or ``y`` ) channel are
        already binned. You can map the bin-start field to ``x`` (or ``y`` ) and the bin-end
        field to ``x2`` (or ``y2`` ). The scale and axis will be formatted similar to
        binning in Vega-Lite.  To adjust the axis ticks based on the bin step, you can also
        set the axis's `tickMinStep
        <https://vega.github.io/vega-lite/docs/axis.html#ticks>`__ property.

        **Default value:** ``false``

        **See also:** `bin <https://vega.github.io/vega-lite/docs/bin.html>`__
        documentation.
    field : Union[:class:`Field`, Union[:class:`FieldName`, str], Union[:class:`RepeatRef`, Dict[required=[repeat]]]]
        **Required.** A string defining the name of the field from which to pull a data
        value or an object defining iterated values from the `repeat
        <https://vega.github.io/vega-lite/docs/repeat.html>`__ operator.

        **See also:** `field <https://vega.github.io/vega-lite/docs/field.html>`__
        documentation.

        **Notes:** 1)  Dots ( ``.`` ) and brackets ( ``[`` and ``]`` ) can be used to access
        nested objects (e.g., ``"field": "foo.bar"`` and ``"field": "foo['bar']"`` ). If
        field names contain dots or brackets but are not nested, you can use ``\\`` to
        escape dots and brackets (e.g., ``"a\\.b"`` and ``"a\\[0\\]"`` ). See more details
        about escaping in the `field documentation
        <https://vega.github.io/vega-lite/docs/field.html>`__. 2) ``field`` is not required
        if ``aggregate`` is ``count``.
    timeUnit : Union[Union[:class:`BinnedTimeUnit`, Literal['binnedutcyear', 'binnedutcyearquarter', 'binnedutcyearquartermonth', 'binnedutcyearmonth', 'binnedutcyearmonthdate', 'binnedutcyearmonthdatehours', 'binnedutcyearmonthdatehoursminutes', 'binnedutcyearmonthdatehoursminutesseconds', 'binnedutcyearweek', 'binnedutcyearweekday', 'binnedutcyearweekdayhours', 'binnedutcyearweekdayhoursminutes', 'binnedutcyearweekdayhoursminutesseconds', 'binnedutcyeardayofyear'], Literal['binnedyear', 'binnedyearquarter', 'binnedyearquartermonth', 'binnedyearmonth', 'binnedyearmonthdate', 'binnedyearmonthdatehours', 'binnedyearmonthdatehoursminutes', 'binnedyearmonthdatehoursminutesseconds', 'binnedyearweek', 'binnedyearweekday', 'binnedyearweekdayhours', 'binnedyearweekdayhoursminutes', 'binnedyearweekdayhoursminutesseconds', 'binnedyeardayofyear']], Union[:class:`TimeUnitParams`, Dict[required=[]]], Union[:class:`TimeUnit`, Union[:class:`MultiTimeUnit`, Union[:class:`LocalMultiTimeUnit`, Literal['yearquarter', 'yearquartermonth', 'yearmonth', 'yearmonthdate', 'yearmonthdatehours', 'yearmonthdatehoursminutes', 'yearmonthdatehoursminutesseconds', 'yearweek', 'yearweekday', 'yearweekdayhours', 'yearweekdayhoursminutes', 'yearweekdayhoursminutesseconds', 'yeardayofyear', 'quartermonth', 'monthdate', 'monthdatehours', 'monthdatehoursminutes', 'monthdatehoursminutesseconds', 'weekday', 'weeksdayhours', 'weekdayhoursminutes', 'weekdayhoursminutesseconds', 'dayhours', 'dayhoursminutes', 'dayhoursminutesseconds', 'hoursminutes', 'hoursminutesseconds', 'minutesseconds', 'secondsmilliseconds']], Union[:class:`UtcMultiTimeUnit`, Literal['utcyearquarter', 'utcyearquartermonth', 'utcyearmonth', 'utcyearmonthdate', 'utcyearmonthdatehours', 'utcyearmonthdatehoursminutes', 'utcyearmonthdatehoursminutesseconds', 'utcyearweek', 'utcyearweekday', 'utcyearweekdayhours', 'utcyearweekdayhoursminutes', 'utcyearweekdayhoursminutesseconds', 'utcyeardayofyear', 'utcquartermonth', 'utcmonthdate', 'utcmonthdatehours', 'utcmonthdatehoursminutes', 'utcmonthdatehoursminutesseconds', 'utcweekday', 'utcweeksdayhours', 'utcweekdayhoursminutes', 'utcweekdayhoursminutesseconds', 'utcdayhours', 'utcdayhoursminutes', 'utcdayhoursminutesseconds', 'utchoursminutes', 'utchoursminutesseconds', 'utcminutesseconds', 'utcsecondsmilliseconds']]], Union[:class:`SingleTimeUnit`, Union[:class:`LocalSingleTimeUnit`, Literal['year', 'quarter', 'month', 'week', 'day', 'dayofyear', 'date', 'hours', 'minutes', 'seconds', 'milliseconds']], Union[:class:`UtcSingleTimeUnit`, Literal['utcyear', 'utcquarter', 'utcmonth', 'utcweek', 'utcday', 'utcdayofyear', 'utcdate', 'utchours', 'utcminutes', 'utcseconds', 'utcmilliseconds']]]]]
        Time unit (e.g., ``year``, ``yearmonth``, ``month``, ``hours`` ) for a temporal
        field. or `a temporal field that gets casted as ordinal
        <https://vega.github.io/vega-lite/docs/type.html#cast>`__.

        **Default value:** ``undefined`` (None)

        **See also:** `timeUnit <https://vega.github.io/vega-lite/docs/timeunit.html>`__
        documentation.
    title : Union[None, Union[:class:`Text`, List[str], str]]
        A title for the field. If ``null``, the title will be removed.

        **Default value:**  derived from the field's name and transformation function (
        ``aggregate``, ``bin`` and ``timeUnit`` ). If the field has an aggregate function,
        the function is displayed as part of the title (e.g., ``"Sum of Profit"`` ). If the
        field is binned or has a time unit applied, the applied function is shown in
        parentheses (e.g., ``"Profit (binned)"``, ``"Transaction Date (year-month)"`` ).
        Otherwise, the title is simply the field name.

        **Notes** :

        1) You can customize the default field title format by providing the `fieldTitle
        <https://vega.github.io/vega-lite/docs/config.html#top-level-config>`__ property in
        the `config <https://vega.github.io/vega-lite/docs/config.html>`__ or `fieldTitle
        function via the compile function's options
        <https://vega.github.io/vega-lite/usage/compile.html#field-title>`__.

        2) If both field definition's ``title`` and axis, header, or legend ``title`` are
        defined, axis/header/legend title will be used.
    """

    _schema = {"$ref": "#/definitions/SecondaryFieldDef"}

    def __init__(
        self,
        aggregate: Union[
            Union[
                "Aggregate",
                Union["ArgmaxDef", dict],
                Union["ArgminDef", dict],
                Union[
                    "NonArgAggregateOp",
                    Literal[
                        "average",
                        "count",
                        "distinct",
                        "max",
                        "mean",
                        "median",
                        "min",
                        "missing",
                        "product",
                        "q1",
                        "q3",
                        "ci0",
                        "ci1",
                        "stderr",
                        "stdev",
                        "stdevp",
                        "sum",
                        "valid",
                        "values",
                        "variance",
                        "variancep",
                    ],
                ],
            ],
            UndefinedType,
        ] = Undefined,
        bandPosition: Union[float, UndefinedType] = Undefined,
        bin: Union[None, UndefinedType] = Undefined,
        field: Union[
            Union["Field", Union["FieldName", str], Union["RepeatRef", dict]],
            UndefinedType,
        ] = Undefined,
        timeUnit: Union[
            Union[
                Union[
                    "BinnedTimeUnit",
                    Literal[
                        "binnedutcyear",
                        "binnedutcyearquarter",
                        "binnedutcyearquartermonth",
                        "binnedutcyearmonth",
                        "binnedutcyearmonthdate",
                        "binnedutcyearmonthdatehours",
                        "binnedutcyearmonthdatehoursminutes",
                        "binnedutcyearmonthdatehoursminutesseconds",
                        "binnedutcyearweek",
                        "binnedutcyearweekday",
                        "binnedutcyearweekdayhours",
                        "binnedutcyearweekdayhoursminutes",
                        "binnedutcyearweekdayhoursminutesseconds",
                        "binnedutcyeardayofyear",
                    ],
                    Literal[
                        "binnedyear",
                        "binnedyearquarter",
                        "binnedyearquartermonth",
                        "binnedyearmonth",
                        "binnedyearmonthdate",
                        "binnedyearmonthdatehours",
                        "binnedyearmonthdatehoursminutes",
                        "binnedyearmonthdatehoursminutesseconds",
                        "binnedyearweek",
                        "binnedyearweekday",
                        "binnedyearweekdayhours",
                        "binnedyearweekdayhoursminutes",
                        "binnedyearweekdayhoursminutesseconds",
                        "binnedyeardayofyear",
                    ],
                ],
                Union[
                    "TimeUnit",
                    Union[
                        "MultiTimeUnit",
                        Union[
                            "LocalMultiTimeUnit",
                            Literal[
                                "yearquarter",
                                "yearquartermonth",
                                "yearmonth",
                                "yearmonthdate",
                                "yearmonthdatehours",
                                "yearmonthdatehoursminutes",
                                "yearmonthdatehoursminutesseconds",
                                "yearweek",
                                "yearweekday",
                                "yearweekdayhours",
                                "yearweekdayhoursminutes",
                                "yearweekdayhoursminutesseconds",
                                "yeardayofyear",
                                "quartermonth",
                                "monthdate",
                                "monthdatehours",
                                "monthdatehoursminutes",
                                "monthdatehoursminutesseconds",
                                "weekday",
                                "weeksdayhours",
                                "weekdayhoursminutes",
                                "weekdayhoursminutesseconds",
                                "dayhours",
                                "dayhoursminutes",
                                "dayhoursminutesseconds",
                                "hoursminutes",
                                "hoursminutesseconds",
                                "minutesseconds",
                                "secondsmilliseconds",
                            ],
                        ],
                        Union[
                            "UtcMultiTimeUnit",
                            Literal[
                                "utcyearquarter",
                                "utcyearquartermonth",
                                "utcyearmonth",
                                "utcyearmonthdate",
                                "utcyearmonthdatehours",
                                "utcyearmonthdatehoursminutes",
                                "utcyearmonthdatehoursminutesseconds",
                                "utcyearweek",
                                "utcyearweekday",
                                "utcyearweekdayhours",
                                "utcyearweekdayhoursminutes",
                                "utcyearweekdayhoursminutesseconds",
                                "utcyeardayofyear",
                                "utcquartermonth",
                                "utcmonthdate",
                                "utcmonthdatehours",
                                "utcmonthdatehoursminutes",
                                "utcmonthdatehoursminutesseconds",
                                "utcweekday",
                                "utcweeksdayhours",
                                "utcweekdayhoursminutes",
                                "utcweekdayhoursminutesseconds",
                                "utcdayhours",
                                "utcdayhoursminutes",
                                "utcdayhoursminutesseconds",
                                "utchoursminutes",
                                "utchoursminutesseconds",
                                "utcminutesseconds",
                                "utcsecondsmilliseconds",
                            ],
                        ],
                    ],
                    Union[
                        "SingleTimeUnit",
                        Union[
                            "LocalSingleTimeUnit",
                            Literal[
                                "year",
                                "quarter",
                                "month",
                                "week",
                                "day",
                                "dayofyear",
                                "date",
                                "hours",
                                "minutes",
                                "seconds",
                                "milliseconds",
                            ],
                        ],
                        Union[
                            "UtcSingleTimeUnit",
                            Literal[
                                "utcyear",
                                "utcquarter",
                                "utcmonth",
                                "utcweek",
                                "utcday",
                                "utcdayofyear",
                                "utcdate",
                                "utchours",
                                "utcminutes",
                                "utcseconds",
                                "utcmilliseconds",
                            ],
                        ],
                    ],
                ],
                Union["TimeUnitParams", dict],
            ],
            UndefinedType,
        ] = Undefined,
        title: Union[
            Union[None, Union["Text", List[str], str]], UndefinedType
        ] = Undefined,
        **kwds
    ):
        super(SecondaryFieldDef, self).__init__(
            aggregate=aggregate,
            bandPosition=bandPosition,
            bin=bin,
            field=field,
            timeUnit=timeUnit,
            title=title,
            **kwds
        )


class SelectionConfig(VegaLiteSchema):
    """SelectionConfig schema wrapper

    Union[:class:`SelectionConfig`, Dict[required=[]]]

    Parameters
    ----------

    interval : Union[:class:`IntervalSelectionConfigWithoutType`, Dict[required=[]]]
        The default definition for an `interval
        <https://vega.github.io/vega-lite/docs/parameter.html#select>`__ selection. All
        properties and transformations for an interval selection definition (except ``type``
        ) may be specified here.

        For instance, setting ``interval`` to ``{"translate": false}`` disables the ability
        to move interval selections by default.
    point : Union[:class:`PointSelectionConfigWithoutType`, Dict[required=[]]]
        The default definition for a `point
        <https://vega.github.io/vega-lite/docs/parameter.html#select>`__ selection. All
        properties and transformations  for a point selection definition (except ``type`` )
        may be specified here.

        For instance, setting ``point`` to ``{"on": "dblclick"}`` populates point selections
        on double-click by default.
    """

    _schema = {"$ref": "#/definitions/SelectionConfig"}

    def __init__(
        self,
        interval: Union[
            Union["IntervalSelectionConfigWithoutType", dict], UndefinedType
        ] = Undefined,
        point: Union[
            Union["PointSelectionConfigWithoutType", dict], UndefinedType
        ] = Undefined,
        **kwds
    ):
        super(SelectionConfig, self).__init__(interval=interval, point=point, **kwds)


class SelectionInit(VegaLiteSchema):
    """SelectionInit schema wrapper

    Union[:class:`SelectionInit`, Union[:class:`DateTime`, Dict[required=[]]],
    Union[:class:`PrimitiveValue`, None, bool, float, str]]
    """

    _schema = {"$ref": "#/definitions/SelectionInit"}

    def __init__(self, *args, **kwds):
        super(SelectionInit, self).__init__(*args, **kwds)


class DateTime(SelectionInit):
    """DateTime schema wrapper

    Union[:class:`DateTime`, Dict[required=[]]]
    Object for defining datetime in Vega-Lite Filter. If both month and quarter are provided,
    month has higher precedence. ``day`` cannot be combined with other date. We accept string
    for month and day names.

    Parameters
    ----------

    date : float
        Integer value representing the date (day of the month) from 1-31.
    day : Union[Union[:class:`Day`, float], str]
        Value representing the day of a week. This can be one of: (1) integer value -- ``1``
        represents Monday; (2) case-insensitive day name (e.g., ``"Monday"`` ); (3)
        case-insensitive, 3-character short day name (e.g., ``"Mon"`` ).

        **Warning:** A DateTime definition object with ``day`` ** should not be combined
        with ``year``, ``quarter``, ``month``, or ``date``.
    hours : float
        Integer value representing the hour of a day from 0-23.
    milliseconds : float
        Integer value representing the millisecond segment of time.
    minutes : float
        Integer value representing the minute segment of time from 0-59.
    month : Union[Union[:class:`Month`, float], str]
        One of: (1) integer value representing the month from ``1`` - ``12``. ``1``
        represents January; (2) case-insensitive month name (e.g., ``"January"`` ); (3)
        case-insensitive, 3-character short month name (e.g., ``"Jan"`` ).
    quarter : float
        Integer value representing the quarter of the year (from 1-4).
    seconds : float
        Integer value representing the second segment (0-59) of a time value
    utc : bool
        A boolean flag indicating if date time is in utc time. If false, the date time is in
        local time
    year : float
        Integer value representing the year.
    """

    _schema = {"$ref": "#/definitions/DateTime"}

    def __init__(
        self,
        date: Union[float, UndefinedType] = Undefined,
        day: Union[Union[Union["Day", float], str], UndefinedType] = Undefined,
        hours: Union[float, UndefinedType] = Undefined,
        milliseconds: Union[float, UndefinedType] = Undefined,
        minutes: Union[float, UndefinedType] = Undefined,
        month: Union[Union[Union["Month", float], str], UndefinedType] = Undefined,
        quarter: Union[float, UndefinedType] = Undefined,
        seconds: Union[float, UndefinedType] = Undefined,
        utc: Union[bool, UndefinedType] = Undefined,
        year: Union[float, UndefinedType] = Undefined,
        **kwds
    ):
        super(DateTime, self).__init__(
            date=date,
            day=day,
            hours=hours,
            milliseconds=milliseconds,
            minutes=minutes,
            month=month,
            quarter=quarter,
            seconds=seconds,
            utc=utc,
            year=year,
            **kwds
        )


class PrimitiveValue(SelectionInit):
    """PrimitiveValue schema wrapper

    Union[:class:`PrimitiveValue`, None, bool, float, str]
    """

    _schema = {"$ref": "#/definitions/PrimitiveValue"}

    def __init__(self, *args):
        super(PrimitiveValue, self).__init__(*args)


class SelectionInitInterval(VegaLiteSchema):
    """SelectionInitInterval schema wrapper

    Union[:class:`SelectionInitInterval`, Union[:class:`Vector2DateTime`,
    List[Union[:class:`DateTime`, Dict[required=[]]]]], Union[:class:`Vector2boolean`,
    List[bool]], Union[:class:`Vector2number`, List[float]], Union[:class:`Vector2string`,
    List[str]]]
    """

    _schema = {"$ref": "#/definitions/SelectionInitInterval"}

    def __init__(self, *args, **kwds):
        super(SelectionInitInterval, self).__init__(*args, **kwds)


class SelectionInitIntervalMapping(VegaLiteSchema):
    """SelectionInitIntervalMapping schema wrapper

    Union[:class:`SelectionInitIntervalMapping`, Dict[required=[]]]
    """

    _schema = {"$ref": "#/definitions/SelectionInitIntervalMapping"}

    def __init__(self, **kwds):
        super(SelectionInitIntervalMapping, self).__init__(**kwds)


class SelectionInitMapping(VegaLiteSchema):
    """SelectionInitMapping schema wrapper

    Union[:class:`SelectionInitMapping`, Dict[required=[]]]
    """

    _schema = {"$ref": "#/definitions/SelectionInitMapping"}

    def __init__(self, **kwds):
        super(SelectionInitMapping, self).__init__(**kwds)


class SelectionParameter(VegaLiteSchema):
    """SelectionParameter schema wrapper

    Union[:class:`SelectionParameter`, Dict[required=[name, select]]]

    Parameters
    ----------

    name : Union[:class:`ParameterName`, str]
        Required. A unique name for the selection parameter. Selection names should be valid
        JavaScript identifiers: they should contain only alphanumeric characters (or "$", or
        "_") and may not start with a digit. Reserved keywords that may not be used as
        parameter names are "datum", "event", "item", and "parent".
    select : Union[Union[:class:`IntervalSelectionConfig`, Dict[required=[type]]], Union[:class:`PointSelectionConfig`, Dict[required=[type]]], Union[:class:`SelectionType`, Literal['point', 'interval']]]
        Determines the default event processing and data query for the selection. Vega-Lite
        currently supports two selection types:


        * ``"point"`` -- to select multiple discrete data values; the first value is
          selected on ``click`` and additional values toggled on shift-click.
        * ``"interval"`` -- to select a continuous range of data values on ``drag``.
    bind : Union[Dict[required=[]], Union[:class:`Binding`, Union[:class:`BindCheckbox`, Dict[required=[input]]], Union[:class:`BindDirect`, Dict[required=[element]]], Union[:class:`BindInput`, Dict[required=[]]], Union[:class:`BindRadioSelect`, Dict[required=[input, options]]], Union[:class:`BindRange`, Dict[required=[input]]]], Union[:class:`LegendBinding`, Union[:class:`LegendStreamBinding`, Dict[required=[legend]]], str], str]
        When set, a selection is populated by input elements (also known as dynamic query
        widgets) or by interacting with the corresponding legend. Direct manipulation
        interaction is disabled by default; to re-enable it, set the selection's `on
        <https://vega.github.io/vega-lite/docs/selection.html#common-selection-properties>`__
        property.

        Legend bindings are restricted to selections that only specify a single field or
        encoding.

        Query widget binding takes the form of Vega's `input element binding definition
        <https://vega.github.io/vega/docs/signals/#bind>`__ or can be a mapping between
        projected field/encodings and binding definitions.

        **See also:** `bind <https://vega.github.io/vega-lite/docs/bind.html>`__
        documentation.
    value : Union[List[Union[:class:`SelectionInitMapping`, Dict[required=[]]]], Union[:class:`SelectionInitIntervalMapping`, Dict[required=[]]], Union[:class:`SelectionInit`, Union[:class:`DateTime`, Dict[required=[]]], Union[:class:`PrimitiveValue`, None, bool, float, str]]]
        Initialize the selection with a mapping between `projected channels or field names
        <https://vega.github.io/vega-lite/docs/selection.html#project>`__ and initial
        values.

        **See also:** `init <https://vega.github.io/vega-lite/docs/value.html>`__
        documentation.
    """

    _schema = {"$ref": "#/definitions/SelectionParameter"}

    def __init__(
        self,
        name: Union[Union["ParameterName", str], UndefinedType] = Undefined,
        select: Union[
            Union[
                Union["IntervalSelectionConfig", dict],
                Union["PointSelectionConfig", dict],
                Union["SelectionType", Literal["point", "interval"]],
            ],
            UndefinedType,
        ] = Undefined,
        bind: Union[
            Union[
                Union[
                    "Binding",
                    Union["BindCheckbox", dict],
                    Union["BindDirect", dict],
                    Union["BindInput", dict],
                    Union["BindRadioSelect", dict],
                    Union["BindRange", dict],
                ],
                Union["LegendBinding", Union["LegendStreamBinding", dict], str],
                dict,
                str,
            ],
            UndefinedType,
        ] = Undefined,
        value: Union[
            Union[
                Union[
                    "SelectionInit",
                    Union["DateTime", dict],
                    Union["PrimitiveValue", None, bool, float, str],
                ],
                Union["SelectionInitIntervalMapping", dict],
                Union[List["SelectionInitMapping"], List[dict]],
            ],
            UndefinedType,
        ] = Undefined,
        **kwds
    ):
        super(SelectionParameter, self).__init__(
            name=name, select=select, bind=bind, value=value, **kwds
        )


class SelectionResolution(VegaLiteSchema):
    """SelectionResolution schema wrapper

    Union[:class:`SelectionResolution`, Literal['global', 'union', 'intersect']]
    """

    _schema = {"$ref": "#/definitions/SelectionResolution"}

    def __init__(self, *args):
        super(SelectionResolution, self).__init__(*args)


class SelectionType(VegaLiteSchema):
    """SelectionType schema wrapper

    Union[:class:`SelectionType`, Literal['point', 'interval']]
    """

    _schema = {"$ref": "#/definitions/SelectionType"}

    def __init__(self, *args):
        super(SelectionType, self).__init__(*args)


class SequenceGenerator(Generator):
    """SequenceGenerator schema wrapper

    Union[:class:`SequenceGenerator`, Dict[required=[sequence]]]

    Parameters
    ----------

    sequence : Union[:class:`SequenceParams`, Dict[required=[start, stop]]]
        Generate a sequence of numbers.
    name : str
        Provide a placeholder name and bind data at runtime.
    """

    _schema = {"$ref": "#/definitions/SequenceGenerator"}

    def __init__(
        self,
        sequence: Union[Union["SequenceParams", dict], UndefinedType] = Undefined,
        name: Union[str, UndefinedType] = Undefined,
        **kwds
    ):
        super(SequenceGenerator, self).__init__(sequence=sequence, name=name, **kwds)


class SequenceParams(VegaLiteSchema):
    """SequenceParams schema wrapper

    Union[:class:`SequenceParams`, Dict[required=[start, stop]]]

    Parameters
    ----------

    start : float
        The starting value of the sequence (inclusive).
    stop : float
        The ending value of the sequence (exclusive).
    step : float
        The step value between sequence entries.

        **Default value:** ``1``
    as : Union[:class:`FieldName`, str]
        The name of the generated sequence field.

        **Default value:** ``"data"``
    """

    _schema = {"$ref": "#/definitions/SequenceParams"}

    def __init__(
        self,
        start: Union[float, UndefinedType] = Undefined,
        stop: Union[float, UndefinedType] = Undefined,
        step: Union[float, UndefinedType] = Undefined,
        **kwds
    ):
        super(SequenceParams, self).__init__(start=start, stop=stop, step=step, **kwds)


class SequentialMultiHue(ColorScheme):
    """SequentialMultiHue schema wrapper

    Union[:class:`SequentialMultiHue`, Literal['turbo', 'viridis', 'inferno', 'magma', 'plasma',
    'cividis', 'bluegreen', 'bluegreen-3', 'bluegreen-4', 'bluegreen-5', 'bluegreen-6',
    'bluegreen-7', 'bluegreen-8', 'bluegreen-9', 'bluepurple', 'bluepurple-3', 'bluepurple-4',
    'bluepurple-5', 'bluepurple-6', 'bluepurple-7', 'bluepurple-8', 'bluepurple-9', 'goldgreen',
    'goldgreen-3', 'goldgreen-4', 'goldgreen-5', 'goldgreen-6', 'goldgreen-7', 'goldgreen-8',
    'goldgreen-9', 'goldorange', 'goldorange-3', 'goldorange-4', 'goldorange-5', 'goldorange-6',
    'goldorange-7', 'goldorange-8', 'goldorange-9', 'goldred', 'goldred-3', 'goldred-4',
    'goldred-5', 'goldred-6', 'goldred-7', 'goldred-8', 'goldred-9', 'greenblue', 'greenblue-3',
    'greenblue-4', 'greenblue-5', 'greenblue-6', 'greenblue-7', 'greenblue-8', 'greenblue-9',
    'orangered', 'orangered-3', 'orangered-4', 'orangered-5', 'orangered-6', 'orangered-7',
    'orangered-8', 'orangered-9', 'purplebluegreen', 'purplebluegreen-3', 'purplebluegreen-4',
    'purplebluegreen-5', 'purplebluegreen-6', 'purplebluegreen-7', 'purplebluegreen-8',
    'purplebluegreen-9', 'purpleblue', 'purpleblue-3', 'purpleblue-4', 'purpleblue-5',
    'purpleblue-6', 'purpleblue-7', 'purpleblue-8', 'purpleblue-9', 'purplered', 'purplered-3',
    'purplered-4', 'purplered-5', 'purplered-6', 'purplered-7', 'purplered-8', 'purplered-9',
    'redpurple', 'redpurple-3', 'redpurple-4', 'redpurple-5', 'redpurple-6', 'redpurple-7',
    'redpurple-8', 'redpurple-9', 'yellowgreenblue', 'yellowgreenblue-3', 'yellowgreenblue-4',
    'yellowgreenblue-5', 'yellowgreenblue-6', 'yellowgreenblue-7', 'yellowgreenblue-8',
    'yellowgreenblue-9', 'yellowgreen', 'yellowgreen-3', 'yellowgreen-4', 'yellowgreen-5',
    'yellowgreen-6', 'yellowgreen-7', 'yellowgreen-8', 'yellowgreen-9', 'yelloworangebrown',
    'yelloworangebrown-3', 'yelloworangebrown-4', 'yelloworangebrown-5', 'yelloworangebrown-6',
    'yelloworangebrown-7', 'yelloworangebrown-8', 'yelloworangebrown-9', 'yelloworangered',
    'yelloworangered-3', 'yelloworangered-4', 'yelloworangered-5', 'yelloworangered-6',
    'yelloworangered-7', 'yelloworangered-8', 'yelloworangered-9', 'darkblue', 'darkblue-3',
    'darkblue-4', 'darkblue-5', 'darkblue-6', 'darkblue-7', 'darkblue-8', 'darkblue-9',
    'darkgold', 'darkgold-3', 'darkgold-4', 'darkgold-5', 'darkgold-6', 'darkgold-7',
    'darkgold-8', 'darkgold-9', 'darkgreen', 'darkgreen-3', 'darkgreen-4', 'darkgreen-5',
    'darkgreen-6', 'darkgreen-7', 'darkgreen-8', 'darkgreen-9', 'darkmulti', 'darkmulti-3',
    'darkmulti-4', 'darkmulti-5', 'darkmulti-6', 'darkmulti-7', 'darkmulti-8', 'darkmulti-9',
    'darkred', 'darkred-3', 'darkred-4', 'darkred-5', 'darkred-6', 'darkred-7', 'darkred-8',
    'darkred-9', 'lightgreyred', 'lightgreyred-3', 'lightgreyred-4', 'lightgreyred-5',
    'lightgreyred-6', 'lightgreyred-7', 'lightgreyred-8', 'lightgreyred-9', 'lightgreyteal',
    'lightgreyteal-3', 'lightgreyteal-4', 'lightgreyteal-5', 'lightgreyteal-6',
    'lightgreyteal-7', 'lightgreyteal-8', 'lightgreyteal-9', 'lightmulti', 'lightmulti-3',
    'lightmulti-4', 'lightmulti-5', 'lightmulti-6', 'lightmulti-7', 'lightmulti-8',
    'lightmulti-9', 'lightorange', 'lightorange-3', 'lightorange-4', 'lightorange-5',
    'lightorange-6', 'lightorange-7', 'lightorange-8', 'lightorange-9', 'lighttealblue',
    'lighttealblue-3', 'lighttealblue-4', 'lighttealblue-5', 'lighttealblue-6',
    'lighttealblue-7', 'lighttealblue-8', 'lighttealblue-9']]
    """

    _schema = {"$ref": "#/definitions/SequentialMultiHue"}

    def __init__(self, *args):
        super(SequentialMultiHue, self).__init__(*args)


class SequentialSingleHue(ColorScheme):
    """SequentialSingleHue schema wrapper

    Union[:class:`SequentialSingleHue`, Literal['blues', 'tealblues', 'teals', 'greens',
    'browns', 'greys', 'purples', 'warmgreys', 'reds', 'oranges']]
    """

    _schema = {"$ref": "#/definitions/SequentialSingleHue"}

    def __init__(self, *args):
        super(SequentialSingleHue, self).__init__(*args)


class ShapeDef(VegaLiteSchema):
    """ShapeDef schema wrapper

    Union[:class:`ShapeDef`, Union[:class:`FieldOrDatumDefWithConditionDatumDefstringnull`,
    Dict[required=[]]],
    Union[:class:`FieldOrDatumDefWithConditionMarkPropFieldDefTypeForShapestringnull`,
    Dict[required=[]]],
    Union[:class:`ValueDefWithConditionMarkPropFieldOrDatumDefTypeForShapestringnull`,
    Dict[required=[]]]]
    """

    _schema = {"$ref": "#/definitions/ShapeDef"}

    def __init__(self, *args, **kwds):
        super(ShapeDef, self).__init__(*args, **kwds)


class FieldOrDatumDefWithConditionDatumDefstringnull(
    MarkPropDefstringnullTypeForShape, ShapeDef
):
    """FieldOrDatumDefWithConditionDatumDefstringnull schema wrapper

    Union[:class:`FieldOrDatumDefWithConditionDatumDefstringnull`, Dict[required=[]]]

    Parameters
    ----------

    bandPosition : float
        Relative position on a band of a stacked, binned, time unit, or band scale. For
        example, the marks will be positioned at the beginning of the band if set to ``0``,
        and at the middle of the band if set to ``0.5``.
    condition : Union[List[Union[:class:`ConditionalValueDefstringnullExprRef`, Union[:class:`ConditionalParameterValueDefstringnullExprRef`, Dict[required=[param, value]]], Union[:class:`ConditionalPredicateValueDefstringnullExprRef`, Dict[required=[test, value]]]]], Union[:class:`ConditionalValueDefstringnullExprRef`, Union[:class:`ConditionalParameterValueDefstringnullExprRef`, Dict[required=[param, value]]], Union[:class:`ConditionalPredicateValueDefstringnullExprRef`, Dict[required=[test, value]]]]]
        One or more value definition(s) with `a parameter or a test predicate
        <https://vega.github.io/vega-lite/docs/condition.html>`__.

        **Note:** A field definition's ``condition`` property can only contain `conditional
        value definitions <https://vega.github.io/vega-lite/docs/condition.html#value>`__
        since Vega-Lite only allows at most one encoded field per encoding channel.
    datum : Union[Union[:class:`DateTime`, Dict[required=[]]], Union[:class:`ExprRef`, Dict[required=[expr]]], Union[:class:`PrimitiveValue`, None, bool, float, str], Union[:class:`RepeatRef`, Dict[required=[repeat]]]]
        A constant value in data domain.
    title : Union[None, Union[:class:`Text`, List[str], str]]
        A title for the field. If ``null``, the title will be removed.

        **Default value:**  derived from the field's name and transformation function (
        ``aggregate``, ``bin`` and ``timeUnit`` ). If the field has an aggregate function,
        the function is displayed as part of the title (e.g., ``"Sum of Profit"`` ). If the
        field is binned or has a time unit applied, the applied function is shown in
        parentheses (e.g., ``"Profit (binned)"``, ``"Transaction Date (year-month)"`` ).
        Otherwise, the title is simply the field name.

        **Notes** :

        1) You can customize the default field title format by providing the `fieldTitle
        <https://vega.github.io/vega-lite/docs/config.html#top-level-config>`__ property in
        the `config <https://vega.github.io/vega-lite/docs/config.html>`__ or `fieldTitle
        function via the compile function's options
        <https://vega.github.io/vega-lite/usage/compile.html#field-title>`__.

        2) If both field definition's ``title`` and axis, header, or legend ``title`` are
        defined, axis/header/legend title will be used.
    type : Union[:class:`Type`, Literal['quantitative', 'ordinal', 'temporal', 'nominal', 'geojson']]
        The type of measurement ( ``"quantitative"``, ``"temporal"``, ``"ordinal"``, or
        ``"nominal"`` ) for the encoded field or constant value ( ``datum`` ). It can also
        be a ``"geojson"`` type for encoding `'geoshape'
        <https://vega.github.io/vega-lite/docs/geoshape.html>`__.

        Vega-Lite automatically infers data types in many cases as discussed below. However,
        type is required for a field if: (1) the field is not nominal and the field encoding
        has no specified ``aggregate`` (except ``argmin`` and ``argmax`` ), ``bin``, scale
        type, custom ``sort`` order, nor ``timeUnit`` or (2) if you wish to use an ordinal
        scale for a field with ``bin`` or ``timeUnit``.

        **Default value:**

        1) For a data ``field``, ``"nominal"`` is the default data type unless the field
        encoding has ``aggregate``, ``channel``, ``bin``, scale type, ``sort``, or
        ``timeUnit`` that satisfies the following criteria:


        * ``"quantitative"`` is the default type if (1) the encoded field contains ``bin``
          or ``aggregate`` except ``"argmin"`` and ``"argmax"``, (2) the encoding channel is
          ``latitude`` or ``longitude`` channel or (3) if the specified scale type is `a
          quantitative scale <https://vega.github.io/vega-lite/docs/scale.html#type>`__.
        * ``"temporal"`` is the default type if (1) the encoded field contains ``timeUnit``
          or (2) the specified scale type is a time or utc scale
        * ``"ordinal"`` is the default type if (1) the encoded field contains a `custom sort
          order
          <https://vega.github.io/vega-lite/docs/sort.html#specifying-custom-sort-order>`__,
          (2) the specified scale type is an ordinal/point/band scale, or (3) the encoding
          channel is ``order``.

        2) For a constant value in data domain ( ``datum`` ):


        * ``"quantitative"`` if the datum is a number
        * ``"nominal"`` if the datum is a string
        * ``"temporal"`` if the datum is `a date time object
          <https://vega.github.io/vega-lite/docs/datetime.html>`__

        **Note:**


        * Data ``type`` describes the semantics of the data rather than the primitive data
          types (number, string, etc.). The same primitive data type can have different
          types of measurement. For example, numeric data can represent quantitative,
          ordinal, or nominal data.
        * Data values for a temporal field can be either a date-time string (e.g.,
          ``"2015-03-07 12:32:17"``, ``"17:01"``, ``"2015-03-16"``. ``"2015"`` ) or a
          timestamp number (e.g., ``1552199579097`` ).
        * When using with `bin <https://vega.github.io/vega-lite/docs/bin.html>`__, the
          ``type`` property can be either ``"quantitative"`` (for using a linear bin scale)
          or `"ordinal" (for using an ordinal bin scale)
          <https://vega.github.io/vega-lite/docs/type.html#cast-bin>`__.
        * When using with `timeUnit
          <https://vega.github.io/vega-lite/docs/timeunit.html>`__, the ``type`` property
          can be either ``"temporal"`` (default, for using a temporal scale) or `"ordinal"
          (for using an ordinal scale)
          <https://vega.github.io/vega-lite/docs/type.html#cast-bin>`__.
        * When using with `aggregate
          <https://vega.github.io/vega-lite/docs/aggregate.html>`__, the ``type`` property
          refers to the post-aggregation data type. For example, we can calculate count
          ``distinct`` of a categorical field ``"cat"`` using ``{"aggregate": "distinct",
          "field": "cat"}``. The ``"type"`` of the aggregate output is ``"quantitative"``.
        * Secondary channels (e.g., ``x2``, ``y2``, ``xError``, ``yError`` ) do not have
          ``type`` as they must have exactly the same type as their primary channels (e.g.,
          ``x``, ``y`` ).

        **See also:** `type <https://vega.github.io/vega-lite/docs/type.html>`__
        documentation.
    """

    _schema = {
        "$ref": "#/definitions/FieldOrDatumDefWithCondition<DatumDef,(string|null)>"
    }

    def __init__(
        self,
        bandPosition: Union[float, UndefinedType] = Undefined,
        condition: Union[
            Union[
                Union[
                    "ConditionalValueDefstringnullExprRef",
                    Union["ConditionalParameterValueDefstringnullExprRef", dict],
                    Union["ConditionalPredicateValueDefstringnullExprRef", dict],
                ],
                Union[
                    List["ConditionalValueDefstringnullExprRef"],
                    List[Union["ConditionalParameterValueDefstringnullExprRef", dict]],
                    List[Union["ConditionalPredicateValueDefstringnullExprRef", dict]],
                ],
            ],
            UndefinedType,
        ] = Undefined,
        datum: Union[
            Union[
                Union["DateTime", dict],
                Union["ExprRef", "_ParameterProtocol", dict],
                Union["PrimitiveValue", None, bool, float, str],
                Union["RepeatRef", dict],
            ],
            UndefinedType,
        ] = Undefined,
        title: Union[
            Union[None, Union["Text", List[str], str]], UndefinedType
        ] = Undefined,
        type: Union[
            Union[
                "Type",
                Literal["quantitative", "ordinal", "temporal", "nominal", "geojson"],
            ],
            UndefinedType,
        ] = Undefined,
        **kwds
    ):
        super(FieldOrDatumDefWithConditionDatumDefstringnull, self).__init__(
            bandPosition=bandPosition,
            condition=condition,
            datum=datum,
            title=title,
            type=type,
            **kwds
        )


class FieldOrDatumDefWithConditionMarkPropFieldDefTypeForShapestringnull(
    MarkPropDefstringnullTypeForShape, ShapeDef
):
    """FieldOrDatumDefWithConditionMarkPropFieldDefTypeForShapestringnull schema wrapper

    Union[:class:`FieldOrDatumDefWithConditionMarkPropFieldDefTypeForShapestringnull`,
    Dict[required=[]]]

    Parameters
    ----------

    aggregate : Union[:class:`Aggregate`, Union[:class:`ArgmaxDef`, Dict[required=[argmax]]], Union[:class:`ArgminDef`, Dict[required=[argmin]]], Union[:class:`NonArgAggregateOp`, Literal['average', 'count', 'distinct', 'max', 'mean', 'median', 'min', 'missing', 'product', 'q1', 'q3', 'ci0', 'ci1', 'stderr', 'stdev', 'stdevp', 'sum', 'valid', 'values', 'variance', 'variancep']]]
        Aggregation function for the field (e.g., ``"mean"``, ``"sum"``, ``"median"``,
        ``"min"``, ``"max"``, ``"count"`` ).

        **Default value:** ``undefined`` (None)

        **See also:** `aggregate <https://vega.github.io/vega-lite/docs/aggregate.html>`__
        documentation.
    bandPosition : float
        Relative position on a band of a stacked, binned, time unit, or band scale. For
        example, the marks will be positioned at the beginning of the band if set to ``0``,
        and at the middle of the band if set to ``0.5``.
    bin : Union[None, Union[:class:`BinParams`, Dict[required=[]]], bool]
        A flag for binning a ``quantitative`` field, `an object defining binning parameters
        <https://vega.github.io/vega-lite/docs/bin.html#bin-parameters>`__, or indicating
        that the data for ``x`` or ``y`` channel are binned before they are imported into
        Vega-Lite ( ``"binned"`` ).


        If ``true``, default `binning parameters
        <https://vega.github.io/vega-lite/docs/bin.html#bin-parameters>`__ will be applied.

        If ``"binned"``, this indicates that the data for the ``x`` (or ``y`` ) channel are
        already binned. You can map the bin-start field to ``x`` (or ``y`` ) and the bin-end
        field to ``x2`` (or ``y2`` ). The scale and axis will be formatted similar to
        binning in Vega-Lite.  To adjust the axis ticks based on the bin step, you can also
        set the axis's `tickMinStep
        <https://vega.github.io/vega-lite/docs/axis.html#ticks>`__ property.

        **Default value:** ``false``

        **See also:** `bin <https://vega.github.io/vega-lite/docs/bin.html>`__
        documentation.
    condition : Union[List[Union[:class:`ConditionalValueDefstringnullExprRef`, Union[:class:`ConditionalParameterValueDefstringnullExprRef`, Dict[required=[param, value]]], Union[:class:`ConditionalPredicateValueDefstringnullExprRef`, Dict[required=[test, value]]]]], Union[:class:`ConditionalValueDefstringnullExprRef`, Union[:class:`ConditionalParameterValueDefstringnullExprRef`, Dict[required=[param, value]]], Union[:class:`ConditionalPredicateValueDefstringnullExprRef`, Dict[required=[test, value]]]]]
        One or more value definition(s) with `a parameter or a test predicate
        <https://vega.github.io/vega-lite/docs/condition.html>`__.

        **Note:** A field definition's ``condition`` property can only contain `conditional
        value definitions <https://vega.github.io/vega-lite/docs/condition.html#value>`__
        since Vega-Lite only allows at most one encoded field per encoding channel.
    field : Union[:class:`Field`, Union[:class:`FieldName`, str], Union[:class:`RepeatRef`, Dict[required=[repeat]]]]
        **Required.** A string defining the name of the field from which to pull a data
        value or an object defining iterated values from the `repeat
        <https://vega.github.io/vega-lite/docs/repeat.html>`__ operator.

        **See also:** `field <https://vega.github.io/vega-lite/docs/field.html>`__
        documentation.

        **Notes:** 1)  Dots ( ``.`` ) and brackets ( ``[`` and ``]`` ) can be used to access
        nested objects (e.g., ``"field": "foo.bar"`` and ``"field": "foo['bar']"`` ). If
        field names contain dots or brackets but are not nested, you can use ``\\`` to
        escape dots and brackets (e.g., ``"a\\.b"`` and ``"a\\[0\\]"`` ). See more details
        about escaping in the `field documentation
        <https://vega.github.io/vega-lite/docs/field.html>`__. 2) ``field`` is not required
        if ``aggregate`` is ``count``.
    legend : Union[None, Union[:class:`Legend`, Dict[required=[]]]]
        An object defining properties of the legend. If ``null``, the legend for the
        encoding channel will be removed.

        **Default value:** If undefined, default `legend properties
        <https://vega.github.io/vega-lite/docs/legend.html>`__ are applied.

        **See also:** `legend <https://vega.github.io/vega-lite/docs/legend.html>`__
        documentation.
    scale : Union[None, Union[:class:`Scale`, Dict[required=[]]]]
        An object defining properties of the channel's scale, which is the function that
        transforms values in the data domain (numbers, dates, strings, etc) to visual values
        (pixels, colors, sizes) of the encoding channels.

        If ``null``, the scale will be `disabled and the data value will be directly encoded
        <https://vega.github.io/vega-lite/docs/scale.html#disable>`__.

        **Default value:** If undefined, default `scale properties
        <https://vega.github.io/vega-lite/docs/scale.html>`__ are applied.

        **See also:** `scale <https://vega.github.io/vega-lite/docs/scale.html>`__
        documentation.
    sort : Union[:class:`Sort`, None, Union[:class:`AllSortString`, Union[:class:`SortByChannelDesc`, Literal['-x', '-y', '-color', '-fill', '-stroke', '-strokeWidth', '-size', '-shape', '-fillOpacity', '-strokeOpacity', '-opacity', '-text']], Union[:class:`SortByChannel`, Literal['x', 'y', 'color', 'fill', 'stroke', 'strokeWidth', 'size', 'shape', 'fillOpacity', 'strokeOpacity', 'opacity', 'text']], Union[:class:`SortOrder`, Literal['ascending', 'descending']]], Union[:class:`EncodingSortField`, Dict[required=[]]], Union[:class:`SortArray`, List[Union[:class:`DateTime`, Dict[required=[]]]], List[bool], List[float], List[str]], Union[:class:`SortByEncoding`, Dict[required=[encoding]]]]
        Sort order for the encoded field.

        For continuous fields (quantitative or temporal), ``sort`` can be either
        ``"ascending"`` or ``"descending"``.

        For discrete fields, ``sort`` can be one of the following:


        * ``"ascending"`` or ``"descending"`` -- for sorting by the values' natural order in
          JavaScript.
        * `A string indicating an encoding channel name to sort by
          <https://vega.github.io/vega-lite/docs/sort.html#sort-by-encoding>`__ (e.g.,
          ``"x"`` or ``"y"`` ) with an optional minus prefix for descending sort (e.g.,
          ``"-x"`` to sort by x-field, descending). This channel string is short-form of `a
          sort-by-encoding definition
          <https://vega.github.io/vega-lite/docs/sort.html#sort-by-encoding>`__. For
          example, ``"sort": "-x"`` is equivalent to ``"sort": {"encoding": "x", "order":
          "descending"}``.
        * `A sort field definition
          <https://vega.github.io/vega-lite/docs/sort.html#sort-field>`__ for sorting by
          another field.
        * `An array specifying the field values in preferred order
          <https://vega.github.io/vega-lite/docs/sort.html#sort-array>`__. In this case, the
          sort order will obey the values in the array, followed by any unspecified values
          in their original order. For discrete time field, values in the sort array can be
          `date-time definition objects
          <https://vega.github.io/vega-lite/docs/datetime.html>`__. In addition, for time
          units ``"month"`` and ``"day"``, the values can be the month or day names (case
          insensitive) or their 3-letter initials (e.g., ``"Mon"``, ``"Tue"`` ).
        * ``null`` indicating no sort.

        **Default value:** ``"ascending"``

        **Note:** ``null`` and sorting by another channel is not supported for ``row`` and
        ``column``.

        **See also:** `sort <https://vega.github.io/vega-lite/docs/sort.html>`__
        documentation.
    timeUnit : Union[Union[:class:`BinnedTimeUnit`, Literal['binnedutcyear', 'binnedutcyearquarter', 'binnedutcyearquartermonth', 'binnedutcyearmonth', 'binnedutcyearmonthdate', 'binnedutcyearmonthdatehours', 'binnedutcyearmonthdatehoursminutes', 'binnedutcyearmonthdatehoursminutesseconds', 'binnedutcyearweek', 'binnedutcyearweekday', 'binnedutcyearweekdayhours', 'binnedutcyearweekdayhoursminutes', 'binnedutcyearweekdayhoursminutesseconds', 'binnedutcyeardayofyear'], Literal['binnedyear', 'binnedyearquarter', 'binnedyearquartermonth', 'binnedyearmonth', 'binnedyearmonthdate', 'binnedyearmonthdatehours', 'binnedyearmonthdatehoursminutes', 'binnedyearmonthdatehoursminutesseconds', 'binnedyearweek', 'binnedyearweekday', 'binnedyearweekdayhours', 'binnedyearweekdayhoursminutes', 'binnedyearweekdayhoursminutesseconds', 'binnedyeardayofyear']], Union[:class:`TimeUnitParams`, Dict[required=[]]], Union[:class:`TimeUnit`, Union[:class:`MultiTimeUnit`, Union[:class:`LocalMultiTimeUnit`, Literal['yearquarter', 'yearquartermonth', 'yearmonth', 'yearmonthdate', 'yearmonthdatehours', 'yearmonthdatehoursminutes', 'yearmonthdatehoursminutesseconds', 'yearweek', 'yearweekday', 'yearweekdayhours', 'yearweekdayhoursminutes', 'yearweekdayhoursminutesseconds', 'yeardayofyear', 'quartermonth', 'monthdate', 'monthdatehours', 'monthdatehoursminutes', 'monthdatehoursminutesseconds', 'weekday', 'weeksdayhours', 'weekdayhoursminutes', 'weekdayhoursminutesseconds', 'dayhours', 'dayhoursminutes', 'dayhoursminutesseconds', 'hoursminutes', 'hoursminutesseconds', 'minutesseconds', 'secondsmilliseconds']], Union[:class:`UtcMultiTimeUnit`, Literal['utcyearquarter', 'utcyearquartermonth', 'utcyearmonth', 'utcyearmonthdate', 'utcyearmonthdatehours', 'utcyearmonthdatehoursminutes', 'utcyearmonthdatehoursminutesseconds', 'utcyearweek', 'utcyearweekday', 'utcyearweekdayhours', 'utcyearweekdayhoursminutes', 'utcyearweekdayhoursminutesseconds', 'utcyeardayofyear', 'utcquartermonth', 'utcmonthdate', 'utcmonthdatehours', 'utcmonthdatehoursminutes', 'utcmonthdatehoursminutesseconds', 'utcweekday', 'utcweeksdayhours', 'utcweekdayhoursminutes', 'utcweekdayhoursminutesseconds', 'utcdayhours', 'utcdayhoursminutes', 'utcdayhoursminutesseconds', 'utchoursminutes', 'utchoursminutesseconds', 'utcminutesseconds', 'utcsecondsmilliseconds']]], Union[:class:`SingleTimeUnit`, Union[:class:`LocalSingleTimeUnit`, Literal['year', 'quarter', 'month', 'week', 'day', 'dayofyear', 'date', 'hours', 'minutes', 'seconds', 'milliseconds']], Union[:class:`UtcSingleTimeUnit`, Literal['utcyear', 'utcquarter', 'utcmonth', 'utcweek', 'utcday', 'utcdayofyear', 'utcdate', 'utchours', 'utcminutes', 'utcseconds', 'utcmilliseconds']]]]]
        Time unit (e.g., ``year``, ``yearmonth``, ``month``, ``hours`` ) for a temporal
        field. or `a temporal field that gets casted as ordinal
        <https://vega.github.io/vega-lite/docs/type.html#cast>`__.

        **Default value:** ``undefined`` (None)

        **See also:** `timeUnit <https://vega.github.io/vega-lite/docs/timeunit.html>`__
        documentation.
    title : Union[None, Union[:class:`Text`, List[str], str]]
        A title for the field. If ``null``, the title will be removed.

        **Default value:**  derived from the field's name and transformation function (
        ``aggregate``, ``bin`` and ``timeUnit`` ). If the field has an aggregate function,
        the function is displayed as part of the title (e.g., ``"Sum of Profit"`` ). If the
        field is binned or has a time unit applied, the applied function is shown in
        parentheses (e.g., ``"Profit (binned)"``, ``"Transaction Date (year-month)"`` ).
        Otherwise, the title is simply the field name.

        **Notes** :

        1) You can customize the default field title format by providing the `fieldTitle
        <https://vega.github.io/vega-lite/docs/config.html#top-level-config>`__ property in
        the `config <https://vega.github.io/vega-lite/docs/config.html>`__ or `fieldTitle
        function via the compile function's options
        <https://vega.github.io/vega-lite/usage/compile.html#field-title>`__.

        2) If both field definition's ``title`` and axis, header, or legend ``title`` are
        defined, axis/header/legend title will be used.
    type : Union[:class:`TypeForShape`, Literal['nominal', 'ordinal', 'geojson']]
        The type of measurement ( ``"quantitative"``, ``"temporal"``, ``"ordinal"``, or
        ``"nominal"`` ) for the encoded field or constant value ( ``datum`` ). It can also
        be a ``"geojson"`` type for encoding `'geoshape'
        <https://vega.github.io/vega-lite/docs/geoshape.html>`__.

        Vega-Lite automatically infers data types in many cases as discussed below. However,
        type is required for a field if: (1) the field is not nominal and the field encoding
        has no specified ``aggregate`` (except ``argmin`` and ``argmax`` ), ``bin``, scale
        type, custom ``sort`` order, nor ``timeUnit`` or (2) if you wish to use an ordinal
        scale for a field with ``bin`` or ``timeUnit``.

        **Default value:**

        1) For a data ``field``, ``"nominal"`` is the default data type unless the field
        encoding has ``aggregate``, ``channel``, ``bin``, scale type, ``sort``, or
        ``timeUnit`` that satisfies the following criteria:


        * ``"quantitative"`` is the default type if (1) the encoded field contains ``bin``
          or ``aggregate`` except ``"argmin"`` and ``"argmax"``, (2) the encoding channel is
          ``latitude`` or ``longitude`` channel or (3) if the specified scale type is `a
          quantitative scale <https://vega.github.io/vega-lite/docs/scale.html#type>`__.
        * ``"temporal"`` is the default type if (1) the encoded field contains ``timeUnit``
          or (2) the specified scale type is a time or utc scale
        * ``"ordinal"`` is the default type if (1) the encoded field contains a `custom sort
          order
          <https://vega.github.io/vega-lite/docs/sort.html#specifying-custom-sort-order>`__,
          (2) the specified scale type is an ordinal/point/band scale, or (3) the encoding
          channel is ``order``.

        2) For a constant value in data domain ( ``datum`` ):


        * ``"quantitative"`` if the datum is a number
        * ``"nominal"`` if the datum is a string
        * ``"temporal"`` if the datum is `a date time object
          <https://vega.github.io/vega-lite/docs/datetime.html>`__

        **Note:**


        * Data ``type`` describes the semantics of the data rather than the primitive data
          types (number, string, etc.). The same primitive data type can have different
          types of measurement. For example, numeric data can represent quantitative,
          ordinal, or nominal data.
        * Data values for a temporal field can be either a date-time string (e.g.,
          ``"2015-03-07 12:32:17"``, ``"17:01"``, ``"2015-03-16"``. ``"2015"`` ) or a
          timestamp number (e.g., ``1552199579097`` ).
        * When using with `bin <https://vega.github.io/vega-lite/docs/bin.html>`__, the
          ``type`` property can be either ``"quantitative"`` (for using a linear bin scale)
          or `"ordinal" (for using an ordinal bin scale)
          <https://vega.github.io/vega-lite/docs/type.html#cast-bin>`__.
        * When using with `timeUnit
          <https://vega.github.io/vega-lite/docs/timeunit.html>`__, the ``type`` property
          can be either ``"temporal"`` (default, for using a temporal scale) or `"ordinal"
          (for using an ordinal scale)
          <https://vega.github.io/vega-lite/docs/type.html#cast-bin>`__.
        * When using with `aggregate
          <https://vega.github.io/vega-lite/docs/aggregate.html>`__, the ``type`` property
          refers to the post-aggregation data type. For example, we can calculate count
          ``distinct`` of a categorical field ``"cat"`` using ``{"aggregate": "distinct",
          "field": "cat"}``. The ``"type"`` of the aggregate output is ``"quantitative"``.
        * Secondary channels (e.g., ``x2``, ``y2``, ``xError``, ``yError`` ) do not have
          ``type`` as they must have exactly the same type as their primary channels (e.g.,
          ``x``, ``y`` ).

        **See also:** `type <https://vega.github.io/vega-lite/docs/type.html>`__
        documentation.
    """

    _schema = {
        "$ref": "#/definitions/FieldOrDatumDefWithCondition<MarkPropFieldDef<TypeForShape>,(string|null)>"
    }

    def __init__(
        self,
        aggregate: Union[
            Union[
                "Aggregate",
                Union["ArgmaxDef", dict],
                Union["ArgminDef", dict],
                Union[
                    "NonArgAggregateOp",
                    Literal[
                        "average",
                        "count",
                        "distinct",
                        "max",
                        "mean",
                        "median",
                        "min",
                        "missing",
                        "product",
                        "q1",
                        "q3",
                        "ci0",
                        "ci1",
                        "stderr",
                        "stdev",
                        "stdevp",
                        "sum",
                        "valid",
                        "values",
                        "variance",
                        "variancep",
                    ],
                ],
            ],
            UndefinedType,
        ] = Undefined,
        bandPosition: Union[float, UndefinedType] = Undefined,
        bin: Union[
            Union[None, Union["BinParams", dict], bool], UndefinedType
        ] = Undefined,
        condition: Union[
            Union[
                Union[
                    "ConditionalValueDefstringnullExprRef",
                    Union["ConditionalParameterValueDefstringnullExprRef", dict],
                    Union["ConditionalPredicateValueDefstringnullExprRef", dict],
                ],
                Union[
                    List["ConditionalValueDefstringnullExprRef"],
                    List[Union["ConditionalParameterValueDefstringnullExprRef", dict]],
                    List[Union["ConditionalPredicateValueDefstringnullExprRef", dict]],
                ],
            ],
            UndefinedType,
        ] = Undefined,
        field: Union[
            Union["Field", Union["FieldName", str], Union["RepeatRef", dict]],
            UndefinedType,
        ] = Undefined,
        legend: Union[Union[None, Union["Legend", dict]], UndefinedType] = Undefined,
        scale: Union[Union[None, Union["Scale", dict]], UndefinedType] = Undefined,
        sort: Union[
            Union[
                "Sort",
                None,
                Union[
                    "AllSortString",
                    Union[
                        "SortByChannel",
                        Literal[
                            "x",
                            "y",
                            "color",
                            "fill",
                            "stroke",
                            "strokeWidth",
                            "size",
                            "shape",
                            "fillOpacity",
                            "strokeOpacity",
                            "opacity",
                            "text",
                        ],
                    ],
                    Union[
                        "SortByChannelDesc",
                        Literal[
                            "-x",
                            "-y",
                            "-color",
                            "-fill",
                            "-stroke",
                            "-strokeWidth",
                            "-size",
                            "-shape",
                            "-fillOpacity",
                            "-strokeOpacity",
                            "-opacity",
                            "-text",
                        ],
                    ],
                    Union["SortOrder", Literal["ascending", "descending"]],
                ],
                Union["EncodingSortField", dict],
                Union[
                    "SortArray",
                    List[bool],
                    List[float],
                    List[str],
                    Union[List["DateTime"], List[dict]],
                ],
                Union["SortByEncoding", dict],
            ],
            UndefinedType,
        ] = Undefined,
        timeUnit: Union[
            Union[
                Union[
                    "BinnedTimeUnit",
                    Literal[
                        "binnedutcyear",
                        "binnedutcyearquarter",
                        "binnedutcyearquartermonth",
                        "binnedutcyearmonth",
                        "binnedutcyearmonthdate",
                        "binnedutcyearmonthdatehours",
                        "binnedutcyearmonthdatehoursminutes",
                        "binnedutcyearmonthdatehoursminutesseconds",
                        "binnedutcyearweek",
                        "binnedutcyearweekday",
                        "binnedutcyearweekdayhours",
                        "binnedutcyearweekdayhoursminutes",
                        "binnedutcyearweekdayhoursminutesseconds",
                        "binnedutcyeardayofyear",
                    ],
                    Literal[
                        "binnedyear",
                        "binnedyearquarter",
                        "binnedyearquartermonth",
                        "binnedyearmonth",
                        "binnedyearmonthdate",
                        "binnedyearmonthdatehours",
                        "binnedyearmonthdatehoursminutes",
                        "binnedyearmonthdatehoursminutesseconds",
                        "binnedyearweek",
                        "binnedyearweekday",
                        "binnedyearweekdayhours",
                        "binnedyearweekdayhoursminutes",
                        "binnedyearweekdayhoursminutesseconds",
                        "binnedyeardayofyear",
                    ],
                ],
                Union[
                    "TimeUnit",
                    Union[
                        "MultiTimeUnit",
                        Union[
                            "LocalMultiTimeUnit",
                            Literal[
                                "yearquarter",
                                "yearquartermonth",
                                "yearmonth",
                                "yearmonthdate",
                                "yearmonthdatehours",
                                "yearmonthdatehoursminutes",
                                "yearmonthdatehoursminutesseconds",
                                "yearweek",
                                "yearweekday",
                                "yearweekdayhours",
                                "yearweekdayhoursminutes",
                                "yearweekdayhoursminutesseconds",
                                "yeardayofyear",
                                "quartermonth",
                                "monthdate",
                                "monthdatehours",
                                "monthdatehoursminutes",
                                "monthdatehoursminutesseconds",
                                "weekday",
                                "weeksdayhours",
                                "weekdayhoursminutes",
                                "weekdayhoursminutesseconds",
                                "dayhours",
                                "dayhoursminutes",
                                "dayhoursminutesseconds",
                                "hoursminutes",
                                "hoursminutesseconds",
                                "minutesseconds",
                                "secondsmilliseconds",
                            ],
                        ],
                        Union[
                            "UtcMultiTimeUnit",
                            Literal[
                                "utcyearquarter",
                                "utcyearquartermonth",
                                "utcyearmonth",
                                "utcyearmonthdate",
                                "utcyearmonthdatehours",
                                "utcyearmonthdatehoursminutes",
                                "utcyearmonthdatehoursminutesseconds",
                                "utcyearweek",
                                "utcyearweekday",
                                "utcyearweekdayhours",
                                "utcyearweekdayhoursminutes",
                                "utcyearweekdayhoursminutesseconds",
                                "utcyeardayofyear",
                                "utcquartermonth",
                                "utcmonthdate",
                                "utcmonthdatehours",
                                "utcmonthdatehoursminutes",
                                "utcmonthdatehoursminutesseconds",
                                "utcweekday",
                                "utcweeksdayhours",
                                "utcweekdayhoursminutes",
                                "utcweekdayhoursminutesseconds",
                                "utcdayhours",
                                "utcdayhoursminutes",
                                "utcdayhoursminutesseconds",
                                "utchoursminutes",
                                "utchoursminutesseconds",
                                "utcminutesseconds",
                                "utcsecondsmilliseconds",
                            ],
                        ],
                    ],
                    Union[
                        "SingleTimeUnit",
                        Union[
                            "LocalSingleTimeUnit",
                            Literal[
                                "year",
                                "quarter",
                                "month",
                                "week",
                                "day",
                                "dayofyear",
                                "date",
                                "hours",
                                "minutes",
                                "seconds",
                                "milliseconds",
                            ],
                        ],
                        Union[
                            "UtcSingleTimeUnit",
                            Literal[
                                "utcyear",
                                "utcquarter",
                                "utcmonth",
                                "utcweek",
                                "utcday",
                                "utcdayofyear",
                                "utcdate",
                                "utchours",
                                "utcminutes",
                                "utcseconds",
                                "utcmilliseconds",
                            ],
                        ],
                    ],
                ],
                Union["TimeUnitParams", dict],
            ],
            UndefinedType,
        ] = Undefined,
        title: Union[
            Union[None, Union["Text", List[str], str]], UndefinedType
        ] = Undefined,
        type: Union[
            Union["TypeForShape", Literal["nominal", "ordinal", "geojson"]],
            UndefinedType,
        ] = Undefined,
        **kwds
    ):
        super(
            FieldOrDatumDefWithConditionMarkPropFieldDefTypeForShapestringnull, self
        ).__init__(
            aggregate=aggregate,
            bandPosition=bandPosition,
            bin=bin,
            condition=condition,
            field=field,
            legend=legend,
            scale=scale,
            sort=sort,
            timeUnit=timeUnit,
            title=title,
            type=type,
            **kwds
        )


class SharedEncoding(VegaLiteSchema):
    """SharedEncoding schema wrapper

    Union[:class:`SharedEncoding`, Dict[required=[]]]

    Parameters
    ----------

    angle : Dict[required=[]]

    color : Dict[required=[]]

    description : Dict[required=[]]

    detail : Union[List[Union[:class:`FieldDefWithoutScale`, Dict[required=[]]]], Union[:class:`FieldDefWithoutScale`, Dict[required=[]]]]
        Additional levels of detail for grouping data in aggregate views and in line, trail,
        and area marks without mapping data to a specific visual channel.
    fill : Dict[required=[]]

    fillOpacity : Dict[required=[]]

    href : Dict[required=[]]

    key : Dict[required=[]]

    latitude : Dict[required=[]]

    latitude2 : Dict[required=[]]

    longitude : Dict[required=[]]

    longitude2 : Dict[required=[]]

    opacity : Dict[required=[]]

    order : Union[List[Union[:class:`OrderFieldDef`, Dict[required=[]]]], Union[:class:`OrderFieldDef`, Dict[required=[]]], Union[:class:`OrderOnlyDef`, Dict[required=[]]], Union[:class:`OrderValueDef`, Dict[required=[value]]]]
        Order of the marks.


        * For stacked marks, this ``order`` channel encodes `stack order
          <https://vega.github.io/vega-lite/docs/stack.html#order>`__.
        * For line and trail marks, this ``order`` channel encodes order of data points in
          the lines. This can be useful for creating `a connected scatterplot
          <https://vega.github.io/vega-lite/examples/connected_scatterplot.html>`__. Setting
          ``order`` to ``{"value": null}`` makes the line marks use the original order in
          the data sources.
        * Otherwise, this ``order`` channel encodes layer order of the marks.

        **Note** : In aggregate plots, ``order`` field should be ``aggregate`` d to avoid
        creating additional aggregation grouping.
    radius : Dict[required=[]]

    radius2 : Dict[required=[]]

    shape : Dict[required=[]]

    size : Dict[required=[]]

    stroke : Dict[required=[]]

    strokeDash : Dict[required=[]]

    strokeOpacity : Dict[required=[]]

    strokeWidth : Dict[required=[]]

    text : Dict[required=[]]

    theta : Dict[required=[]]

    theta2 : Dict[required=[]]

    tooltip : Union[List[Union[:class:`StringFieldDef`, Dict[required=[]]]], None, Union[:class:`StringFieldDefWithCondition`, Dict[required=[]]], Union[:class:`StringValueDefWithCondition`, Dict[required=[]]]]
        The tooltip text to show upon mouse hover. Specifying ``tooltip`` encoding overrides
        `the tooltip property in the mark definition
        <https://vega.github.io/vega-lite/docs/mark.html#mark-def>`__.

        See the `tooltip <https://vega.github.io/vega-lite/docs/tooltip.html>`__
        documentation for a detailed discussion about tooltip in Vega-Lite.
    url : Dict[required=[]]

    x : Dict[required=[]]

    x2 : Dict[required=[]]

    xError : Dict[required=[]]

    xError2 : Dict[required=[]]

    xOffset : Dict[required=[]]

    y : Dict[required=[]]

    y2 : Dict[required=[]]

    yError : Dict[required=[]]

    yError2 : Dict[required=[]]

    yOffset : Dict[required=[]]

    """

    _schema = {"$ref": "#/definitions/SharedEncoding"}

    def __init__(
        self,
        angle: Union[dict, UndefinedType] = Undefined,
        color: Union[dict, UndefinedType] = Undefined,
        description: Union[dict, UndefinedType] = Undefined,
        detail: Union[
            Union[
                Union["FieldDefWithoutScale", dict],
                Union[List["FieldDefWithoutScale"], List[dict]],
            ],
            UndefinedType,
        ] = Undefined,
        fill: Union[dict, UndefinedType] = Undefined,
        fillOpacity: Union[dict, UndefinedType] = Undefined,
        href: Union[dict, UndefinedType] = Undefined,
        key: Union[dict, UndefinedType] = Undefined,
        latitude: Union[dict, UndefinedType] = Undefined,
        latitude2: Union[dict, UndefinedType] = Undefined,
        longitude: Union[dict, UndefinedType] = Undefined,
        longitude2: Union[dict, UndefinedType] = Undefined,
        opacity: Union[dict, UndefinedType] = Undefined,
        order: Union[
            Union[
                Union["OrderFieldDef", dict],
                Union["OrderOnlyDef", dict],
                Union["OrderValueDef", dict],
                Union[List["OrderFieldDef"], List[dict]],
            ],
            UndefinedType,
        ] = Undefined,
        radius: Union[dict, UndefinedType] = Undefined,
        radius2: Union[dict, UndefinedType] = Undefined,
        shape: Union[dict, UndefinedType] = Undefined,
        size: Union[dict, UndefinedType] = Undefined,
        stroke: Union[dict, UndefinedType] = Undefined,
        strokeDash: Union[dict, UndefinedType] = Undefined,
        strokeOpacity: Union[dict, UndefinedType] = Undefined,
        strokeWidth: Union[dict, UndefinedType] = Undefined,
        text: Union[dict, UndefinedType] = Undefined,
        theta: Union[dict, UndefinedType] = Undefined,
        theta2: Union[dict, UndefinedType] = Undefined,
        tooltip: Union[
            Union[
                None,
                Union["StringFieldDefWithCondition", dict],
                Union["StringValueDefWithCondition", dict],
                Union[List["StringFieldDef"], List[dict]],
            ],
            UndefinedType,
        ] = Undefined,
        url: Union[dict, UndefinedType] = Undefined,
        x: Union[dict, UndefinedType] = Undefined,
        x2: Union[dict, UndefinedType] = Undefined,
        xError: Union[dict, UndefinedType] = Undefined,
        xError2: Union[dict, UndefinedType] = Undefined,
        xOffset: Union[dict, UndefinedType] = Undefined,
        y: Union[dict, UndefinedType] = Undefined,
        y2: Union[dict, UndefinedType] = Undefined,
        yError: Union[dict, UndefinedType] = Undefined,
        yError2: Union[dict, UndefinedType] = Undefined,
        yOffset: Union[dict, UndefinedType] = Undefined,
        **kwds
    ):
        super(SharedEncoding, self).__init__(
            angle=angle,
            color=color,
            description=description,
            detail=detail,
            fill=fill,
            fillOpacity=fillOpacity,
            href=href,
            key=key,
            latitude=latitude,
            latitude2=latitude2,
            longitude=longitude,
            longitude2=longitude2,
            opacity=opacity,
            order=order,
            radius=radius,
            radius2=radius2,
            shape=shape,
            size=size,
            stroke=stroke,
            strokeDash=strokeDash,
            strokeOpacity=strokeOpacity,
            strokeWidth=strokeWidth,
            text=text,
            theta=theta,
            theta2=theta2,
            tooltip=tooltip,
            url=url,
            x=x,
            x2=x2,
            xError=xError,
            xError2=xError2,
            xOffset=xOffset,
            y=y,
            y2=y2,
            yError=yError,
            yError2=yError2,
            yOffset=yOffset,
            **kwds
        )


class SingleDefUnitChannel(VegaLiteSchema):
    """SingleDefUnitChannel schema wrapper

    Union[:class:`SingleDefUnitChannel`, Literal['x', 'y', 'xOffset', 'yOffset', 'x2', 'y2',
    'longitude', 'latitude', 'longitude2', 'latitude2', 'theta', 'theta2', 'radius', 'radius2',
    'color', 'fill', 'stroke', 'opacity', 'fillOpacity', 'strokeOpacity', 'strokeWidth',
    'strokeDash', 'size', 'angle', 'shape', 'key', 'text', 'href', 'url', 'description']]
    """

    _schema = {"$ref": "#/definitions/SingleDefUnitChannel"}

    def __init__(self, *args):
        super(SingleDefUnitChannel, self).__init__(*args)


class Sort(VegaLiteSchema):
    """Sort schema wrapper

    Union[:class:`Sort`, None, Union[:class:`AllSortString`, Union[:class:`SortByChannelDesc`,
    Literal['-x', '-y', '-color', '-fill', '-stroke', '-strokeWidth', '-size', '-shape',
    '-fillOpacity', '-strokeOpacity', '-opacity', '-text']], Union[:class:`SortByChannel`,
    Literal['x', 'y', 'color', 'fill', 'stroke', 'strokeWidth', 'size', 'shape', 'fillOpacity',
    'strokeOpacity', 'opacity', 'text']], Union[:class:`SortOrder`, Literal['ascending',
    'descending']]], Union[:class:`EncodingSortField`, Dict[required=[]]],
    Union[:class:`SortArray`, List[Union[:class:`DateTime`, Dict[required=[]]]], List[bool],
    List[float], List[str]], Union[:class:`SortByEncoding`, Dict[required=[encoding]]]]
    """

    _schema = {"$ref": "#/definitions/Sort"}

    def __init__(self, *args, **kwds):
        super(Sort, self).__init__(*args, **kwds)


class AllSortString(Sort):
    """AllSortString schema wrapper

    Union[:class:`AllSortString`, Union[:class:`SortByChannelDesc`, Literal['-x', '-y',
    '-color', '-fill', '-stroke', '-strokeWidth', '-size', '-shape', '-fillOpacity',
    '-strokeOpacity', '-opacity', '-text']], Union[:class:`SortByChannel`, Literal['x', 'y',
    'color', 'fill', 'stroke', 'strokeWidth', 'size', 'shape', 'fillOpacity', 'strokeOpacity',
    'opacity', 'text']], Union[:class:`SortOrder`, Literal['ascending', 'descending']]]
    """

    _schema = {"$ref": "#/definitions/AllSortString"}

    def __init__(self, *args, **kwds):
        super(AllSortString, self).__init__(*args, **kwds)


class EncodingSortField(Sort):
    """EncodingSortField schema wrapper

    Union[:class:`EncodingSortField`, Dict[required=[]]]
    A sort definition for sorting a discrete scale in an encoding field definition.

    Parameters
    ----------

    field : Union[:class:`Field`, Union[:class:`FieldName`, str], Union[:class:`RepeatRef`, Dict[required=[repeat]]]]
        The data `field <https://vega.github.io/vega-lite/docs/field.html>`__ to sort by.

        **Default value:** If unspecified, defaults to the field specified in the outer data
        reference.
    op : Union[:class:`NonArgAggregateOp`, Literal['average', 'count', 'distinct', 'max', 'mean', 'median', 'min', 'missing', 'product', 'q1', 'q3', 'ci0', 'ci1', 'stderr', 'stdev', 'stdevp', 'sum', 'valid', 'values', 'variance', 'variancep']]
        An `aggregate operation
        <https://vega.github.io/vega-lite/docs/aggregate.html#ops>`__ to perform on the
        field prior to sorting (e.g., ``"count"``, ``"mean"`` and ``"median"`` ). An
        aggregation is required when there are multiple values of the sort field for each
        encoded data field. The input data objects will be aggregated, grouped by the
        encoded data field.

        For a full list of operations, please see the documentation for `aggregate
        <https://vega.github.io/vega-lite/docs/aggregate.html#ops>`__.

        **Default value:** ``"sum"`` for stacked plots. Otherwise, ``"min"``.
    order : Union[None, Union[:class:`SortOrder`, Literal['ascending', 'descending']]]
        The sort order. One of ``"ascending"`` (default), ``"descending"``, or ``null`` (no
        not sort).
    """

    _schema = {"$ref": "#/definitions/EncodingSortField"}

    def __init__(
        self,
        field: Union[
            Union["Field", Union["FieldName", str], Union["RepeatRef", dict]],
            UndefinedType,
        ] = Undefined,
        op: Union[
            Union[
                "NonArgAggregateOp",
                Literal[
                    "average",
                    "count",
                    "distinct",
                    "max",
                    "mean",
                    "median",
                    "min",
                    "missing",
                    "product",
                    "q1",
                    "q3",
                    "ci0",
                    "ci1",
                    "stderr",
                    "stdev",
                    "stdevp",
                    "sum",
                    "valid",
                    "values",
                    "variance",
                    "variancep",
                ],
            ],
            UndefinedType,
        ] = Undefined,
        order: Union[
            Union[None, Union["SortOrder", Literal["ascending", "descending"]]],
            UndefinedType,
        ] = Undefined,
        **kwds
    ):
        super(EncodingSortField, self).__init__(field=field, op=op, order=order, **kwds)


class SortArray(Sort):
    """SortArray schema wrapper

    Union[:class:`SortArray`, List[Union[:class:`DateTime`, Dict[required=[]]]], List[bool],
    List[float], List[str]]
    """

    _schema = {"$ref": "#/definitions/SortArray"}

    def __init__(self, *args, **kwds):
        super(SortArray, self).__init__(*args, **kwds)


class SortByChannel(AllSortString):
    """SortByChannel schema wrapper

    Union[:class:`SortByChannel`, Literal['x', 'y', 'color', 'fill', 'stroke', 'strokeWidth',
    'size', 'shape', 'fillOpacity', 'strokeOpacity', 'opacity', 'text']]
    """

    _schema = {"$ref": "#/definitions/SortByChannel"}

    def __init__(self, *args):
        super(SortByChannel, self).__init__(*args)


class SortByChannelDesc(AllSortString):
    """SortByChannelDesc schema wrapper

    Union[:class:`SortByChannelDesc`, Literal['-x', '-y', '-color', '-fill', '-stroke',
    '-strokeWidth', '-size', '-shape', '-fillOpacity', '-strokeOpacity', '-opacity', '-text']]
    """

    _schema = {"$ref": "#/definitions/SortByChannelDesc"}

    def __init__(self, *args):
        super(SortByChannelDesc, self).__init__(*args)


class SortByEncoding(Sort):
    """SortByEncoding schema wrapper

    Union[:class:`SortByEncoding`, Dict[required=[encoding]]]

    Parameters
    ----------

    encoding : Union[:class:`SortByChannel`, Literal['x', 'y', 'color', 'fill', 'stroke', 'strokeWidth', 'size', 'shape', 'fillOpacity', 'strokeOpacity', 'opacity', 'text']]
        The `encoding channel
        <https://vega.github.io/vega-lite/docs/encoding.html#channels>`__ to sort by (e.g.,
        ``"x"``, ``"y"`` )
    order : Union[None, Union[:class:`SortOrder`, Literal['ascending', 'descending']]]
        The sort order. One of ``"ascending"`` (default), ``"descending"``, or ``null`` (no
        not sort).
    """

    _schema = {"$ref": "#/definitions/SortByEncoding"}

    def __init__(
        self,
        encoding: Union[
            Union[
                "SortByChannel",
                Literal[
                    "x",
                    "y",
                    "color",
                    "fill",
                    "stroke",
                    "strokeWidth",
                    "size",
                    "shape",
                    "fillOpacity",
                    "strokeOpacity",
                    "opacity",
                    "text",
                ],
            ],
            UndefinedType,
        ] = Undefined,
        order: Union[
            Union[None, Union["SortOrder", Literal["ascending", "descending"]]],
            UndefinedType,
        ] = Undefined,
        **kwds
    ):
        super(SortByEncoding, self).__init__(encoding=encoding, order=order, **kwds)


class SortField(VegaLiteSchema):
    """SortField schema wrapper

    Union[:class:`SortField`, Dict[required=[field]]]
    A sort definition for transform

    Parameters
    ----------

    field : Union[:class:`FieldName`, str]
        The name of the field to sort.
    order : Union[None, Union[:class:`SortOrder`, Literal['ascending', 'descending']]]
        Whether to sort the field in ascending or descending order. One of ``"ascending"``
        (default), ``"descending"``, or ``null`` (no not sort).
    """

    _schema = {"$ref": "#/definitions/SortField"}

    def __init__(
        self,
        field: Union[Union["FieldName", str], UndefinedType] = Undefined,
        order: Union[
            Union[None, Union["SortOrder", Literal["ascending", "descending"]]],
            UndefinedType,
        ] = Undefined,
        **kwds
    ):
        super(SortField, self).__init__(field=field, order=order, **kwds)


class SortOrder(AllSortString):
    """SortOrder schema wrapper

    Union[:class:`SortOrder`, Literal['ascending', 'descending']]
    """

    _schema = {"$ref": "#/definitions/SortOrder"}

    def __init__(self, *args):
        super(SortOrder, self).__init__(*args)


class Spec(VegaLiteSchema):
    """Spec schema wrapper

    Union[:class:`Spec`, Union[:class:`ConcatSpecGenericSpec`, Dict[required=[concat]]],
    Union[:class:`FacetSpec`, Dict[required=[facet, spec]]], Union[:class:`FacetedUnitSpec`,
    Dict[required=[mark]]], Union[:class:`HConcatSpecGenericSpec`, Dict[required=[hconcat]]],
    Union[:class:`LayerSpec`, Dict[required=[layer]]], Union[:class:`RepeatSpec`,
    Union[:class:`LayerRepeatSpec`, Dict[required=[repeat, spec]]],
    Union[:class:`NonLayerRepeatSpec`, Dict[required=[repeat, spec]]]],
    Union[:class:`VConcatSpecGenericSpec`, Dict[required=[vconcat]]]]
    Any specification in Vega-Lite.
    """

    _schema = {"$ref": "#/definitions/Spec"}

    def __init__(self, *args, **kwds):
        super(Spec, self).__init__(*args, **kwds)


class ConcatSpecGenericSpec(Spec, NonNormalizedSpec):
    """ConcatSpecGenericSpec schema wrapper

    Union[:class:`ConcatSpecGenericSpec`, Dict[required=[concat]]]
    Base interface for a generalized concatenation specification.

    Parameters
    ----------

    concat : List[Union[:class:`Spec`, Union[:class:`ConcatSpecGenericSpec`, Dict[required=[concat]]], Union[:class:`FacetSpec`, Dict[required=[facet, spec]]], Union[:class:`FacetedUnitSpec`, Dict[required=[mark]]], Union[:class:`HConcatSpecGenericSpec`, Dict[required=[hconcat]]], Union[:class:`LayerSpec`, Dict[required=[layer]]], Union[:class:`RepeatSpec`, Union[:class:`LayerRepeatSpec`, Dict[required=[repeat, spec]]], Union[:class:`NonLayerRepeatSpec`, Dict[required=[repeat, spec]]]], Union[:class:`VConcatSpecGenericSpec`, Dict[required=[vconcat]]]]]
        A list of views to be concatenated.
    align : Union[Union[:class:`LayoutAlign`, Literal['all', 'each', 'none']], Union[:class:`RowColLayoutAlign`, Dict[required=[]]]]
        The alignment to apply to grid rows and columns. The supported string values are
        ``"all"``, ``"each"``, and ``"none"``.


        * For ``"none"``, a flow layout will be used, in which adjacent subviews are simply
          placed one after the other.
        * For ``"each"``, subviews will be aligned into a clean grid structure, but each row
          or column may be of variable size.
        * For ``"all"``, subviews will be aligned and each row or column will be sized
          identically based on the maximum observed size. String values for this property
          will be applied to both grid rows and columns.

        Alternatively, an object value of the form ``{"row": string, "column": string}`` can
        be used to supply different alignments for rows and columns.

        **Default value:** ``"all"``.
    bounds : Literal['full', 'flush']
        The bounds calculation method to use for determining the extent of a sub-plot. One
        of ``full`` (the default) or ``flush``.


        * If set to ``full``, the entire calculated bounds (including axes, title, and
          legend) will be used.
        * If set to ``flush``, only the specified width and height values for the sub-view
          will be used. The ``flush`` setting can be useful when attempting to place
          sub-plots without axes or legends into a uniform grid structure.

        **Default value:** ``"full"``
    center : Union[Union[:class:`RowColboolean`, Dict[required=[]]], bool]
        Boolean flag indicating if subviews should be centered relative to their respective
        rows or columns.

        An object value of the form ``{"row": boolean, "column": boolean}`` can be used to
        supply different centering values for rows and columns.

        **Default value:** ``false``
    columns : float
        The number of columns to include in the view composition layout.

        **Default value** : ``undefined`` -- An infinite number of columns (a single row)
        will be assumed. This is equivalent to ``hconcat`` (for ``concat`` ) and to using
        the ``column`` channel (for ``facet`` and ``repeat`` ).

        **Note** :

        1) This property is only for:


        * the general (wrappable) ``concat`` operator (not ``hconcat`` / ``vconcat`` )
        * the ``facet`` and ``repeat`` operator with one field/repetition definition
          (without row/column nesting)

        2) Setting the ``columns`` to ``1`` is equivalent to ``vconcat`` (for ``concat`` )
        and to using the ``row`` channel (for ``facet`` and ``repeat`` ).
    data : Union[None, Union[:class:`Data`, Union[:class:`DataSource`, Union[:class:`InlineData`, Dict[required=[values]]], Union[:class:`NamedData`, Dict[required=[name]]], Union[:class:`UrlData`, Dict[required=[url]]]], Union[:class:`Generator`, Union[:class:`GraticuleGenerator`, Dict[required=[graticule]]], Union[:class:`SequenceGenerator`, Dict[required=[sequence]]], Union[:class:`SphereGenerator`, Dict[required=[sphere]]]]]]
        An object describing the data source. Set to ``null`` to ignore the parent's data
        source. If no data is set, it is derived from the parent.
    description : str
        Description of this mark for commenting purpose.
    name : str
        Name of the visualization for later reference.
    resolve : Union[:class:`Resolve`, Dict[required=[]]]
        Scale, axis, and legend resolutions for view composition specifications.
    spacing : Union[Union[:class:`RowColnumber`, Dict[required=[]]], float]
        The spacing in pixels between sub-views of the composition operator. An object of
        the form ``{"row": number, "column": number}`` can be used to set different spacing
        values for rows and columns.

        **Default value** : Depends on ``"spacing"`` property of `the view composition
        configuration <https://vega.github.io/vega-lite/docs/config.html#view-config>`__ (
        ``20`` by default)
    title : Union[Union[:class:`Text`, List[str], str], Union[:class:`TitleParams`, Dict[required=[text]]]]
        Title for the plot.
    transform : List[Union[:class:`Transform`, Union[:class:`AggregateTransform`, Dict[required=[aggregate]]], Union[:class:`BinTransform`, Dict[required=[bin, field, as]]], Union[:class:`CalculateTransform`, Dict[required=[calculate, as]]], Union[:class:`DensityTransform`, Dict[required=[density]]], Union[:class:`ExtentTransform`, Dict[required=[extent, param]]], Union[:class:`FilterTransform`, Dict[required=[filter]]], Union[:class:`FlattenTransform`, Dict[required=[flatten]]], Union[:class:`FoldTransform`, Dict[required=[fold]]], Union[:class:`ImputeTransform`, Dict[required=[impute, key]]], Union[:class:`JoinAggregateTransform`, Dict[required=[joinaggregate]]], Union[:class:`LoessTransform`, Dict[required=[loess, on]]], Union[:class:`LookupTransform`, Dict[required=[lookup, from]]], Union[:class:`PivotTransform`, Dict[required=[pivot, value]]], Union[:class:`QuantileTransform`, Dict[required=[quantile]]], Union[:class:`RegressionTransform`, Dict[required=[regression, on]]], Union[:class:`SampleTransform`, Dict[required=[sample]]], Union[:class:`StackTransform`, Dict[required=[stack, groupby, as]]], Union[:class:`TimeUnitTransform`, Dict[required=[timeUnit, field, as]]], Union[:class:`WindowTransform`, Dict[required=[window]]]]]
        An array of data transformations such as filter and new field calculation.
    """

    _schema = {"$ref": "#/definitions/ConcatSpec<GenericSpec>"}

    def __init__(
        self,
        concat: Union[
            Union[
                List["Spec"],
                List[Union["ConcatSpecGenericSpec", dict]],
                List[Union["FacetSpec", dict]],
                List[Union["FacetedUnitSpec", dict]],
                List[Union["HConcatSpecGenericSpec", dict]],
                List[Union["LayerSpec", dict]],
                List[
                    Union[
                        "RepeatSpec",
                        Union["LayerRepeatSpec", dict],
                        Union["NonLayerRepeatSpec", dict],
                    ]
                ],
                List[Union["VConcatSpecGenericSpec", dict]],
            ],
            UndefinedType,
        ] = Undefined,
        align: Union[
            Union[
                Union["LayoutAlign", Literal["all", "each", "none"]],
                Union["RowColLayoutAlign", dict],
            ],
            UndefinedType,
        ] = Undefined,
        bounds: Union[Literal["full", "flush"], UndefinedType] = Undefined,
        center: Union[
            Union[Union["RowColboolean", dict], bool], UndefinedType
        ] = Undefined,
        columns: Union[float, UndefinedType] = Undefined,
        data: Union[
            Union[
                None,
                Union[
                    "Data",
                    Union[
                        "DataSource",
                        Union["InlineData", dict],
                        Union["NamedData", dict],
                        Union["UrlData", dict],
                    ],
                    Union[
                        "Generator",
                        Union["GraticuleGenerator", dict],
                        Union["SequenceGenerator", dict],
                        Union["SphereGenerator", dict],
                    ],
                ],
            ],
            UndefinedType,
        ] = Undefined,
        description: Union[str, UndefinedType] = Undefined,
        name: Union[str, UndefinedType] = Undefined,
        resolve: Union[Union["Resolve", dict], UndefinedType] = Undefined,
        spacing: Union[
            Union[Union["RowColnumber", dict], float], UndefinedType
        ] = Undefined,
        title: Union[
            Union[Union["Text", List[str], str], Union["TitleParams", dict]],
            UndefinedType,
        ] = Undefined,
        transform: Union[
            Union[
                List["Transform"],
                List[Union["AggregateTransform", dict]],
                List[Union["BinTransform", dict]],
                List[Union["CalculateTransform", dict]],
                List[Union["DensityTransform", dict]],
                List[Union["ExtentTransform", dict]],
                List[Union["FilterTransform", dict]],
                List[Union["FlattenTransform", dict]],
                List[Union["FoldTransform", dict]],
                List[Union["ImputeTransform", dict]],
                List[Union["JoinAggregateTransform", dict]],
                List[Union["LoessTransform", dict]],
                List[Union["LookupTransform", dict]],
                List[Union["PivotTransform", dict]],
                List[Union["QuantileTransform", dict]],
                List[Union["RegressionTransform", dict]],
                List[Union["SampleTransform", dict]],
                List[Union["StackTransform", dict]],
                List[Union["TimeUnitTransform", dict]],
                List[Union["WindowTransform", dict]],
            ],
            UndefinedType,
        ] = Undefined,
        **kwds
    ):
        super(ConcatSpecGenericSpec, self).__init__(
            concat=concat,
            align=align,
            bounds=bounds,
            center=center,
            columns=columns,
            data=data,
            description=description,
            name=name,
            resolve=resolve,
            spacing=spacing,
            title=title,
            transform=transform,
            **kwds
        )


class FacetSpec(Spec, NonNormalizedSpec):
    """FacetSpec schema wrapper

    Union[:class:`FacetSpec`, Dict[required=[facet, spec]]]
    Base interface for a facet specification.

    Parameters
    ----------

    facet : Union[Union[:class:`FacetFieldDef`, Dict[required=[]]], Union[:class:`FacetMapping`, Dict[required=[]]]]
        Definition for how to facet the data. One of: 1) `a field definition for faceting
        the plot by one field
        <https://vega.github.io/vega-lite/docs/facet.html#field-def>`__ 2) `An object that
        maps row and column channels to their field definitions
        <https://vega.github.io/vega-lite/docs/facet.html#mapping>`__
    spec : Union[Union[:class:`FacetedUnitSpec`, Dict[required=[mark]]], Union[:class:`LayerSpec`, Dict[required=[layer]]]]
        A specification of the view that gets faceted.
    align : Union[Union[:class:`LayoutAlign`, Literal['all', 'each', 'none']], Union[:class:`RowColLayoutAlign`, Dict[required=[]]]]
        The alignment to apply to grid rows and columns. The supported string values are
        ``"all"``, ``"each"``, and ``"none"``.


        * For ``"none"``, a flow layout will be used, in which adjacent subviews are simply
          placed one after the other.
        * For ``"each"``, subviews will be aligned into a clean grid structure, but each row
          or column may be of variable size.
        * For ``"all"``, subviews will be aligned and each row or column will be sized
          identically based on the maximum observed size. String values for this property
          will be applied to both grid rows and columns.

        Alternatively, an object value of the form ``{"row": string, "column": string}`` can
        be used to supply different alignments for rows and columns.

        **Default value:** ``"all"``.
    bounds : Literal['full', 'flush']
        The bounds calculation method to use for determining the extent of a sub-plot. One
        of ``full`` (the default) or ``flush``.


        * If set to ``full``, the entire calculated bounds (including axes, title, and
          legend) will be used.
        * If set to ``flush``, only the specified width and height values for the sub-view
          will be used. The ``flush`` setting can be useful when attempting to place
          sub-plots without axes or legends into a uniform grid structure.

        **Default value:** ``"full"``
    center : Union[Union[:class:`RowColboolean`, Dict[required=[]]], bool]
        Boolean flag indicating if subviews should be centered relative to their respective
        rows or columns.

        An object value of the form ``{"row": boolean, "column": boolean}`` can be used to
        supply different centering values for rows and columns.

        **Default value:** ``false``
    columns : float
        The number of columns to include in the view composition layout.

        **Default value** : ``undefined`` -- An infinite number of columns (a single row)
        will be assumed. This is equivalent to ``hconcat`` (for ``concat`` ) and to using
        the ``column`` channel (for ``facet`` and ``repeat`` ).

        **Note** :

        1) This property is only for:


        * the general (wrappable) ``concat`` operator (not ``hconcat`` / ``vconcat`` )
        * the ``facet`` and ``repeat`` operator with one field/repetition definition
          (without row/column nesting)

        2) Setting the ``columns`` to ``1`` is equivalent to ``vconcat`` (for ``concat`` )
        and to using the ``row`` channel (for ``facet`` and ``repeat`` ).
    data : Union[None, Union[:class:`Data`, Union[:class:`DataSource`, Union[:class:`InlineData`, Dict[required=[values]]], Union[:class:`NamedData`, Dict[required=[name]]], Union[:class:`UrlData`, Dict[required=[url]]]], Union[:class:`Generator`, Union[:class:`GraticuleGenerator`, Dict[required=[graticule]]], Union[:class:`SequenceGenerator`, Dict[required=[sequence]]], Union[:class:`SphereGenerator`, Dict[required=[sphere]]]]]]
        An object describing the data source. Set to ``null`` to ignore the parent's data
        source. If no data is set, it is derived from the parent.
    description : str
        Description of this mark for commenting purpose.
    name : str
        Name of the visualization for later reference.
    resolve : Union[:class:`Resolve`, Dict[required=[]]]
        Scale, axis, and legend resolutions for view composition specifications.
    spacing : Union[Union[:class:`RowColnumber`, Dict[required=[]]], float]
        The spacing in pixels between sub-views of the composition operator. An object of
        the form ``{"row": number, "column": number}`` can be used to set different spacing
        values for rows and columns.

        **Default value** : Depends on ``"spacing"`` property of `the view composition
        configuration <https://vega.github.io/vega-lite/docs/config.html#view-config>`__ (
        ``20`` by default)
    title : Union[Union[:class:`Text`, List[str], str], Union[:class:`TitleParams`, Dict[required=[text]]]]
        Title for the plot.
    transform : List[Union[:class:`Transform`, Union[:class:`AggregateTransform`, Dict[required=[aggregate]]], Union[:class:`BinTransform`, Dict[required=[bin, field, as]]], Union[:class:`CalculateTransform`, Dict[required=[calculate, as]]], Union[:class:`DensityTransform`, Dict[required=[density]]], Union[:class:`ExtentTransform`, Dict[required=[extent, param]]], Union[:class:`FilterTransform`, Dict[required=[filter]]], Union[:class:`FlattenTransform`, Dict[required=[flatten]]], Union[:class:`FoldTransform`, Dict[required=[fold]]], Union[:class:`ImputeTransform`, Dict[required=[impute, key]]], Union[:class:`JoinAggregateTransform`, Dict[required=[joinaggregate]]], Union[:class:`LoessTransform`, Dict[required=[loess, on]]], Union[:class:`LookupTransform`, Dict[required=[lookup, from]]], Union[:class:`PivotTransform`, Dict[required=[pivot, value]]], Union[:class:`QuantileTransform`, Dict[required=[quantile]]], Union[:class:`RegressionTransform`, Dict[required=[regression, on]]], Union[:class:`SampleTransform`, Dict[required=[sample]]], Union[:class:`StackTransform`, Dict[required=[stack, groupby, as]]], Union[:class:`TimeUnitTransform`, Dict[required=[timeUnit, field, as]]], Union[:class:`WindowTransform`, Dict[required=[window]]]]]
        An array of data transformations such as filter and new field calculation.
    """

    _schema = {"$ref": "#/definitions/FacetSpec"}

    def __init__(
        self,
        facet: Union[
            Union[Union["FacetFieldDef", dict], Union["FacetMapping", dict]],
            UndefinedType,
        ] = Undefined,
        spec: Union[
            Union[Union["FacetedUnitSpec", dict], Union["LayerSpec", dict]],
            UndefinedType,
        ] = Undefined,
        align: Union[
            Union[
                Union["LayoutAlign", Literal["all", "each", "none"]],
                Union["RowColLayoutAlign", dict],
            ],
            UndefinedType,
        ] = Undefined,
        bounds: Union[Literal["full", "flush"], UndefinedType] = Undefined,
        center: Union[
            Union[Union["RowColboolean", dict], bool], UndefinedType
        ] = Undefined,
        columns: Union[float, UndefinedType] = Undefined,
        data: Union[
            Union[
                None,
                Union[
                    "Data",
                    Union[
                        "DataSource",
                        Union["InlineData", dict],
                        Union["NamedData", dict],
                        Union["UrlData", dict],
                    ],
                    Union[
                        "Generator",
                        Union["GraticuleGenerator", dict],
                        Union["SequenceGenerator", dict],
                        Union["SphereGenerator", dict],
                    ],
                ],
            ],
            UndefinedType,
        ] = Undefined,
        description: Union[str, UndefinedType] = Undefined,
        name: Union[str, UndefinedType] = Undefined,
        resolve: Union[Union["Resolve", dict], UndefinedType] = Undefined,
        spacing: Union[
            Union[Union["RowColnumber", dict], float], UndefinedType
        ] = Undefined,
        title: Union[
            Union[Union["Text", List[str], str], Union["TitleParams", dict]],
            UndefinedType,
        ] = Undefined,
        transform: Union[
            Union[
                List["Transform"],
                List[Union["AggregateTransform", dict]],
                List[Union["BinTransform", dict]],
                List[Union["CalculateTransform", dict]],
                List[Union["DensityTransform", dict]],
                List[Union["ExtentTransform", dict]],
                List[Union["FilterTransform", dict]],
                List[Union["FlattenTransform", dict]],
                List[Union["FoldTransform", dict]],
                List[Union["ImputeTransform", dict]],
                List[Union["JoinAggregateTransform", dict]],
                List[Union["LoessTransform", dict]],
                List[Union["LookupTransform", dict]],
                List[Union["PivotTransform", dict]],
                List[Union["QuantileTransform", dict]],
                List[Union["RegressionTransform", dict]],
                List[Union["SampleTransform", dict]],
                List[Union["StackTransform", dict]],
                List[Union["TimeUnitTransform", dict]],
                List[Union["WindowTransform", dict]],
            ],
            UndefinedType,
        ] = Undefined,
        **kwds
    ):
        super(FacetSpec, self).__init__(
            facet=facet,
            spec=spec,
            align=align,
            bounds=bounds,
            center=center,
            columns=columns,
            data=data,
            description=description,
            name=name,
            resolve=resolve,
            spacing=spacing,
            title=title,
            transform=transform,
            **kwds
        )


class FacetedUnitSpec(Spec, NonNormalizedSpec):
    """FacetedUnitSpec schema wrapper

    Union[:class:`FacetedUnitSpec`, Dict[required=[mark]]]
    Unit spec that can have a composite mark and row or column channels (shorthand for a facet
    spec).

    Parameters
    ----------

    mark : Union[:class:`AnyMark`, Union[:class:`CompositeMarkDef`, Union[:class:`BoxPlotDef`, Dict[required=[type]]], Union[:class:`ErrorBandDef`, Dict[required=[type]]], Union[:class:`ErrorBarDef`, Dict[required=[type]]]], Union[:class:`CompositeMark`, Union[:class:`BoxPlot`, str], Union[:class:`ErrorBand`, str], Union[:class:`ErrorBar`, str]], Union[:class:`MarkDef`, Dict[required=[type]]], Union[:class:`Mark`, Literal['arc', 'area', 'bar', 'image', 'line', 'point', 'rect', 'rule', 'text', 'tick', 'trail', 'circle', 'square', 'geoshape']]]
        A string describing the mark type (one of ``"bar"``, ``"circle"``, ``"square"``,
        ``"tick"``, ``"line"``, ``"area"``, ``"point"``, ``"rule"``, ``"geoshape"``, and
        ``"text"`` ) or a `mark definition object
        <https://vega.github.io/vega-lite/docs/mark.html#mark-def>`__.
    align : Union[Union[:class:`LayoutAlign`, Literal['all', 'each', 'none']], Union[:class:`RowColLayoutAlign`, Dict[required=[]]]]
        The alignment to apply to grid rows and columns. The supported string values are
        ``"all"``, ``"each"``, and ``"none"``.


        * For ``"none"``, a flow layout will be used, in which adjacent subviews are simply
          placed one after the other.
        * For ``"each"``, subviews will be aligned into a clean grid structure, but each row
          or column may be of variable size.
        * For ``"all"``, subviews will be aligned and each row or column will be sized
          identically based on the maximum observed size. String values for this property
          will be applied to both grid rows and columns.

        Alternatively, an object value of the form ``{"row": string, "column": string}`` can
        be used to supply different alignments for rows and columns.

        **Default value:** ``"all"``.
    bounds : Literal['full', 'flush']
        The bounds calculation method to use for determining the extent of a sub-plot. One
        of ``full`` (the default) or ``flush``.


        * If set to ``full``, the entire calculated bounds (including axes, title, and
          legend) will be used.
        * If set to ``flush``, only the specified width and height values for the sub-view
          will be used. The ``flush`` setting can be useful when attempting to place
          sub-plots without axes or legends into a uniform grid structure.

        **Default value:** ``"full"``
    center : Union[Union[:class:`RowColboolean`, Dict[required=[]]], bool]
        Boolean flag indicating if subviews should be centered relative to their respective
        rows or columns.

        An object value of the form ``{"row": boolean, "column": boolean}`` can be used to
        supply different centering values for rows and columns.

        **Default value:** ``false``
    data : Union[None, Union[:class:`Data`, Union[:class:`DataSource`, Union[:class:`InlineData`, Dict[required=[values]]], Union[:class:`NamedData`, Dict[required=[name]]], Union[:class:`UrlData`, Dict[required=[url]]]], Union[:class:`Generator`, Union[:class:`GraticuleGenerator`, Dict[required=[graticule]]], Union[:class:`SequenceGenerator`, Dict[required=[sequence]]], Union[:class:`SphereGenerator`, Dict[required=[sphere]]]]]]
        An object describing the data source. Set to ``null`` to ignore the parent's data
        source. If no data is set, it is derived from the parent.
    description : str
        Description of this mark for commenting purpose.
    encoding : Union[:class:`FacetedEncoding`, Dict[required=[]]]
        A key-value mapping between encoding channels and definition of fields.
    height : Union[Union[:class:`Step`, Dict[required=[step]]], float, str]
        The height of a visualization.


        * For a plot with a continuous y-field, height should be a number.
        * For a plot with either a discrete y-field or no y-field, height can be either a
          number indicating a fixed height or an object in the form of ``{step: number}``
          defining the height per discrete step. (No y-field is equivalent to having one
          discrete step.)
        * To enable responsive sizing on height, it should be set to ``"container"``.

        **Default value:** Based on ``config.view.continuousHeight`` for a plot with a
        continuous y-field and ``config.view.discreteHeight`` otherwise.

        **Note:** For plots with `row and column channels
        <https://vega.github.io/vega-lite/docs/encoding.html#facet>`__, this represents the
        height of a single view and the ``"container"`` option cannot be used.

        **See also:** `height <https://vega.github.io/vega-lite/docs/size.html>`__
        documentation.
    name : str
        Name of the visualization for later reference.
    params : List[Union[:class:`SelectionParameter`, Dict[required=[name, select]]]]
        An array of parameters that may either be simple variables, or more complex
        selections that map user input to data queries.
    projection : Union[:class:`Projection`, Dict[required=[]]]
        An object defining properties of geographic projection, which will be applied to
        ``shape`` path for ``"geoshape"`` marks and to ``latitude`` and ``"longitude"``
        channels for other marks.
    resolve : Union[:class:`Resolve`, Dict[required=[]]]
        Scale, axis, and legend resolutions for view composition specifications.
    spacing : Union[Union[:class:`RowColnumber`, Dict[required=[]]], float]
        The spacing in pixels between sub-views of the composition operator. An object of
        the form ``{"row": number, "column": number}`` can be used to set different spacing
        values for rows and columns.

        **Default value** : Depends on ``"spacing"`` property of `the view composition
        configuration <https://vega.github.io/vega-lite/docs/config.html#view-config>`__ (
        ``20`` by default)
    title : Union[Union[:class:`Text`, List[str], str], Union[:class:`TitleParams`, Dict[required=[text]]]]
        Title for the plot.
    transform : List[Union[:class:`Transform`, Union[:class:`AggregateTransform`, Dict[required=[aggregate]]], Union[:class:`BinTransform`, Dict[required=[bin, field, as]]], Union[:class:`CalculateTransform`, Dict[required=[calculate, as]]], Union[:class:`DensityTransform`, Dict[required=[density]]], Union[:class:`ExtentTransform`, Dict[required=[extent, param]]], Union[:class:`FilterTransform`, Dict[required=[filter]]], Union[:class:`FlattenTransform`, Dict[required=[flatten]]], Union[:class:`FoldTransform`, Dict[required=[fold]]], Union[:class:`ImputeTransform`, Dict[required=[impute, key]]], Union[:class:`JoinAggregateTransform`, Dict[required=[joinaggregate]]], Union[:class:`LoessTransform`, Dict[required=[loess, on]]], Union[:class:`LookupTransform`, Dict[required=[lookup, from]]], Union[:class:`PivotTransform`, Dict[required=[pivot, value]]], Union[:class:`QuantileTransform`, Dict[required=[quantile]]], Union[:class:`RegressionTransform`, Dict[required=[regression, on]]], Union[:class:`SampleTransform`, Dict[required=[sample]]], Union[:class:`StackTransform`, Dict[required=[stack, groupby, as]]], Union[:class:`TimeUnitTransform`, Dict[required=[timeUnit, field, as]]], Union[:class:`WindowTransform`, Dict[required=[window]]]]]
        An array of data transformations such as filter and new field calculation.
    view : Union[:class:`ViewBackground`, Dict[required=[]]]
        An object defining the view background's fill and stroke.

        **Default value:** none (transparent)
    width : Union[Union[:class:`Step`, Dict[required=[step]]], float, str]
        The width of a visualization.


        * For a plot with a continuous x-field, width should be a number.
        * For a plot with either a discrete x-field or no x-field, width can be either a
          number indicating a fixed width or an object in the form of ``{step: number}``
          defining the width per discrete step. (No x-field is equivalent to having one
          discrete step.)
        * To enable responsive sizing on width, it should be set to ``"container"``.

        **Default value:** Based on ``config.view.continuousWidth`` for a plot with a
        continuous x-field and ``config.view.discreteWidth`` otherwise.

        **Note:** For plots with `row and column channels
        <https://vega.github.io/vega-lite/docs/encoding.html#facet>`__, this represents the
        width of a single view and the ``"container"`` option cannot be used.

        **See also:** `width <https://vega.github.io/vega-lite/docs/size.html>`__
        documentation.
    """

    _schema = {"$ref": "#/definitions/FacetedUnitSpec"}

    def __init__(
        self,
        mark: Union[
            Union[
                "AnyMark",
                Union[
                    "CompositeMark",
                    Union["BoxPlot", str],
                    Union["ErrorBand", str],
                    Union["ErrorBar", str],
                ],
                Union[
                    "CompositeMarkDef",
                    Union["BoxPlotDef", dict],
                    Union["ErrorBandDef", dict],
                    Union["ErrorBarDef", dict],
                ],
                Union[
                    "Mark",
                    Literal[
                        "arc",
                        "area",
                        "bar",
                        "image",
                        "line",
                        "point",
                        "rect",
                        "rule",
                        "text",
                        "tick",
                        "trail",
                        "circle",
                        "square",
                        "geoshape",
                    ],
                ],
                Union["MarkDef", dict],
            ],
            UndefinedType,
        ] = Undefined,
        align: Union[
            Union[
                Union["LayoutAlign", Literal["all", "each", "none"]],
                Union["RowColLayoutAlign", dict],
            ],
            UndefinedType,
        ] = Undefined,
        bounds: Union[Literal["full", "flush"], UndefinedType] = Undefined,
        center: Union[
            Union[Union["RowColboolean", dict], bool], UndefinedType
        ] = Undefined,
        data: Union[
            Union[
                None,
                Union[
                    "Data",
                    Union[
                        "DataSource",
                        Union["InlineData", dict],
                        Union["NamedData", dict],
                        Union["UrlData", dict],
                    ],
                    Union[
                        "Generator",
                        Union["GraticuleGenerator", dict],
                        Union["SequenceGenerator", dict],
                        Union["SphereGenerator", dict],
                    ],
                ],
            ],
            UndefinedType,
        ] = Undefined,
        description: Union[str, UndefinedType] = Undefined,
        encoding: Union[Union["FacetedEncoding", dict], UndefinedType] = Undefined,
        height: Union[
            Union[Union["Step", dict], float, str], UndefinedType
        ] = Undefined,
        name: Union[str, UndefinedType] = Undefined,
        params: Union[
            Union[List["SelectionParameter"], List[dict]], UndefinedType
        ] = Undefined,
        projection: Union[Union["Projection", dict], UndefinedType] = Undefined,
        resolve: Union[Union["Resolve", dict], UndefinedType] = Undefined,
        spacing: Union[
            Union[Union["RowColnumber", dict], float], UndefinedType
        ] = Undefined,
        title: Union[
            Union[Union["Text", List[str], str], Union["TitleParams", dict]],
            UndefinedType,
        ] = Undefined,
        transform: Union[
            Union[
                List["Transform"],
                List[Union["AggregateTransform", dict]],
                List[Union["BinTransform", dict]],
                List[Union["CalculateTransform", dict]],
                List[Union["DensityTransform", dict]],
                List[Union["ExtentTransform", dict]],
                List[Union["FilterTransform", dict]],
                List[Union["FlattenTransform", dict]],
                List[Union["FoldTransform", dict]],
                List[Union["ImputeTransform", dict]],
                List[Union["JoinAggregateTransform", dict]],
                List[Union["LoessTransform", dict]],
                List[Union["LookupTransform", dict]],
                List[Union["PivotTransform", dict]],
                List[Union["QuantileTransform", dict]],
                List[Union["RegressionTransform", dict]],
                List[Union["SampleTransform", dict]],
                List[Union["StackTransform", dict]],
                List[Union["TimeUnitTransform", dict]],
                List[Union["WindowTransform", dict]],
            ],
            UndefinedType,
        ] = Undefined,
        view: Union[Union["ViewBackground", dict], UndefinedType] = Undefined,
        width: Union[Union[Union["Step", dict], float, str], UndefinedType] = Undefined,
        **kwds
    ):
        super(FacetedUnitSpec, self).__init__(
            mark=mark,
            align=align,
            bounds=bounds,
            center=center,
            data=data,
            description=description,
            encoding=encoding,
            height=height,
            name=name,
            params=params,
            projection=projection,
            resolve=resolve,
            spacing=spacing,
            title=title,
            transform=transform,
            view=view,
            width=width,
            **kwds
        )


class HConcatSpecGenericSpec(Spec, NonNormalizedSpec):
    """HConcatSpecGenericSpec schema wrapper

    Union[:class:`HConcatSpecGenericSpec`, Dict[required=[hconcat]]]
    Base interface for a horizontal concatenation specification.

    Parameters
    ----------

    hconcat : List[Union[:class:`Spec`, Union[:class:`ConcatSpecGenericSpec`, Dict[required=[concat]]], Union[:class:`FacetSpec`, Dict[required=[facet, spec]]], Union[:class:`FacetedUnitSpec`, Dict[required=[mark]]], Union[:class:`HConcatSpecGenericSpec`, Dict[required=[hconcat]]], Union[:class:`LayerSpec`, Dict[required=[layer]]], Union[:class:`RepeatSpec`, Union[:class:`LayerRepeatSpec`, Dict[required=[repeat, spec]]], Union[:class:`NonLayerRepeatSpec`, Dict[required=[repeat, spec]]]], Union[:class:`VConcatSpecGenericSpec`, Dict[required=[vconcat]]]]]
        A list of views to be concatenated and put into a row.
    bounds : Literal['full', 'flush']
        The bounds calculation method to use for determining the extent of a sub-plot. One
        of ``full`` (the default) or ``flush``.


        * If set to ``full``, the entire calculated bounds (including axes, title, and
          legend) will be used.
        * If set to ``flush``, only the specified width and height values for the sub-view
          will be used. The ``flush`` setting can be useful when attempting to place
          sub-plots without axes or legends into a uniform grid structure.

        **Default value:** ``"full"``
    center : bool
        Boolean flag indicating if subviews should be centered relative to their respective
        rows or columns.

        **Default value:** ``false``
    data : Union[None, Union[:class:`Data`, Union[:class:`DataSource`, Union[:class:`InlineData`, Dict[required=[values]]], Union[:class:`NamedData`, Dict[required=[name]]], Union[:class:`UrlData`, Dict[required=[url]]]], Union[:class:`Generator`, Union[:class:`GraticuleGenerator`, Dict[required=[graticule]]], Union[:class:`SequenceGenerator`, Dict[required=[sequence]]], Union[:class:`SphereGenerator`, Dict[required=[sphere]]]]]]
        An object describing the data source. Set to ``null`` to ignore the parent's data
        source. If no data is set, it is derived from the parent.
    description : str
        Description of this mark for commenting purpose.
    name : str
        Name of the visualization for later reference.
    resolve : Union[:class:`Resolve`, Dict[required=[]]]
        Scale, axis, and legend resolutions for view composition specifications.
    spacing : float
        The spacing in pixels between sub-views of the concat operator.

        **Default value** : ``10``
    title : Union[Union[:class:`Text`, List[str], str], Union[:class:`TitleParams`, Dict[required=[text]]]]
        Title for the plot.
    transform : List[Union[:class:`Transform`, Union[:class:`AggregateTransform`, Dict[required=[aggregate]]], Union[:class:`BinTransform`, Dict[required=[bin, field, as]]], Union[:class:`CalculateTransform`, Dict[required=[calculate, as]]], Union[:class:`DensityTransform`, Dict[required=[density]]], Union[:class:`ExtentTransform`, Dict[required=[extent, param]]], Union[:class:`FilterTransform`, Dict[required=[filter]]], Union[:class:`FlattenTransform`, Dict[required=[flatten]]], Union[:class:`FoldTransform`, Dict[required=[fold]]], Union[:class:`ImputeTransform`, Dict[required=[impute, key]]], Union[:class:`JoinAggregateTransform`, Dict[required=[joinaggregate]]], Union[:class:`LoessTransform`, Dict[required=[loess, on]]], Union[:class:`LookupTransform`, Dict[required=[lookup, from]]], Union[:class:`PivotTransform`, Dict[required=[pivot, value]]], Union[:class:`QuantileTransform`, Dict[required=[quantile]]], Union[:class:`RegressionTransform`, Dict[required=[regression, on]]], Union[:class:`SampleTransform`, Dict[required=[sample]]], Union[:class:`StackTransform`, Dict[required=[stack, groupby, as]]], Union[:class:`TimeUnitTransform`, Dict[required=[timeUnit, field, as]]], Union[:class:`WindowTransform`, Dict[required=[window]]]]]
        An array of data transformations such as filter and new field calculation.
    """

    _schema = {"$ref": "#/definitions/HConcatSpec<GenericSpec>"}

    def __init__(
        self,
        hconcat: Union[
            Union[
                List["Spec"],
                List[Union["ConcatSpecGenericSpec", dict]],
                List[Union["FacetSpec", dict]],
                List[Union["FacetedUnitSpec", dict]],
                List[Union["HConcatSpecGenericSpec", dict]],
                List[Union["LayerSpec", dict]],
                List[
                    Union[
                        "RepeatSpec",
                        Union["LayerRepeatSpec", dict],
                        Union["NonLayerRepeatSpec", dict],
                    ]
                ],
                List[Union["VConcatSpecGenericSpec", dict]],
            ],
            UndefinedType,
        ] = Undefined,
        bounds: Union[Literal["full", "flush"], UndefinedType] = Undefined,
        center: Union[bool, UndefinedType] = Undefined,
        data: Union[
            Union[
                None,
                Union[
                    "Data",
                    Union[
                        "DataSource",
                        Union["InlineData", dict],
                        Union["NamedData", dict],
                        Union["UrlData", dict],
                    ],
                    Union[
                        "Generator",
                        Union["GraticuleGenerator", dict],
                        Union["SequenceGenerator", dict],
                        Union["SphereGenerator", dict],
                    ],
                ],
            ],
            UndefinedType,
        ] = Undefined,
        description: Union[str, UndefinedType] = Undefined,
        name: Union[str, UndefinedType] = Undefined,
        resolve: Union[Union["Resolve", dict], UndefinedType] = Undefined,
        spacing: Union[float, UndefinedType] = Undefined,
        title: Union[
            Union[Union["Text", List[str], str], Union["TitleParams", dict]],
            UndefinedType,
        ] = Undefined,
        transform: Union[
            Union[
                List["Transform"],
                List[Union["AggregateTransform", dict]],
                List[Union["BinTransform", dict]],
                List[Union["CalculateTransform", dict]],
                List[Union["DensityTransform", dict]],
                List[Union["ExtentTransform", dict]],
                List[Union["FilterTransform", dict]],
                List[Union["FlattenTransform", dict]],
                List[Union["FoldTransform", dict]],
                List[Union["ImputeTransform", dict]],
                List[Union["JoinAggregateTransform", dict]],
                List[Union["LoessTransform", dict]],
                List[Union["LookupTransform", dict]],
                List[Union["PivotTransform", dict]],
                List[Union["QuantileTransform", dict]],
                List[Union["RegressionTransform", dict]],
                List[Union["SampleTransform", dict]],
                List[Union["StackTransform", dict]],
                List[Union["TimeUnitTransform", dict]],
                List[Union["WindowTransform", dict]],
            ],
            UndefinedType,
        ] = Undefined,
        **kwds
    ):
        super(HConcatSpecGenericSpec, self).__init__(
            hconcat=hconcat,
            bounds=bounds,
            center=center,
            data=data,
            description=description,
            name=name,
            resolve=resolve,
            spacing=spacing,
            title=title,
            transform=transform,
            **kwds
        )


class LayerSpec(Spec, NonNormalizedSpec):
    """LayerSpec schema wrapper

    Union[:class:`LayerSpec`, Dict[required=[layer]]]
    A full layered plot specification, which may contains ``encoding`` and ``projection``
    properties that will be applied to underlying unit (single-view) specifications.

    Parameters
    ----------

    layer : List[Union[Union[:class:`LayerSpec`, Dict[required=[layer]]], Union[:class:`UnitSpec`, Dict[required=[mark]]]]]
        Layer or single view specifications to be layered.

        **Note** : Specifications inside ``layer`` cannot use ``row`` and ``column``
        channels as layering facet specifications is not allowed. Instead, use the `facet
        operator <https://vega.github.io/vega-lite/docs/facet.html>`__ and place a layer
        inside a facet.
    data : Union[None, Union[:class:`Data`, Union[:class:`DataSource`, Union[:class:`InlineData`, Dict[required=[values]]], Union[:class:`NamedData`, Dict[required=[name]]], Union[:class:`UrlData`, Dict[required=[url]]]], Union[:class:`Generator`, Union[:class:`GraticuleGenerator`, Dict[required=[graticule]]], Union[:class:`SequenceGenerator`, Dict[required=[sequence]]], Union[:class:`SphereGenerator`, Dict[required=[sphere]]]]]]
        An object describing the data source. Set to ``null`` to ignore the parent's data
        source. If no data is set, it is derived from the parent.
    description : str
        Description of this mark for commenting purpose.
    encoding : Union[:class:`SharedEncoding`, Dict[required=[]]]
        A shared key-value mapping between encoding channels and definition of fields in the
        underlying layers.
    height : Union[Union[:class:`Step`, Dict[required=[step]]], float, str]
        The height of a visualization.


        * For a plot with a continuous y-field, height should be a number.
        * For a plot with either a discrete y-field or no y-field, height can be either a
          number indicating a fixed height or an object in the form of ``{step: number}``
          defining the height per discrete step. (No y-field is equivalent to having one
          discrete step.)
        * To enable responsive sizing on height, it should be set to ``"container"``.

        **Default value:** Based on ``config.view.continuousHeight`` for a plot with a
        continuous y-field and ``config.view.discreteHeight`` otherwise.

        **Note:** For plots with `row and column channels
        <https://vega.github.io/vega-lite/docs/encoding.html#facet>`__, this represents the
        height of a single view and the ``"container"`` option cannot be used.

        **See also:** `height <https://vega.github.io/vega-lite/docs/size.html>`__
        documentation.
    name : str
        Name of the visualization for later reference.
    projection : Union[:class:`Projection`, Dict[required=[]]]
        An object defining properties of the geographic projection shared by underlying
        layers.
    resolve : Union[:class:`Resolve`, Dict[required=[]]]
        Scale, axis, and legend resolutions for view composition specifications.
    title : Union[Union[:class:`Text`, List[str], str], Union[:class:`TitleParams`, Dict[required=[text]]]]
        Title for the plot.
    transform : List[Union[:class:`Transform`, Union[:class:`AggregateTransform`, Dict[required=[aggregate]]], Union[:class:`BinTransform`, Dict[required=[bin, field, as]]], Union[:class:`CalculateTransform`, Dict[required=[calculate, as]]], Union[:class:`DensityTransform`, Dict[required=[density]]], Union[:class:`ExtentTransform`, Dict[required=[extent, param]]], Union[:class:`FilterTransform`, Dict[required=[filter]]], Union[:class:`FlattenTransform`, Dict[required=[flatten]]], Union[:class:`FoldTransform`, Dict[required=[fold]]], Union[:class:`ImputeTransform`, Dict[required=[impute, key]]], Union[:class:`JoinAggregateTransform`, Dict[required=[joinaggregate]]], Union[:class:`LoessTransform`, Dict[required=[loess, on]]], Union[:class:`LookupTransform`, Dict[required=[lookup, from]]], Union[:class:`PivotTransform`, Dict[required=[pivot, value]]], Union[:class:`QuantileTransform`, Dict[required=[quantile]]], Union[:class:`RegressionTransform`, Dict[required=[regression, on]]], Union[:class:`SampleTransform`, Dict[required=[sample]]], Union[:class:`StackTransform`, Dict[required=[stack, groupby, as]]], Union[:class:`TimeUnitTransform`, Dict[required=[timeUnit, field, as]]], Union[:class:`WindowTransform`, Dict[required=[window]]]]]
        An array of data transformations such as filter and new field calculation.
    view : Union[:class:`ViewBackground`, Dict[required=[]]]
        An object defining the view background's fill and stroke.

        **Default value:** none (transparent)
    width : Union[Union[:class:`Step`, Dict[required=[step]]], float, str]
        The width of a visualization.


        * For a plot with a continuous x-field, width should be a number.
        * For a plot with either a discrete x-field or no x-field, width can be either a
          number indicating a fixed width or an object in the form of ``{step: number}``
          defining the width per discrete step. (No x-field is equivalent to having one
          discrete step.)
        * To enable responsive sizing on width, it should be set to ``"container"``.

        **Default value:** Based on ``config.view.continuousWidth`` for a plot with a
        continuous x-field and ``config.view.discreteWidth`` otherwise.

        **Note:** For plots with `row and column channels
        <https://vega.github.io/vega-lite/docs/encoding.html#facet>`__, this represents the
        width of a single view and the ``"container"`` option cannot be used.

        **See also:** `width <https://vega.github.io/vega-lite/docs/size.html>`__
        documentation.
    """

    _schema = {"$ref": "#/definitions/LayerSpec"}

    def __init__(
        self,
        layer: Union[
            Union[List[Union["LayerSpec", dict]], List[Union["UnitSpec", dict]]],
            UndefinedType,
        ] = Undefined,
        data: Union[
            Union[
                None,
                Union[
                    "Data",
                    Union[
                        "DataSource",
                        Union["InlineData", dict],
                        Union["NamedData", dict],
                        Union["UrlData", dict],
                    ],
                    Union[
                        "Generator",
                        Union["GraticuleGenerator", dict],
                        Union["SequenceGenerator", dict],
                        Union["SphereGenerator", dict],
                    ],
                ],
            ],
            UndefinedType,
        ] = Undefined,
        description: Union[str, UndefinedType] = Undefined,
        encoding: Union[Union["SharedEncoding", dict], UndefinedType] = Undefined,
        height: Union[
            Union[Union["Step", dict], float, str], UndefinedType
        ] = Undefined,
        name: Union[str, UndefinedType] = Undefined,
        projection: Union[Union["Projection", dict], UndefinedType] = Undefined,
        resolve: Union[Union["Resolve", dict], UndefinedType] = Undefined,
        title: Union[
            Union[Union["Text", List[str], str], Union["TitleParams", dict]],
            UndefinedType,
        ] = Undefined,
        transform: Union[
            Union[
                List["Transform"],
                List[Union["AggregateTransform", dict]],
                List[Union["BinTransform", dict]],
                List[Union["CalculateTransform", dict]],
                List[Union["DensityTransform", dict]],
                List[Union["ExtentTransform", dict]],
                List[Union["FilterTransform", dict]],
                List[Union["FlattenTransform", dict]],
                List[Union["FoldTransform", dict]],
                List[Union["ImputeTransform", dict]],
                List[Union["JoinAggregateTransform", dict]],
                List[Union["LoessTransform", dict]],
                List[Union["LookupTransform", dict]],
                List[Union["PivotTransform", dict]],
                List[Union["QuantileTransform", dict]],
                List[Union["RegressionTransform", dict]],
                List[Union["SampleTransform", dict]],
                List[Union["StackTransform", dict]],
                List[Union["TimeUnitTransform", dict]],
                List[Union["WindowTransform", dict]],
            ],
            UndefinedType,
        ] = Undefined,
        view: Union[Union["ViewBackground", dict], UndefinedType] = Undefined,
        width: Union[Union[Union["Step", dict], float, str], UndefinedType] = Undefined,
        **kwds
    ):
        super(LayerSpec, self).__init__(
            layer=layer,
            data=data,
            description=description,
            encoding=encoding,
            height=height,
            name=name,
            projection=projection,
            resolve=resolve,
            title=title,
            transform=transform,
            view=view,
            width=width,
            **kwds
        )


class RepeatSpec(Spec, NonNormalizedSpec):
    """RepeatSpec schema wrapper

    Union[:class:`RepeatSpec`, Union[:class:`LayerRepeatSpec`, Dict[required=[repeat, spec]]],
    Union[:class:`NonLayerRepeatSpec`, Dict[required=[repeat, spec]]]]
    """

    _schema = {"$ref": "#/definitions/RepeatSpec"}

    def __init__(self, *args, **kwds):
        super(RepeatSpec, self).__init__(*args, **kwds)


class LayerRepeatSpec(RepeatSpec):
    """LayerRepeatSpec schema wrapper

    Union[:class:`LayerRepeatSpec`, Dict[required=[repeat, spec]]]

    Parameters
    ----------

    repeat : Union[:class:`LayerRepeatMapping`, Dict[required=[layer]]]
        Definition for fields to be repeated. One of: 1) An array of fields to be repeated.
        If ``"repeat"`` is an array, the field can be referred to as ``{"repeat":
        "repeat"}``. The repeated views are laid out in a wrapped row. You can set the
        number of columns to control the wrapping. 2) An object that maps ``"row"`` and/or
        ``"column"`` to the listed fields to be repeated along the particular orientations.
        The objects ``{"repeat": "row"}`` and ``{"repeat": "column"}`` can be used to refer
        to the repeated field respectively.
    spec : Union[Union[:class:`LayerSpec`, Dict[required=[layer]]], Union[:class:`UnitSpecWithFrame`, Dict[required=[mark]]]]
        A specification of the view that gets repeated.
    align : Union[Union[:class:`LayoutAlign`, Literal['all', 'each', 'none']], Union[:class:`RowColLayoutAlign`, Dict[required=[]]]]
        The alignment to apply to grid rows and columns. The supported string values are
        ``"all"``, ``"each"``, and ``"none"``.


        * For ``"none"``, a flow layout will be used, in which adjacent subviews are simply
          placed one after the other.
        * For ``"each"``, subviews will be aligned into a clean grid structure, but each row
          or column may be of variable size.
        * For ``"all"``, subviews will be aligned and each row or column will be sized
          identically based on the maximum observed size. String values for this property
          will be applied to both grid rows and columns.

        Alternatively, an object value of the form ``{"row": string, "column": string}`` can
        be used to supply different alignments for rows and columns.

        **Default value:** ``"all"``.
    bounds : Literal['full', 'flush']
        The bounds calculation method to use for determining the extent of a sub-plot. One
        of ``full`` (the default) or ``flush``.


        * If set to ``full``, the entire calculated bounds (including axes, title, and
          legend) will be used.
        * If set to ``flush``, only the specified width and height values for the sub-view
          will be used. The ``flush`` setting can be useful when attempting to place
          sub-plots without axes or legends into a uniform grid structure.

        **Default value:** ``"full"``
    center : Union[Union[:class:`RowColboolean`, Dict[required=[]]], bool]
        Boolean flag indicating if subviews should be centered relative to their respective
        rows or columns.

        An object value of the form ``{"row": boolean, "column": boolean}`` can be used to
        supply different centering values for rows and columns.

        **Default value:** ``false``
    columns : float
        The number of columns to include in the view composition layout.

        **Default value** : ``undefined`` -- An infinite number of columns (a single row)
        will be assumed. This is equivalent to ``hconcat`` (for ``concat`` ) and to using
        the ``column`` channel (for ``facet`` and ``repeat`` ).

        **Note** :

        1) This property is only for:


        * the general (wrappable) ``concat`` operator (not ``hconcat`` / ``vconcat`` )
        * the ``facet`` and ``repeat`` operator with one field/repetition definition
          (without row/column nesting)

        2) Setting the ``columns`` to ``1`` is equivalent to ``vconcat`` (for ``concat`` )
        and to using the ``row`` channel (for ``facet`` and ``repeat`` ).
    data : Union[None, Union[:class:`Data`, Union[:class:`DataSource`, Union[:class:`InlineData`, Dict[required=[values]]], Union[:class:`NamedData`, Dict[required=[name]]], Union[:class:`UrlData`, Dict[required=[url]]]], Union[:class:`Generator`, Union[:class:`GraticuleGenerator`, Dict[required=[graticule]]], Union[:class:`SequenceGenerator`, Dict[required=[sequence]]], Union[:class:`SphereGenerator`, Dict[required=[sphere]]]]]]
        An object describing the data source. Set to ``null`` to ignore the parent's data
        source. If no data is set, it is derived from the parent.
    description : str
        Description of this mark for commenting purpose.
    name : str
        Name of the visualization for later reference.
    resolve : Union[:class:`Resolve`, Dict[required=[]]]
        Scale, axis, and legend resolutions for view composition specifications.
    spacing : Union[Union[:class:`RowColnumber`, Dict[required=[]]], float]
        The spacing in pixels between sub-views of the composition operator. An object of
        the form ``{"row": number, "column": number}`` can be used to set different spacing
        values for rows and columns.

        **Default value** : Depends on ``"spacing"`` property of `the view composition
        configuration <https://vega.github.io/vega-lite/docs/config.html#view-config>`__ (
        ``20`` by default)
    title : Union[Union[:class:`Text`, List[str], str], Union[:class:`TitleParams`, Dict[required=[text]]]]
        Title for the plot.
    transform : List[Union[:class:`Transform`, Union[:class:`AggregateTransform`, Dict[required=[aggregate]]], Union[:class:`BinTransform`, Dict[required=[bin, field, as]]], Union[:class:`CalculateTransform`, Dict[required=[calculate, as]]], Union[:class:`DensityTransform`, Dict[required=[density]]], Union[:class:`ExtentTransform`, Dict[required=[extent, param]]], Union[:class:`FilterTransform`, Dict[required=[filter]]], Union[:class:`FlattenTransform`, Dict[required=[flatten]]], Union[:class:`FoldTransform`, Dict[required=[fold]]], Union[:class:`ImputeTransform`, Dict[required=[impute, key]]], Union[:class:`JoinAggregateTransform`, Dict[required=[joinaggregate]]], Union[:class:`LoessTransform`, Dict[required=[loess, on]]], Union[:class:`LookupTransform`, Dict[required=[lookup, from]]], Union[:class:`PivotTransform`, Dict[required=[pivot, value]]], Union[:class:`QuantileTransform`, Dict[required=[quantile]]], Union[:class:`RegressionTransform`, Dict[required=[regression, on]]], Union[:class:`SampleTransform`, Dict[required=[sample]]], Union[:class:`StackTransform`, Dict[required=[stack, groupby, as]]], Union[:class:`TimeUnitTransform`, Dict[required=[timeUnit, field, as]]], Union[:class:`WindowTransform`, Dict[required=[window]]]]]
        An array of data transformations such as filter and new field calculation.
    """

    _schema = {"$ref": "#/definitions/LayerRepeatSpec"}

    def __init__(
        self,
        repeat: Union[Union["LayerRepeatMapping", dict], UndefinedType] = Undefined,
        spec: Union[
            Union[Union["LayerSpec", dict], Union["UnitSpecWithFrame", dict]],
            UndefinedType,
        ] = Undefined,
        align: Union[
            Union[
                Union["LayoutAlign", Literal["all", "each", "none"]],
                Union["RowColLayoutAlign", dict],
            ],
            UndefinedType,
        ] = Undefined,
        bounds: Union[Literal["full", "flush"], UndefinedType] = Undefined,
        center: Union[
            Union[Union["RowColboolean", dict], bool], UndefinedType
        ] = Undefined,
        columns: Union[float, UndefinedType] = Undefined,
        data: Union[
            Union[
                None,
                Union[
                    "Data",
                    Union[
                        "DataSource",
                        Union["InlineData", dict],
                        Union["NamedData", dict],
                        Union["UrlData", dict],
                    ],
                    Union[
                        "Generator",
                        Union["GraticuleGenerator", dict],
                        Union["SequenceGenerator", dict],
                        Union["SphereGenerator", dict],
                    ],
                ],
            ],
            UndefinedType,
        ] = Undefined,
        description: Union[str, UndefinedType] = Undefined,
        name: Union[str, UndefinedType] = Undefined,
        resolve: Union[Union["Resolve", dict], UndefinedType] = Undefined,
        spacing: Union[
            Union[Union["RowColnumber", dict], float], UndefinedType
        ] = Undefined,
        title: Union[
            Union[Union["Text", List[str], str], Union["TitleParams", dict]],
            UndefinedType,
        ] = Undefined,
        transform: Union[
            Union[
                List["Transform"],
                List[Union["AggregateTransform", dict]],
                List[Union["BinTransform", dict]],
                List[Union["CalculateTransform", dict]],
                List[Union["DensityTransform", dict]],
                List[Union["ExtentTransform", dict]],
                List[Union["FilterTransform", dict]],
                List[Union["FlattenTransform", dict]],
                List[Union["FoldTransform", dict]],
                List[Union["ImputeTransform", dict]],
                List[Union["JoinAggregateTransform", dict]],
                List[Union["LoessTransform", dict]],
                List[Union["LookupTransform", dict]],
                List[Union["PivotTransform", dict]],
                List[Union["QuantileTransform", dict]],
                List[Union["RegressionTransform", dict]],
                List[Union["SampleTransform", dict]],
                List[Union["StackTransform", dict]],
                List[Union["TimeUnitTransform", dict]],
                List[Union["WindowTransform", dict]],
            ],
            UndefinedType,
        ] = Undefined,
        **kwds
    ):
        super(LayerRepeatSpec, self).__init__(
            repeat=repeat,
            spec=spec,
            align=align,
            bounds=bounds,
            center=center,
            columns=columns,
            data=data,
            description=description,
            name=name,
            resolve=resolve,
            spacing=spacing,
            title=title,
            transform=transform,
            **kwds
        )


class NonLayerRepeatSpec(RepeatSpec):
    """NonLayerRepeatSpec schema wrapper

    Union[:class:`NonLayerRepeatSpec`, Dict[required=[repeat, spec]]]
    Base interface for a repeat specification.

    Parameters
    ----------

    repeat : Union[List[str], Union[:class:`RepeatMapping`, Dict[required=[]]]]
        Definition for fields to be repeated. One of: 1) An array of fields to be repeated.
        If ``"repeat"`` is an array, the field can be referred to as ``{"repeat":
        "repeat"}``. The repeated views are laid out in a wrapped row. You can set the
        number of columns to control the wrapping. 2) An object that maps ``"row"`` and/or
        ``"column"`` to the listed fields to be repeated along the particular orientations.
        The objects ``{"repeat": "row"}`` and ``{"repeat": "column"}`` can be used to refer
        to the repeated field respectively.
    spec : Union[:class:`NonNormalizedSpec`, Union[:class:`ConcatSpecGenericSpec`, Dict[required=[concat]]], Union[:class:`FacetSpec`, Dict[required=[facet, spec]]], Union[:class:`FacetedUnitSpec`, Dict[required=[mark]]], Union[:class:`HConcatSpecGenericSpec`, Dict[required=[hconcat]]], Union[:class:`LayerSpec`, Dict[required=[layer]]], Union[:class:`RepeatSpec`, Union[:class:`LayerRepeatSpec`, Dict[required=[repeat, spec]]], Union[:class:`NonLayerRepeatSpec`, Dict[required=[repeat, spec]]]], Union[:class:`VConcatSpecGenericSpec`, Dict[required=[vconcat]]]]
        A specification of the view that gets repeated.
    align : Union[Union[:class:`LayoutAlign`, Literal['all', 'each', 'none']], Union[:class:`RowColLayoutAlign`, Dict[required=[]]]]
        The alignment to apply to grid rows and columns. The supported string values are
        ``"all"``, ``"each"``, and ``"none"``.


        * For ``"none"``, a flow layout will be used, in which adjacent subviews are simply
          placed one after the other.
        * For ``"each"``, subviews will be aligned into a clean grid structure, but each row
          or column may be of variable size.
        * For ``"all"``, subviews will be aligned and each row or column will be sized
          identically based on the maximum observed size. String values for this property
          will be applied to both grid rows and columns.

        Alternatively, an object value of the form ``{"row": string, "column": string}`` can
        be used to supply different alignments for rows and columns.

        **Default value:** ``"all"``.
    bounds : Literal['full', 'flush']
        The bounds calculation method to use for determining the extent of a sub-plot. One
        of ``full`` (the default) or ``flush``.


        * If set to ``full``, the entire calculated bounds (including axes, title, and
          legend) will be used.
        * If set to ``flush``, only the specified width and height values for the sub-view
          will be used. The ``flush`` setting can be useful when attempting to place
          sub-plots without axes or legends into a uniform grid structure.

        **Default value:** ``"full"``
    center : Union[Union[:class:`RowColboolean`, Dict[required=[]]], bool]
        Boolean flag indicating if subviews should be centered relative to their respective
        rows or columns.

        An object value of the form ``{"row": boolean, "column": boolean}`` can be used to
        supply different centering values for rows and columns.

        **Default value:** ``false``
    columns : float
        The number of columns to include in the view composition layout.

        **Default value** : ``undefined`` -- An infinite number of columns (a single row)
        will be assumed. This is equivalent to ``hconcat`` (for ``concat`` ) and to using
        the ``column`` channel (for ``facet`` and ``repeat`` ).

        **Note** :

        1) This property is only for:


        * the general (wrappable) ``concat`` operator (not ``hconcat`` / ``vconcat`` )
        * the ``facet`` and ``repeat`` operator with one field/repetition definition
          (without row/column nesting)

        2) Setting the ``columns`` to ``1`` is equivalent to ``vconcat`` (for ``concat`` )
        and to using the ``row`` channel (for ``facet`` and ``repeat`` ).
    data : Union[None, Union[:class:`Data`, Union[:class:`DataSource`, Union[:class:`InlineData`, Dict[required=[values]]], Union[:class:`NamedData`, Dict[required=[name]]], Union[:class:`UrlData`, Dict[required=[url]]]], Union[:class:`Generator`, Union[:class:`GraticuleGenerator`, Dict[required=[graticule]]], Union[:class:`SequenceGenerator`, Dict[required=[sequence]]], Union[:class:`SphereGenerator`, Dict[required=[sphere]]]]]]
        An object describing the data source. Set to ``null`` to ignore the parent's data
        source. If no data is set, it is derived from the parent.
    description : str
        Description of this mark for commenting purpose.
    name : str
        Name of the visualization for later reference.
    resolve : Union[:class:`Resolve`, Dict[required=[]]]
        Scale, axis, and legend resolutions for view composition specifications.
    spacing : Union[Union[:class:`RowColnumber`, Dict[required=[]]], float]
        The spacing in pixels between sub-views of the composition operator. An object of
        the form ``{"row": number, "column": number}`` can be used to set different spacing
        values for rows and columns.

        **Default value** : Depends on ``"spacing"`` property of `the view composition
        configuration <https://vega.github.io/vega-lite/docs/config.html#view-config>`__ (
        ``20`` by default)
    title : Union[Union[:class:`Text`, List[str], str], Union[:class:`TitleParams`, Dict[required=[text]]]]
        Title for the plot.
    transform : List[Union[:class:`Transform`, Union[:class:`AggregateTransform`, Dict[required=[aggregate]]], Union[:class:`BinTransform`, Dict[required=[bin, field, as]]], Union[:class:`CalculateTransform`, Dict[required=[calculate, as]]], Union[:class:`DensityTransform`, Dict[required=[density]]], Union[:class:`ExtentTransform`, Dict[required=[extent, param]]], Union[:class:`FilterTransform`, Dict[required=[filter]]], Union[:class:`FlattenTransform`, Dict[required=[flatten]]], Union[:class:`FoldTransform`, Dict[required=[fold]]], Union[:class:`ImputeTransform`, Dict[required=[impute, key]]], Union[:class:`JoinAggregateTransform`, Dict[required=[joinaggregate]]], Union[:class:`LoessTransform`, Dict[required=[loess, on]]], Union[:class:`LookupTransform`, Dict[required=[lookup, from]]], Union[:class:`PivotTransform`, Dict[required=[pivot, value]]], Union[:class:`QuantileTransform`, Dict[required=[quantile]]], Union[:class:`RegressionTransform`, Dict[required=[regression, on]]], Union[:class:`SampleTransform`, Dict[required=[sample]]], Union[:class:`StackTransform`, Dict[required=[stack, groupby, as]]], Union[:class:`TimeUnitTransform`, Dict[required=[timeUnit, field, as]]], Union[:class:`WindowTransform`, Dict[required=[window]]]]]
        An array of data transformations such as filter and new field calculation.
    """

    _schema = {"$ref": "#/definitions/NonLayerRepeatSpec"}

    def __init__(
        self,
        repeat: Union[
            Union[List[str], Union["RepeatMapping", dict]], UndefinedType
        ] = Undefined,
        spec: Union[
            Union[
                "NonNormalizedSpec",
                Union["ConcatSpecGenericSpec", dict],
                Union["FacetSpec", dict],
                Union["FacetedUnitSpec", dict],
                Union["HConcatSpecGenericSpec", dict],
                Union["LayerSpec", dict],
                Union[
                    "RepeatSpec",
                    Union["LayerRepeatSpec", dict],
                    Union["NonLayerRepeatSpec", dict],
                ],
                Union["VConcatSpecGenericSpec", dict],
            ],
            UndefinedType,
        ] = Undefined,
        align: Union[
            Union[
                Union["LayoutAlign", Literal["all", "each", "none"]],
                Union["RowColLayoutAlign", dict],
            ],
            UndefinedType,
        ] = Undefined,
        bounds: Union[Literal["full", "flush"], UndefinedType] = Undefined,
        center: Union[
            Union[Union["RowColboolean", dict], bool], UndefinedType
        ] = Undefined,
        columns: Union[float, UndefinedType] = Undefined,
        data: Union[
            Union[
                None,
                Union[
                    "Data",
                    Union[
                        "DataSource",
                        Union["InlineData", dict],
                        Union["NamedData", dict],
                        Union["UrlData", dict],
                    ],
                    Union[
                        "Generator",
                        Union["GraticuleGenerator", dict],
                        Union["SequenceGenerator", dict],
                        Union["SphereGenerator", dict],
                    ],
                ],
            ],
            UndefinedType,
        ] = Undefined,
        description: Union[str, UndefinedType] = Undefined,
        name: Union[str, UndefinedType] = Undefined,
        resolve: Union[Union["Resolve", dict], UndefinedType] = Undefined,
        spacing: Union[
            Union[Union["RowColnumber", dict], float], UndefinedType
        ] = Undefined,
        title: Union[
            Union[Union["Text", List[str], str], Union["TitleParams", dict]],
            UndefinedType,
        ] = Undefined,
        transform: Union[
            Union[
                List["Transform"],
                List[Union["AggregateTransform", dict]],
                List[Union["BinTransform", dict]],
                List[Union["CalculateTransform", dict]],
                List[Union["DensityTransform", dict]],
                List[Union["ExtentTransform", dict]],
                List[Union["FilterTransform", dict]],
                List[Union["FlattenTransform", dict]],
                List[Union["FoldTransform", dict]],
                List[Union["ImputeTransform", dict]],
                List[Union["JoinAggregateTransform", dict]],
                List[Union["LoessTransform", dict]],
                List[Union["LookupTransform", dict]],
                List[Union["PivotTransform", dict]],
                List[Union["QuantileTransform", dict]],
                List[Union["RegressionTransform", dict]],
                List[Union["SampleTransform", dict]],
                List[Union["StackTransform", dict]],
                List[Union["TimeUnitTransform", dict]],
                List[Union["WindowTransform", dict]],
            ],
            UndefinedType,
        ] = Undefined,
        **kwds
    ):
        super(NonLayerRepeatSpec, self).__init__(
            repeat=repeat,
            spec=spec,
            align=align,
            bounds=bounds,
            center=center,
            columns=columns,
            data=data,
            description=description,
            name=name,
            resolve=resolve,
            spacing=spacing,
            title=title,
            transform=transform,
            **kwds
        )


class SphereGenerator(Generator):
    """SphereGenerator schema wrapper

    Union[:class:`SphereGenerator`, Dict[required=[sphere]]]

    Parameters
    ----------

    sphere : Union[Dict[required=[]], bool]
        Generate sphere GeoJSON data for the full globe.
    name : str
        Provide a placeholder name and bind data at runtime.
    """

    _schema = {"$ref": "#/definitions/SphereGenerator"}

    def __init__(
        self,
        sphere: Union[Union[bool, dict], UndefinedType] = Undefined,
        name: Union[str, UndefinedType] = Undefined,
        **kwds
    ):
        super(SphereGenerator, self).__init__(sphere=sphere, name=name, **kwds)


class StackOffset(VegaLiteSchema):
    """StackOffset schema wrapper

    Union[:class:`StackOffset`, Literal['zero', 'center', 'normalize']]
    """

    _schema = {"$ref": "#/definitions/StackOffset"}

    def __init__(self, *args):
        super(StackOffset, self).__init__(*args)


class StandardType(VegaLiteSchema):
    """StandardType schema wrapper

    Union[:class:`StandardType`, Literal['quantitative', 'ordinal', 'temporal', 'nominal']]
    """

    _schema = {"$ref": "#/definitions/StandardType"}

    def __init__(self, *args):
        super(StandardType, self).__init__(*args)


class Step(VegaLiteSchema):
    """Step schema wrapper

    Union[:class:`Step`, Dict[required=[step]]]

    Parameters
    ----------

    step : float
        The size (width/height) per discrete step.
    for : Union[:class:`StepFor`, Literal['position', 'offset']]
        Whether to apply the step to position scale or offset scale when there are both
        ``x`` and ``xOffset`` or both ``y`` and ``yOffset`` encodings.
    """

    _schema = {"$ref": "#/definitions/Step"}

    def __init__(self, step: Union[float, UndefinedType] = Undefined, **kwds):
        super(Step, self).__init__(step=step, **kwds)


class StepFor(VegaLiteSchema):
    """StepFor schema wrapper

    Union[:class:`StepFor`, Literal['position', 'offset']]
    """

    _schema = {"$ref": "#/definitions/StepFor"}

    def __init__(self, *args):
        super(StepFor, self).__init__(*args)


class Stream(VegaLiteSchema):
    """Stream schema wrapper

    Union[:class:`Stream`, Union[:class:`DerivedStream`, Dict[required=[stream]]],
    Union[:class:`EventStream`, Dict[required=[source, type]], Dict[required=[type]]],
    Union[:class:`MergedStream`, Dict[required=[merge]]]]
    """

    _schema = {"$ref": "#/definitions/Stream"}

    def __init__(self, *args, **kwds):
        super(Stream, self).__init__(*args, **kwds)


class DerivedStream(Stream):
    """DerivedStream schema wrapper

    Union[:class:`DerivedStream`, Dict[required=[stream]]]

    Parameters
    ----------

    stream : Union[:class:`Stream`, Union[:class:`DerivedStream`, Dict[required=[stream]]], Union[:class:`EventStream`, Dict[required=[source, type]], Dict[required=[type]]], Union[:class:`MergedStream`, Dict[required=[merge]]]]

    between : List[Union[:class:`Stream`, Union[:class:`DerivedStream`, Dict[required=[stream]]], Union[:class:`EventStream`, Dict[required=[source, type]], Dict[required=[type]]], Union[:class:`MergedStream`, Dict[required=[merge]]]]]

    consume : bool

    debounce : float

    filter : Union[List[Union[:class:`Expr`, str]], Union[:class:`Expr`, str]]

    markname : str

    marktype : Union[:class:`MarkType`, Literal['arc', 'area', 'image', 'group', 'line', 'path', 'rect', 'rule', 'shape', 'symbol', 'text', 'trail']]

    throttle : float

    """

    _schema = {"$ref": "#/definitions/DerivedStream"}

    def __init__(
        self,
        stream: Union[
            Union[
                "Stream",
                Union["DerivedStream", dict],
                Union["EventStream", dict],
                Union["MergedStream", dict],
            ],
            UndefinedType,
        ] = Undefined,
        between: Union[
            Union[
                List["Stream"],
                List[Union["DerivedStream", dict]],
                List[Union["EventStream", dict]],
                List[Union["MergedStream", dict]],
            ],
            UndefinedType,
        ] = Undefined,
        consume: Union[bool, UndefinedType] = Undefined,
        debounce: Union[float, UndefinedType] = Undefined,
        filter: Union[
            Union[Union["Expr", str], Union[List["Expr"], List[str]]], UndefinedType
        ] = Undefined,
        markname: Union[str, UndefinedType] = Undefined,
        marktype: Union[
            Union[
                "MarkType",
                Literal[
                    "arc",
                    "area",
                    "image",
                    "group",
                    "line",
                    "path",
                    "rect",
                    "rule",
                    "shape",
                    "symbol",
                    "text",
                    "trail",
                ],
            ],
            UndefinedType,
        ] = Undefined,
        throttle: Union[float, UndefinedType] = Undefined,
        **kwds
    ):
        super(DerivedStream, self).__init__(
            stream=stream,
            between=between,
            consume=consume,
            debounce=debounce,
            filter=filter,
            markname=markname,
            marktype=marktype,
            throttle=throttle,
            **kwds
        )


class EventStream(Stream):
    """EventStream schema wrapper

    Union[:class:`EventStream`, Dict[required=[source, type]], Dict[required=[type]]]
    """

    _schema = {"$ref": "#/definitions/EventStream"}

    def __init__(self, *args, **kwds):
        super(EventStream, self).__init__(*args, **kwds)


class MergedStream(Stream):
    """MergedStream schema wrapper

    Union[:class:`MergedStream`, Dict[required=[merge]]]

    Parameters
    ----------

    merge : List[Union[:class:`Stream`, Union[:class:`DerivedStream`, Dict[required=[stream]]], Union[:class:`EventStream`, Dict[required=[source, type]], Dict[required=[type]]], Union[:class:`MergedStream`, Dict[required=[merge]]]]]

    between : List[Union[:class:`Stream`, Union[:class:`DerivedStream`, Dict[required=[stream]]], Union[:class:`EventStream`, Dict[required=[source, type]], Dict[required=[type]]], Union[:class:`MergedStream`, Dict[required=[merge]]]]]

    consume : bool

    debounce : float

    filter : Union[List[Union[:class:`Expr`, str]], Union[:class:`Expr`, str]]

    markname : str

    marktype : Union[:class:`MarkType`, Literal['arc', 'area', 'image', 'group', 'line', 'path', 'rect', 'rule', 'shape', 'symbol', 'text', 'trail']]

    throttle : float

    """

    _schema = {"$ref": "#/definitions/MergedStream"}

    def __init__(
        self,
        merge: Union[
            Union[
                List["Stream"],
                List[Union["DerivedStream", dict]],
                List[Union["EventStream", dict]],
                List[Union["MergedStream", dict]],
            ],
            UndefinedType,
        ] = Undefined,
        between: Union[
            Union[
                List["Stream"],
                List[Union["DerivedStream", dict]],
                List[Union["EventStream", dict]],
                List[Union["MergedStream", dict]],
            ],
            UndefinedType,
        ] = Undefined,
        consume: Union[bool, UndefinedType] = Undefined,
        debounce: Union[float, UndefinedType] = Undefined,
        filter: Union[
            Union[Union["Expr", str], Union[List["Expr"], List[str]]], UndefinedType
        ] = Undefined,
        markname: Union[str, UndefinedType] = Undefined,
        marktype: Union[
            Union[
                "MarkType",
                Literal[
                    "arc",
                    "area",
                    "image",
                    "group",
                    "line",
                    "path",
                    "rect",
                    "rule",
                    "shape",
                    "symbol",
                    "text",
                    "trail",
                ],
            ],
            UndefinedType,
        ] = Undefined,
        throttle: Union[float, UndefinedType] = Undefined,
        **kwds
    ):
        super(MergedStream, self).__init__(
            merge=merge,
            between=between,
            consume=consume,
            debounce=debounce,
            filter=filter,
            markname=markname,
            marktype=marktype,
            throttle=throttle,
            **kwds
        )


class StringFieldDef(VegaLiteSchema):
    """StringFieldDef schema wrapper

    Union[:class:`StringFieldDef`, Dict[required=[]]]

    Parameters
    ----------

    aggregate : Union[:class:`Aggregate`, Union[:class:`ArgmaxDef`, Dict[required=[argmax]]], Union[:class:`ArgminDef`, Dict[required=[argmin]]], Union[:class:`NonArgAggregateOp`, Literal['average', 'count', 'distinct', 'max', 'mean', 'median', 'min', 'missing', 'product', 'q1', 'q3', 'ci0', 'ci1', 'stderr', 'stdev', 'stdevp', 'sum', 'valid', 'values', 'variance', 'variancep']]]
        Aggregation function for the field (e.g., ``"mean"``, ``"sum"``, ``"median"``,
        ``"min"``, ``"max"``, ``"count"`` ).

        **Default value:** ``undefined`` (None)

        **See also:** `aggregate <https://vega.github.io/vega-lite/docs/aggregate.html>`__
        documentation.
    bandPosition : float
        Relative position on a band of a stacked, binned, time unit, or band scale. For
        example, the marks will be positioned at the beginning of the band if set to ``0``,
        and at the middle of the band if set to ``0.5``.
    bin : Union[None, Union[:class:`BinParams`, Dict[required=[]]], bool, str]
        A flag for binning a ``quantitative`` field, `an object defining binning parameters
        <https://vega.github.io/vega-lite/docs/bin.html#bin-parameters>`__, or indicating
        that the data for ``x`` or ``y`` channel are binned before they are imported into
        Vega-Lite ( ``"binned"`` ).


        If ``true``, default `binning parameters
        <https://vega.github.io/vega-lite/docs/bin.html#bin-parameters>`__ will be applied.

        If ``"binned"``, this indicates that the data for the ``x`` (or ``y`` ) channel are
        already binned. You can map the bin-start field to ``x`` (or ``y`` ) and the bin-end
        field to ``x2`` (or ``y2`` ). The scale and axis will be formatted similar to
        binning in Vega-Lite.  To adjust the axis ticks based on the bin step, you can also
        set the axis's `tickMinStep
        <https://vega.github.io/vega-lite/docs/axis.html#ticks>`__ property.

        **Default value:** ``false``

        **See also:** `bin <https://vega.github.io/vega-lite/docs/bin.html>`__
        documentation.
    field : Union[:class:`Field`, Union[:class:`FieldName`, str], Union[:class:`RepeatRef`, Dict[required=[repeat]]]]
        **Required.** A string defining the name of the field from which to pull a data
        value or an object defining iterated values from the `repeat
        <https://vega.github.io/vega-lite/docs/repeat.html>`__ operator.

        **See also:** `field <https://vega.github.io/vega-lite/docs/field.html>`__
        documentation.

        **Notes:** 1)  Dots ( ``.`` ) and brackets ( ``[`` and ``]`` ) can be used to access
        nested objects (e.g., ``"field": "foo.bar"`` and ``"field": "foo['bar']"`` ). If
        field names contain dots or brackets but are not nested, you can use ``\\`` to
        escape dots and brackets (e.g., ``"a\\.b"`` and ``"a\\[0\\]"`` ). See more details
        about escaping in the `field documentation
        <https://vega.github.io/vega-lite/docs/field.html>`__. 2) ``field`` is not required
        if ``aggregate`` is ``count``.
    format : Union[Union[:class:`Dict`, Dict[required=[]]], str]
        When used with the default ``"number"`` and ``"time"`` format type, the text
        formatting pattern for labels of guides (axes, legends, headers) and text marks.


        * If the format type is ``"number"`` (e.g., for quantitative fields), this is D3's
          `number format pattern <https://github.com/d3/d3-format#locale_format>`__.
        * If the format type is ``"time"`` (e.g., for temporal fields), this is D3's `time
          format pattern <https://github.com/d3/d3-time-format#locale_format>`__.

        See the `format documentation <https://vega.github.io/vega-lite/docs/format.html>`__
        for more examples.

        When used with a `custom formatType
        <https://vega.github.io/vega-lite/docs/config.html#custom-format-type>`__, this
        value will be passed as ``format`` alongside ``datum.value`` to the registered
        function.

        **Default value:**  Derived from `numberFormat
        <https://vega.github.io/vega-lite/docs/config.html#format>`__ config for number
        format and from `timeFormat
        <https://vega.github.io/vega-lite/docs/config.html#format>`__ config for time
        format.
    formatType : str
        The format type for labels. One of ``"number"``, ``"time"``, or a `registered custom
        format type
        <https://vega.github.io/vega-lite/docs/config.html#custom-format-type>`__.

        **Default value:**


        * ``"time"`` for temporal fields and ordinal and nominal fields with ``timeUnit``.
        * ``"number"`` for quantitative fields as well as ordinal and nominal fields without
          ``timeUnit``.
    timeUnit : Union[Union[:class:`BinnedTimeUnit`, Literal['binnedutcyear', 'binnedutcyearquarter', 'binnedutcyearquartermonth', 'binnedutcyearmonth', 'binnedutcyearmonthdate', 'binnedutcyearmonthdatehours', 'binnedutcyearmonthdatehoursminutes', 'binnedutcyearmonthdatehoursminutesseconds', 'binnedutcyearweek', 'binnedutcyearweekday', 'binnedutcyearweekdayhours', 'binnedutcyearweekdayhoursminutes', 'binnedutcyearweekdayhoursminutesseconds', 'binnedutcyeardayofyear'], Literal['binnedyear', 'binnedyearquarter', 'binnedyearquartermonth', 'binnedyearmonth', 'binnedyearmonthdate', 'binnedyearmonthdatehours', 'binnedyearmonthdatehoursminutes', 'binnedyearmonthdatehoursminutesseconds', 'binnedyearweek', 'binnedyearweekday', 'binnedyearweekdayhours', 'binnedyearweekdayhoursminutes', 'binnedyearweekdayhoursminutesseconds', 'binnedyeardayofyear']], Union[:class:`TimeUnitParams`, Dict[required=[]]], Union[:class:`TimeUnit`, Union[:class:`MultiTimeUnit`, Union[:class:`LocalMultiTimeUnit`, Literal['yearquarter', 'yearquartermonth', 'yearmonth', 'yearmonthdate', 'yearmonthdatehours', 'yearmonthdatehoursminutes', 'yearmonthdatehoursminutesseconds', 'yearweek', 'yearweekday', 'yearweekdayhours', 'yearweekdayhoursminutes', 'yearweekdayhoursminutesseconds', 'yeardayofyear', 'quartermonth', 'monthdate', 'monthdatehours', 'monthdatehoursminutes', 'monthdatehoursminutesseconds', 'weekday', 'weeksdayhours', 'weekdayhoursminutes', 'weekdayhoursminutesseconds', 'dayhours', 'dayhoursminutes', 'dayhoursminutesseconds', 'hoursminutes', 'hoursminutesseconds', 'minutesseconds', 'secondsmilliseconds']], Union[:class:`UtcMultiTimeUnit`, Literal['utcyearquarter', 'utcyearquartermonth', 'utcyearmonth', 'utcyearmonthdate', 'utcyearmonthdatehours', 'utcyearmonthdatehoursminutes', 'utcyearmonthdatehoursminutesseconds', 'utcyearweek', 'utcyearweekday', 'utcyearweekdayhours', 'utcyearweekdayhoursminutes', 'utcyearweekdayhoursminutesseconds', 'utcyeardayofyear', 'utcquartermonth', 'utcmonthdate', 'utcmonthdatehours', 'utcmonthdatehoursminutes', 'utcmonthdatehoursminutesseconds', 'utcweekday', 'utcweeksdayhours', 'utcweekdayhoursminutes', 'utcweekdayhoursminutesseconds', 'utcdayhours', 'utcdayhoursminutes', 'utcdayhoursminutesseconds', 'utchoursminutes', 'utchoursminutesseconds', 'utcminutesseconds', 'utcsecondsmilliseconds']]], Union[:class:`SingleTimeUnit`, Union[:class:`LocalSingleTimeUnit`, Literal['year', 'quarter', 'month', 'week', 'day', 'dayofyear', 'date', 'hours', 'minutes', 'seconds', 'milliseconds']], Union[:class:`UtcSingleTimeUnit`, Literal['utcyear', 'utcquarter', 'utcmonth', 'utcweek', 'utcday', 'utcdayofyear', 'utcdate', 'utchours', 'utcminutes', 'utcseconds', 'utcmilliseconds']]]]]
        Time unit (e.g., ``year``, ``yearmonth``, ``month``, ``hours`` ) for a temporal
        field. or `a temporal field that gets casted as ordinal
        <https://vega.github.io/vega-lite/docs/type.html#cast>`__.

        **Default value:** ``undefined`` (None)

        **See also:** `timeUnit <https://vega.github.io/vega-lite/docs/timeunit.html>`__
        documentation.
    title : Union[None, Union[:class:`Text`, List[str], str]]
        A title for the field. If ``null``, the title will be removed.

        **Default value:**  derived from the field's name and transformation function (
        ``aggregate``, ``bin`` and ``timeUnit`` ). If the field has an aggregate function,
        the function is displayed as part of the title (e.g., ``"Sum of Profit"`` ). If the
        field is binned or has a time unit applied, the applied function is shown in
        parentheses (e.g., ``"Profit (binned)"``, ``"Transaction Date (year-month)"`` ).
        Otherwise, the title is simply the field name.

        **Notes** :

        1) You can customize the default field title format by providing the `fieldTitle
        <https://vega.github.io/vega-lite/docs/config.html#top-level-config>`__ property in
        the `config <https://vega.github.io/vega-lite/docs/config.html>`__ or `fieldTitle
        function via the compile function's options
        <https://vega.github.io/vega-lite/usage/compile.html#field-title>`__.

        2) If both field definition's ``title`` and axis, header, or legend ``title`` are
        defined, axis/header/legend title will be used.
    type : Union[:class:`StandardType`, Literal['quantitative', 'ordinal', 'temporal', 'nominal']]
        The type of measurement ( ``"quantitative"``, ``"temporal"``, ``"ordinal"``, or
        ``"nominal"`` ) for the encoded field or constant value ( ``datum`` ). It can also
        be a ``"geojson"`` type for encoding `'geoshape'
        <https://vega.github.io/vega-lite/docs/geoshape.html>`__.

        Vega-Lite automatically infers data types in many cases as discussed below. However,
        type is required for a field if: (1) the field is not nominal and the field encoding
        has no specified ``aggregate`` (except ``argmin`` and ``argmax`` ), ``bin``, scale
        type, custom ``sort`` order, nor ``timeUnit`` or (2) if you wish to use an ordinal
        scale for a field with ``bin`` or ``timeUnit``.

        **Default value:**

        1) For a data ``field``, ``"nominal"`` is the default data type unless the field
        encoding has ``aggregate``, ``channel``, ``bin``, scale type, ``sort``, or
        ``timeUnit`` that satisfies the following criteria:


        * ``"quantitative"`` is the default type if (1) the encoded field contains ``bin``
          or ``aggregate`` except ``"argmin"`` and ``"argmax"``, (2) the encoding channel is
          ``latitude`` or ``longitude`` channel or (3) if the specified scale type is `a
          quantitative scale <https://vega.github.io/vega-lite/docs/scale.html#type>`__.
        * ``"temporal"`` is the default type if (1) the encoded field contains ``timeUnit``
          or (2) the specified scale type is a time or utc scale
        * ``"ordinal"`` is the default type if (1) the encoded field contains a `custom sort
          order
          <https://vega.github.io/vega-lite/docs/sort.html#specifying-custom-sort-order>`__,
          (2) the specified scale type is an ordinal/point/band scale, or (3) the encoding
          channel is ``order``.

        2) For a constant value in data domain ( ``datum`` ):


        * ``"quantitative"`` if the datum is a number
        * ``"nominal"`` if the datum is a string
        * ``"temporal"`` if the datum is `a date time object
          <https://vega.github.io/vega-lite/docs/datetime.html>`__

        **Note:**


        * Data ``type`` describes the semantics of the data rather than the primitive data
          types (number, string, etc.). The same primitive data type can have different
          types of measurement. For example, numeric data can represent quantitative,
          ordinal, or nominal data.
        * Data values for a temporal field can be either a date-time string (e.g.,
          ``"2015-03-07 12:32:17"``, ``"17:01"``, ``"2015-03-16"``. ``"2015"`` ) or a
          timestamp number (e.g., ``1552199579097`` ).
        * When using with `bin <https://vega.github.io/vega-lite/docs/bin.html>`__, the
          ``type`` property can be either ``"quantitative"`` (for using a linear bin scale)
          or `"ordinal" (for using an ordinal bin scale)
          <https://vega.github.io/vega-lite/docs/type.html#cast-bin>`__.
        * When using with `timeUnit
          <https://vega.github.io/vega-lite/docs/timeunit.html>`__, the ``type`` property
          can be either ``"temporal"`` (default, for using a temporal scale) or `"ordinal"
          (for using an ordinal scale)
          <https://vega.github.io/vega-lite/docs/type.html#cast-bin>`__.
        * When using with `aggregate
          <https://vega.github.io/vega-lite/docs/aggregate.html>`__, the ``type`` property
          refers to the post-aggregation data type. For example, we can calculate count
          ``distinct`` of a categorical field ``"cat"`` using ``{"aggregate": "distinct",
          "field": "cat"}``. The ``"type"`` of the aggregate output is ``"quantitative"``.
        * Secondary channels (e.g., ``x2``, ``y2``, ``xError``, ``yError`` ) do not have
          ``type`` as they must have exactly the same type as their primary channels (e.g.,
          ``x``, ``y`` ).

        **See also:** `type <https://vega.github.io/vega-lite/docs/type.html>`__
        documentation.
    """

    _schema = {"$ref": "#/definitions/StringFieldDef"}

    def __init__(
        self,
        aggregate: Union[
            Union[
                "Aggregate",
                Union["ArgmaxDef", dict],
                Union["ArgminDef", dict],
                Union[
                    "NonArgAggregateOp",
                    Literal[
                        "average",
                        "count",
                        "distinct",
                        "max",
                        "mean",
                        "median",
                        "min",
                        "missing",
                        "product",
                        "q1",
                        "q3",
                        "ci0",
                        "ci1",
                        "stderr",
                        "stdev",
                        "stdevp",
                        "sum",
                        "valid",
                        "values",
                        "variance",
                        "variancep",
                    ],
                ],
            ],
            UndefinedType,
        ] = Undefined,
        bandPosition: Union[float, UndefinedType] = Undefined,
        bin: Union[
            Union[None, Union["BinParams", dict], bool, str], UndefinedType
        ] = Undefined,
        field: Union[
            Union["Field", Union["FieldName", str], Union["RepeatRef", dict]],
            UndefinedType,
        ] = Undefined,
        format: Union[Union[Union["Dict", dict], str], UndefinedType] = Undefined,
        formatType: Union[str, UndefinedType] = Undefined,
        timeUnit: Union[
            Union[
                Union[
                    "BinnedTimeUnit",
                    Literal[
                        "binnedutcyear",
                        "binnedutcyearquarter",
                        "binnedutcyearquartermonth",
                        "binnedutcyearmonth",
                        "binnedutcyearmonthdate",
                        "binnedutcyearmonthdatehours",
                        "binnedutcyearmonthdatehoursminutes",
                        "binnedutcyearmonthdatehoursminutesseconds",
                        "binnedutcyearweek",
                        "binnedutcyearweekday",
                        "binnedutcyearweekdayhours",
                        "binnedutcyearweekdayhoursminutes",
                        "binnedutcyearweekdayhoursminutesseconds",
                        "binnedutcyeardayofyear",
                    ],
                    Literal[
                        "binnedyear",
                        "binnedyearquarter",
                        "binnedyearquartermonth",
                        "binnedyearmonth",
                        "binnedyearmonthdate",
                        "binnedyearmonthdatehours",
                        "binnedyearmonthdatehoursminutes",
                        "binnedyearmonthdatehoursminutesseconds",
                        "binnedyearweek",
                        "binnedyearweekday",
                        "binnedyearweekdayhours",
                        "binnedyearweekdayhoursminutes",
                        "binnedyearweekdayhoursminutesseconds",
                        "binnedyeardayofyear",
                    ],
                ],
                Union[
                    "TimeUnit",
                    Union[
                        "MultiTimeUnit",
                        Union[
                            "LocalMultiTimeUnit",
                            Literal[
                                "yearquarter",
                                "yearquartermonth",
                                "yearmonth",
                                "yearmonthdate",
                                "yearmonthdatehours",
                                "yearmonthdatehoursminutes",
                                "yearmonthdatehoursminutesseconds",
                                "yearweek",
                                "yearweekday",
                                "yearweekdayhours",
                                "yearweekdayhoursminutes",
                                "yearweekdayhoursminutesseconds",
                                "yeardayofyear",
                                "quartermonth",
                                "monthdate",
                                "monthdatehours",
                                "monthdatehoursminutes",
                                "monthdatehoursminutesseconds",
                                "weekday",
                                "weeksdayhours",
                                "weekdayhoursminutes",
                                "weekdayhoursminutesseconds",
                                "dayhours",
                                "dayhoursminutes",
                                "dayhoursminutesseconds",
                                "hoursminutes",
                                "hoursminutesseconds",
                                "minutesseconds",
                                "secondsmilliseconds",
                            ],
                        ],
                        Union[
                            "UtcMultiTimeUnit",
                            Literal[
                                "utcyearquarter",
                                "utcyearquartermonth",
                                "utcyearmonth",
                                "utcyearmonthdate",
                                "utcyearmonthdatehours",
                                "utcyearmonthdatehoursminutes",
                                "utcyearmonthdatehoursminutesseconds",
                                "utcyearweek",
                                "utcyearweekday",
                                "utcyearweekdayhours",
                                "utcyearweekdayhoursminutes",
                                "utcyearweekdayhoursminutesseconds",
                                "utcyeardayofyear",
                                "utcquartermonth",
                                "utcmonthdate",
                                "utcmonthdatehours",
                                "utcmonthdatehoursminutes",
                                "utcmonthdatehoursminutesseconds",
                                "utcweekday",
                                "utcweeksdayhours",
                                "utcweekdayhoursminutes",
                                "utcweekdayhoursminutesseconds",
                                "utcdayhours",
                                "utcdayhoursminutes",
                                "utcdayhoursminutesseconds",
                                "utchoursminutes",
                                "utchoursminutesseconds",
                                "utcminutesseconds",
                                "utcsecondsmilliseconds",
                            ],
                        ],
                    ],
                    Union[
                        "SingleTimeUnit",
                        Union[
                            "LocalSingleTimeUnit",
                            Literal[
                                "year",
                                "quarter",
                                "month",
                                "week",
                                "day",
                                "dayofyear",
                                "date",
                                "hours",
                                "minutes",
                                "seconds",
                                "milliseconds",
                            ],
                        ],
                        Union[
                            "UtcSingleTimeUnit",
                            Literal[
                                "utcyear",
                                "utcquarter",
                                "utcmonth",
                                "utcweek",
                                "utcday",
                                "utcdayofyear",
                                "utcdate",
                                "utchours",
                                "utcminutes",
                                "utcseconds",
                                "utcmilliseconds",
                            ],
                        ],
                    ],
                ],
                Union["TimeUnitParams", dict],
            ],
            UndefinedType,
        ] = Undefined,
        title: Union[
            Union[None, Union["Text", List[str], str]], UndefinedType
        ] = Undefined,
        type: Union[
            Union[
                "StandardType",
                Literal["quantitative", "ordinal", "temporal", "nominal"],
            ],
            UndefinedType,
        ] = Undefined,
        **kwds
    ):
        super(StringFieldDef, self).__init__(
            aggregate=aggregate,
            bandPosition=bandPosition,
            bin=bin,
            field=field,
            format=format,
            formatType=formatType,
            timeUnit=timeUnit,
            title=title,
            type=type,
            **kwds
        )


class StringFieldDefWithCondition(VegaLiteSchema):
    """StringFieldDefWithCondition schema wrapper

    Union[:class:`StringFieldDefWithCondition`, Dict[required=[]]]

    Parameters
    ----------

    aggregate : Union[:class:`Aggregate`, Union[:class:`ArgmaxDef`, Dict[required=[argmax]]], Union[:class:`ArgminDef`, Dict[required=[argmin]]], Union[:class:`NonArgAggregateOp`, Literal['average', 'count', 'distinct', 'max', 'mean', 'median', 'min', 'missing', 'product', 'q1', 'q3', 'ci0', 'ci1', 'stderr', 'stdev', 'stdevp', 'sum', 'valid', 'values', 'variance', 'variancep']]]
        Aggregation function for the field (e.g., ``"mean"``, ``"sum"``, ``"median"``,
        ``"min"``, ``"max"``, ``"count"`` ).

        **Default value:** ``undefined`` (None)

        **See also:** `aggregate <https://vega.github.io/vega-lite/docs/aggregate.html>`__
        documentation.
    bandPosition : float
        Relative position on a band of a stacked, binned, time unit, or band scale. For
        example, the marks will be positioned at the beginning of the band if set to ``0``,
        and at the middle of the band if set to ``0.5``.
    bin : Union[None, Union[:class:`BinParams`, Dict[required=[]]], bool, str]
        A flag for binning a ``quantitative`` field, `an object defining binning parameters
        <https://vega.github.io/vega-lite/docs/bin.html#bin-parameters>`__, or indicating
        that the data for ``x`` or ``y`` channel are binned before they are imported into
        Vega-Lite ( ``"binned"`` ).


        If ``true``, default `binning parameters
        <https://vega.github.io/vega-lite/docs/bin.html#bin-parameters>`__ will be applied.

        If ``"binned"``, this indicates that the data for the ``x`` (or ``y`` ) channel are
        already binned. You can map the bin-start field to ``x`` (or ``y`` ) and the bin-end
        field to ``x2`` (or ``y2`` ). The scale and axis will be formatted similar to
        binning in Vega-Lite.  To adjust the axis ticks based on the bin step, you can also
        set the axis's `tickMinStep
        <https://vega.github.io/vega-lite/docs/axis.html#ticks>`__ property.

        **Default value:** ``false``

        **See also:** `bin <https://vega.github.io/vega-lite/docs/bin.html>`__
        documentation.
    condition : Union[List[Union[:class:`ConditionalValueDefstringExprRef`, Union[:class:`ConditionalParameterValueDefstringExprRef`, Dict[required=[param, value]]], Union[:class:`ConditionalPredicateValueDefstringExprRef`, Dict[required=[test, value]]]]], Union[:class:`ConditionalValueDefstringExprRef`, Union[:class:`ConditionalParameterValueDefstringExprRef`, Dict[required=[param, value]]], Union[:class:`ConditionalPredicateValueDefstringExprRef`, Dict[required=[test, value]]]]]
        One or more value definition(s) with `a parameter or a test predicate
        <https://vega.github.io/vega-lite/docs/condition.html>`__.

        **Note:** A field definition's ``condition`` property can only contain `conditional
        value definitions <https://vega.github.io/vega-lite/docs/condition.html#value>`__
        since Vega-Lite only allows at most one encoded field per encoding channel.
    field : Union[:class:`Field`, Union[:class:`FieldName`, str], Union[:class:`RepeatRef`, Dict[required=[repeat]]]]
        **Required.** A string defining the name of the field from which to pull a data
        value or an object defining iterated values from the `repeat
        <https://vega.github.io/vega-lite/docs/repeat.html>`__ operator.

        **See also:** `field <https://vega.github.io/vega-lite/docs/field.html>`__
        documentation.

        **Notes:** 1)  Dots ( ``.`` ) and brackets ( ``[`` and ``]`` ) can be used to access
        nested objects (e.g., ``"field": "foo.bar"`` and ``"field": "foo['bar']"`` ). If
        field names contain dots or brackets but are not nested, you can use ``\\`` to
        escape dots and brackets (e.g., ``"a\\.b"`` and ``"a\\[0\\]"`` ). See more details
        about escaping in the `field documentation
        <https://vega.github.io/vega-lite/docs/field.html>`__. 2) ``field`` is not required
        if ``aggregate`` is ``count``.
    format : Union[Union[:class:`Dict`, Dict[required=[]]], str]
        When used with the default ``"number"`` and ``"time"`` format type, the text
        formatting pattern for labels of guides (axes, legends, headers) and text marks.


        * If the format type is ``"number"`` (e.g., for quantitative fields), this is D3's
          `number format pattern <https://github.com/d3/d3-format#locale_format>`__.
        * If the format type is ``"time"`` (e.g., for temporal fields), this is D3's `time
          format pattern <https://github.com/d3/d3-time-format#locale_format>`__.

        See the `format documentation <https://vega.github.io/vega-lite/docs/format.html>`__
        for more examples.

        When used with a `custom formatType
        <https://vega.github.io/vega-lite/docs/config.html#custom-format-type>`__, this
        value will be passed as ``format`` alongside ``datum.value`` to the registered
        function.

        **Default value:**  Derived from `numberFormat
        <https://vega.github.io/vega-lite/docs/config.html#format>`__ config for number
        format and from `timeFormat
        <https://vega.github.io/vega-lite/docs/config.html#format>`__ config for time
        format.
    formatType : str
        The format type for labels. One of ``"number"``, ``"time"``, or a `registered custom
        format type
        <https://vega.github.io/vega-lite/docs/config.html#custom-format-type>`__.

        **Default value:**


        * ``"time"`` for temporal fields and ordinal and nominal fields with ``timeUnit``.
        * ``"number"`` for quantitative fields as well as ordinal and nominal fields without
          ``timeUnit``.
    timeUnit : Union[Union[:class:`BinnedTimeUnit`, Literal['binnedutcyear', 'binnedutcyearquarter', 'binnedutcyearquartermonth', 'binnedutcyearmonth', 'binnedutcyearmonthdate', 'binnedutcyearmonthdatehours', 'binnedutcyearmonthdatehoursminutes', 'binnedutcyearmonthdatehoursminutesseconds', 'binnedutcyearweek', 'binnedutcyearweekday', 'binnedutcyearweekdayhours', 'binnedutcyearweekdayhoursminutes', 'binnedutcyearweekdayhoursminutesseconds', 'binnedutcyeardayofyear'], Literal['binnedyear', 'binnedyearquarter', 'binnedyearquartermonth', 'binnedyearmonth', 'binnedyearmonthdate', 'binnedyearmonthdatehours', 'binnedyearmonthdatehoursminutes', 'binnedyearmonthdatehoursminutesseconds', 'binnedyearweek', 'binnedyearweekday', 'binnedyearweekdayhours', 'binnedyearweekdayhoursminutes', 'binnedyearweekdayhoursminutesseconds', 'binnedyeardayofyear']], Union[:class:`TimeUnitParams`, Dict[required=[]]], Union[:class:`TimeUnit`, Union[:class:`MultiTimeUnit`, Union[:class:`LocalMultiTimeUnit`, Literal['yearquarter', 'yearquartermonth', 'yearmonth', 'yearmonthdate', 'yearmonthdatehours', 'yearmonthdatehoursminutes', 'yearmonthdatehoursminutesseconds', 'yearweek', 'yearweekday', 'yearweekdayhours', 'yearweekdayhoursminutes', 'yearweekdayhoursminutesseconds', 'yeardayofyear', 'quartermonth', 'monthdate', 'monthdatehours', 'monthdatehoursminutes', 'monthdatehoursminutesseconds', 'weekday', 'weeksdayhours', 'weekdayhoursminutes', 'weekdayhoursminutesseconds', 'dayhours', 'dayhoursminutes', 'dayhoursminutesseconds', 'hoursminutes', 'hoursminutesseconds', 'minutesseconds', 'secondsmilliseconds']], Union[:class:`UtcMultiTimeUnit`, Literal['utcyearquarter', 'utcyearquartermonth', 'utcyearmonth', 'utcyearmonthdate', 'utcyearmonthdatehours', 'utcyearmonthdatehoursminutes', 'utcyearmonthdatehoursminutesseconds', 'utcyearweek', 'utcyearweekday', 'utcyearweekdayhours', 'utcyearweekdayhoursminutes', 'utcyearweekdayhoursminutesseconds', 'utcyeardayofyear', 'utcquartermonth', 'utcmonthdate', 'utcmonthdatehours', 'utcmonthdatehoursminutes', 'utcmonthdatehoursminutesseconds', 'utcweekday', 'utcweeksdayhours', 'utcweekdayhoursminutes', 'utcweekdayhoursminutesseconds', 'utcdayhours', 'utcdayhoursminutes', 'utcdayhoursminutesseconds', 'utchoursminutes', 'utchoursminutesseconds', 'utcminutesseconds', 'utcsecondsmilliseconds']]], Union[:class:`SingleTimeUnit`, Union[:class:`LocalSingleTimeUnit`, Literal['year', 'quarter', 'month', 'week', 'day', 'dayofyear', 'date', 'hours', 'minutes', 'seconds', 'milliseconds']], Union[:class:`UtcSingleTimeUnit`, Literal['utcyear', 'utcquarter', 'utcmonth', 'utcweek', 'utcday', 'utcdayofyear', 'utcdate', 'utchours', 'utcminutes', 'utcseconds', 'utcmilliseconds']]]]]
        Time unit (e.g., ``year``, ``yearmonth``, ``month``, ``hours`` ) for a temporal
        field. or `a temporal field that gets casted as ordinal
        <https://vega.github.io/vega-lite/docs/type.html#cast>`__.

        **Default value:** ``undefined`` (None)

        **See also:** `timeUnit <https://vega.github.io/vega-lite/docs/timeunit.html>`__
        documentation.
    title : Union[None, Union[:class:`Text`, List[str], str]]
        A title for the field. If ``null``, the title will be removed.

        **Default value:**  derived from the field's name and transformation function (
        ``aggregate``, ``bin`` and ``timeUnit`` ). If the field has an aggregate function,
        the function is displayed as part of the title (e.g., ``"Sum of Profit"`` ). If the
        field is binned or has a time unit applied, the applied function is shown in
        parentheses (e.g., ``"Profit (binned)"``, ``"Transaction Date (year-month)"`` ).
        Otherwise, the title is simply the field name.

        **Notes** :

        1) You can customize the default field title format by providing the `fieldTitle
        <https://vega.github.io/vega-lite/docs/config.html#top-level-config>`__ property in
        the `config <https://vega.github.io/vega-lite/docs/config.html>`__ or `fieldTitle
        function via the compile function's options
        <https://vega.github.io/vega-lite/usage/compile.html#field-title>`__.

        2) If both field definition's ``title`` and axis, header, or legend ``title`` are
        defined, axis/header/legend title will be used.
    type : Union[:class:`StandardType`, Literal['quantitative', 'ordinal', 'temporal', 'nominal']]
        The type of measurement ( ``"quantitative"``, ``"temporal"``, ``"ordinal"``, or
        ``"nominal"`` ) for the encoded field or constant value ( ``datum`` ). It can also
        be a ``"geojson"`` type for encoding `'geoshape'
        <https://vega.github.io/vega-lite/docs/geoshape.html>`__.

        Vega-Lite automatically infers data types in many cases as discussed below. However,
        type is required for a field if: (1) the field is not nominal and the field encoding
        has no specified ``aggregate`` (except ``argmin`` and ``argmax`` ), ``bin``, scale
        type, custom ``sort`` order, nor ``timeUnit`` or (2) if you wish to use an ordinal
        scale for a field with ``bin`` or ``timeUnit``.

        **Default value:**

        1) For a data ``field``, ``"nominal"`` is the default data type unless the field
        encoding has ``aggregate``, ``channel``, ``bin``, scale type, ``sort``, or
        ``timeUnit`` that satisfies the following criteria:


        * ``"quantitative"`` is the default type if (1) the encoded field contains ``bin``
          or ``aggregate`` except ``"argmin"`` and ``"argmax"``, (2) the encoding channel is
          ``latitude`` or ``longitude`` channel or (3) if the specified scale type is `a
          quantitative scale <https://vega.github.io/vega-lite/docs/scale.html#type>`__.
        * ``"temporal"`` is the default type if (1) the encoded field contains ``timeUnit``
          or (2) the specified scale type is a time or utc scale
        * ``"ordinal"`` is the default type if (1) the encoded field contains a `custom sort
          order
          <https://vega.github.io/vega-lite/docs/sort.html#specifying-custom-sort-order>`__,
          (2) the specified scale type is an ordinal/point/band scale, or (3) the encoding
          channel is ``order``.

        2) For a constant value in data domain ( ``datum`` ):


        * ``"quantitative"`` if the datum is a number
        * ``"nominal"`` if the datum is a string
        * ``"temporal"`` if the datum is `a date time object
          <https://vega.github.io/vega-lite/docs/datetime.html>`__

        **Note:**


        * Data ``type`` describes the semantics of the data rather than the primitive data
          types (number, string, etc.). The same primitive data type can have different
          types of measurement. For example, numeric data can represent quantitative,
          ordinal, or nominal data.
        * Data values for a temporal field can be either a date-time string (e.g.,
          ``"2015-03-07 12:32:17"``, ``"17:01"``, ``"2015-03-16"``. ``"2015"`` ) or a
          timestamp number (e.g., ``1552199579097`` ).
        * When using with `bin <https://vega.github.io/vega-lite/docs/bin.html>`__, the
          ``type`` property can be either ``"quantitative"`` (for using a linear bin scale)
          or `"ordinal" (for using an ordinal bin scale)
          <https://vega.github.io/vega-lite/docs/type.html#cast-bin>`__.
        * When using with `timeUnit
          <https://vega.github.io/vega-lite/docs/timeunit.html>`__, the ``type`` property
          can be either ``"temporal"`` (default, for using a temporal scale) or `"ordinal"
          (for using an ordinal scale)
          <https://vega.github.io/vega-lite/docs/type.html#cast-bin>`__.
        * When using with `aggregate
          <https://vega.github.io/vega-lite/docs/aggregate.html>`__, the ``type`` property
          refers to the post-aggregation data type. For example, we can calculate count
          ``distinct`` of a categorical field ``"cat"`` using ``{"aggregate": "distinct",
          "field": "cat"}``. The ``"type"`` of the aggregate output is ``"quantitative"``.
        * Secondary channels (e.g., ``x2``, ``y2``, ``xError``, ``yError`` ) do not have
          ``type`` as they must have exactly the same type as their primary channels (e.g.,
          ``x``, ``y`` ).

        **See also:** `type <https://vega.github.io/vega-lite/docs/type.html>`__
        documentation.
    """

    _schema = {"$ref": "#/definitions/StringFieldDefWithCondition"}

    def __init__(
        self,
        aggregate: Union[
            Union[
                "Aggregate",
                Union["ArgmaxDef", dict],
                Union["ArgminDef", dict],
                Union[
                    "NonArgAggregateOp",
                    Literal[
                        "average",
                        "count",
                        "distinct",
                        "max",
                        "mean",
                        "median",
                        "min",
                        "missing",
                        "product",
                        "q1",
                        "q3",
                        "ci0",
                        "ci1",
                        "stderr",
                        "stdev",
                        "stdevp",
                        "sum",
                        "valid",
                        "values",
                        "variance",
                        "variancep",
                    ],
                ],
            ],
            UndefinedType,
        ] = Undefined,
        bandPosition: Union[float, UndefinedType] = Undefined,
        bin: Union[
            Union[None, Union["BinParams", dict], bool, str], UndefinedType
        ] = Undefined,
        condition: Union[
            Union[
                Union[
                    "ConditionalValueDefstringExprRef",
                    Union["ConditionalParameterValueDefstringExprRef", dict],
                    Union["ConditionalPredicateValueDefstringExprRef", dict],
                ],
                Union[
                    List["ConditionalValueDefstringExprRef"],
                    List[Union["ConditionalParameterValueDefstringExprRef", dict]],
                    List[Union["ConditionalPredicateValueDefstringExprRef", dict]],
                ],
            ],
            UndefinedType,
        ] = Undefined,
        field: Union[
            Union["Field", Union["FieldName", str], Union["RepeatRef", dict]],
            UndefinedType,
        ] = Undefined,
        format: Union[Union[Union["Dict", dict], str], UndefinedType] = Undefined,
        formatType: Union[str, UndefinedType] = Undefined,
        timeUnit: Union[
            Union[
                Union[
                    "BinnedTimeUnit",
                    Literal[
                        "binnedutcyear",
                        "binnedutcyearquarter",
                        "binnedutcyearquartermonth",
                        "binnedutcyearmonth",
                        "binnedutcyearmonthdate",
                        "binnedutcyearmonthdatehours",
                        "binnedutcyearmonthdatehoursminutes",
                        "binnedutcyearmonthdatehoursminutesseconds",
                        "binnedutcyearweek",
                        "binnedutcyearweekday",
                        "binnedutcyearweekdayhours",
                        "binnedutcyearweekdayhoursminutes",
                        "binnedutcyearweekdayhoursminutesseconds",
                        "binnedutcyeardayofyear",
                    ],
                    Literal[
                        "binnedyear",
                        "binnedyearquarter",
                        "binnedyearquartermonth",
                        "binnedyearmonth",
                        "binnedyearmonthdate",
                        "binnedyearmonthdatehours",
                        "binnedyearmonthdatehoursminutes",
                        "binnedyearmonthdatehoursminutesseconds",
                        "binnedyearweek",
                        "binnedyearweekday",
                        "binnedyearweekdayhours",
                        "binnedyearweekdayhoursminutes",
                        "binnedyearweekdayhoursminutesseconds",
                        "binnedyeardayofyear",
                    ],
                ],
                Union[
                    "TimeUnit",
                    Union[
                        "MultiTimeUnit",
                        Union[
                            "LocalMultiTimeUnit",
                            Literal[
                                "yearquarter",
                                "yearquartermonth",
                                "yearmonth",
                                "yearmonthdate",
                                "yearmonthdatehours",
                                "yearmonthdatehoursminutes",
                                "yearmonthdatehoursminutesseconds",
                                "yearweek",
                                "yearweekday",
                                "yearweekdayhours",
                                "yearweekdayhoursminutes",
                                "yearweekdayhoursminutesseconds",
                                "yeardayofyear",
                                "quartermonth",
                                "monthdate",
                                "monthdatehours",
                                "monthdatehoursminutes",
                                "monthdatehoursminutesseconds",
                                "weekday",
                                "weeksdayhours",
                                "weekdayhoursminutes",
                                "weekdayhoursminutesseconds",
                                "dayhours",
                                "dayhoursminutes",
                                "dayhoursminutesseconds",
                                "hoursminutes",
                                "hoursminutesseconds",
                                "minutesseconds",
                                "secondsmilliseconds",
                            ],
                        ],
                        Union[
                            "UtcMultiTimeUnit",
                            Literal[
                                "utcyearquarter",
                                "utcyearquartermonth",
                                "utcyearmonth",
                                "utcyearmonthdate",
                                "utcyearmonthdatehours",
                                "utcyearmonthdatehoursminutes",
                                "utcyearmonthdatehoursminutesseconds",
                                "utcyearweek",
                                "utcyearweekday",
                                "utcyearweekdayhours",
                                "utcyearweekdayhoursminutes",
                                "utcyearweekdayhoursminutesseconds",
                                "utcyeardayofyear",
                                "utcquartermonth",
                                "utcmonthdate",
                                "utcmonthdatehours",
                                "utcmonthdatehoursminutes",
                                "utcmonthdatehoursminutesseconds",
                                "utcweekday",
                                "utcweeksdayhours",
                                "utcweekdayhoursminutes",
                                "utcweekdayhoursminutesseconds",
                                "utcdayhours",
                                "utcdayhoursminutes",
                                "utcdayhoursminutesseconds",
                                "utchoursminutes",
                                "utchoursminutesseconds",
                                "utcminutesseconds",
                                "utcsecondsmilliseconds",
                            ],
                        ],
                    ],
                    Union[
                        "SingleTimeUnit",
                        Union[
                            "LocalSingleTimeUnit",
                            Literal[
                                "year",
                                "quarter",
                                "month",
                                "week",
                                "day",
                                "dayofyear",
                                "date",
                                "hours",
                                "minutes",
                                "seconds",
                                "milliseconds",
                            ],
                        ],
                        Union[
                            "UtcSingleTimeUnit",
                            Literal[
                                "utcyear",
                                "utcquarter",
                                "utcmonth",
                                "utcweek",
                                "utcday",
                                "utcdayofyear",
                                "utcdate",
                                "utchours",
                                "utcminutes",
                                "utcseconds",
                                "utcmilliseconds",
                            ],
                        ],
                    ],
                ],
                Union["TimeUnitParams", dict],
            ],
            UndefinedType,
        ] = Undefined,
        title: Union[
            Union[None, Union["Text", List[str], str]], UndefinedType
        ] = Undefined,
        type: Union[
            Union[
                "StandardType",
                Literal["quantitative", "ordinal", "temporal", "nominal"],
            ],
            UndefinedType,
        ] = Undefined,
        **kwds
    ):
        super(StringFieldDefWithCondition, self).__init__(
            aggregate=aggregate,
            bandPosition=bandPosition,
            bin=bin,
            condition=condition,
            field=field,
            format=format,
            formatType=formatType,
            timeUnit=timeUnit,
            title=title,
            type=type,
            **kwds
        )


class StringValueDefWithCondition(VegaLiteSchema):
    """StringValueDefWithCondition schema wrapper

    Union[:class:`StringValueDefWithCondition`, Dict[required=[]]]

    Parameters
    ----------

    condition : Union[List[Union[:class:`ConditionalValueDefstringnullExprRef`, Union[:class:`ConditionalParameterValueDefstringnullExprRef`, Dict[required=[param, value]]], Union[:class:`ConditionalPredicateValueDefstringnullExprRef`, Dict[required=[test, value]]]]], Union[:class:`ConditionalMarkPropFieldOrDatumDef`, Union[:class:`ConditionalParameterMarkPropFieldOrDatumDef`, Dict[required=[param]]], Union[:class:`ConditionalPredicateMarkPropFieldOrDatumDef`, Dict[required=[test]]]], Union[:class:`ConditionalValueDefstringnullExprRef`, Union[:class:`ConditionalParameterValueDefstringnullExprRef`, Dict[required=[param, value]]], Union[:class:`ConditionalPredicateValueDefstringnullExprRef`, Dict[required=[test, value]]]]]
        A field definition or one or more value definition(s) with a parameter predicate.
    value : Union[None, Union[:class:`ExprRef`, Dict[required=[expr]]], str]
        A constant value in visual domain (e.g., ``"red"`` / ``"#0099ff"`` / `gradient
        definition <https://vega.github.io/vega-lite/docs/types.html#gradient>`__ for color,
        values between ``0`` to ``1`` for opacity).
    """

    _schema = {"$ref": "#/definitions/StringValueDefWithCondition"}

    def __init__(
        self,
        condition: Union[
            Union[
                Union[
                    "ConditionalMarkPropFieldOrDatumDef",
                    Union["ConditionalParameterMarkPropFieldOrDatumDef", dict],
                    Union["ConditionalPredicateMarkPropFieldOrDatumDef", dict],
                ],
                Union[
                    "ConditionalValueDefstringnullExprRef",
                    Union["ConditionalParameterValueDefstringnullExprRef", dict],
                    Union["ConditionalPredicateValueDefstringnullExprRef", dict],
                ],
                Union[
                    List["ConditionalValueDefstringnullExprRef"],
                    List[Union["ConditionalParameterValueDefstringnullExprRef", dict]],
                    List[Union["ConditionalPredicateValueDefstringnullExprRef", dict]],
                ],
            ],
            UndefinedType,
        ] = Undefined,
        value: Union[
            Union[None, Union["ExprRef", "_ParameterProtocol", dict], str],
            UndefinedType,
        ] = Undefined,
        **kwds
    ):
        super(StringValueDefWithCondition, self).__init__(
            condition=condition, value=value, **kwds
        )


class StrokeCap(VegaLiteSchema):
    """StrokeCap schema wrapper

    Union[:class:`StrokeCap`, Literal['butt', 'round', 'square']]
    """

    _schema = {"$ref": "#/definitions/StrokeCap"}

    def __init__(self, *args):
        super(StrokeCap, self).__init__(*args)


class StrokeJoin(VegaLiteSchema):
    """StrokeJoin schema wrapper

    Union[:class:`StrokeJoin`, Literal['miter', 'round', 'bevel']]
    """

    _schema = {"$ref": "#/definitions/StrokeJoin"}

    def __init__(self, *args):
        super(StrokeJoin, self).__init__(*args)


class StyleConfigIndex(VegaLiteSchema):
    """StyleConfigIndex schema wrapper

    Union[:class:`StyleConfigIndex`, Dict[required=[]]]

    Parameters
    ----------

    arc : Union[:class:`RectConfig`, Dict[required=[]]]
        Arc-specific Config
    area : Union[:class:`AreaConfig`, Dict[required=[]]]
        Area-Specific Config
    bar : Union[:class:`BarConfig`, Dict[required=[]]]
        Bar-Specific Config
    circle : Union[:class:`MarkConfig`, Dict[required=[]]]
        Circle-Specific Config
    geoshape : Union[:class:`MarkConfig`, Dict[required=[]]]
        Geoshape-Specific Config
    image : Union[:class:`RectConfig`, Dict[required=[]]]
        Image-specific Config
    line : Union[:class:`LineConfig`, Dict[required=[]]]
        Line-Specific Config
    mark : Union[:class:`MarkConfig`, Dict[required=[]]]
        Mark Config
    point : Union[:class:`MarkConfig`, Dict[required=[]]]
        Point-Specific Config
    rect : Union[:class:`RectConfig`, Dict[required=[]]]
        Rect-Specific Config
    rule : Union[:class:`MarkConfig`, Dict[required=[]]]
        Rule-Specific Config
    square : Union[:class:`MarkConfig`, Dict[required=[]]]
        Square-Specific Config
    text : Union[:class:`MarkConfig`, Dict[required=[]]]
        Text-Specific Config
    tick : Union[:class:`TickConfig`, Dict[required=[]]]
        Tick-Specific Config
    trail : Union[:class:`LineConfig`, Dict[required=[]]]
        Trail-Specific Config
    group-subtitle : Union[:class:`MarkConfig`, Dict[required=[]]]
        Default style for chart subtitles
    group-title : Union[:class:`MarkConfig`, Dict[required=[]]]
        Default style for chart titles
    guide-label : Union[:class:`MarkConfig`, Dict[required=[]]]
        Default style for axis, legend, and header labels.
    guide-title : Union[:class:`MarkConfig`, Dict[required=[]]]
        Default style for axis, legend, and header titles.
    """

    _schema = {"$ref": "#/definitions/StyleConfigIndex"}

    def __init__(
        self,
        arc: Union[Union["RectConfig", dict], UndefinedType] = Undefined,
        area: Union[Union["AreaConfig", dict], UndefinedType] = Undefined,
        bar: Union[Union["BarConfig", dict], UndefinedType] = Undefined,
        circle: Union[Union["MarkConfig", dict], UndefinedType] = Undefined,
        geoshape: Union[Union["MarkConfig", dict], UndefinedType] = Undefined,
        image: Union[Union["RectConfig", dict], UndefinedType] = Undefined,
        line: Union[Union["LineConfig", dict], UndefinedType] = Undefined,
        mark: Union[Union["MarkConfig", dict], UndefinedType] = Undefined,
        point: Union[Union["MarkConfig", dict], UndefinedType] = Undefined,
        rect: Union[Union["RectConfig", dict], UndefinedType] = Undefined,
        rule: Union[Union["MarkConfig", dict], UndefinedType] = Undefined,
        square: Union[Union["MarkConfig", dict], UndefinedType] = Undefined,
        text: Union[Union["MarkConfig", dict], UndefinedType] = Undefined,
        tick: Union[Union["TickConfig", dict], UndefinedType] = Undefined,
        trail: Union[Union["LineConfig", dict], UndefinedType] = Undefined,
        **kwds
    ):
        super(StyleConfigIndex, self).__init__(
            arc=arc,
            area=area,
            bar=bar,
            circle=circle,
            geoshape=geoshape,
            image=image,
            line=line,
            mark=mark,
            point=point,
            rect=rect,
            rule=rule,
            square=square,
            text=text,
            tick=tick,
            trail=trail,
            **kwds
        )


class SymbolShape(VegaLiteSchema):
    """SymbolShape schema wrapper

    Union[:class:`SymbolShape`, str]
    """

    _schema = {"$ref": "#/definitions/SymbolShape"}

    def __init__(self, *args):
        super(SymbolShape, self).__init__(*args)


class Text(VegaLiteSchema):
    """Text schema wrapper

    Union[:class:`Text`, List[str], str]
    """

    _schema = {"$ref": "#/definitions/Text"}

    def __init__(self, *args, **kwds):
        super(Text, self).__init__(*args, **kwds)


class TextBaseline(VegaLiteSchema):
    """TextBaseline schema wrapper

    Union[:class:`TextBaseline`, Union[:class:`Baseline`, Literal['top', 'middle', 'bottom']],
    str]
    """

    _schema = {"$ref": "#/definitions/TextBaseline"}

    def __init__(self, *args, **kwds):
        super(TextBaseline, self).__init__(*args, **kwds)


class Baseline(TextBaseline):
    """Baseline schema wrapper

    Union[:class:`Baseline`, Literal['top', 'middle', 'bottom']]
    """

    _schema = {"$ref": "#/definitions/Baseline"}

    def __init__(self, *args):
        super(Baseline, self).__init__(*args)


class TextDef(VegaLiteSchema):
    """TextDef schema wrapper

    Union[:class:`TextDef`, Union[:class:`FieldOrDatumDefWithConditionStringDatumDefText`,
    Dict[required=[]]], Union[:class:`FieldOrDatumDefWithConditionStringFieldDefText`,
    Dict[required=[]]], Union[:class:`ValueDefWithConditionStringFieldDefText`,
    Dict[required=[]]]]
    """

    _schema = {"$ref": "#/definitions/TextDef"}

    def __init__(self, *args, **kwds):
        super(TextDef, self).__init__(*args, **kwds)


class FieldOrDatumDefWithConditionStringDatumDefText(TextDef):
    """FieldOrDatumDefWithConditionStringDatumDefText schema wrapper

    Union[:class:`FieldOrDatumDefWithConditionStringDatumDefText`, Dict[required=[]]]

    Parameters
    ----------

    bandPosition : float
        Relative position on a band of a stacked, binned, time unit, or band scale. For
        example, the marks will be positioned at the beginning of the band if set to ``0``,
        and at the middle of the band if set to ``0.5``.
    condition : Union[List[Union[:class:`ConditionalValueDefTextExprRef`, Union[:class:`ConditionalParameterValueDefTextExprRef`, Dict[required=[param, value]]], Union[:class:`ConditionalPredicateValueDefTextExprRef`, Dict[required=[test, value]]]]], Union[:class:`ConditionalValueDefTextExprRef`, Union[:class:`ConditionalParameterValueDefTextExprRef`, Dict[required=[param, value]]], Union[:class:`ConditionalPredicateValueDefTextExprRef`, Dict[required=[test, value]]]]]
        One or more value definition(s) with `a parameter or a test predicate
        <https://vega.github.io/vega-lite/docs/condition.html>`__.

        **Note:** A field definition's ``condition`` property can only contain `conditional
        value definitions <https://vega.github.io/vega-lite/docs/condition.html#value>`__
        since Vega-Lite only allows at most one encoded field per encoding channel.
    datum : Union[Union[:class:`DateTime`, Dict[required=[]]], Union[:class:`ExprRef`, Dict[required=[expr]]], Union[:class:`PrimitiveValue`, None, bool, float, str], Union[:class:`RepeatRef`, Dict[required=[repeat]]]]
        A constant value in data domain.
    format : Union[Union[:class:`Dict`, Dict[required=[]]], str]
        When used with the default ``"number"`` and ``"time"`` format type, the text
        formatting pattern for labels of guides (axes, legends, headers) and text marks.


        * If the format type is ``"number"`` (e.g., for quantitative fields), this is D3's
          `number format pattern <https://github.com/d3/d3-format#locale_format>`__.
        * If the format type is ``"time"`` (e.g., for temporal fields), this is D3's `time
          format pattern <https://github.com/d3/d3-time-format#locale_format>`__.

        See the `format documentation <https://vega.github.io/vega-lite/docs/format.html>`__
        for more examples.

        When used with a `custom formatType
        <https://vega.github.io/vega-lite/docs/config.html#custom-format-type>`__, this
        value will be passed as ``format`` alongside ``datum.value`` to the registered
        function.

        **Default value:**  Derived from `numberFormat
        <https://vega.github.io/vega-lite/docs/config.html#format>`__ config for number
        format and from `timeFormat
        <https://vega.github.io/vega-lite/docs/config.html#format>`__ config for time
        format.
    formatType : str
        The format type for labels. One of ``"number"``, ``"time"``, or a `registered custom
        format type
        <https://vega.github.io/vega-lite/docs/config.html#custom-format-type>`__.

        **Default value:**


        * ``"time"`` for temporal fields and ordinal and nominal fields with ``timeUnit``.
        * ``"number"`` for quantitative fields as well as ordinal and nominal fields without
          ``timeUnit``.
    title : Union[None, Union[:class:`Text`, List[str], str]]
        A title for the field. If ``null``, the title will be removed.

        **Default value:**  derived from the field's name and transformation function (
        ``aggregate``, ``bin`` and ``timeUnit`` ). If the field has an aggregate function,
        the function is displayed as part of the title (e.g., ``"Sum of Profit"`` ). If the
        field is binned or has a time unit applied, the applied function is shown in
        parentheses (e.g., ``"Profit (binned)"``, ``"Transaction Date (year-month)"`` ).
        Otherwise, the title is simply the field name.

        **Notes** :

        1) You can customize the default field title format by providing the `fieldTitle
        <https://vega.github.io/vega-lite/docs/config.html#top-level-config>`__ property in
        the `config <https://vega.github.io/vega-lite/docs/config.html>`__ or `fieldTitle
        function via the compile function's options
        <https://vega.github.io/vega-lite/usage/compile.html#field-title>`__.

        2) If both field definition's ``title`` and axis, header, or legend ``title`` are
        defined, axis/header/legend title will be used.
    type : Union[:class:`Type`, Literal['quantitative', 'ordinal', 'temporal', 'nominal', 'geojson']]
        The type of measurement ( ``"quantitative"``, ``"temporal"``, ``"ordinal"``, or
        ``"nominal"`` ) for the encoded field or constant value ( ``datum`` ). It can also
        be a ``"geojson"`` type for encoding `'geoshape'
        <https://vega.github.io/vega-lite/docs/geoshape.html>`__.

        Vega-Lite automatically infers data types in many cases as discussed below. However,
        type is required for a field if: (1) the field is not nominal and the field encoding
        has no specified ``aggregate`` (except ``argmin`` and ``argmax`` ), ``bin``, scale
        type, custom ``sort`` order, nor ``timeUnit`` or (2) if you wish to use an ordinal
        scale for a field with ``bin`` or ``timeUnit``.

        **Default value:**

        1) For a data ``field``, ``"nominal"`` is the default data type unless the field
        encoding has ``aggregate``, ``channel``, ``bin``, scale type, ``sort``, or
        ``timeUnit`` that satisfies the following criteria:


        * ``"quantitative"`` is the default type if (1) the encoded field contains ``bin``
          or ``aggregate`` except ``"argmin"`` and ``"argmax"``, (2) the encoding channel is
          ``latitude`` or ``longitude`` channel or (3) if the specified scale type is `a
          quantitative scale <https://vega.github.io/vega-lite/docs/scale.html#type>`__.
        * ``"temporal"`` is the default type if (1) the encoded field contains ``timeUnit``
          or (2) the specified scale type is a time or utc scale
        * ``"ordinal"`` is the default type if (1) the encoded field contains a `custom sort
          order
          <https://vega.github.io/vega-lite/docs/sort.html#specifying-custom-sort-order>`__,
          (2) the specified scale type is an ordinal/point/band scale, or (3) the encoding
          channel is ``order``.

        2) For a constant value in data domain ( ``datum`` ):


        * ``"quantitative"`` if the datum is a number
        * ``"nominal"`` if the datum is a string
        * ``"temporal"`` if the datum is `a date time object
          <https://vega.github.io/vega-lite/docs/datetime.html>`__

        **Note:**


        * Data ``type`` describes the semantics of the data rather than the primitive data
          types (number, string, etc.). The same primitive data type can have different
          types of measurement. For example, numeric data can represent quantitative,
          ordinal, or nominal data.
        * Data values for a temporal field can be either a date-time string (e.g.,
          ``"2015-03-07 12:32:17"``, ``"17:01"``, ``"2015-03-16"``. ``"2015"`` ) or a
          timestamp number (e.g., ``1552199579097`` ).
        * When using with `bin <https://vega.github.io/vega-lite/docs/bin.html>`__, the
          ``type`` property can be either ``"quantitative"`` (for using a linear bin scale)
          or `"ordinal" (for using an ordinal bin scale)
          <https://vega.github.io/vega-lite/docs/type.html#cast-bin>`__.
        * When using with `timeUnit
          <https://vega.github.io/vega-lite/docs/timeunit.html>`__, the ``type`` property
          can be either ``"temporal"`` (default, for using a temporal scale) or `"ordinal"
          (for using an ordinal scale)
          <https://vega.github.io/vega-lite/docs/type.html#cast-bin>`__.
        * When using with `aggregate
          <https://vega.github.io/vega-lite/docs/aggregate.html>`__, the ``type`` property
          refers to the post-aggregation data type. For example, we can calculate count
          ``distinct`` of a categorical field ``"cat"`` using ``{"aggregate": "distinct",
          "field": "cat"}``. The ``"type"`` of the aggregate output is ``"quantitative"``.
        * Secondary channels (e.g., ``x2``, ``y2``, ``xError``, ``yError`` ) do not have
          ``type`` as they must have exactly the same type as their primary channels (e.g.,
          ``x``, ``y`` ).

        **See also:** `type <https://vega.github.io/vega-lite/docs/type.html>`__
        documentation.
    """

    _schema = {
        "$ref": "#/definitions/FieldOrDatumDefWithCondition<StringDatumDef,Text>"
    }

    def __init__(
        self,
        bandPosition: Union[float, UndefinedType] = Undefined,
        condition: Union[
            Union[
                Union[
                    "ConditionalValueDefTextExprRef",
                    Union["ConditionalParameterValueDefTextExprRef", dict],
                    Union["ConditionalPredicateValueDefTextExprRef", dict],
                ],
                Union[
                    List["ConditionalValueDefTextExprRef"],
                    List[Union["ConditionalParameterValueDefTextExprRef", dict]],
                    List[Union["ConditionalPredicateValueDefTextExprRef", dict]],
                ],
            ],
            UndefinedType,
        ] = Undefined,
        datum: Union[
            Union[
                Union["DateTime", dict],
                Union["ExprRef", "_ParameterProtocol", dict],
                Union["PrimitiveValue", None, bool, float, str],
                Union["RepeatRef", dict],
            ],
            UndefinedType,
        ] = Undefined,
        format: Union[Union[Union["Dict", dict], str], UndefinedType] = Undefined,
        formatType: Union[str, UndefinedType] = Undefined,
        title: Union[
            Union[None, Union["Text", List[str], str]], UndefinedType
        ] = Undefined,
        type: Union[
            Union[
                "Type",
                Literal["quantitative", "ordinal", "temporal", "nominal", "geojson"],
            ],
            UndefinedType,
        ] = Undefined,
        **kwds
    ):
        super(FieldOrDatumDefWithConditionStringDatumDefText, self).__init__(
            bandPosition=bandPosition,
            condition=condition,
            datum=datum,
            format=format,
            formatType=formatType,
            title=title,
            type=type,
            **kwds
        )


class FieldOrDatumDefWithConditionStringFieldDefText(TextDef):
    """FieldOrDatumDefWithConditionStringFieldDefText schema wrapper

    Union[:class:`FieldOrDatumDefWithConditionStringFieldDefText`, Dict[required=[]]]

    Parameters
    ----------

    aggregate : Union[:class:`Aggregate`, Union[:class:`ArgmaxDef`, Dict[required=[argmax]]], Union[:class:`ArgminDef`, Dict[required=[argmin]]], Union[:class:`NonArgAggregateOp`, Literal['average', 'count', 'distinct', 'max', 'mean', 'median', 'min', 'missing', 'product', 'q1', 'q3', 'ci0', 'ci1', 'stderr', 'stdev', 'stdevp', 'sum', 'valid', 'values', 'variance', 'variancep']]]
        Aggregation function for the field (e.g., ``"mean"``, ``"sum"``, ``"median"``,
        ``"min"``, ``"max"``, ``"count"`` ).

        **Default value:** ``undefined`` (None)

        **See also:** `aggregate <https://vega.github.io/vega-lite/docs/aggregate.html>`__
        documentation.
    bandPosition : float
        Relative position on a band of a stacked, binned, time unit, or band scale. For
        example, the marks will be positioned at the beginning of the band if set to ``0``,
        and at the middle of the band if set to ``0.5``.
    bin : Union[None, Union[:class:`BinParams`, Dict[required=[]]], bool, str]
        A flag for binning a ``quantitative`` field, `an object defining binning parameters
        <https://vega.github.io/vega-lite/docs/bin.html#bin-parameters>`__, or indicating
        that the data for ``x`` or ``y`` channel are binned before they are imported into
        Vega-Lite ( ``"binned"`` ).


        If ``true``, default `binning parameters
        <https://vega.github.io/vega-lite/docs/bin.html#bin-parameters>`__ will be applied.

        If ``"binned"``, this indicates that the data for the ``x`` (or ``y`` ) channel are
        already binned. You can map the bin-start field to ``x`` (or ``y`` ) and the bin-end
        field to ``x2`` (or ``y2`` ). The scale and axis will be formatted similar to
        binning in Vega-Lite.  To adjust the axis ticks based on the bin step, you can also
        set the axis's `tickMinStep
        <https://vega.github.io/vega-lite/docs/axis.html#ticks>`__ property.

        **Default value:** ``false``

        **See also:** `bin <https://vega.github.io/vega-lite/docs/bin.html>`__
        documentation.
    condition : Union[List[Union[:class:`ConditionalValueDefTextExprRef`, Union[:class:`ConditionalParameterValueDefTextExprRef`, Dict[required=[param, value]]], Union[:class:`ConditionalPredicateValueDefTextExprRef`, Dict[required=[test, value]]]]], Union[:class:`ConditionalValueDefTextExprRef`, Union[:class:`ConditionalParameterValueDefTextExprRef`, Dict[required=[param, value]]], Union[:class:`ConditionalPredicateValueDefTextExprRef`, Dict[required=[test, value]]]]]
        One or more value definition(s) with `a parameter or a test predicate
        <https://vega.github.io/vega-lite/docs/condition.html>`__.

        **Note:** A field definition's ``condition`` property can only contain `conditional
        value definitions <https://vega.github.io/vega-lite/docs/condition.html#value>`__
        since Vega-Lite only allows at most one encoded field per encoding channel.
    field : Union[:class:`Field`, Union[:class:`FieldName`, str], Union[:class:`RepeatRef`, Dict[required=[repeat]]]]
        **Required.** A string defining the name of the field from which to pull a data
        value or an object defining iterated values from the `repeat
        <https://vega.github.io/vega-lite/docs/repeat.html>`__ operator.

        **See also:** `field <https://vega.github.io/vega-lite/docs/field.html>`__
        documentation.

        **Notes:** 1)  Dots ( ``.`` ) and brackets ( ``[`` and ``]`` ) can be used to access
        nested objects (e.g., ``"field": "foo.bar"`` and ``"field": "foo['bar']"`` ). If
        field names contain dots or brackets but are not nested, you can use ``\\`` to
        escape dots and brackets (e.g., ``"a\\.b"`` and ``"a\\[0\\]"`` ). See more details
        about escaping in the `field documentation
        <https://vega.github.io/vega-lite/docs/field.html>`__. 2) ``field`` is not required
        if ``aggregate`` is ``count``.
    format : Union[Union[:class:`Dict`, Dict[required=[]]], str]
        When used with the default ``"number"`` and ``"time"`` format type, the text
        formatting pattern for labels of guides (axes, legends, headers) and text marks.


        * If the format type is ``"number"`` (e.g., for quantitative fields), this is D3's
          `number format pattern <https://github.com/d3/d3-format#locale_format>`__.
        * If the format type is ``"time"`` (e.g., for temporal fields), this is D3's `time
          format pattern <https://github.com/d3/d3-time-format#locale_format>`__.

        See the `format documentation <https://vega.github.io/vega-lite/docs/format.html>`__
        for more examples.

        When used with a `custom formatType
        <https://vega.github.io/vega-lite/docs/config.html#custom-format-type>`__, this
        value will be passed as ``format`` alongside ``datum.value`` to the registered
        function.

        **Default value:**  Derived from `numberFormat
        <https://vega.github.io/vega-lite/docs/config.html#format>`__ config for number
        format and from `timeFormat
        <https://vega.github.io/vega-lite/docs/config.html#format>`__ config for time
        format.
    formatType : str
        The format type for labels. One of ``"number"``, ``"time"``, or a `registered custom
        format type
        <https://vega.github.io/vega-lite/docs/config.html#custom-format-type>`__.

        **Default value:**


        * ``"time"`` for temporal fields and ordinal and nominal fields with ``timeUnit``.
        * ``"number"`` for quantitative fields as well as ordinal and nominal fields without
          ``timeUnit``.
    timeUnit : Union[Union[:class:`BinnedTimeUnit`, Literal['binnedutcyear', 'binnedutcyearquarter', 'binnedutcyearquartermonth', 'binnedutcyearmonth', 'binnedutcyearmonthdate', 'binnedutcyearmonthdatehours', 'binnedutcyearmonthdatehoursminutes', 'binnedutcyearmonthdatehoursminutesseconds', 'binnedutcyearweek', 'binnedutcyearweekday', 'binnedutcyearweekdayhours', 'binnedutcyearweekdayhoursminutes', 'binnedutcyearweekdayhoursminutesseconds', 'binnedutcyeardayofyear'], Literal['binnedyear', 'binnedyearquarter', 'binnedyearquartermonth', 'binnedyearmonth', 'binnedyearmonthdate', 'binnedyearmonthdatehours', 'binnedyearmonthdatehoursminutes', 'binnedyearmonthdatehoursminutesseconds', 'binnedyearweek', 'binnedyearweekday', 'binnedyearweekdayhours', 'binnedyearweekdayhoursminutes', 'binnedyearweekdayhoursminutesseconds', 'binnedyeardayofyear']], Union[:class:`TimeUnitParams`, Dict[required=[]]], Union[:class:`TimeUnit`, Union[:class:`MultiTimeUnit`, Union[:class:`LocalMultiTimeUnit`, Literal['yearquarter', 'yearquartermonth', 'yearmonth', 'yearmonthdate', 'yearmonthdatehours', 'yearmonthdatehoursminutes', 'yearmonthdatehoursminutesseconds', 'yearweek', 'yearweekday', 'yearweekdayhours', 'yearweekdayhoursminutes', 'yearweekdayhoursminutesseconds', 'yeardayofyear', 'quartermonth', 'monthdate', 'monthdatehours', 'monthdatehoursminutes', 'monthdatehoursminutesseconds', 'weekday', 'weeksdayhours', 'weekdayhoursminutes', 'weekdayhoursminutesseconds', 'dayhours', 'dayhoursminutes', 'dayhoursminutesseconds', 'hoursminutes', 'hoursminutesseconds', 'minutesseconds', 'secondsmilliseconds']], Union[:class:`UtcMultiTimeUnit`, Literal['utcyearquarter', 'utcyearquartermonth', 'utcyearmonth', 'utcyearmonthdate', 'utcyearmonthdatehours', 'utcyearmonthdatehoursminutes', 'utcyearmonthdatehoursminutesseconds', 'utcyearweek', 'utcyearweekday', 'utcyearweekdayhours', 'utcyearweekdayhoursminutes', 'utcyearweekdayhoursminutesseconds', 'utcyeardayofyear', 'utcquartermonth', 'utcmonthdate', 'utcmonthdatehours', 'utcmonthdatehoursminutes', 'utcmonthdatehoursminutesseconds', 'utcweekday', 'utcweeksdayhours', 'utcweekdayhoursminutes', 'utcweekdayhoursminutesseconds', 'utcdayhours', 'utcdayhoursminutes', 'utcdayhoursminutesseconds', 'utchoursminutes', 'utchoursminutesseconds', 'utcminutesseconds', 'utcsecondsmilliseconds']]], Union[:class:`SingleTimeUnit`, Union[:class:`LocalSingleTimeUnit`, Literal['year', 'quarter', 'month', 'week', 'day', 'dayofyear', 'date', 'hours', 'minutes', 'seconds', 'milliseconds']], Union[:class:`UtcSingleTimeUnit`, Literal['utcyear', 'utcquarter', 'utcmonth', 'utcweek', 'utcday', 'utcdayofyear', 'utcdate', 'utchours', 'utcminutes', 'utcseconds', 'utcmilliseconds']]]]]
        Time unit (e.g., ``year``, ``yearmonth``, ``month``, ``hours`` ) for a temporal
        field. or `a temporal field that gets casted as ordinal
        <https://vega.github.io/vega-lite/docs/type.html#cast>`__.

        **Default value:** ``undefined`` (None)

        **See also:** `timeUnit <https://vega.github.io/vega-lite/docs/timeunit.html>`__
        documentation.
    title : Union[None, Union[:class:`Text`, List[str], str]]
        A title for the field. If ``null``, the title will be removed.

        **Default value:**  derived from the field's name and transformation function (
        ``aggregate``, ``bin`` and ``timeUnit`` ). If the field has an aggregate function,
        the function is displayed as part of the title (e.g., ``"Sum of Profit"`` ). If the
        field is binned or has a time unit applied, the applied function is shown in
        parentheses (e.g., ``"Profit (binned)"``, ``"Transaction Date (year-month)"`` ).
        Otherwise, the title is simply the field name.

        **Notes** :

        1) You can customize the default field title format by providing the `fieldTitle
        <https://vega.github.io/vega-lite/docs/config.html#top-level-config>`__ property in
        the `config <https://vega.github.io/vega-lite/docs/config.html>`__ or `fieldTitle
        function via the compile function's options
        <https://vega.github.io/vega-lite/usage/compile.html#field-title>`__.

        2) If both field definition's ``title`` and axis, header, or legend ``title`` are
        defined, axis/header/legend title will be used.
    type : Union[:class:`StandardType`, Literal['quantitative', 'ordinal', 'temporal', 'nominal']]
        The type of measurement ( ``"quantitative"``, ``"temporal"``, ``"ordinal"``, or
        ``"nominal"`` ) for the encoded field or constant value ( ``datum`` ). It can also
        be a ``"geojson"`` type for encoding `'geoshape'
        <https://vega.github.io/vega-lite/docs/geoshape.html>`__.

        Vega-Lite automatically infers data types in many cases as discussed below. However,
        type is required for a field if: (1) the field is not nominal and the field encoding
        has no specified ``aggregate`` (except ``argmin`` and ``argmax`` ), ``bin``, scale
        type, custom ``sort`` order, nor ``timeUnit`` or (2) if you wish to use an ordinal
        scale for a field with ``bin`` or ``timeUnit``.

        **Default value:**

        1) For a data ``field``, ``"nominal"`` is the default data type unless the field
        encoding has ``aggregate``, ``channel``, ``bin``, scale type, ``sort``, or
        ``timeUnit`` that satisfies the following criteria:


        * ``"quantitative"`` is the default type if (1) the encoded field contains ``bin``
          or ``aggregate`` except ``"argmin"`` and ``"argmax"``, (2) the encoding channel is
          ``latitude`` or ``longitude`` channel or (3) if the specified scale type is `a
          quantitative scale <https://vega.github.io/vega-lite/docs/scale.html#type>`__.
        * ``"temporal"`` is the default type if (1) the encoded field contains ``timeUnit``
          or (2) the specified scale type is a time or utc scale
        * ``"ordinal"`` is the default type if (1) the encoded field contains a `custom sort
          order
          <https://vega.github.io/vega-lite/docs/sort.html#specifying-custom-sort-order>`__,
          (2) the specified scale type is an ordinal/point/band scale, or (3) the encoding
          channel is ``order``.

        2) For a constant value in data domain ( ``datum`` ):


        * ``"quantitative"`` if the datum is a number
        * ``"nominal"`` if the datum is a string
        * ``"temporal"`` if the datum is `a date time object
          <https://vega.github.io/vega-lite/docs/datetime.html>`__

        **Note:**


        * Data ``type`` describes the semantics of the data rather than the primitive data
          types (number, string, etc.). The same primitive data type can have different
          types of measurement. For example, numeric data can represent quantitative,
          ordinal, or nominal data.
        * Data values for a temporal field can be either a date-time string (e.g.,
          ``"2015-03-07 12:32:17"``, ``"17:01"``, ``"2015-03-16"``. ``"2015"`` ) or a
          timestamp number (e.g., ``1552199579097`` ).
        * When using with `bin <https://vega.github.io/vega-lite/docs/bin.html>`__, the
          ``type`` property can be either ``"quantitative"`` (for using a linear bin scale)
          or `"ordinal" (for using an ordinal bin scale)
          <https://vega.github.io/vega-lite/docs/type.html#cast-bin>`__.
        * When using with `timeUnit
          <https://vega.github.io/vega-lite/docs/timeunit.html>`__, the ``type`` property
          can be either ``"temporal"`` (default, for using a temporal scale) or `"ordinal"
          (for using an ordinal scale)
          <https://vega.github.io/vega-lite/docs/type.html#cast-bin>`__.
        * When using with `aggregate
          <https://vega.github.io/vega-lite/docs/aggregate.html>`__, the ``type`` property
          refers to the post-aggregation data type. For example, we can calculate count
          ``distinct`` of a categorical field ``"cat"`` using ``{"aggregate": "distinct",
          "field": "cat"}``. The ``"type"`` of the aggregate output is ``"quantitative"``.
        * Secondary channels (e.g., ``x2``, ``y2``, ``xError``, ``yError`` ) do not have
          ``type`` as they must have exactly the same type as their primary channels (e.g.,
          ``x``, ``y`` ).

        **See also:** `type <https://vega.github.io/vega-lite/docs/type.html>`__
        documentation.
    """

    _schema = {
        "$ref": "#/definitions/FieldOrDatumDefWithCondition<StringFieldDef,Text>"
    }

    def __init__(
        self,
        aggregate: Union[
            Union[
                "Aggregate",
                Union["ArgmaxDef", dict],
                Union["ArgminDef", dict],
                Union[
                    "NonArgAggregateOp",
                    Literal[
                        "average",
                        "count",
                        "distinct",
                        "max",
                        "mean",
                        "median",
                        "min",
                        "missing",
                        "product",
                        "q1",
                        "q3",
                        "ci0",
                        "ci1",
                        "stderr",
                        "stdev",
                        "stdevp",
                        "sum",
                        "valid",
                        "values",
                        "variance",
                        "variancep",
                    ],
                ],
            ],
            UndefinedType,
        ] = Undefined,
        bandPosition: Union[float, UndefinedType] = Undefined,
        bin: Union[
            Union[None, Union["BinParams", dict], bool, str], UndefinedType
        ] = Undefined,
        condition: Union[
            Union[
                Union[
                    "ConditionalValueDefTextExprRef",
                    Union["ConditionalParameterValueDefTextExprRef", dict],
                    Union["ConditionalPredicateValueDefTextExprRef", dict],
                ],
                Union[
                    List["ConditionalValueDefTextExprRef"],
                    List[Union["ConditionalParameterValueDefTextExprRef", dict]],
                    List[Union["ConditionalPredicateValueDefTextExprRef", dict]],
                ],
            ],
            UndefinedType,
        ] = Undefined,
        field: Union[
            Union["Field", Union["FieldName", str], Union["RepeatRef", dict]],
            UndefinedType,
        ] = Undefined,
        format: Union[Union[Union["Dict", dict], str], UndefinedType] = Undefined,
        formatType: Union[str, UndefinedType] = Undefined,
        timeUnit: Union[
            Union[
                Union[
                    "BinnedTimeUnit",
                    Literal[
                        "binnedutcyear",
                        "binnedutcyearquarter",
                        "binnedutcyearquartermonth",
                        "binnedutcyearmonth",
                        "binnedutcyearmonthdate",
                        "binnedutcyearmonthdatehours",
                        "binnedutcyearmonthdatehoursminutes",
                        "binnedutcyearmonthdatehoursminutesseconds",
                        "binnedutcyearweek",
                        "binnedutcyearweekday",
                        "binnedutcyearweekdayhours",
                        "binnedutcyearweekdayhoursminutes",
                        "binnedutcyearweekdayhoursminutesseconds",
                        "binnedutcyeardayofyear",
                    ],
                    Literal[
                        "binnedyear",
                        "binnedyearquarter",
                        "binnedyearquartermonth",
                        "binnedyearmonth",
                        "binnedyearmonthdate",
                        "binnedyearmonthdatehours",
                        "binnedyearmonthdatehoursminutes",
                        "binnedyearmonthdatehoursminutesseconds",
                        "binnedyearweek",
                        "binnedyearweekday",
                        "binnedyearweekdayhours",
                        "binnedyearweekdayhoursminutes",
                        "binnedyearweekdayhoursminutesseconds",
                        "binnedyeardayofyear",
                    ],
                ],
                Union[
                    "TimeUnit",
                    Union[
                        "MultiTimeUnit",
                        Union[
                            "LocalMultiTimeUnit",
                            Literal[
                                "yearquarter",
                                "yearquartermonth",
                                "yearmonth",
                                "yearmonthdate",
                                "yearmonthdatehours",
                                "yearmonthdatehoursminutes",
                                "yearmonthdatehoursminutesseconds",
                                "yearweek",
                                "yearweekday",
                                "yearweekdayhours",
                                "yearweekdayhoursminutes",
                                "yearweekdayhoursminutesseconds",
                                "yeardayofyear",
                                "quartermonth",
                                "monthdate",
                                "monthdatehours",
                                "monthdatehoursminutes",
                                "monthdatehoursminutesseconds",
                                "weekday",
                                "weeksdayhours",
                                "weekdayhoursminutes",
                                "weekdayhoursminutesseconds",
                                "dayhours",
                                "dayhoursminutes",
                                "dayhoursminutesseconds",
                                "hoursminutes",
                                "hoursminutesseconds",
                                "minutesseconds",
                                "secondsmilliseconds",
                            ],
                        ],
                        Union[
                            "UtcMultiTimeUnit",
                            Literal[
                                "utcyearquarter",
                                "utcyearquartermonth",
                                "utcyearmonth",
                                "utcyearmonthdate",
                                "utcyearmonthdatehours",
                                "utcyearmonthdatehoursminutes",
                                "utcyearmonthdatehoursminutesseconds",
                                "utcyearweek",
                                "utcyearweekday",
                                "utcyearweekdayhours",
                                "utcyearweekdayhoursminutes",
                                "utcyearweekdayhoursminutesseconds",
                                "utcyeardayofyear",
                                "utcquartermonth",
                                "utcmonthdate",
                                "utcmonthdatehours",
                                "utcmonthdatehoursminutes",
                                "utcmonthdatehoursminutesseconds",
                                "utcweekday",
                                "utcweeksdayhours",
                                "utcweekdayhoursminutes",
                                "utcweekdayhoursminutesseconds",
                                "utcdayhours",
                                "utcdayhoursminutes",
                                "utcdayhoursminutesseconds",
                                "utchoursminutes",
                                "utchoursminutesseconds",
                                "utcminutesseconds",
                                "utcsecondsmilliseconds",
                            ],
                        ],
                    ],
                    Union[
                        "SingleTimeUnit",
                        Union[
                            "LocalSingleTimeUnit",
                            Literal[
                                "year",
                                "quarter",
                                "month",
                                "week",
                                "day",
                                "dayofyear",
                                "date",
                                "hours",
                                "minutes",
                                "seconds",
                                "milliseconds",
                            ],
                        ],
                        Union[
                            "UtcSingleTimeUnit",
                            Literal[
                                "utcyear",
                                "utcquarter",
                                "utcmonth",
                                "utcweek",
                                "utcday",
                                "utcdayofyear",
                                "utcdate",
                                "utchours",
                                "utcminutes",
                                "utcseconds",
                                "utcmilliseconds",
                            ],
                        ],
                    ],
                ],
                Union["TimeUnitParams", dict],
            ],
            UndefinedType,
        ] = Undefined,
        title: Union[
            Union[None, Union["Text", List[str], str]], UndefinedType
        ] = Undefined,
        type: Union[
            Union[
                "StandardType",
                Literal["quantitative", "ordinal", "temporal", "nominal"],
            ],
            UndefinedType,
        ] = Undefined,
        **kwds
    ):
        super(FieldOrDatumDefWithConditionStringFieldDefText, self).__init__(
            aggregate=aggregate,
            bandPosition=bandPosition,
            bin=bin,
            condition=condition,
            field=field,
            format=format,
            formatType=formatType,
            timeUnit=timeUnit,
            title=title,
            type=type,
            **kwds
        )


class TextDirection(VegaLiteSchema):
    """TextDirection schema wrapper

    Union[:class:`TextDirection`, Literal['ltr', 'rtl']]
    """

    _schema = {"$ref": "#/definitions/TextDirection"}

    def __init__(self, *args):
        super(TextDirection, self).__init__(*args)


class TickConfig(AnyMarkConfig):
    """TickConfig schema wrapper

    Union[:class:`TickConfig`, Dict[required=[]]]

    Parameters
    ----------

    align : Union[Union[:class:`Align`, Literal['left', 'center', 'right']], Union[:class:`ExprRef`, Dict[required=[expr]]]]
        The horizontal alignment of the text or ranged marks (area, bar, image, rect, rule).
        One of ``"left"``, ``"right"``, ``"center"``.

        **Note:** Expression reference is *not* supported for range marks.
    angle : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], float]
        The rotation angle of the text, in degrees.
    aria : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], bool]
        A boolean flag indicating if `ARIA attributes
        <https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA>`__ should be
        included (SVG output only). If ``false``, the "aria-hidden" attribute will be set on
        the output SVG element, removing the mark item from the ARIA accessibility tree.
    ariaRole : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], str]
        Sets the type of user interface element of the mark item for `ARIA accessibility
        <https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA>`__ (SVG output
        only). If specified, this property determines the "role" attribute. Warning: this
        property is experimental and may be changed in the future.
    ariaRoleDescription : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], str]
        A human-readable, author-localized description for the role of the mark item for
        `ARIA accessibility
        <https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA>`__ (SVG output
        only). If specified, this property determines the "aria-roledescription" attribute.
        Warning: this property is experimental and may be changed in the future.
    aspect : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], bool]
        Whether to keep aspect ratio of image marks.
    bandSize : float
        The width of the ticks.

        **Default value:**  3/4 of step (width step for horizontal ticks and height step for
        vertical ticks).
    baseline : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], Union[:class:`TextBaseline`, Union[:class:`Baseline`, Literal['top', 'middle', 'bottom']], str]]
        For text marks, the vertical text baseline. One of ``"alphabetic"`` (default),
        ``"top"``, ``"middle"``, ``"bottom"``, ``"line-top"``, ``"line-bottom"``, or an
        expression reference that provides one of the valid values. The ``"line-top"`` and
        ``"line-bottom"`` values operate similarly to ``"top"`` and ``"bottom"``, but are
        calculated relative to the ``lineHeight`` rather than ``fontSize`` alone.

        For range marks, the vertical alignment of the marks. One of ``"top"``,
        ``"middle"``, ``"bottom"``.

        **Note:** Expression reference is *not* supported for range marks.
    blend : Union[Union[:class:`Blend`, Literal[None, 'multiply', 'screen', 'overlay', 'darken', 'lighten', 'color-dodge', 'color-burn', 'hard-light', 'soft-light', 'difference', 'exclusion', 'hue', 'saturation', 'color', 'luminosity']], Union[:class:`ExprRef`, Dict[required=[expr]]]]
        The color blend mode for drawing an item on its current background. Any valid `CSS
        mix-blend-mode <https://developer.mozilla.org/en-US/docs/Web/CSS/mix-blend-mode>`__
        value can be used.

        __Default value:__ ``"source-over"``
    color : Union[Union[:class:`Color`, Union[:class:`ColorName`, Literal['black', 'silver', 'gray', 'white', 'maroon', 'red', 'purple', 'fuchsia', 'green', 'lime', 'olive', 'yellow', 'navy', 'blue', 'teal', 'aqua', 'orange', 'aliceblue', 'antiquewhite', 'aquamarine', 'azure', 'beige', 'bisque', 'blanchedalmond', 'blueviolet', 'brown', 'burlywood', 'cadetblue', 'chartreuse', 'chocolate', 'coral', 'cornflowerblue', 'cornsilk', 'crimson', 'cyan', 'darkblue', 'darkcyan', 'darkgoldenrod', 'darkgray', 'darkgreen', 'darkgrey', 'darkkhaki', 'darkmagenta', 'darkolivegreen', 'darkorange', 'darkorchid', 'darkred', 'darksalmon', 'darkseagreen', 'darkslateblue', 'darkslategray', 'darkslategrey', 'darkturquoise', 'darkviolet', 'deeppink', 'deepskyblue', 'dimgray', 'dimgrey', 'dodgerblue', 'firebrick', 'floralwhite', 'forestgreen', 'gainsboro', 'ghostwhite', 'gold', 'goldenrod', 'greenyellow', 'grey', 'honeydew', 'hotpink', 'indianred', 'indigo', 'ivory', 'khaki', 'lavender', 'lavenderblush', 'lawngreen', 'lemonchiffon', 'lightblue', 'lightcoral', 'lightcyan', 'lightgoldenrodyellow', 'lightgray', 'lightgreen', 'lightgrey', 'lightpink', 'lightsalmon', 'lightseagreen', 'lightskyblue', 'lightslategray', 'lightslategrey', 'lightsteelblue', 'lightyellow', 'limegreen', 'linen', 'magenta', 'mediumaquamarine', 'mediumblue', 'mediumorchid', 'mediumpurple', 'mediumseagreen', 'mediumslateblue', 'mediumspringgreen', 'mediumturquoise', 'mediumvioletred', 'midnightblue', 'mintcream', 'mistyrose', 'moccasin', 'navajowhite', 'oldlace', 'olivedrab', 'orangered', 'orchid', 'palegoldenrod', 'palegreen', 'paleturquoise', 'palevioletred', 'papayawhip', 'peachpuff', 'peru', 'pink', 'plum', 'powderblue', 'rosybrown', 'royalblue', 'saddlebrown', 'salmon', 'sandybrown', 'seagreen', 'seashell', 'sienna', 'skyblue', 'slateblue', 'slategray', 'slategrey', 'snow', 'springgreen', 'steelblue', 'tan', 'thistle', 'tomato', 'turquoise', 'violet', 'wheat', 'whitesmoke', 'yellowgreen', 'rebeccapurple']], Union[:class:`HexColor`, str], str], Union[:class:`ExprRef`, Dict[required=[expr]]], Union[:class:`Gradient`, Union[:class:`LinearGradient`, Dict[required=[gradient, stops]]], Union[:class:`RadialGradient`, Dict[required=[gradient, stops]]]]]
        Default color.

        **Default value:** :raw-html:`<span style="color: #4682b4;">&#9632;</span>`
        ``"#4682b4"``

        **Note:**


        * This property cannot be used in a `style config
          <https://vega.github.io/vega-lite/docs/mark.html#style-config>`__.
        * The ``fill`` and ``stroke`` properties have higher precedence than ``color`` and
          will override ``color``.
    cornerRadius : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], float]
        The radius in pixels of rounded rectangles or arcs' corners.

        **Default value:** ``0``
    cornerRadiusBottomLeft : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], float]
        The radius in pixels of rounded rectangles' bottom left corner.

        **Default value:** ``0``
    cornerRadiusBottomRight : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], float]
        The radius in pixels of rounded rectangles' bottom right corner.

        **Default value:** ``0``
    cornerRadiusTopLeft : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], float]
        The radius in pixels of rounded rectangles' top right corner.

        **Default value:** ``0``
    cornerRadiusTopRight : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], float]
        The radius in pixels of rounded rectangles' top left corner.

        **Default value:** ``0``
    cursor : Union[Union[:class:`Cursor`, Literal['auto', 'default', 'none', 'context-menu', 'help', 'pointer', 'progress', 'wait', 'cell', 'crosshair', 'text', 'vertical-text', 'alias', 'copy', 'move', 'no-drop', 'not-allowed', 'e-resize', 'n-resize', 'ne-resize', 'nw-resize', 's-resize', 'se-resize', 'sw-resize', 'w-resize', 'ew-resize', 'ns-resize', 'nesw-resize', 'nwse-resize', 'col-resize', 'row-resize', 'all-scroll', 'zoom-in', 'zoom-out', 'grab', 'grabbing']], Union[:class:`ExprRef`, Dict[required=[expr]]]]
        The mouse cursor used over the mark. Any valid `CSS cursor type
        <https://developer.mozilla.org/en-US/docs/Web/CSS/cursor#Values>`__ can be used.
    description : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], str]
        A text description of the mark item for `ARIA accessibility
        <https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA>`__ (SVG output
        only). If specified, this property determines the `"aria-label" attribute
        <https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/ARIA_Techniques/Using_the_aria-label_attribute>`__.
    dir : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], Union[:class:`TextDirection`, Literal['ltr', 'rtl']]]
        The direction of the text. One of ``"ltr"`` (left-to-right) or ``"rtl"``
        (right-to-left). This property determines on which side is truncated in response to
        the limit parameter.

        **Default value:** ``"ltr"``
    dx : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], float]
        The horizontal offset, in pixels, between the text label and its anchor point. The
        offset is applied after rotation by the *angle* property.
    dy : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], float]
        The vertical offset, in pixels, between the text label and its anchor point. The
        offset is applied after rotation by the *angle* property.
    ellipsis : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], str]
        The ellipsis string for text truncated in response to the limit parameter.

        **Default value:** ``"…"``
    endAngle : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], float]
        The end angle in radians for arc marks. A value of ``0`` indicates up (north),
        increasing values proceed clockwise.
    fill : Union[None, Union[:class:`Color`, Union[:class:`ColorName`, Literal['black', 'silver', 'gray', 'white', 'maroon', 'red', 'purple', 'fuchsia', 'green', 'lime', 'olive', 'yellow', 'navy', 'blue', 'teal', 'aqua', 'orange', 'aliceblue', 'antiquewhite', 'aquamarine', 'azure', 'beige', 'bisque', 'blanchedalmond', 'blueviolet', 'brown', 'burlywood', 'cadetblue', 'chartreuse', 'chocolate', 'coral', 'cornflowerblue', 'cornsilk', 'crimson', 'cyan', 'darkblue', 'darkcyan', 'darkgoldenrod', 'darkgray', 'darkgreen', 'darkgrey', 'darkkhaki', 'darkmagenta', 'darkolivegreen', 'darkorange', 'darkorchid', 'darkred', 'darksalmon', 'darkseagreen', 'darkslateblue', 'darkslategray', 'darkslategrey', 'darkturquoise', 'darkviolet', 'deeppink', 'deepskyblue', 'dimgray', 'dimgrey', 'dodgerblue', 'firebrick', 'floralwhite', 'forestgreen', 'gainsboro', 'ghostwhite', 'gold', 'goldenrod', 'greenyellow', 'grey', 'honeydew', 'hotpink', 'indianred', 'indigo', 'ivory', 'khaki', 'lavender', 'lavenderblush', 'lawngreen', 'lemonchiffon', 'lightblue', 'lightcoral', 'lightcyan', 'lightgoldenrodyellow', 'lightgray', 'lightgreen', 'lightgrey', 'lightpink', 'lightsalmon', 'lightseagreen', 'lightskyblue', 'lightslategray', 'lightslategrey', 'lightsteelblue', 'lightyellow', 'limegreen', 'linen', 'magenta', 'mediumaquamarine', 'mediumblue', 'mediumorchid', 'mediumpurple', 'mediumseagreen', 'mediumslateblue', 'mediumspringgreen', 'mediumturquoise', 'mediumvioletred', 'midnightblue', 'mintcream', 'mistyrose', 'moccasin', 'navajowhite', 'oldlace', 'olivedrab', 'orangered', 'orchid', 'palegoldenrod', 'palegreen', 'paleturquoise', 'palevioletred', 'papayawhip', 'peachpuff', 'peru', 'pink', 'plum', 'powderblue', 'rosybrown', 'royalblue', 'saddlebrown', 'salmon', 'sandybrown', 'seagreen', 'seashell', 'sienna', 'skyblue', 'slateblue', 'slategray', 'slategrey', 'snow', 'springgreen', 'steelblue', 'tan', 'thistle', 'tomato', 'turquoise', 'violet', 'wheat', 'whitesmoke', 'yellowgreen', 'rebeccapurple']], Union[:class:`HexColor`, str], str], Union[:class:`ExprRef`, Dict[required=[expr]]], Union[:class:`Gradient`, Union[:class:`LinearGradient`, Dict[required=[gradient, stops]]], Union[:class:`RadialGradient`, Dict[required=[gradient, stops]]]]]
        Default fill color. This property has higher precedence than ``config.color``. Set
        to ``null`` to remove fill.

        **Default value:** (None)
    fillOpacity : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], float]
        The fill opacity (value between [0,1]).

        **Default value:** ``1``
    filled : bool
        Whether the mark's color should be used as fill color instead of stroke color.

        **Default value:** ``false`` for all ``point``, ``line``, and ``rule`` marks as well
        as ``geoshape`` marks for `graticule
        <https://vega.github.io/vega-lite/docs/data.html#graticule>`__ data sources;
        otherwise, ``true``.

        **Note:** This property cannot be used in a `style config
        <https://vega.github.io/vega-lite/docs/mark.html#style-config>`__.
    font : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], str]
        The typeface to set the text in (e.g., ``"Helvetica Neue"`` ).
    fontSize : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], float]
        The font size, in pixels.

        **Default value:** ``11``
    fontStyle : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], Union[:class:`FontStyle`, str]]
        The font style (e.g., ``"italic"`` ).
    fontWeight : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], Union[:class:`FontWeight`, Literal['normal', 'bold', 'lighter', 'bolder', 100, 200, 300, 400, 500, 600, 700, 800, 900]]]
        The font weight. This can be either a string (e.g ``"bold"``, ``"normal"`` ) or a
        number ( ``100``, ``200``, ``300``, ..., ``900`` where ``"normal"`` = ``400`` and
        ``"bold"`` = ``700`` ).
    height : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], float]
        Height of the marks.
    href : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], Union[:class:`URI`, str]]
        A URL to load upon mouse click. If defined, the mark acts as a hyperlink.
    innerRadius : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], float]
        The inner radius in pixels of arc marks. ``innerRadius`` is an alias for
        ``radius2``.

        **Default value:** ``0``
    interpolate : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], Union[:class:`Interpolate`, Literal['basis', 'basis-open', 'basis-closed', 'bundle', 'cardinal', 'cardinal-open', 'cardinal-closed', 'catmull-rom', 'linear', 'linear-closed', 'monotone', 'natural', 'step', 'step-before', 'step-after']]]
        The line interpolation method to use for line and area marks. One of the following:


        * ``"linear"`` : piecewise linear segments, as in a polyline.
        * ``"linear-closed"`` : close the linear segments to form a polygon.
        * ``"step"`` : alternate between horizontal and vertical segments, as in a step
          function.
        * ``"step-before"`` : alternate between vertical and horizontal segments, as in a
          step function.
        * ``"step-after"`` : alternate between horizontal and vertical segments, as in a
          step function.
        * ``"basis"`` : a B-spline, with control point duplication on the ends.
        * ``"basis-open"`` : an open B-spline; may not intersect the start or end.
        * ``"basis-closed"`` : a closed B-spline, as in a loop.
        * ``"cardinal"`` : a Cardinal spline, with control point duplication on the ends.
        * ``"cardinal-open"`` : an open Cardinal spline; may not intersect the start or end,
          but will intersect other control points.
        * ``"cardinal-closed"`` : a closed Cardinal spline, as in a loop.
        * ``"bundle"`` : equivalent to basis, except the tension parameter is used to
          straighten the spline.
        * ``"monotone"`` : cubic interpolation that preserves monotonicity in y.
    invalid : Literal['filter', None]
        Defines how Vega-Lite should handle marks for invalid values ( ``null`` and ``NaN``
        ).


        * If set to ``"filter"`` (default), all data items with null values will be skipped
          (for line, trail, and area marks) or filtered (for other marks).
        * If ``null``, all data items are included. In this case, invalid values will be
          interpreted as zeroes.
    limit : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], float]
        The maximum length of the text mark in pixels. The text value will be automatically
        truncated if the rendered size exceeds the limit.

        **Default value:** ``0`` -- indicating no limit
    lineBreak : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], str]
        A delimiter, such as a newline character, upon which to break text strings into
        multiple lines. This property is ignored if the text is array-valued.
    lineHeight : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], float]
        The line height in pixels (the spacing between subsequent lines of text) for
        multi-line text marks.
    opacity : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], float]
        The overall opacity (value between [0,1]).

        **Default value:** ``0.7`` for non-aggregate plots with ``point``, ``tick``,
        ``circle``, or ``square`` marks or layered ``bar`` charts and ``1`` otherwise.
    order : Union[None, bool]
        For line and trail marks, this ``order`` property can be set to ``null`` or
        ``false`` to make the lines use the original order in the data sources.
    orient : Union[:class:`Orientation`, Literal['horizontal', 'vertical']]
        The orientation of a non-stacked bar, tick, area, and line charts. The value is
        either horizontal (default) or vertical.


        * For bar, rule and tick, this determines whether the size of the bar and tick
          should be applied to x or y dimension.
        * For area, this property determines the orient property of the Vega output.
        * For line and trail marks, this property determines the sort order of the points in
          the line if ``config.sortLineBy`` is not specified. For stacked charts, this is
          always determined by the orientation of the stack; therefore explicitly specified
          value will be ignored.
    outerRadius : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], float]
        The outer radius in pixels of arc marks. ``outerRadius`` is an alias for ``radius``.

        **Default value:** ``0``
    padAngle : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], float]
        The angular padding applied to sides of the arc, in radians.
    radius : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], float]
        For arc mark, the primary (outer) radius in pixels.

        For text marks, polar coordinate radial offset, in pixels, of the text from the
        origin determined by the ``x`` and ``y`` properties.

        **Default value:** ``min(plot_width, plot_height)/2``
    radius2 : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], float]
        The secondary (inner) radius in pixels of arc marks.

        **Default value:** ``0``
    shape : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], Union[Union[:class:`SymbolShape`, str], str]]
        Shape of the point marks. Supported values include:


        * plotting shapes: ``"circle"``, ``"square"``, ``"cross"``, ``"diamond"``,
          ``"triangle-up"``, ``"triangle-down"``, ``"triangle-right"``, or
          ``"triangle-left"``.
        * the line symbol ``"stroke"``
        * centered directional shapes ``"arrow"``, ``"wedge"``, or ``"triangle"``
        * a custom `SVG path string
          <https://developer.mozilla.org/en-US/docs/Web/SVG/Tutorial/Paths>`__ (For correct
          sizing, custom shape paths should be defined within a square bounding box with
          coordinates ranging from -1 to 1 along both the x and y dimensions.)

        **Default value:** ``"circle"``
    size : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], float]
        Default size for marks.


        * For ``point`` / ``circle`` / ``square``, this represents the pixel area of the
          marks. Note that this value sets the area of the symbol; the side lengths will
          increase with the square root of this value.
        * For ``bar``, this represents the band size of the bar, in pixels.
        * For ``text``, this represents the font size, in pixels.

        **Default value:**


        * ``30`` for point, circle, square marks; width/height's ``step``
        * ``2`` for bar marks with discrete dimensions;
        * ``5`` for bar marks with continuous dimensions;
        * ``11`` for text marks.
    smooth : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], bool]
        A boolean flag (default true) indicating if the image should be smoothed when
        resized. If false, individual pixels should be scaled directly rather than
        interpolated with smoothing. For SVG rendering, this option may not work in some
        browsers due to lack of standardization.
    startAngle : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], float]
        The start angle in radians for arc marks. A value of ``0`` indicates up (north),
        increasing values proceed clockwise.
    stroke : Union[None, Union[:class:`Color`, Union[:class:`ColorName`, Literal['black', 'silver', 'gray', 'white', 'maroon', 'red', 'purple', 'fuchsia', 'green', 'lime', 'olive', 'yellow', 'navy', 'blue', 'teal', 'aqua', 'orange', 'aliceblue', 'antiquewhite', 'aquamarine', 'azure', 'beige', 'bisque', 'blanchedalmond', 'blueviolet', 'brown', 'burlywood', 'cadetblue', 'chartreuse', 'chocolate', 'coral', 'cornflowerblue', 'cornsilk', 'crimson', 'cyan', 'darkblue', 'darkcyan', 'darkgoldenrod', 'darkgray', 'darkgreen', 'darkgrey', 'darkkhaki', 'darkmagenta', 'darkolivegreen', 'darkorange', 'darkorchid', 'darkred', 'darksalmon', 'darkseagreen', 'darkslateblue', 'darkslategray', 'darkslategrey', 'darkturquoise', 'darkviolet', 'deeppink', 'deepskyblue', 'dimgray', 'dimgrey', 'dodgerblue', 'firebrick', 'floralwhite', 'forestgreen', 'gainsboro', 'ghostwhite', 'gold', 'goldenrod', 'greenyellow', 'grey', 'honeydew', 'hotpink', 'indianred', 'indigo', 'ivory', 'khaki', 'lavender', 'lavenderblush', 'lawngreen', 'lemonchiffon', 'lightblue', 'lightcoral', 'lightcyan', 'lightgoldenrodyellow', 'lightgray', 'lightgreen', 'lightgrey', 'lightpink', 'lightsalmon', 'lightseagreen', 'lightskyblue', 'lightslategray', 'lightslategrey', 'lightsteelblue', 'lightyellow', 'limegreen', 'linen', 'magenta', 'mediumaquamarine', 'mediumblue', 'mediumorchid', 'mediumpurple', 'mediumseagreen', 'mediumslateblue', 'mediumspringgreen', 'mediumturquoise', 'mediumvioletred', 'midnightblue', 'mintcream', 'mistyrose', 'moccasin', 'navajowhite', 'oldlace', 'olivedrab', 'orangered', 'orchid', 'palegoldenrod', 'palegreen', 'paleturquoise', 'palevioletred', 'papayawhip', 'peachpuff', 'peru', 'pink', 'plum', 'powderblue', 'rosybrown', 'royalblue', 'saddlebrown', 'salmon', 'sandybrown', 'seagreen', 'seashell', 'sienna', 'skyblue', 'slateblue', 'slategray', 'slategrey', 'snow', 'springgreen', 'steelblue', 'tan', 'thistle', 'tomato', 'turquoise', 'violet', 'wheat', 'whitesmoke', 'yellowgreen', 'rebeccapurple']], Union[:class:`HexColor`, str], str], Union[:class:`ExprRef`, Dict[required=[expr]]], Union[:class:`Gradient`, Union[:class:`LinearGradient`, Dict[required=[gradient, stops]]], Union[:class:`RadialGradient`, Dict[required=[gradient, stops]]]]]
        Default stroke color. This property has higher precedence than ``config.color``. Set
        to ``null`` to remove stroke.

        **Default value:** (None)
    strokeCap : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], Union[:class:`StrokeCap`, Literal['butt', 'round', 'square']]]
        The stroke cap for line ending style. One of ``"butt"``, ``"round"``, or
        ``"square"``.

        **Default value:** ``"butt"``
    strokeDash : Union[List[float], Union[:class:`ExprRef`, Dict[required=[expr]]]]
        An array of alternating stroke, space lengths for creating dashed or dotted lines.
    strokeDashOffset : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], float]
        The offset (in pixels) into which to begin drawing with the stroke dash array.
    strokeJoin : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], Union[:class:`StrokeJoin`, Literal['miter', 'round', 'bevel']]]
        The stroke line join method. One of ``"miter"``, ``"round"`` or ``"bevel"``.

        **Default value:** ``"miter"``
    strokeMiterLimit : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], float]
        The miter limit at which to bevel a line join.
    strokeOffset : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], float]
        The offset in pixels at which to draw the group stroke and fill. If unspecified, the
        default behavior is to dynamically offset stroked groups such that 1 pixel stroke
        widths align with the pixel grid.
    strokeOpacity : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], float]
        The stroke opacity (value between [0,1]).

        **Default value:** ``1``
    strokeWidth : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], float]
        The stroke width, in pixels.
    tension : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], float]
        Depending on the interpolation type, sets the tension parameter (for line and area
        marks).
    text : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], Union[:class:`Text`, List[str], str]]
        Placeholder text if the ``text`` channel is not specified
    theta : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], float]
        For arc marks, the arc length in radians if theta2 is not specified, otherwise the
        start arc angle. (A value of 0 indicates up or “north”, increasing values proceed
        clockwise.)

        For text marks, polar coordinate angle in radians.
    theta2 : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], float]
        The end angle of arc marks in radians. A value of 0 indicates up or “north”,
        increasing values proceed clockwise.
    thickness : float
        Thickness of the tick mark.

        **Default value:**  ``1``
    timeUnitBandPosition : float
        Default relative band position for a time unit. If set to ``0``, the marks will be
        positioned at the beginning of the time unit band step. If set to ``0.5``, the marks
        will be positioned in the middle of the time unit band step.
    timeUnitBandSize : float
        Default relative band size for a time unit. If set to ``1``, the bandwidth of the
        marks will be equal to the time unit band step. If set to ``0.5``, bandwidth of the
        marks will be half of the time unit band step.
    tooltip : Union[None, Union[:class:`ExprRef`, Dict[required=[expr]]], Union[:class:`TooltipContent`, Dict[required=[content]]], bool, float, str]
        The tooltip text string to show upon mouse hover or an object defining which fields
        should the tooltip be derived from.


        * If ``tooltip`` is ``true`` or ``{"content": "encoding"}``, then all fields from
          ``encoding`` will be used.
        * If ``tooltip`` is ``{"content": "data"}``, then all fields that appear in the
          highlighted data point will be used.
        * If set to ``null`` or ``false``, then no tooltip will be used.

        See the `tooltip <https://vega.github.io/vega-lite/docs/tooltip.html>`__
        documentation for a detailed discussion about tooltip  in Vega-Lite.

        **Default value:** ``null``
    url : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], Union[:class:`URI`, str]]
        The URL of the image file for image marks.
    width : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], float]
        Width of the marks.
    x : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], float, str]
        X coordinates of the marks, or width of horizontal ``"bar"`` and ``"area"`` without
        specified ``x2`` or ``width``.

        The ``value`` of this channel can be a number or a string ``"width"`` for the width
        of the plot.
    x2 : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], float, str]
        X2 coordinates for ranged ``"area"``, ``"bar"``, ``"rect"``, and  ``"rule"``.

        The ``value`` of this channel can be a number or a string ``"width"`` for the width
        of the plot.
    y : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], float, str]
        Y coordinates of the marks, or height of vertical ``"bar"`` and ``"area"`` without
        specified ``y2`` or ``height``.

        The ``value`` of this channel can be a number or a string ``"height"`` for the
        height of the plot.
    y2 : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], float, str]
        Y2 coordinates for ranged ``"area"``, ``"bar"``, ``"rect"``, and  ``"rule"``.

        The ``value`` of this channel can be a number or a string ``"height"`` for the
        height of the plot.
    """

    _schema = {"$ref": "#/definitions/TickConfig"}

    def __init__(
        self,
        align: Union[
            Union[
                Union["Align", Literal["left", "center", "right"]],
                Union["ExprRef", "_ParameterProtocol", dict],
            ],
            UndefinedType,
        ] = Undefined,
        angle: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], float], UndefinedType
        ] = Undefined,
        aria: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], bool], UndefinedType
        ] = Undefined,
        ariaRole: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], str], UndefinedType
        ] = Undefined,
        ariaRoleDescription: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], str], UndefinedType
        ] = Undefined,
        aspect: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], bool], UndefinedType
        ] = Undefined,
        bandSize: Union[float, UndefinedType] = Undefined,
        baseline: Union[
            Union[
                Union["ExprRef", "_ParameterProtocol", dict],
                Union[
                    "TextBaseline",
                    Union["Baseline", Literal["top", "middle", "bottom"]],
                    str,
                ],
            ],
            UndefinedType,
        ] = Undefined,
        blend: Union[
            Union[
                Union[
                    "Blend",
                    Literal[
                        None,
                        "multiply",
                        "screen",
                        "overlay",
                        "darken",
                        "lighten",
                        "color-dodge",
                        "color-burn",
                        "hard-light",
                        "soft-light",
                        "difference",
                        "exclusion",
                        "hue",
                        "saturation",
                        "color",
                        "luminosity",
                    ],
                ],
                Union["ExprRef", "_ParameterProtocol", dict],
            ],
            UndefinedType,
        ] = Undefined,
        color: Union[
            Union[
                Union[
                    "Color",
                    Union[
                        "ColorName",
                        Literal[
                            "black",
                            "silver",
                            "gray",
                            "white",
                            "maroon",
                            "red",
                            "purple",
                            "fuchsia",
                            "green",
                            "lime",
                            "olive",
                            "yellow",
                            "navy",
                            "blue",
                            "teal",
                            "aqua",
                            "orange",
                            "aliceblue",
                            "antiquewhite",
                            "aquamarine",
                            "azure",
                            "beige",
                            "bisque",
                            "blanchedalmond",
                            "blueviolet",
                            "brown",
                            "burlywood",
                            "cadetblue",
                            "chartreuse",
                            "chocolate",
                            "coral",
                            "cornflowerblue",
                            "cornsilk",
                            "crimson",
                            "cyan",
                            "darkblue",
                            "darkcyan",
                            "darkgoldenrod",
                            "darkgray",
                            "darkgreen",
                            "darkgrey",
                            "darkkhaki",
                            "darkmagenta",
                            "darkolivegreen",
                            "darkorange",
                            "darkorchid",
                            "darkred",
                            "darksalmon",
                            "darkseagreen",
                            "darkslateblue",
                            "darkslategray",
                            "darkslategrey",
                            "darkturquoise",
                            "darkviolet",
                            "deeppink",
                            "deepskyblue",
                            "dimgray",
                            "dimgrey",
                            "dodgerblue",
                            "firebrick",
                            "floralwhite",
                            "forestgreen",
                            "gainsboro",
                            "ghostwhite",
                            "gold",
                            "goldenrod",
                            "greenyellow",
                            "grey",
                            "honeydew",
                            "hotpink",
                            "indianred",
                            "indigo",
                            "ivory",
                            "khaki",
                            "lavender",
                            "lavenderblush",
                            "lawngreen",
                            "lemonchiffon",
                            "lightblue",
                            "lightcoral",
                            "lightcyan",
                            "lightgoldenrodyellow",
                            "lightgray",
                            "lightgreen",
                            "lightgrey",
                            "lightpink",
                            "lightsalmon",
                            "lightseagreen",
                            "lightskyblue",
                            "lightslategray",
                            "lightslategrey",
                            "lightsteelblue",
                            "lightyellow",
                            "limegreen",
                            "linen",
                            "magenta",
                            "mediumaquamarine",
                            "mediumblue",
                            "mediumorchid",
                            "mediumpurple",
                            "mediumseagreen",
                            "mediumslateblue",
                            "mediumspringgreen",
                            "mediumturquoise",
                            "mediumvioletred",
                            "midnightblue",
                            "mintcream",
                            "mistyrose",
                            "moccasin",
                            "navajowhite",
                            "oldlace",
                            "olivedrab",
                            "orangered",
                            "orchid",
                            "palegoldenrod",
                            "palegreen",
                            "paleturquoise",
                            "palevioletred",
                            "papayawhip",
                            "peachpuff",
                            "peru",
                            "pink",
                            "plum",
                            "powderblue",
                            "rosybrown",
                            "royalblue",
                            "saddlebrown",
                            "salmon",
                            "sandybrown",
                            "seagreen",
                            "seashell",
                            "sienna",
                            "skyblue",
                            "slateblue",
                            "slategray",
                            "slategrey",
                            "snow",
                            "springgreen",
                            "steelblue",
                            "tan",
                            "thistle",
                            "tomato",
                            "turquoise",
                            "violet",
                            "wheat",
                            "whitesmoke",
                            "yellowgreen",
                            "rebeccapurple",
                        ],
                    ],
                    Union["HexColor", str],
                    str,
                ],
                Union["ExprRef", "_ParameterProtocol", dict],
                Union[
                    "Gradient",
                    Union["LinearGradient", dict],
                    Union["RadialGradient", dict],
                ],
            ],
            UndefinedType,
        ] = Undefined,
        cornerRadius: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], float], UndefinedType
        ] = Undefined,
        cornerRadiusBottomLeft: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], float], UndefinedType
        ] = Undefined,
        cornerRadiusBottomRight: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], float], UndefinedType
        ] = Undefined,
        cornerRadiusTopLeft: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], float], UndefinedType
        ] = Undefined,
        cornerRadiusTopRight: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], float], UndefinedType
        ] = Undefined,
        cursor: Union[
            Union[
                Union[
                    "Cursor",
                    Literal[
                        "auto",
                        "default",
                        "none",
                        "context-menu",
                        "help",
                        "pointer",
                        "progress",
                        "wait",
                        "cell",
                        "crosshair",
                        "text",
                        "vertical-text",
                        "alias",
                        "copy",
                        "move",
                        "no-drop",
                        "not-allowed",
                        "e-resize",
                        "n-resize",
                        "ne-resize",
                        "nw-resize",
                        "s-resize",
                        "se-resize",
                        "sw-resize",
                        "w-resize",
                        "ew-resize",
                        "ns-resize",
                        "nesw-resize",
                        "nwse-resize",
                        "col-resize",
                        "row-resize",
                        "all-scroll",
                        "zoom-in",
                        "zoom-out",
                        "grab",
                        "grabbing",
                    ],
                ],
                Union["ExprRef", "_ParameterProtocol", dict],
            ],
            UndefinedType,
        ] = Undefined,
        description: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], str], UndefinedType
        ] = Undefined,
        dir: Union[
            Union[
                Union["ExprRef", "_ParameterProtocol", dict],
                Union["TextDirection", Literal["ltr", "rtl"]],
            ],
            UndefinedType,
        ] = Undefined,
        dx: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], float], UndefinedType
        ] = Undefined,
        dy: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], float], UndefinedType
        ] = Undefined,
        ellipsis: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], str], UndefinedType
        ] = Undefined,
        endAngle: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], float], UndefinedType
        ] = Undefined,
        fill: Union[
            Union[
                None,
                Union[
                    "Color",
                    Union[
                        "ColorName",
                        Literal[
                            "black",
                            "silver",
                            "gray",
                            "white",
                            "maroon",
                            "red",
                            "purple",
                            "fuchsia",
                            "green",
                            "lime",
                            "olive",
                            "yellow",
                            "navy",
                            "blue",
                            "teal",
                            "aqua",
                            "orange",
                            "aliceblue",
                            "antiquewhite",
                            "aquamarine",
                            "azure",
                            "beige",
                            "bisque",
                            "blanchedalmond",
                            "blueviolet",
                            "brown",
                            "burlywood",
                            "cadetblue",
                            "chartreuse",
                            "chocolate",
                            "coral",
                            "cornflowerblue",
                            "cornsilk",
                            "crimson",
                            "cyan",
                            "darkblue",
                            "darkcyan",
                            "darkgoldenrod",
                            "darkgray",
                            "darkgreen",
                            "darkgrey",
                            "darkkhaki",
                            "darkmagenta",
                            "darkolivegreen",
                            "darkorange",
                            "darkorchid",
                            "darkred",
                            "darksalmon",
                            "darkseagreen",
                            "darkslateblue",
                            "darkslategray",
                            "darkslategrey",
                            "darkturquoise",
                            "darkviolet",
                            "deeppink",
                            "deepskyblue",
                            "dimgray",
                            "dimgrey",
                            "dodgerblue",
                            "firebrick",
                            "floralwhite",
                            "forestgreen",
                            "gainsboro",
                            "ghostwhite",
                            "gold",
                            "goldenrod",
                            "greenyellow",
                            "grey",
                            "honeydew",
                            "hotpink",
                            "indianred",
                            "indigo",
                            "ivory",
                            "khaki",
                            "lavender",
                            "lavenderblush",
                            "lawngreen",
                            "lemonchiffon",
                            "lightblue",
                            "lightcoral",
                            "lightcyan",
                            "lightgoldenrodyellow",
                            "lightgray",
                            "lightgreen",
                            "lightgrey",
                            "lightpink",
                            "lightsalmon",
                            "lightseagreen",
                            "lightskyblue",
                            "lightslategray",
                            "lightslategrey",
                            "lightsteelblue",
                            "lightyellow",
                            "limegreen",
                            "linen",
                            "magenta",
                            "mediumaquamarine",
                            "mediumblue",
                            "mediumorchid",
                            "mediumpurple",
                            "mediumseagreen",
                            "mediumslateblue",
                            "mediumspringgreen",
                            "mediumturquoise",
                            "mediumvioletred",
                            "midnightblue",
                            "mintcream",
                            "mistyrose",
                            "moccasin",
                            "navajowhite",
                            "oldlace",
                            "olivedrab",
                            "orangered",
                            "orchid",
                            "palegoldenrod",
                            "palegreen",
                            "paleturquoise",
                            "palevioletred",
                            "papayawhip",
                            "peachpuff",
                            "peru",
                            "pink",
                            "plum",
                            "powderblue",
                            "rosybrown",
                            "royalblue",
                            "saddlebrown",
                            "salmon",
                            "sandybrown",
                            "seagreen",
                            "seashell",
                            "sienna",
                            "skyblue",
                            "slateblue",
                            "slategray",
                            "slategrey",
                            "snow",
                            "springgreen",
                            "steelblue",
                            "tan",
                            "thistle",
                            "tomato",
                            "turquoise",
                            "violet",
                            "wheat",
                            "whitesmoke",
                            "yellowgreen",
                            "rebeccapurple",
                        ],
                    ],
                    Union["HexColor", str],
                    str,
                ],
                Union["ExprRef", "_ParameterProtocol", dict],
                Union[
                    "Gradient",
                    Union["LinearGradient", dict],
                    Union["RadialGradient", dict],
                ],
            ],
            UndefinedType,
        ] = Undefined,
        fillOpacity: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], float], UndefinedType
        ] = Undefined,
        filled: Union[bool, UndefinedType] = Undefined,
        font: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], str], UndefinedType
        ] = Undefined,
        fontSize: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], float], UndefinedType
        ] = Undefined,
        fontStyle: Union[
            Union[
                Union["ExprRef", "_ParameterProtocol", dict], Union["FontStyle", str]
            ],
            UndefinedType,
        ] = Undefined,
        fontWeight: Union[
            Union[
                Union["ExprRef", "_ParameterProtocol", dict],
                Union[
                    "FontWeight",
                    Literal[
                        "normal",
                        "bold",
                        "lighter",
                        "bolder",
                        100,
                        200,
                        300,
                        400,
                        500,
                        600,
                        700,
                        800,
                        900,
                    ],
                ],
            ],
            UndefinedType,
        ] = Undefined,
        height: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], float], UndefinedType
        ] = Undefined,
        href: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], Union["URI", str]],
            UndefinedType,
        ] = Undefined,
        innerRadius: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], float], UndefinedType
        ] = Undefined,
        interpolate: Union[
            Union[
                Union["ExprRef", "_ParameterProtocol", dict],
                Union[
                    "Interpolate",
                    Literal[
                        "basis",
                        "basis-open",
                        "basis-closed",
                        "bundle",
                        "cardinal",
                        "cardinal-open",
                        "cardinal-closed",
                        "catmull-rom",
                        "linear",
                        "linear-closed",
                        "monotone",
                        "natural",
                        "step",
                        "step-before",
                        "step-after",
                    ],
                ],
            ],
            UndefinedType,
        ] = Undefined,
        invalid: Union[Literal["filter", None], UndefinedType] = Undefined,
        limit: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], float], UndefinedType
        ] = Undefined,
        lineBreak: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], str], UndefinedType
        ] = Undefined,
        lineHeight: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], float], UndefinedType
        ] = Undefined,
        opacity: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], float], UndefinedType
        ] = Undefined,
        order: Union[Union[None, bool], UndefinedType] = Undefined,
        orient: Union[
            Union["Orientation", Literal["horizontal", "vertical"]], UndefinedType
        ] = Undefined,
        outerRadius: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], float], UndefinedType
        ] = Undefined,
        padAngle: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], float], UndefinedType
        ] = Undefined,
        radius: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], float], UndefinedType
        ] = Undefined,
        radius2: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], float], UndefinedType
        ] = Undefined,
        shape: Union[
            Union[
                Union["ExprRef", "_ParameterProtocol", dict],
                Union[Union["SymbolShape", str], str],
            ],
            UndefinedType,
        ] = Undefined,
        size: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], float], UndefinedType
        ] = Undefined,
        smooth: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], bool], UndefinedType
        ] = Undefined,
        startAngle: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], float], UndefinedType
        ] = Undefined,
        stroke: Union[
            Union[
                None,
                Union[
                    "Color",
                    Union[
                        "ColorName",
                        Literal[
                            "black",
                            "silver",
                            "gray",
                            "white",
                            "maroon",
                            "red",
                            "purple",
                            "fuchsia",
                            "green",
                            "lime",
                            "olive",
                            "yellow",
                            "navy",
                            "blue",
                            "teal",
                            "aqua",
                            "orange",
                            "aliceblue",
                            "antiquewhite",
                            "aquamarine",
                            "azure",
                            "beige",
                            "bisque",
                            "blanchedalmond",
                            "blueviolet",
                            "brown",
                            "burlywood",
                            "cadetblue",
                            "chartreuse",
                            "chocolate",
                            "coral",
                            "cornflowerblue",
                            "cornsilk",
                            "crimson",
                            "cyan",
                            "darkblue",
                            "darkcyan",
                            "darkgoldenrod",
                            "darkgray",
                            "darkgreen",
                            "darkgrey",
                            "darkkhaki",
                            "darkmagenta",
                            "darkolivegreen",
                            "darkorange",
                            "darkorchid",
                            "darkred",
                            "darksalmon",
                            "darkseagreen",
                            "darkslateblue",
                            "darkslategray",
                            "darkslategrey",
                            "darkturquoise",
                            "darkviolet",
                            "deeppink",
                            "deepskyblue",
                            "dimgray",
                            "dimgrey",
                            "dodgerblue",
                            "firebrick",
                            "floralwhite",
                            "forestgreen",
                            "gainsboro",
                            "ghostwhite",
                            "gold",
                            "goldenrod",
                            "greenyellow",
                            "grey",
                            "honeydew",
                            "hotpink",
                            "indianred",
                            "indigo",
                            "ivory",
                            "khaki",
                            "lavender",
                            "lavenderblush",
                            "lawngreen",
                            "lemonchiffon",
                            "lightblue",
                            "lightcoral",
                            "lightcyan",
                            "lightgoldenrodyellow",
                            "lightgray",
                            "lightgreen",
                            "lightgrey",
                            "lightpink",
                            "lightsalmon",
                            "lightseagreen",
                            "lightskyblue",
                            "lightslategray",
                            "lightslategrey",
                            "lightsteelblue",
                            "lightyellow",
                            "limegreen",
                            "linen",
                            "magenta",
                            "mediumaquamarine",
                            "mediumblue",
                            "mediumorchid",
                            "mediumpurple",
                            "mediumseagreen",
                            "mediumslateblue",
                            "mediumspringgreen",
                            "mediumturquoise",
                            "mediumvioletred",
                            "midnightblue",
                            "mintcream",
                            "mistyrose",
                            "moccasin",
                            "navajowhite",
                            "oldlace",
                            "olivedrab",
                            "orangered",
                            "orchid",
                            "palegoldenrod",
                            "palegreen",
                            "paleturquoise",
                            "palevioletred",
                            "papayawhip",
                            "peachpuff",
                            "peru",
                            "pink",
                            "plum",
                            "powderblue",
                            "rosybrown",
                            "royalblue",
                            "saddlebrown",
                            "salmon",
                            "sandybrown",
                            "seagreen",
                            "seashell",
                            "sienna",
                            "skyblue",
                            "slateblue",
                            "slategray",
                            "slategrey",
                            "snow",
                            "springgreen",
                            "steelblue",
                            "tan",
                            "thistle",
                            "tomato",
                            "turquoise",
                            "violet",
                            "wheat",
                            "whitesmoke",
                            "yellowgreen",
                            "rebeccapurple",
                        ],
                    ],
                    Union["HexColor", str],
                    str,
                ],
                Union["ExprRef", "_ParameterProtocol", dict],
                Union[
                    "Gradient",
                    Union["LinearGradient", dict],
                    Union["RadialGradient", dict],
                ],
            ],
            UndefinedType,
        ] = Undefined,
        strokeCap: Union[
            Union[
                Union["ExprRef", "_ParameterProtocol", dict],
                Union["StrokeCap", Literal["butt", "round", "square"]],
            ],
            UndefinedType,
        ] = Undefined,
        strokeDash: Union[
            Union[List[float], Union["ExprRef", "_ParameterProtocol", dict]],
            UndefinedType,
        ] = Undefined,
        strokeDashOffset: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], float], UndefinedType
        ] = Undefined,
        strokeJoin: Union[
            Union[
                Union["ExprRef", "_ParameterProtocol", dict],
                Union["StrokeJoin", Literal["miter", "round", "bevel"]],
            ],
            UndefinedType,
        ] = Undefined,
        strokeMiterLimit: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], float], UndefinedType
        ] = Undefined,
        strokeOffset: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], float], UndefinedType
        ] = Undefined,
        strokeOpacity: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], float], UndefinedType
        ] = Undefined,
        strokeWidth: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], float], UndefinedType
        ] = Undefined,
        tension: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], float], UndefinedType
        ] = Undefined,
        text: Union[
            Union[
                Union["ExprRef", "_ParameterProtocol", dict],
                Union["Text", List[str], str],
            ],
            UndefinedType,
        ] = Undefined,
        theta: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], float], UndefinedType
        ] = Undefined,
        theta2: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], float], UndefinedType
        ] = Undefined,
        thickness: Union[float, UndefinedType] = Undefined,
        timeUnitBandPosition: Union[float, UndefinedType] = Undefined,
        timeUnitBandSize: Union[float, UndefinedType] = Undefined,
        tooltip: Union[
            Union[
                None,
                Union["ExprRef", "_ParameterProtocol", dict],
                Union["TooltipContent", dict],
                bool,
                float,
                str,
            ],
            UndefinedType,
        ] = Undefined,
        url: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], Union["URI", str]],
            UndefinedType,
        ] = Undefined,
        width: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], float], UndefinedType
        ] = Undefined,
        x: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], float, str],
            UndefinedType,
        ] = Undefined,
        x2: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], float, str],
            UndefinedType,
        ] = Undefined,
        y: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], float, str],
            UndefinedType,
        ] = Undefined,
        y2: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], float, str],
            UndefinedType,
        ] = Undefined,
        **kwds
    ):
        super(TickConfig, self).__init__(
            align=align,
            angle=angle,
            aria=aria,
            ariaRole=ariaRole,
            ariaRoleDescription=ariaRoleDescription,
            aspect=aspect,
            bandSize=bandSize,
            baseline=baseline,
            blend=blend,
            color=color,
            cornerRadius=cornerRadius,
            cornerRadiusBottomLeft=cornerRadiusBottomLeft,
            cornerRadiusBottomRight=cornerRadiusBottomRight,
            cornerRadiusTopLeft=cornerRadiusTopLeft,
            cornerRadiusTopRight=cornerRadiusTopRight,
            cursor=cursor,
            description=description,
            dir=dir,
            dx=dx,
            dy=dy,
            ellipsis=ellipsis,
            endAngle=endAngle,
            fill=fill,
            fillOpacity=fillOpacity,
            filled=filled,
            font=font,
            fontSize=fontSize,
            fontStyle=fontStyle,
            fontWeight=fontWeight,
            height=height,
            href=href,
            innerRadius=innerRadius,
            interpolate=interpolate,
            invalid=invalid,
            limit=limit,
            lineBreak=lineBreak,
            lineHeight=lineHeight,
            opacity=opacity,
            order=order,
            orient=orient,
            outerRadius=outerRadius,
            padAngle=padAngle,
            radius=radius,
            radius2=radius2,
            shape=shape,
            size=size,
            smooth=smooth,
            startAngle=startAngle,
            stroke=stroke,
            strokeCap=strokeCap,
            strokeDash=strokeDash,
            strokeDashOffset=strokeDashOffset,
            strokeJoin=strokeJoin,
            strokeMiterLimit=strokeMiterLimit,
            strokeOffset=strokeOffset,
            strokeOpacity=strokeOpacity,
            strokeWidth=strokeWidth,
            tension=tension,
            text=text,
            theta=theta,
            theta2=theta2,
            thickness=thickness,
            timeUnitBandPosition=timeUnitBandPosition,
            timeUnitBandSize=timeUnitBandSize,
            tooltip=tooltip,
            url=url,
            width=width,
            x=x,
            x2=x2,
            y=y,
            y2=y2,
            **kwds
        )


class TickCount(VegaLiteSchema):
    """TickCount schema wrapper

    Union[:class:`TickCount`, Union[:class:`TimeIntervalStep`, Dict[required=[interval, step]]],
    Union[:class:`TimeInterval`, Literal['millisecond', 'second', 'minute', 'hour', 'day',
    'week', 'month', 'year']], float]
    """

    _schema = {"$ref": "#/definitions/TickCount"}

    def __init__(self, *args, **kwds):
        super(TickCount, self).__init__(*args, **kwds)


class TimeInterval(TickCount):
    """TimeInterval schema wrapper

    Union[:class:`TimeInterval`, Literal['millisecond', 'second', 'minute', 'hour', 'day',
    'week', 'month', 'year']]
    """

    _schema = {"$ref": "#/definitions/TimeInterval"}

    def __init__(self, *args):
        super(TimeInterval, self).__init__(*args)


class TimeIntervalStep(TickCount):
    """TimeIntervalStep schema wrapper

    Union[:class:`TimeIntervalStep`, Dict[required=[interval, step]]]

    Parameters
    ----------

    interval : Union[:class:`TimeInterval`, Literal['millisecond', 'second', 'minute', 'hour', 'day', 'week', 'month', 'year']]

    step : float

    """

    _schema = {"$ref": "#/definitions/TimeIntervalStep"}

    def __init__(
        self,
        interval: Union[
            Union[
                "TimeInterval",
                Literal[
                    "millisecond",
                    "second",
                    "minute",
                    "hour",
                    "day",
                    "week",
                    "month",
                    "year",
                ],
            ],
            UndefinedType,
        ] = Undefined,
        step: Union[float, UndefinedType] = Undefined,
        **kwds
    ):
        super(TimeIntervalStep, self).__init__(interval=interval, step=step, **kwds)


class TimeLocale(VegaLiteSchema):
    """TimeLocale schema wrapper

    Union[:class:`TimeLocale`, Dict[required=[dateTime, date, time, periods, days, shortDays,
    months, shortMonths]]]
    Locale definition for formatting dates and times.

    Parameters
    ----------

    date : str
        The date (%x) format specifier (e.g., "%m/%d/%Y").
    dateTime : str
        The date and time (%c) format specifier (e.g., "%a %b %e %X %Y").
    days : Union[:class:`Vector7string`, List[str]]
        The full names of the weekdays, starting with Sunday.
    months : Union[:class:`Vector12string`, List[str]]
        The full names of the months (starting with January).
    periods : Union[:class:`Vector2string`, List[str]]
        The A.M. and P.M. equivalents (e.g., ["AM", "PM"]).
    shortDays : Union[:class:`Vector7string`, List[str]]
        The abbreviated names of the weekdays, starting with Sunday.
    shortMonths : Union[:class:`Vector12string`, List[str]]
        The abbreviated names of the months (starting with January).
    time : str
        The time (%X) format specifier (e.g., "%H:%M:%S").
    """

    _schema = {"$ref": "#/definitions/TimeLocale"}

    def __init__(
        self,
        date: Union[str, UndefinedType] = Undefined,
        dateTime: Union[str, UndefinedType] = Undefined,
        days: Union[Union["Vector7string", List[str]], UndefinedType] = Undefined,
        months: Union[Union["Vector12string", List[str]], UndefinedType] = Undefined,
        periods: Union[Union["Vector2string", List[str]], UndefinedType] = Undefined,
        shortDays: Union[Union["Vector7string", List[str]], UndefinedType] = Undefined,
        shortMonths: Union[
            Union["Vector12string", List[str]], UndefinedType
        ] = Undefined,
        time: Union[str, UndefinedType] = Undefined,
        **kwds
    ):
        super(TimeLocale, self).__init__(
            date=date,
            dateTime=dateTime,
            days=days,
            months=months,
            periods=periods,
            shortDays=shortDays,
            shortMonths=shortMonths,
            time=time,
            **kwds
        )


class TimeUnit(VegaLiteSchema):
    """TimeUnit schema wrapper

    Union[:class:`TimeUnit`, Union[:class:`MultiTimeUnit`, Union[:class:`LocalMultiTimeUnit`,
    Literal['yearquarter', 'yearquartermonth', 'yearmonth', 'yearmonthdate',
    'yearmonthdatehours', 'yearmonthdatehoursminutes', 'yearmonthdatehoursminutesseconds',
    'yearweek', 'yearweekday', 'yearweekdayhours', 'yearweekdayhoursminutes',
    'yearweekdayhoursminutesseconds', 'yeardayofyear', 'quartermonth', 'monthdate',
    'monthdatehours', 'monthdatehoursminutes', 'monthdatehoursminutesseconds', 'weekday',
    'weeksdayhours', 'weekdayhoursminutes', 'weekdayhoursminutesseconds', 'dayhours',
    'dayhoursminutes', 'dayhoursminutesseconds', 'hoursminutes', 'hoursminutesseconds',
    'minutesseconds', 'secondsmilliseconds']], Union[:class:`UtcMultiTimeUnit`,
    Literal['utcyearquarter', 'utcyearquartermonth', 'utcyearmonth', 'utcyearmonthdate',
    'utcyearmonthdatehours', 'utcyearmonthdatehoursminutes',
    'utcyearmonthdatehoursminutesseconds', 'utcyearweek', 'utcyearweekday',
    'utcyearweekdayhours', 'utcyearweekdayhoursminutes', 'utcyearweekdayhoursminutesseconds',
    'utcyeardayofyear', 'utcquartermonth', 'utcmonthdate', 'utcmonthdatehours',
    'utcmonthdatehoursminutes', 'utcmonthdatehoursminutesseconds', 'utcweekday',
    'utcweeksdayhours', 'utcweekdayhoursminutes', 'utcweekdayhoursminutesseconds',
    'utcdayhours', 'utcdayhoursminutes', 'utcdayhoursminutesseconds', 'utchoursminutes',
    'utchoursminutesseconds', 'utcminutesseconds', 'utcsecondsmilliseconds']]],
    Union[:class:`SingleTimeUnit`, Union[:class:`LocalSingleTimeUnit`, Literal['year',
    'quarter', 'month', 'week', 'day', 'dayofyear', 'date', 'hours', 'minutes', 'seconds',
    'milliseconds']], Union[:class:`UtcSingleTimeUnit`, Literal['utcyear', 'utcquarter',
    'utcmonth', 'utcweek', 'utcday', 'utcdayofyear', 'utcdate', 'utchours', 'utcminutes',
    'utcseconds', 'utcmilliseconds']]]]
    """

    _schema = {"$ref": "#/definitions/TimeUnit"}

    def __init__(self, *args, **kwds):
        super(TimeUnit, self).__init__(*args, **kwds)


class MultiTimeUnit(TimeUnit):
    """MultiTimeUnit schema wrapper

    Union[:class:`MultiTimeUnit`, Union[:class:`LocalMultiTimeUnit`, Literal['yearquarter',
    'yearquartermonth', 'yearmonth', 'yearmonthdate', 'yearmonthdatehours',
    'yearmonthdatehoursminutes', 'yearmonthdatehoursminutesseconds', 'yearweek', 'yearweekday',
    'yearweekdayhours', 'yearweekdayhoursminutes', 'yearweekdayhoursminutesseconds',
    'yeardayofyear', 'quartermonth', 'monthdate', 'monthdatehours', 'monthdatehoursminutes',
    'monthdatehoursminutesseconds', 'weekday', 'weeksdayhours', 'weekdayhoursminutes',
    'weekdayhoursminutesseconds', 'dayhours', 'dayhoursminutes', 'dayhoursminutesseconds',
    'hoursminutes', 'hoursminutesseconds', 'minutesseconds', 'secondsmilliseconds']],
    Union[:class:`UtcMultiTimeUnit`, Literal['utcyearquarter', 'utcyearquartermonth',
    'utcyearmonth', 'utcyearmonthdate', 'utcyearmonthdatehours', 'utcyearmonthdatehoursminutes',
    'utcyearmonthdatehoursminutesseconds', 'utcyearweek', 'utcyearweekday',
    'utcyearweekdayhours', 'utcyearweekdayhoursminutes', 'utcyearweekdayhoursminutesseconds',
    'utcyeardayofyear', 'utcquartermonth', 'utcmonthdate', 'utcmonthdatehours',
    'utcmonthdatehoursminutes', 'utcmonthdatehoursminutesseconds', 'utcweekday',
    'utcweeksdayhours', 'utcweekdayhoursminutes', 'utcweekdayhoursminutesseconds',
    'utcdayhours', 'utcdayhoursminutes', 'utcdayhoursminutesseconds', 'utchoursminutes',
    'utchoursminutesseconds', 'utcminutesseconds', 'utcsecondsmilliseconds']]]
    """

    _schema = {"$ref": "#/definitions/MultiTimeUnit"}

    def __init__(self, *args, **kwds):
        super(MultiTimeUnit, self).__init__(*args, **kwds)


class LocalMultiTimeUnit(MultiTimeUnit):
    """LocalMultiTimeUnit schema wrapper

    Union[:class:`LocalMultiTimeUnit`, Literal['yearquarter', 'yearquartermonth', 'yearmonth',
    'yearmonthdate', 'yearmonthdatehours', 'yearmonthdatehoursminutes',
    'yearmonthdatehoursminutesseconds', 'yearweek', 'yearweekday', 'yearweekdayhours',
    'yearweekdayhoursminutes', 'yearweekdayhoursminutesseconds', 'yeardayofyear',
    'quartermonth', 'monthdate', 'monthdatehours', 'monthdatehoursminutes',
    'monthdatehoursminutesseconds', 'weekday', 'weeksdayhours', 'weekdayhoursminutes',
    'weekdayhoursminutesseconds', 'dayhours', 'dayhoursminutes', 'dayhoursminutesseconds',
    'hoursminutes', 'hoursminutesseconds', 'minutesseconds', 'secondsmilliseconds']]
    """

    _schema = {"$ref": "#/definitions/LocalMultiTimeUnit"}

    def __init__(self, *args):
        super(LocalMultiTimeUnit, self).__init__(*args)


class SingleTimeUnit(TimeUnit):
    """SingleTimeUnit schema wrapper

    Union[:class:`SingleTimeUnit`, Union[:class:`LocalSingleTimeUnit`, Literal['year',
    'quarter', 'month', 'week', 'day', 'dayofyear', 'date', 'hours', 'minutes', 'seconds',
    'milliseconds']], Union[:class:`UtcSingleTimeUnit`, Literal['utcyear', 'utcquarter',
    'utcmonth', 'utcweek', 'utcday', 'utcdayofyear', 'utcdate', 'utchours', 'utcminutes',
    'utcseconds', 'utcmilliseconds']]]
    """

    _schema = {"$ref": "#/definitions/SingleTimeUnit"}

    def __init__(self, *args, **kwds):
        super(SingleTimeUnit, self).__init__(*args, **kwds)


class LocalSingleTimeUnit(SingleTimeUnit):
    """LocalSingleTimeUnit schema wrapper

    Union[:class:`LocalSingleTimeUnit`, Literal['year', 'quarter', 'month', 'week', 'day',
    'dayofyear', 'date', 'hours', 'minutes', 'seconds', 'milliseconds']]
    """

    _schema = {"$ref": "#/definitions/LocalSingleTimeUnit"}

    def __init__(self, *args):
        super(LocalSingleTimeUnit, self).__init__(*args)


class TimeUnitParams(VegaLiteSchema):
    """TimeUnitParams schema wrapper

    Union[:class:`TimeUnitParams`, Dict[required=[]]]
    Time Unit Params for encoding predicate, which can specified if the data is  already
    "binned".

    Parameters
    ----------

    binned : bool
        Whether the data has already been binned to this time unit. If true, Vega-Lite will
        only format the data, marks, and guides, without applying the timeUnit transform to
        re-bin the data again.
    maxbins : float
        If no ``unit`` is specified, maxbins is used to infer time units.
    step : float
        The number of steps between bins, in terms of the least significant unit provided.
    unit : Union[:class:`TimeUnit`, Union[:class:`MultiTimeUnit`, Union[:class:`LocalMultiTimeUnit`, Literal['yearquarter', 'yearquartermonth', 'yearmonth', 'yearmonthdate', 'yearmonthdatehours', 'yearmonthdatehoursminutes', 'yearmonthdatehoursminutesseconds', 'yearweek', 'yearweekday', 'yearweekdayhours', 'yearweekdayhoursminutes', 'yearweekdayhoursminutesseconds', 'yeardayofyear', 'quartermonth', 'monthdate', 'monthdatehours', 'monthdatehoursminutes', 'monthdatehoursminutesseconds', 'weekday', 'weeksdayhours', 'weekdayhoursminutes', 'weekdayhoursminutesseconds', 'dayhours', 'dayhoursminutes', 'dayhoursminutesseconds', 'hoursminutes', 'hoursminutesseconds', 'minutesseconds', 'secondsmilliseconds']], Union[:class:`UtcMultiTimeUnit`, Literal['utcyearquarter', 'utcyearquartermonth', 'utcyearmonth', 'utcyearmonthdate', 'utcyearmonthdatehours', 'utcyearmonthdatehoursminutes', 'utcyearmonthdatehoursminutesseconds', 'utcyearweek', 'utcyearweekday', 'utcyearweekdayhours', 'utcyearweekdayhoursminutes', 'utcyearweekdayhoursminutesseconds', 'utcyeardayofyear', 'utcquartermonth', 'utcmonthdate', 'utcmonthdatehours', 'utcmonthdatehoursminutes', 'utcmonthdatehoursminutesseconds', 'utcweekday', 'utcweeksdayhours', 'utcweekdayhoursminutes', 'utcweekdayhoursminutesseconds', 'utcdayhours', 'utcdayhoursminutes', 'utcdayhoursminutesseconds', 'utchoursminutes', 'utchoursminutesseconds', 'utcminutesseconds', 'utcsecondsmilliseconds']]], Union[:class:`SingleTimeUnit`, Union[:class:`LocalSingleTimeUnit`, Literal['year', 'quarter', 'month', 'week', 'day', 'dayofyear', 'date', 'hours', 'minutes', 'seconds', 'milliseconds']], Union[:class:`UtcSingleTimeUnit`, Literal['utcyear', 'utcquarter', 'utcmonth', 'utcweek', 'utcday', 'utcdayofyear', 'utcdate', 'utchours', 'utcminutes', 'utcseconds', 'utcmilliseconds']]]]
        Defines how date-time values should be binned.
    utc : bool
        True to use UTC timezone. Equivalent to using a ``utc`` prefixed ``TimeUnit``.
    """

    _schema = {"$ref": "#/definitions/TimeUnitParams"}

    def __init__(
        self,
        binned: Union[bool, UndefinedType] = Undefined,
        maxbins: Union[float, UndefinedType] = Undefined,
        step: Union[float, UndefinedType] = Undefined,
        unit: Union[
            Union[
                "TimeUnit",
                Union[
                    "MultiTimeUnit",
                    Union[
                        "LocalMultiTimeUnit",
                        Literal[
                            "yearquarter",
                            "yearquartermonth",
                            "yearmonth",
                            "yearmonthdate",
                            "yearmonthdatehours",
                            "yearmonthdatehoursminutes",
                            "yearmonthdatehoursminutesseconds",
                            "yearweek",
                            "yearweekday",
                            "yearweekdayhours",
                            "yearweekdayhoursminutes",
                            "yearweekdayhoursminutesseconds",
                            "yeardayofyear",
                            "quartermonth",
                            "monthdate",
                            "monthdatehours",
                            "monthdatehoursminutes",
                            "monthdatehoursminutesseconds",
                            "weekday",
                            "weeksdayhours",
                            "weekdayhoursminutes",
                            "weekdayhoursminutesseconds",
                            "dayhours",
                            "dayhoursminutes",
                            "dayhoursminutesseconds",
                            "hoursminutes",
                            "hoursminutesseconds",
                            "minutesseconds",
                            "secondsmilliseconds",
                        ],
                    ],
                    Union[
                        "UtcMultiTimeUnit",
                        Literal[
                            "utcyearquarter",
                            "utcyearquartermonth",
                            "utcyearmonth",
                            "utcyearmonthdate",
                            "utcyearmonthdatehours",
                            "utcyearmonthdatehoursminutes",
                            "utcyearmonthdatehoursminutesseconds",
                            "utcyearweek",
                            "utcyearweekday",
                            "utcyearweekdayhours",
                            "utcyearweekdayhoursminutes",
                            "utcyearweekdayhoursminutesseconds",
                            "utcyeardayofyear",
                            "utcquartermonth",
                            "utcmonthdate",
                            "utcmonthdatehours",
                            "utcmonthdatehoursminutes",
                            "utcmonthdatehoursminutesseconds",
                            "utcweekday",
                            "utcweeksdayhours",
                            "utcweekdayhoursminutes",
                            "utcweekdayhoursminutesseconds",
                            "utcdayhours",
                            "utcdayhoursminutes",
                            "utcdayhoursminutesseconds",
                            "utchoursminutes",
                            "utchoursminutesseconds",
                            "utcminutesseconds",
                            "utcsecondsmilliseconds",
                        ],
                    ],
                ],
                Union[
                    "SingleTimeUnit",
                    Union[
                        "LocalSingleTimeUnit",
                        Literal[
                            "year",
                            "quarter",
                            "month",
                            "week",
                            "day",
                            "dayofyear",
                            "date",
                            "hours",
                            "minutes",
                            "seconds",
                            "milliseconds",
                        ],
                    ],
                    Union[
                        "UtcSingleTimeUnit",
                        Literal[
                            "utcyear",
                            "utcquarter",
                            "utcmonth",
                            "utcweek",
                            "utcday",
                            "utcdayofyear",
                            "utcdate",
                            "utchours",
                            "utcminutes",
                            "utcseconds",
                            "utcmilliseconds",
                        ],
                    ],
                ],
            ],
            UndefinedType,
        ] = Undefined,
        utc: Union[bool, UndefinedType] = Undefined,
        **kwds
    ):
        super(TimeUnitParams, self).__init__(
            binned=binned, maxbins=maxbins, step=step, unit=unit, utc=utc, **kwds
        )


class TimeUnitTransformParams(VegaLiteSchema):
    """TimeUnitTransformParams schema wrapper

    Union[:class:`TimeUnitTransformParams`, Dict[required=[]]]

    Parameters
    ----------

    maxbins : float
        If no ``unit`` is specified, maxbins is used to infer time units.
    step : float
        The number of steps between bins, in terms of the least significant unit provided.
    unit : Union[:class:`TimeUnit`, Union[:class:`MultiTimeUnit`, Union[:class:`LocalMultiTimeUnit`, Literal['yearquarter', 'yearquartermonth', 'yearmonth', 'yearmonthdate', 'yearmonthdatehours', 'yearmonthdatehoursminutes', 'yearmonthdatehoursminutesseconds', 'yearweek', 'yearweekday', 'yearweekdayhours', 'yearweekdayhoursminutes', 'yearweekdayhoursminutesseconds', 'yeardayofyear', 'quartermonth', 'monthdate', 'monthdatehours', 'monthdatehoursminutes', 'monthdatehoursminutesseconds', 'weekday', 'weeksdayhours', 'weekdayhoursminutes', 'weekdayhoursminutesseconds', 'dayhours', 'dayhoursminutes', 'dayhoursminutesseconds', 'hoursminutes', 'hoursminutesseconds', 'minutesseconds', 'secondsmilliseconds']], Union[:class:`UtcMultiTimeUnit`, Literal['utcyearquarter', 'utcyearquartermonth', 'utcyearmonth', 'utcyearmonthdate', 'utcyearmonthdatehours', 'utcyearmonthdatehoursminutes', 'utcyearmonthdatehoursminutesseconds', 'utcyearweek', 'utcyearweekday', 'utcyearweekdayhours', 'utcyearweekdayhoursminutes', 'utcyearweekdayhoursminutesseconds', 'utcyeardayofyear', 'utcquartermonth', 'utcmonthdate', 'utcmonthdatehours', 'utcmonthdatehoursminutes', 'utcmonthdatehoursminutesseconds', 'utcweekday', 'utcweeksdayhours', 'utcweekdayhoursminutes', 'utcweekdayhoursminutesseconds', 'utcdayhours', 'utcdayhoursminutes', 'utcdayhoursminutesseconds', 'utchoursminutes', 'utchoursminutesseconds', 'utcminutesseconds', 'utcsecondsmilliseconds']]], Union[:class:`SingleTimeUnit`, Union[:class:`LocalSingleTimeUnit`, Literal['year', 'quarter', 'month', 'week', 'day', 'dayofyear', 'date', 'hours', 'minutes', 'seconds', 'milliseconds']], Union[:class:`UtcSingleTimeUnit`, Literal['utcyear', 'utcquarter', 'utcmonth', 'utcweek', 'utcday', 'utcdayofyear', 'utcdate', 'utchours', 'utcminutes', 'utcseconds', 'utcmilliseconds']]]]
        Defines how date-time values should be binned.
    utc : bool
        True to use UTC timezone. Equivalent to using a ``utc`` prefixed ``TimeUnit``.
    """

    _schema = {"$ref": "#/definitions/TimeUnitTransformParams"}

    def __init__(
        self,
        maxbins: Union[float, UndefinedType] = Undefined,
        step: Union[float, UndefinedType] = Undefined,
        unit: Union[
            Union[
                "TimeUnit",
                Union[
                    "MultiTimeUnit",
                    Union[
                        "LocalMultiTimeUnit",
                        Literal[
                            "yearquarter",
                            "yearquartermonth",
                            "yearmonth",
                            "yearmonthdate",
                            "yearmonthdatehours",
                            "yearmonthdatehoursminutes",
                            "yearmonthdatehoursminutesseconds",
                            "yearweek",
                            "yearweekday",
                            "yearweekdayhours",
                            "yearweekdayhoursminutes",
                            "yearweekdayhoursminutesseconds",
                            "yeardayofyear",
                            "quartermonth",
                            "monthdate",
                            "monthdatehours",
                            "monthdatehoursminutes",
                            "monthdatehoursminutesseconds",
                            "weekday",
                            "weeksdayhours",
                            "weekdayhoursminutes",
                            "weekdayhoursminutesseconds",
                            "dayhours",
                            "dayhoursminutes",
                            "dayhoursminutesseconds",
                            "hoursminutes",
                            "hoursminutesseconds",
                            "minutesseconds",
                            "secondsmilliseconds",
                        ],
                    ],
                    Union[
                        "UtcMultiTimeUnit",
                        Literal[
                            "utcyearquarter",
                            "utcyearquartermonth",
                            "utcyearmonth",
                            "utcyearmonthdate",
                            "utcyearmonthdatehours",
                            "utcyearmonthdatehoursminutes",
                            "utcyearmonthdatehoursminutesseconds",
                            "utcyearweek",
                            "utcyearweekday",
                            "utcyearweekdayhours",
                            "utcyearweekdayhoursminutes",
                            "utcyearweekdayhoursminutesseconds",
                            "utcyeardayofyear",
                            "utcquartermonth",
                            "utcmonthdate",
                            "utcmonthdatehours",
                            "utcmonthdatehoursminutes",
                            "utcmonthdatehoursminutesseconds",
                            "utcweekday",
                            "utcweeksdayhours",
                            "utcweekdayhoursminutes",
                            "utcweekdayhoursminutesseconds",
                            "utcdayhours",
                            "utcdayhoursminutes",
                            "utcdayhoursminutesseconds",
                            "utchoursminutes",
                            "utchoursminutesseconds",
                            "utcminutesseconds",
                            "utcsecondsmilliseconds",
                        ],
                    ],
                ],
                Union[
                    "SingleTimeUnit",
                    Union[
                        "LocalSingleTimeUnit",
                        Literal[
                            "year",
                            "quarter",
                            "month",
                            "week",
                            "day",
                            "dayofyear",
                            "date",
                            "hours",
                            "minutes",
                            "seconds",
                            "milliseconds",
                        ],
                    ],
                    Union[
                        "UtcSingleTimeUnit",
                        Literal[
                            "utcyear",
                            "utcquarter",
                            "utcmonth",
                            "utcweek",
                            "utcday",
                            "utcdayofyear",
                            "utcdate",
                            "utchours",
                            "utcminutes",
                            "utcseconds",
                            "utcmilliseconds",
                        ],
                    ],
                ],
            ],
            UndefinedType,
        ] = Undefined,
        utc: Union[bool, UndefinedType] = Undefined,
        **kwds
    ):
        super(TimeUnitTransformParams, self).__init__(
            maxbins=maxbins, step=step, unit=unit, utc=utc, **kwds
        )


class TitleAnchor(VegaLiteSchema):
    """TitleAnchor schema wrapper

    Union[:class:`TitleAnchor`, Literal[None, 'start', 'middle', 'end']]
    """

    _schema = {"$ref": "#/definitions/TitleAnchor"}

    def __init__(self, *args):
        super(TitleAnchor, self).__init__(*args)


class TitleConfig(VegaLiteSchema):
    """TitleConfig schema wrapper

    Union[:class:`TitleConfig`, Dict[required=[]]]

    Parameters
    ----------

    align : Union[:class:`Align`, Literal['left', 'center', 'right']]
        Horizontal text alignment for title text. One of ``"left"``, ``"center"``, or
        ``"right"``.
    anchor : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], Union[:class:`TitleAnchor`, Literal[None, 'start', 'middle', 'end']]]
        The anchor position for placing the title and subtitle text. One of ``"start"``,
        ``"middle"``, or ``"end"``. For example, with an orientation of top these anchor
        positions map to a left-, center-, or right-aligned title.
    angle : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], float]
        Angle in degrees of title and subtitle text.
    aria : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], bool]
        A boolean flag indicating if `ARIA attributes
        <https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA>`__ should be
        included (SVG output only). If ``false``, the "aria-hidden" attribute will be set on
        the output SVG group, removing the title from the ARIA accessibility tree.

        **Default value:** ``true``
    baseline : Union[:class:`TextBaseline`, Union[:class:`Baseline`, Literal['top', 'middle', 'bottom']], str]
        Vertical text baseline for title and subtitle text. One of ``"alphabetic"``
        (default), ``"top"``, ``"middle"``, ``"bottom"``, ``"line-top"``, or
        ``"line-bottom"``. The ``"line-top"`` and ``"line-bottom"`` values operate similarly
        to ``"top"`` and ``"bottom"``, but are calculated relative to the *lineHeight*
        rather than *fontSize* alone.
    color : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], Union[None, Union[:class:`Color`, Union[:class:`ColorName`, Literal['black', 'silver', 'gray', 'white', 'maroon', 'red', 'purple', 'fuchsia', 'green', 'lime', 'olive', 'yellow', 'navy', 'blue', 'teal', 'aqua', 'orange', 'aliceblue', 'antiquewhite', 'aquamarine', 'azure', 'beige', 'bisque', 'blanchedalmond', 'blueviolet', 'brown', 'burlywood', 'cadetblue', 'chartreuse', 'chocolate', 'coral', 'cornflowerblue', 'cornsilk', 'crimson', 'cyan', 'darkblue', 'darkcyan', 'darkgoldenrod', 'darkgray', 'darkgreen', 'darkgrey', 'darkkhaki', 'darkmagenta', 'darkolivegreen', 'darkorange', 'darkorchid', 'darkred', 'darksalmon', 'darkseagreen', 'darkslateblue', 'darkslategray', 'darkslategrey', 'darkturquoise', 'darkviolet', 'deeppink', 'deepskyblue', 'dimgray', 'dimgrey', 'dodgerblue', 'firebrick', 'floralwhite', 'forestgreen', 'gainsboro', 'ghostwhite', 'gold', 'goldenrod', 'greenyellow', 'grey', 'honeydew', 'hotpink', 'indianred', 'indigo', 'ivory', 'khaki', 'lavender', 'lavenderblush', 'lawngreen', 'lemonchiffon', 'lightblue', 'lightcoral', 'lightcyan', 'lightgoldenrodyellow', 'lightgray', 'lightgreen', 'lightgrey', 'lightpink', 'lightsalmon', 'lightseagreen', 'lightskyblue', 'lightslategray', 'lightslategrey', 'lightsteelblue', 'lightyellow', 'limegreen', 'linen', 'magenta', 'mediumaquamarine', 'mediumblue', 'mediumorchid', 'mediumpurple', 'mediumseagreen', 'mediumslateblue', 'mediumspringgreen', 'mediumturquoise', 'mediumvioletred', 'midnightblue', 'mintcream', 'mistyrose', 'moccasin', 'navajowhite', 'oldlace', 'olivedrab', 'orangered', 'orchid', 'palegoldenrod', 'palegreen', 'paleturquoise', 'palevioletred', 'papayawhip', 'peachpuff', 'peru', 'pink', 'plum', 'powderblue', 'rosybrown', 'royalblue', 'saddlebrown', 'salmon', 'sandybrown', 'seagreen', 'seashell', 'sienna', 'skyblue', 'slateblue', 'slategray', 'slategrey', 'snow', 'springgreen', 'steelblue', 'tan', 'thistle', 'tomato', 'turquoise', 'violet', 'wheat', 'whitesmoke', 'yellowgreen', 'rebeccapurple']], Union[:class:`HexColor`, str], str]]]
        Text color for title text.
    dx : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], float]
        Delta offset for title and subtitle text x-coordinate.
    dy : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], float]
        Delta offset for title and subtitle text y-coordinate.
    font : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], str]
        Font name for title text.
    fontSize : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], float]
        Font size in pixels for title text.
    fontStyle : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], Union[:class:`FontStyle`, str]]
        Font style for title text.
    fontWeight : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], Union[:class:`FontWeight`, Literal['normal', 'bold', 'lighter', 'bolder', 100, 200, 300, 400, 500, 600, 700, 800, 900]]]
        Font weight for title text. This can be either a string (e.g ``"bold"``,
        ``"normal"`` ) or a number ( ``100``, ``200``, ``300``, ..., ``900`` where
        ``"normal"`` = ``400`` and ``"bold"`` = ``700`` ).
    frame : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], Union[Union[:class:`TitleFrame`, Literal['bounds', 'group']], str]]
        The reference frame for the anchor position, one of ``"bounds"`` (to anchor relative
        to the full bounding box) or ``"group"`` (to anchor relative to the group width or
        height).
    limit : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], float]
        The maximum allowed length in pixels of title and subtitle text.
    lineHeight : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], float]
        Line height in pixels for multi-line title text or title text with ``"line-top"`` or
        ``"line-bottom"`` baseline.
    offset : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], float]
        The orthogonal offset in pixels by which to displace the title group from its
        position along the edge of the chart.
    orient : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], Union[:class:`TitleOrient`, Literal['none', 'left', 'right', 'top', 'bottom']]]
        Default title orientation ( ``"top"``, ``"bottom"``, ``"left"``, or ``"right"`` )
    subtitleColor : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], Union[None, Union[:class:`Color`, Union[:class:`ColorName`, Literal['black', 'silver', 'gray', 'white', 'maroon', 'red', 'purple', 'fuchsia', 'green', 'lime', 'olive', 'yellow', 'navy', 'blue', 'teal', 'aqua', 'orange', 'aliceblue', 'antiquewhite', 'aquamarine', 'azure', 'beige', 'bisque', 'blanchedalmond', 'blueviolet', 'brown', 'burlywood', 'cadetblue', 'chartreuse', 'chocolate', 'coral', 'cornflowerblue', 'cornsilk', 'crimson', 'cyan', 'darkblue', 'darkcyan', 'darkgoldenrod', 'darkgray', 'darkgreen', 'darkgrey', 'darkkhaki', 'darkmagenta', 'darkolivegreen', 'darkorange', 'darkorchid', 'darkred', 'darksalmon', 'darkseagreen', 'darkslateblue', 'darkslategray', 'darkslategrey', 'darkturquoise', 'darkviolet', 'deeppink', 'deepskyblue', 'dimgray', 'dimgrey', 'dodgerblue', 'firebrick', 'floralwhite', 'forestgreen', 'gainsboro', 'ghostwhite', 'gold', 'goldenrod', 'greenyellow', 'grey', 'honeydew', 'hotpink', 'indianred', 'indigo', 'ivory', 'khaki', 'lavender', 'lavenderblush', 'lawngreen', 'lemonchiffon', 'lightblue', 'lightcoral', 'lightcyan', 'lightgoldenrodyellow', 'lightgray', 'lightgreen', 'lightgrey', 'lightpink', 'lightsalmon', 'lightseagreen', 'lightskyblue', 'lightslategray', 'lightslategrey', 'lightsteelblue', 'lightyellow', 'limegreen', 'linen', 'magenta', 'mediumaquamarine', 'mediumblue', 'mediumorchid', 'mediumpurple', 'mediumseagreen', 'mediumslateblue', 'mediumspringgreen', 'mediumturquoise', 'mediumvioletred', 'midnightblue', 'mintcream', 'mistyrose', 'moccasin', 'navajowhite', 'oldlace', 'olivedrab', 'orangered', 'orchid', 'palegoldenrod', 'palegreen', 'paleturquoise', 'palevioletred', 'papayawhip', 'peachpuff', 'peru', 'pink', 'plum', 'powderblue', 'rosybrown', 'royalblue', 'saddlebrown', 'salmon', 'sandybrown', 'seagreen', 'seashell', 'sienna', 'skyblue', 'slateblue', 'slategray', 'slategrey', 'snow', 'springgreen', 'steelblue', 'tan', 'thistle', 'tomato', 'turquoise', 'violet', 'wheat', 'whitesmoke', 'yellowgreen', 'rebeccapurple']], Union[:class:`HexColor`, str], str]]]
        Text color for subtitle text.
    subtitleFont : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], str]
        Font name for subtitle text.
    subtitleFontSize : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], float]
        Font size in pixels for subtitle text.
    subtitleFontStyle : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], Union[:class:`FontStyle`, str]]
        Font style for subtitle text.
    subtitleFontWeight : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], Union[:class:`FontWeight`, Literal['normal', 'bold', 'lighter', 'bolder', 100, 200, 300, 400, 500, 600, 700, 800, 900]]]
        Font weight for subtitle text. This can be either a string (e.g ``"bold"``,
        ``"normal"`` ) or a number ( ``100``, ``200``, ``300``, ..., ``900`` where
        ``"normal"`` = ``400`` and ``"bold"`` = ``700`` ).
    subtitleLineHeight : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], float]
        Line height in pixels for multi-line subtitle text.
    subtitlePadding : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], float]
        The padding in pixels between title and subtitle text.
    zindex : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], float]
        The integer z-index indicating the layering of the title group relative to other
        axis, mark, and legend groups.

        **Default value:** ``0``.
    """

    _schema = {"$ref": "#/definitions/TitleConfig"}

    def __init__(
        self,
        align: Union[
            Union["Align", Literal["left", "center", "right"]], UndefinedType
        ] = Undefined,
        anchor: Union[
            Union[
                Union["ExprRef", "_ParameterProtocol", dict],
                Union["TitleAnchor", Literal[None, "start", "middle", "end"]],
            ],
            UndefinedType,
        ] = Undefined,
        angle: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], float], UndefinedType
        ] = Undefined,
        aria: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], bool], UndefinedType
        ] = Undefined,
        baseline: Union[
            Union[
                "TextBaseline",
                Union["Baseline", Literal["top", "middle", "bottom"]],
                str,
            ],
            UndefinedType,
        ] = Undefined,
        color: Union[
            Union[
                Union["ExprRef", "_ParameterProtocol", dict],
                Union[
                    None,
                    Union[
                        "Color",
                        Union[
                            "ColorName",
                            Literal[
                                "black",
                                "silver",
                                "gray",
                                "white",
                                "maroon",
                                "red",
                                "purple",
                                "fuchsia",
                                "green",
                                "lime",
                                "olive",
                                "yellow",
                                "navy",
                                "blue",
                                "teal",
                                "aqua",
                                "orange",
                                "aliceblue",
                                "antiquewhite",
                                "aquamarine",
                                "azure",
                                "beige",
                                "bisque",
                                "blanchedalmond",
                                "blueviolet",
                                "brown",
                                "burlywood",
                                "cadetblue",
                                "chartreuse",
                                "chocolate",
                                "coral",
                                "cornflowerblue",
                                "cornsilk",
                                "crimson",
                                "cyan",
                                "darkblue",
                                "darkcyan",
                                "darkgoldenrod",
                                "darkgray",
                                "darkgreen",
                                "darkgrey",
                                "darkkhaki",
                                "darkmagenta",
                                "darkolivegreen",
                                "darkorange",
                                "darkorchid",
                                "darkred",
                                "darksalmon",
                                "darkseagreen",
                                "darkslateblue",
                                "darkslategray",
                                "darkslategrey",
                                "darkturquoise",
                                "darkviolet",
                                "deeppink",
                                "deepskyblue",
                                "dimgray",
                                "dimgrey",
                                "dodgerblue",
                                "firebrick",
                                "floralwhite",
                                "forestgreen",
                                "gainsboro",
                                "ghostwhite",
                                "gold",
                                "goldenrod",
                                "greenyellow",
                                "grey",
                                "honeydew",
                                "hotpink",
                                "indianred",
                                "indigo",
                                "ivory",
                                "khaki",
                                "lavender",
                                "lavenderblush",
                                "lawngreen",
                                "lemonchiffon",
                                "lightblue",
                                "lightcoral",
                                "lightcyan",
                                "lightgoldenrodyellow",
                                "lightgray",
                                "lightgreen",
                                "lightgrey",
                                "lightpink",
                                "lightsalmon",
                                "lightseagreen",
                                "lightskyblue",
                                "lightslategray",
                                "lightslategrey",
                                "lightsteelblue",
                                "lightyellow",
                                "limegreen",
                                "linen",
                                "magenta",
                                "mediumaquamarine",
                                "mediumblue",
                                "mediumorchid",
                                "mediumpurple",
                                "mediumseagreen",
                                "mediumslateblue",
                                "mediumspringgreen",
                                "mediumturquoise",
                                "mediumvioletred",
                                "midnightblue",
                                "mintcream",
                                "mistyrose",
                                "moccasin",
                                "navajowhite",
                                "oldlace",
                                "olivedrab",
                                "orangered",
                                "orchid",
                                "palegoldenrod",
                                "palegreen",
                                "paleturquoise",
                                "palevioletred",
                                "papayawhip",
                                "peachpuff",
                                "peru",
                                "pink",
                                "plum",
                                "powderblue",
                                "rosybrown",
                                "royalblue",
                                "saddlebrown",
                                "salmon",
                                "sandybrown",
                                "seagreen",
                                "seashell",
                                "sienna",
                                "skyblue",
                                "slateblue",
                                "slategray",
                                "slategrey",
                                "snow",
                                "springgreen",
                                "steelblue",
                                "tan",
                                "thistle",
                                "tomato",
                                "turquoise",
                                "violet",
                                "wheat",
                                "whitesmoke",
                                "yellowgreen",
                                "rebeccapurple",
                            ],
                        ],
                        Union["HexColor", str],
                        str,
                    ],
                ],
            ],
            UndefinedType,
        ] = Undefined,
        dx: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], float], UndefinedType
        ] = Undefined,
        dy: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], float], UndefinedType
        ] = Undefined,
        font: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], str], UndefinedType
        ] = Undefined,
        fontSize: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], float], UndefinedType
        ] = Undefined,
        fontStyle: Union[
            Union[
                Union["ExprRef", "_ParameterProtocol", dict], Union["FontStyle", str]
            ],
            UndefinedType,
        ] = Undefined,
        fontWeight: Union[
            Union[
                Union["ExprRef", "_ParameterProtocol", dict],
                Union[
                    "FontWeight",
                    Literal[
                        "normal",
                        "bold",
                        "lighter",
                        "bolder",
                        100,
                        200,
                        300,
                        400,
                        500,
                        600,
                        700,
                        800,
                        900,
                    ],
                ],
            ],
            UndefinedType,
        ] = Undefined,
        frame: Union[
            Union[
                Union["ExprRef", "_ParameterProtocol", dict],
                Union[Union["TitleFrame", Literal["bounds", "group"]], str],
            ],
            UndefinedType,
        ] = Undefined,
        limit: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], float], UndefinedType
        ] = Undefined,
        lineHeight: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], float], UndefinedType
        ] = Undefined,
        offset: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], float], UndefinedType
        ] = Undefined,
        orient: Union[
            Union[
                Union["ExprRef", "_ParameterProtocol", dict],
                Union["TitleOrient", Literal["none", "left", "right", "top", "bottom"]],
            ],
            UndefinedType,
        ] = Undefined,
        subtitleColor: Union[
            Union[
                Union["ExprRef", "_ParameterProtocol", dict],
                Union[
                    None,
                    Union[
                        "Color",
                        Union[
                            "ColorName",
                            Literal[
                                "black",
                                "silver",
                                "gray",
                                "white",
                                "maroon",
                                "red",
                                "purple",
                                "fuchsia",
                                "green",
                                "lime",
                                "olive",
                                "yellow",
                                "navy",
                                "blue",
                                "teal",
                                "aqua",
                                "orange",
                                "aliceblue",
                                "antiquewhite",
                                "aquamarine",
                                "azure",
                                "beige",
                                "bisque",
                                "blanchedalmond",
                                "blueviolet",
                                "brown",
                                "burlywood",
                                "cadetblue",
                                "chartreuse",
                                "chocolate",
                                "coral",
                                "cornflowerblue",
                                "cornsilk",
                                "crimson",
                                "cyan",
                                "darkblue",
                                "darkcyan",
                                "darkgoldenrod",
                                "darkgray",
                                "darkgreen",
                                "darkgrey",
                                "darkkhaki",
                                "darkmagenta",
                                "darkolivegreen",
                                "darkorange",
                                "darkorchid",
                                "darkred",
                                "darksalmon",
                                "darkseagreen",
                                "darkslateblue",
                                "darkslategray",
                                "darkslategrey",
                                "darkturquoise",
                                "darkviolet",
                                "deeppink",
                                "deepskyblue",
                                "dimgray",
                                "dimgrey",
                                "dodgerblue",
                                "firebrick",
                                "floralwhite",
                                "forestgreen",
                                "gainsboro",
                                "ghostwhite",
                                "gold",
                                "goldenrod",
                                "greenyellow",
                                "grey",
                                "honeydew",
                                "hotpink",
                                "indianred",
                                "indigo",
                                "ivory",
                                "khaki",
                                "lavender",
                                "lavenderblush",
                                "lawngreen",
                                "lemonchiffon",
                                "lightblue",
                                "lightcoral",
                                "lightcyan",
                                "lightgoldenrodyellow",
                                "lightgray",
                                "lightgreen",
                                "lightgrey",
                                "lightpink",
                                "lightsalmon",
                                "lightseagreen",
                                "lightskyblue",
                                "lightslategray",
                                "lightslategrey",
                                "lightsteelblue",
                                "lightyellow",
                                "limegreen",
                                "linen",
                                "magenta",
                                "mediumaquamarine",
                                "mediumblue",
                                "mediumorchid",
                                "mediumpurple",
                                "mediumseagreen",
                                "mediumslateblue",
                                "mediumspringgreen",
                                "mediumturquoise",
                                "mediumvioletred",
                                "midnightblue",
                                "mintcream",
                                "mistyrose",
                                "moccasin",
                                "navajowhite",
                                "oldlace",
                                "olivedrab",
                                "orangered",
                                "orchid",
                                "palegoldenrod",
                                "palegreen",
                                "paleturquoise",
                                "palevioletred",
                                "papayawhip",
                                "peachpuff",
                                "peru",
                                "pink",
                                "plum",
                                "powderblue",
                                "rosybrown",
                                "royalblue",
                                "saddlebrown",
                                "salmon",
                                "sandybrown",
                                "seagreen",
                                "seashell",
                                "sienna",
                                "skyblue",
                                "slateblue",
                                "slategray",
                                "slategrey",
                                "snow",
                                "springgreen",
                                "steelblue",
                                "tan",
                                "thistle",
                                "tomato",
                                "turquoise",
                                "violet",
                                "wheat",
                                "whitesmoke",
                                "yellowgreen",
                                "rebeccapurple",
                            ],
                        ],
                        Union["HexColor", str],
                        str,
                    ],
                ],
            ],
            UndefinedType,
        ] = Undefined,
        subtitleFont: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], str], UndefinedType
        ] = Undefined,
        subtitleFontSize: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], float], UndefinedType
        ] = Undefined,
        subtitleFontStyle: Union[
            Union[
                Union["ExprRef", "_ParameterProtocol", dict], Union["FontStyle", str]
            ],
            UndefinedType,
        ] = Undefined,
        subtitleFontWeight: Union[
            Union[
                Union["ExprRef", "_ParameterProtocol", dict],
                Union[
                    "FontWeight",
                    Literal[
                        "normal",
                        "bold",
                        "lighter",
                        "bolder",
                        100,
                        200,
                        300,
                        400,
                        500,
                        600,
                        700,
                        800,
                        900,
                    ],
                ],
            ],
            UndefinedType,
        ] = Undefined,
        subtitleLineHeight: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], float], UndefinedType
        ] = Undefined,
        subtitlePadding: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], float], UndefinedType
        ] = Undefined,
        zindex: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], float], UndefinedType
        ] = Undefined,
        **kwds
    ):
        super(TitleConfig, self).__init__(
            align=align,
            anchor=anchor,
            angle=angle,
            aria=aria,
            baseline=baseline,
            color=color,
            dx=dx,
            dy=dy,
            font=font,
            fontSize=fontSize,
            fontStyle=fontStyle,
            fontWeight=fontWeight,
            frame=frame,
            limit=limit,
            lineHeight=lineHeight,
            offset=offset,
            orient=orient,
            subtitleColor=subtitleColor,
            subtitleFont=subtitleFont,
            subtitleFontSize=subtitleFontSize,
            subtitleFontStyle=subtitleFontStyle,
            subtitleFontWeight=subtitleFontWeight,
            subtitleLineHeight=subtitleLineHeight,
            subtitlePadding=subtitlePadding,
            zindex=zindex,
            **kwds
        )


class TitleFrame(VegaLiteSchema):
    """TitleFrame schema wrapper

    Union[:class:`TitleFrame`, Literal['bounds', 'group']]
    """

    _schema = {"$ref": "#/definitions/TitleFrame"}

    def __init__(self, *args):
        super(TitleFrame, self).__init__(*args)


class TitleOrient(VegaLiteSchema):
    """TitleOrient schema wrapper

    Union[:class:`TitleOrient`, Literal['none', 'left', 'right', 'top', 'bottom']]
    """

    _schema = {"$ref": "#/definitions/TitleOrient"}

    def __init__(self, *args):
        super(TitleOrient, self).__init__(*args)


class TitleParams(VegaLiteSchema):
    """TitleParams schema wrapper

    Union[:class:`TitleParams`, Dict[required=[text]]]

    Parameters
    ----------

    text : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], Union[:class:`Text`, List[str], str]]
        The title text.
    align : Union[:class:`Align`, Literal['left', 'center', 'right']]
        Horizontal text alignment for title text. One of ``"left"``, ``"center"``, or
        ``"right"``.
    anchor : Union[:class:`TitleAnchor`, Literal[None, 'start', 'middle', 'end']]
        The anchor position for placing the title. One of ``"start"``, ``"middle"``, or
        ``"end"``. For example, with an orientation of top these anchor positions map to a
        left-, center-, or right-aligned title.

        **Default value:** ``"middle"`` for `single
        <https://vega.github.io/vega-lite/docs/spec.html>`__ and `layered
        <https://vega.github.io/vega-lite/docs/layer.html>`__ views. ``"start"`` for other
        composite views.

        **Note:** `For now <https://github.com/vega/vega-lite/issues/2875>`__, ``anchor`` is
        only customizable only for `single
        <https://vega.github.io/vega-lite/docs/spec.html>`__ and `layered
        <https://vega.github.io/vega-lite/docs/layer.html>`__ views. For other composite
        views, ``anchor`` is always ``"start"``.
    angle : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], float]
        Angle in degrees of title and subtitle text.
    aria : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], bool]
        A boolean flag indicating if `ARIA attributes
        <https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA>`__ should be
        included (SVG output only). If ``false``, the "aria-hidden" attribute will be set on
        the output SVG group, removing the title from the ARIA accessibility tree.

        **Default value:** ``true``
    baseline : Union[:class:`TextBaseline`, Union[:class:`Baseline`, Literal['top', 'middle', 'bottom']], str]
        Vertical text baseline for title and subtitle text. One of ``"alphabetic"``
        (default), ``"top"``, ``"middle"``, ``"bottom"``, ``"line-top"``, or
        ``"line-bottom"``. The ``"line-top"`` and ``"line-bottom"`` values operate similarly
        to ``"top"`` and ``"bottom"``, but are calculated relative to the *lineHeight*
        rather than *fontSize* alone.
    color : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], Union[None, Union[:class:`Color`, Union[:class:`ColorName`, Literal['black', 'silver', 'gray', 'white', 'maroon', 'red', 'purple', 'fuchsia', 'green', 'lime', 'olive', 'yellow', 'navy', 'blue', 'teal', 'aqua', 'orange', 'aliceblue', 'antiquewhite', 'aquamarine', 'azure', 'beige', 'bisque', 'blanchedalmond', 'blueviolet', 'brown', 'burlywood', 'cadetblue', 'chartreuse', 'chocolate', 'coral', 'cornflowerblue', 'cornsilk', 'crimson', 'cyan', 'darkblue', 'darkcyan', 'darkgoldenrod', 'darkgray', 'darkgreen', 'darkgrey', 'darkkhaki', 'darkmagenta', 'darkolivegreen', 'darkorange', 'darkorchid', 'darkred', 'darksalmon', 'darkseagreen', 'darkslateblue', 'darkslategray', 'darkslategrey', 'darkturquoise', 'darkviolet', 'deeppink', 'deepskyblue', 'dimgray', 'dimgrey', 'dodgerblue', 'firebrick', 'floralwhite', 'forestgreen', 'gainsboro', 'ghostwhite', 'gold', 'goldenrod', 'greenyellow', 'grey', 'honeydew', 'hotpink', 'indianred', 'indigo', 'ivory', 'khaki', 'lavender', 'lavenderblush', 'lawngreen', 'lemonchiffon', 'lightblue', 'lightcoral', 'lightcyan', 'lightgoldenrodyellow', 'lightgray', 'lightgreen', 'lightgrey', 'lightpink', 'lightsalmon', 'lightseagreen', 'lightskyblue', 'lightslategray', 'lightslategrey', 'lightsteelblue', 'lightyellow', 'limegreen', 'linen', 'magenta', 'mediumaquamarine', 'mediumblue', 'mediumorchid', 'mediumpurple', 'mediumseagreen', 'mediumslateblue', 'mediumspringgreen', 'mediumturquoise', 'mediumvioletred', 'midnightblue', 'mintcream', 'mistyrose', 'moccasin', 'navajowhite', 'oldlace', 'olivedrab', 'orangered', 'orchid', 'palegoldenrod', 'palegreen', 'paleturquoise', 'palevioletred', 'papayawhip', 'peachpuff', 'peru', 'pink', 'plum', 'powderblue', 'rosybrown', 'royalblue', 'saddlebrown', 'salmon', 'sandybrown', 'seagreen', 'seashell', 'sienna', 'skyblue', 'slateblue', 'slategray', 'slategrey', 'snow', 'springgreen', 'steelblue', 'tan', 'thistle', 'tomato', 'turquoise', 'violet', 'wheat', 'whitesmoke', 'yellowgreen', 'rebeccapurple']], Union[:class:`HexColor`, str], str]]]
        Text color for title text.
    dx : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], float]
        Delta offset for title and subtitle text x-coordinate.
    dy : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], float]
        Delta offset for title and subtitle text y-coordinate.
    font : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], str]
        Font name for title text.
    fontSize : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], float]
        Font size in pixels for title text.
    fontStyle : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], Union[:class:`FontStyle`, str]]
        Font style for title text.
    fontWeight : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], Union[:class:`FontWeight`, Literal['normal', 'bold', 'lighter', 'bolder', 100, 200, 300, 400, 500, 600, 700, 800, 900]]]
        Font weight for title text. This can be either a string (e.g ``"bold"``,
        ``"normal"`` ) or a number ( ``100``, ``200``, ``300``, ..., ``900`` where
        ``"normal"`` = ``400`` and ``"bold"`` = ``700`` ).
    frame : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], Union[Union[:class:`TitleFrame`, Literal['bounds', 'group']], str]]
        The reference frame for the anchor position, one of ``"bounds"`` (to anchor relative
        to the full bounding box) or ``"group"`` (to anchor relative to the group width or
        height).
    limit : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], float]
        The maximum allowed length in pixels of title and subtitle text.
    lineHeight : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], float]
        Line height in pixels for multi-line title text or title text with ``"line-top"`` or
        ``"line-bottom"`` baseline.
    offset : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], float]
        The orthogonal offset in pixels by which to displace the title group from its
        position along the edge of the chart.
    orient : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], Union[:class:`TitleOrient`, Literal['none', 'left', 'right', 'top', 'bottom']]]
        Default title orientation ( ``"top"``, ``"bottom"``, ``"left"``, or ``"right"`` )
    style : Union[List[str], str]
        A `mark style property <https://vega.github.io/vega-lite/docs/config.html#style>`__
        to apply to the title text mark.

        **Default value:** ``"group-title"``.
    subtitle : Union[:class:`Text`, List[str], str]
        The subtitle Text.
    subtitleColor : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], Union[None, Union[:class:`Color`, Union[:class:`ColorName`, Literal['black', 'silver', 'gray', 'white', 'maroon', 'red', 'purple', 'fuchsia', 'green', 'lime', 'olive', 'yellow', 'navy', 'blue', 'teal', 'aqua', 'orange', 'aliceblue', 'antiquewhite', 'aquamarine', 'azure', 'beige', 'bisque', 'blanchedalmond', 'blueviolet', 'brown', 'burlywood', 'cadetblue', 'chartreuse', 'chocolate', 'coral', 'cornflowerblue', 'cornsilk', 'crimson', 'cyan', 'darkblue', 'darkcyan', 'darkgoldenrod', 'darkgray', 'darkgreen', 'darkgrey', 'darkkhaki', 'darkmagenta', 'darkolivegreen', 'darkorange', 'darkorchid', 'darkred', 'darksalmon', 'darkseagreen', 'darkslateblue', 'darkslategray', 'darkslategrey', 'darkturquoise', 'darkviolet', 'deeppink', 'deepskyblue', 'dimgray', 'dimgrey', 'dodgerblue', 'firebrick', 'floralwhite', 'forestgreen', 'gainsboro', 'ghostwhite', 'gold', 'goldenrod', 'greenyellow', 'grey', 'honeydew', 'hotpink', 'indianred', 'indigo', 'ivory', 'khaki', 'lavender', 'lavenderblush', 'lawngreen', 'lemonchiffon', 'lightblue', 'lightcoral', 'lightcyan', 'lightgoldenrodyellow', 'lightgray', 'lightgreen', 'lightgrey', 'lightpink', 'lightsalmon', 'lightseagreen', 'lightskyblue', 'lightslategray', 'lightslategrey', 'lightsteelblue', 'lightyellow', 'limegreen', 'linen', 'magenta', 'mediumaquamarine', 'mediumblue', 'mediumorchid', 'mediumpurple', 'mediumseagreen', 'mediumslateblue', 'mediumspringgreen', 'mediumturquoise', 'mediumvioletred', 'midnightblue', 'mintcream', 'mistyrose', 'moccasin', 'navajowhite', 'oldlace', 'olivedrab', 'orangered', 'orchid', 'palegoldenrod', 'palegreen', 'paleturquoise', 'palevioletred', 'papayawhip', 'peachpuff', 'peru', 'pink', 'plum', 'powderblue', 'rosybrown', 'royalblue', 'saddlebrown', 'salmon', 'sandybrown', 'seagreen', 'seashell', 'sienna', 'skyblue', 'slateblue', 'slategray', 'slategrey', 'snow', 'springgreen', 'steelblue', 'tan', 'thistle', 'tomato', 'turquoise', 'violet', 'wheat', 'whitesmoke', 'yellowgreen', 'rebeccapurple']], Union[:class:`HexColor`, str], str]]]
        Text color for subtitle text.
    subtitleFont : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], str]
        Font name for subtitle text.
    subtitleFontSize : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], float]
        Font size in pixels for subtitle text.
    subtitleFontStyle : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], Union[:class:`FontStyle`, str]]
        Font style for subtitle text.
    subtitleFontWeight : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], Union[:class:`FontWeight`, Literal['normal', 'bold', 'lighter', 'bolder', 100, 200, 300, 400, 500, 600, 700, 800, 900]]]
        Font weight for subtitle text. This can be either a string (e.g ``"bold"``,
        ``"normal"`` ) or a number ( ``100``, ``200``, ``300``, ..., ``900`` where
        ``"normal"`` = ``400`` and ``"bold"`` = ``700`` ).
    subtitleLineHeight : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], float]
        Line height in pixels for multi-line subtitle text.
    subtitlePadding : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], float]
        The padding in pixels between title and subtitle text.
    zindex : float
        The integer z-index indicating the layering of the title group relative to other
        axis, mark and legend groups.

        **Default value:** ``0``.
    """

    _schema = {"$ref": "#/definitions/TitleParams"}

    def __init__(
        self,
        text: Union[
            Union[
                Union["ExprRef", "_ParameterProtocol", dict],
                Union["Text", List[str], str],
            ],
            UndefinedType,
        ] = Undefined,
        align: Union[
            Union["Align", Literal["left", "center", "right"]], UndefinedType
        ] = Undefined,
        anchor: Union[
            Union["TitleAnchor", Literal[None, "start", "middle", "end"]], UndefinedType
        ] = Undefined,
        angle: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], float], UndefinedType
        ] = Undefined,
        aria: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], bool], UndefinedType
        ] = Undefined,
        baseline: Union[
            Union[
                "TextBaseline",
                Union["Baseline", Literal["top", "middle", "bottom"]],
                str,
            ],
            UndefinedType,
        ] = Undefined,
        color: Union[
            Union[
                Union["ExprRef", "_ParameterProtocol", dict],
                Union[
                    None,
                    Union[
                        "Color",
                        Union[
                            "ColorName",
                            Literal[
                                "black",
                                "silver",
                                "gray",
                                "white",
                                "maroon",
                                "red",
                                "purple",
                                "fuchsia",
                                "green",
                                "lime",
                                "olive",
                                "yellow",
                                "navy",
                                "blue",
                                "teal",
                                "aqua",
                                "orange",
                                "aliceblue",
                                "antiquewhite",
                                "aquamarine",
                                "azure",
                                "beige",
                                "bisque",
                                "blanchedalmond",
                                "blueviolet",
                                "brown",
                                "burlywood",
                                "cadetblue",
                                "chartreuse",
                                "chocolate",
                                "coral",
                                "cornflowerblue",
                                "cornsilk",
                                "crimson",
                                "cyan",
                                "darkblue",
                                "darkcyan",
                                "darkgoldenrod",
                                "darkgray",
                                "darkgreen",
                                "darkgrey",
                                "darkkhaki",
                                "darkmagenta",
                                "darkolivegreen",
                                "darkorange",
                                "darkorchid",
                                "darkred",
                                "darksalmon",
                                "darkseagreen",
                                "darkslateblue",
                                "darkslategray",
                                "darkslategrey",
                                "darkturquoise",
                                "darkviolet",
                                "deeppink",
                                "deepskyblue",
                                "dimgray",
                                "dimgrey",
                                "dodgerblue",
                                "firebrick",
                                "floralwhite",
                                "forestgreen",
                                "gainsboro",
                                "ghostwhite",
                                "gold",
                                "goldenrod",
                                "greenyellow",
                                "grey",
                                "honeydew",
                                "hotpink",
                                "indianred",
                                "indigo",
                                "ivory",
                                "khaki",
                                "lavender",
                                "lavenderblush",
                                "lawngreen",
                                "lemonchiffon",
                                "lightblue",
                                "lightcoral",
                                "lightcyan",
                                "lightgoldenrodyellow",
                                "lightgray",
                                "lightgreen",
                                "lightgrey",
                                "lightpink",
                                "lightsalmon",
                                "lightseagreen",
                                "lightskyblue",
                                "lightslategray",
                                "lightslategrey",
                                "lightsteelblue",
                                "lightyellow",
                                "limegreen",
                                "linen",
                                "magenta",
                                "mediumaquamarine",
                                "mediumblue",
                                "mediumorchid",
                                "mediumpurple",
                                "mediumseagreen",
                                "mediumslateblue",
                                "mediumspringgreen",
                                "mediumturquoise",
                                "mediumvioletred",
                                "midnightblue",
                                "mintcream",
                                "mistyrose",
                                "moccasin",
                                "navajowhite",
                                "oldlace",
                                "olivedrab",
                                "orangered",
                                "orchid",
                                "palegoldenrod",
                                "palegreen",
                                "paleturquoise",
                                "palevioletred",
                                "papayawhip",
                                "peachpuff",
                                "peru",
                                "pink",
                                "plum",
                                "powderblue",
                                "rosybrown",
                                "royalblue",
                                "saddlebrown",
                                "salmon",
                                "sandybrown",
                                "seagreen",
                                "seashell",
                                "sienna",
                                "skyblue",
                                "slateblue",
                                "slategray",
                                "slategrey",
                                "snow",
                                "springgreen",
                                "steelblue",
                                "tan",
                                "thistle",
                                "tomato",
                                "turquoise",
                                "violet",
                                "wheat",
                                "whitesmoke",
                                "yellowgreen",
                                "rebeccapurple",
                            ],
                        ],
                        Union["HexColor", str],
                        str,
                    ],
                ],
            ],
            UndefinedType,
        ] = Undefined,
        dx: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], float], UndefinedType
        ] = Undefined,
        dy: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], float], UndefinedType
        ] = Undefined,
        font: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], str], UndefinedType
        ] = Undefined,
        fontSize: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], float], UndefinedType
        ] = Undefined,
        fontStyle: Union[
            Union[
                Union["ExprRef", "_ParameterProtocol", dict], Union["FontStyle", str]
            ],
            UndefinedType,
        ] = Undefined,
        fontWeight: Union[
            Union[
                Union["ExprRef", "_ParameterProtocol", dict],
                Union[
                    "FontWeight",
                    Literal[
                        "normal",
                        "bold",
                        "lighter",
                        "bolder",
                        100,
                        200,
                        300,
                        400,
                        500,
                        600,
                        700,
                        800,
                        900,
                    ],
                ],
            ],
            UndefinedType,
        ] = Undefined,
        frame: Union[
            Union[
                Union["ExprRef", "_ParameterProtocol", dict],
                Union[Union["TitleFrame", Literal["bounds", "group"]], str],
            ],
            UndefinedType,
        ] = Undefined,
        limit: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], float], UndefinedType
        ] = Undefined,
        lineHeight: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], float], UndefinedType
        ] = Undefined,
        offset: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], float], UndefinedType
        ] = Undefined,
        orient: Union[
            Union[
                Union["ExprRef", "_ParameterProtocol", dict],
                Union["TitleOrient", Literal["none", "left", "right", "top", "bottom"]],
            ],
            UndefinedType,
        ] = Undefined,
        style: Union[Union[List[str], str], UndefinedType] = Undefined,
        subtitle: Union[Union["Text", List[str], str], UndefinedType] = Undefined,
        subtitleColor: Union[
            Union[
                Union["ExprRef", "_ParameterProtocol", dict],
                Union[
                    None,
                    Union[
                        "Color",
                        Union[
                            "ColorName",
                            Literal[
                                "black",
                                "silver",
                                "gray",
                                "white",
                                "maroon",
                                "red",
                                "purple",
                                "fuchsia",
                                "green",
                                "lime",
                                "olive",
                                "yellow",
                                "navy",
                                "blue",
                                "teal",
                                "aqua",
                                "orange",
                                "aliceblue",
                                "antiquewhite",
                                "aquamarine",
                                "azure",
                                "beige",
                                "bisque",
                                "blanchedalmond",
                                "blueviolet",
                                "brown",
                                "burlywood",
                                "cadetblue",
                                "chartreuse",
                                "chocolate",
                                "coral",
                                "cornflowerblue",
                                "cornsilk",
                                "crimson",
                                "cyan",
                                "darkblue",
                                "darkcyan",
                                "darkgoldenrod",
                                "darkgray",
                                "darkgreen",
                                "darkgrey",
                                "darkkhaki",
                                "darkmagenta",
                                "darkolivegreen",
                                "darkorange",
                                "darkorchid",
                                "darkred",
                                "darksalmon",
                                "darkseagreen",
                                "darkslateblue",
                                "darkslategray",
                                "darkslategrey",
                                "darkturquoise",
                                "darkviolet",
                                "deeppink",
                                "deepskyblue",
                                "dimgray",
                                "dimgrey",
                                "dodgerblue",
                                "firebrick",
                                "floralwhite",
                                "forestgreen",
                                "gainsboro",
                                "ghostwhite",
                                "gold",
                                "goldenrod",
                                "greenyellow",
                                "grey",
                                "honeydew",
                                "hotpink",
                                "indianred",
                                "indigo",
                                "ivory",
                                "khaki",
                                "lavender",
                                "lavenderblush",
                                "lawngreen",
                                "lemonchiffon",
                                "lightblue",
                                "lightcoral",
                                "lightcyan",
                                "lightgoldenrodyellow",
                                "lightgray",
                                "lightgreen",
                                "lightgrey",
                                "lightpink",
                                "lightsalmon",
                                "lightseagreen",
                                "lightskyblue",
                                "lightslategray",
                                "lightslategrey",
                                "lightsteelblue",
                                "lightyellow",
                                "limegreen",
                                "linen",
                                "magenta",
                                "mediumaquamarine",
                                "mediumblue",
                                "mediumorchid",
                                "mediumpurple",
                                "mediumseagreen",
                                "mediumslateblue",
                                "mediumspringgreen",
                                "mediumturquoise",
                                "mediumvioletred",
                                "midnightblue",
                                "mintcream",
                                "mistyrose",
                                "moccasin",
                                "navajowhite",
                                "oldlace",
                                "olivedrab",
                                "orangered",
                                "orchid",
                                "palegoldenrod",
                                "palegreen",
                                "paleturquoise",
                                "palevioletred",
                                "papayawhip",
                                "peachpuff",
                                "peru",
                                "pink",
                                "plum",
                                "powderblue",
                                "rosybrown",
                                "royalblue",
                                "saddlebrown",
                                "salmon",
                                "sandybrown",
                                "seagreen",
                                "seashell",
                                "sienna",
                                "skyblue",
                                "slateblue",
                                "slategray",
                                "slategrey",
                                "snow",
                                "springgreen",
                                "steelblue",
                                "tan",
                                "thistle",
                                "tomato",
                                "turquoise",
                                "violet",
                                "wheat",
                                "whitesmoke",
                                "yellowgreen",
                                "rebeccapurple",
                            ],
                        ],
                        Union["HexColor", str],
                        str,
                    ],
                ],
            ],
            UndefinedType,
        ] = Undefined,
        subtitleFont: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], str], UndefinedType
        ] = Undefined,
        subtitleFontSize: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], float], UndefinedType
        ] = Undefined,
        subtitleFontStyle: Union[
            Union[
                Union["ExprRef", "_ParameterProtocol", dict], Union["FontStyle", str]
            ],
            UndefinedType,
        ] = Undefined,
        subtitleFontWeight: Union[
            Union[
                Union["ExprRef", "_ParameterProtocol", dict],
                Union[
                    "FontWeight",
                    Literal[
                        "normal",
                        "bold",
                        "lighter",
                        "bolder",
                        100,
                        200,
                        300,
                        400,
                        500,
                        600,
                        700,
                        800,
                        900,
                    ],
                ],
            ],
            UndefinedType,
        ] = Undefined,
        subtitleLineHeight: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], float], UndefinedType
        ] = Undefined,
        subtitlePadding: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], float], UndefinedType
        ] = Undefined,
        zindex: Union[float, UndefinedType] = Undefined,
        **kwds
    ):
        super(TitleParams, self).__init__(
            text=text,
            align=align,
            anchor=anchor,
            angle=angle,
            aria=aria,
            baseline=baseline,
            color=color,
            dx=dx,
            dy=dy,
            font=font,
            fontSize=fontSize,
            fontStyle=fontStyle,
            fontWeight=fontWeight,
            frame=frame,
            limit=limit,
            lineHeight=lineHeight,
            offset=offset,
            orient=orient,
            style=style,
            subtitle=subtitle,
            subtitleColor=subtitleColor,
            subtitleFont=subtitleFont,
            subtitleFontSize=subtitleFontSize,
            subtitleFontStyle=subtitleFontStyle,
            subtitleFontWeight=subtitleFontWeight,
            subtitleLineHeight=subtitleLineHeight,
            subtitlePadding=subtitlePadding,
            zindex=zindex,
            **kwds
        )


class TooltipContent(VegaLiteSchema):
    """TooltipContent schema wrapper

    Union[:class:`TooltipContent`, Dict[required=[content]]]

    Parameters
    ----------

    content : Literal['encoding', 'data']

    """

    _schema = {"$ref": "#/definitions/TooltipContent"}

    def __init__(
        self,
        content: Union[Literal["encoding", "data"], UndefinedType] = Undefined,
        **kwds
    ):
        super(TooltipContent, self).__init__(content=content, **kwds)


class TopLevelParameter(VegaLiteSchema):
    """TopLevelParameter schema wrapper

    Union[:class:`TopLevelParameter`, Union[:class:`TopLevelSelectionParameter`,
    Dict[required=[name, select]]], Union[:class:`VariableParameter`, Dict[required=[name]]]]
    """

    _schema = {"$ref": "#/definitions/TopLevelParameter"}

    def __init__(self, *args, **kwds):
        super(TopLevelParameter, self).__init__(*args, **kwds)


class TopLevelSelectionParameter(TopLevelParameter):
    """TopLevelSelectionParameter schema wrapper

    Union[:class:`TopLevelSelectionParameter`, Dict[required=[name, select]]]

    Parameters
    ----------

    name : Union[:class:`ParameterName`, str]
        Required. A unique name for the selection parameter. Selection names should be valid
        JavaScript identifiers: they should contain only alphanumeric characters (or "$", or
        "_") and may not start with a digit. Reserved keywords that may not be used as
        parameter names are "datum", "event", "item", and "parent".
    select : Union[Union[:class:`IntervalSelectionConfig`, Dict[required=[type]]], Union[:class:`PointSelectionConfig`, Dict[required=[type]]], Union[:class:`SelectionType`, Literal['point', 'interval']]]
        Determines the default event processing and data query for the selection. Vega-Lite
        currently supports two selection types:


        * ``"point"`` -- to select multiple discrete data values; the first value is
          selected on ``click`` and additional values toggled on shift-click.
        * ``"interval"`` -- to select a continuous range of data values on ``drag``.
    bind : Union[Dict[required=[]], Union[:class:`Binding`, Union[:class:`BindCheckbox`, Dict[required=[input]]], Union[:class:`BindDirect`, Dict[required=[element]]], Union[:class:`BindInput`, Dict[required=[]]], Union[:class:`BindRadioSelect`, Dict[required=[input, options]]], Union[:class:`BindRange`, Dict[required=[input]]]], Union[:class:`LegendBinding`, Union[:class:`LegendStreamBinding`, Dict[required=[legend]]], str], str]
        When set, a selection is populated by input elements (also known as dynamic query
        widgets) or by interacting with the corresponding legend. Direct manipulation
        interaction is disabled by default; to re-enable it, set the selection's `on
        <https://vega.github.io/vega-lite/docs/selection.html#common-selection-properties>`__
        property.

        Legend bindings are restricted to selections that only specify a single field or
        encoding.

        Query widget binding takes the form of Vega's `input element binding definition
        <https://vega.github.io/vega/docs/signals/#bind>`__ or can be a mapping between
        projected field/encodings and binding definitions.

        **See also:** `bind <https://vega.github.io/vega-lite/docs/bind.html>`__
        documentation.
    value : Union[List[Union[:class:`SelectionInitMapping`, Dict[required=[]]]], Union[:class:`SelectionInitIntervalMapping`, Dict[required=[]]], Union[:class:`SelectionInit`, Union[:class:`DateTime`, Dict[required=[]]], Union[:class:`PrimitiveValue`, None, bool, float, str]]]
        Initialize the selection with a mapping between `projected channels or field names
        <https://vega.github.io/vega-lite/docs/selection.html#project>`__ and initial
        values.

        **See also:** `init <https://vega.github.io/vega-lite/docs/value.html>`__
        documentation.
    views : List[str]
        By default, top-level selections are applied to every view in the visualization. If
        this property is specified, selections will only be applied to views with the given
        names.
    """

    _schema = {"$ref": "#/definitions/TopLevelSelectionParameter"}

    def __init__(
        self,
        name: Union[Union["ParameterName", str], UndefinedType] = Undefined,
        select: Union[
            Union[
                Union["IntervalSelectionConfig", dict],
                Union["PointSelectionConfig", dict],
                Union["SelectionType", Literal["point", "interval"]],
            ],
            UndefinedType,
        ] = Undefined,
        bind: Union[
            Union[
                Union[
                    "Binding",
                    Union["BindCheckbox", dict],
                    Union["BindDirect", dict],
                    Union["BindInput", dict],
                    Union["BindRadioSelect", dict],
                    Union["BindRange", dict],
                ],
                Union["LegendBinding", Union["LegendStreamBinding", dict], str],
                dict,
                str,
            ],
            UndefinedType,
        ] = Undefined,
        value: Union[
            Union[
                Union[
                    "SelectionInit",
                    Union["DateTime", dict],
                    Union["PrimitiveValue", None, bool, float, str],
                ],
                Union["SelectionInitIntervalMapping", dict],
                Union[List["SelectionInitMapping"], List[dict]],
            ],
            UndefinedType,
        ] = Undefined,
        views: Union[List[str], UndefinedType] = Undefined,
        **kwds
    ):
        super(TopLevelSelectionParameter, self).__init__(
            name=name, select=select, bind=bind, value=value, views=views, **kwds
        )


class TopLevelSpec(VegaLiteSchema):
    """TopLevelSpec schema wrapper

    Union[:class:`TopLevelSpec`, Union[:class:`TopLevelConcatSpec`, Dict[required=[concat]]],
    Union[:class:`TopLevelFacetSpec`, Dict[required=[data, facet, spec]]],
    Union[:class:`TopLevelHConcatSpec`, Dict[required=[hconcat]]],
    Union[:class:`TopLevelLayerSpec`, Dict[required=[layer]]],
    Union[:class:`TopLevelRepeatSpec`, Dict[required=[repeat, spec]]],
    Union[:class:`TopLevelUnitSpec`, Dict[required=[data, mark]]],
    Union[:class:`TopLevelVConcatSpec`, Dict[required=[vconcat]]]]
    A Vega-Lite top-level specification. This is the root class for all Vega-Lite
    specifications. (The json schema is generated from this type.)
    """

    _schema = {"$ref": "#/definitions/TopLevelSpec"}

    def __init__(self, *args, **kwds):
        super(TopLevelSpec, self).__init__(*args, **kwds)


class TopLevelConcatSpec(TopLevelSpec):
    """TopLevelConcatSpec schema wrapper

    Union[:class:`TopLevelConcatSpec`, Dict[required=[concat]]]

    Parameters
    ----------

    concat : List[Union[:class:`NonNormalizedSpec`, Union[:class:`ConcatSpecGenericSpec`, Dict[required=[concat]]], Union[:class:`FacetSpec`, Dict[required=[facet, spec]]], Union[:class:`FacetedUnitSpec`, Dict[required=[mark]]], Union[:class:`HConcatSpecGenericSpec`, Dict[required=[hconcat]]], Union[:class:`LayerSpec`, Dict[required=[layer]]], Union[:class:`RepeatSpec`, Union[:class:`LayerRepeatSpec`, Dict[required=[repeat, spec]]], Union[:class:`NonLayerRepeatSpec`, Dict[required=[repeat, spec]]]], Union[:class:`VConcatSpecGenericSpec`, Dict[required=[vconcat]]]]]
        A list of views to be concatenated.
    align : Union[Union[:class:`LayoutAlign`, Literal['all', 'each', 'none']], Union[:class:`RowColLayoutAlign`, Dict[required=[]]]]
        The alignment to apply to grid rows and columns. The supported string values are
        ``"all"``, ``"each"``, and ``"none"``.


        * For ``"none"``, a flow layout will be used, in which adjacent subviews are simply
          placed one after the other.
        * For ``"each"``, subviews will be aligned into a clean grid structure, but each row
          or column may be of variable size.
        * For ``"all"``, subviews will be aligned and each row or column will be sized
          identically based on the maximum observed size. String values for this property
          will be applied to both grid rows and columns.

        Alternatively, an object value of the form ``{"row": string, "column": string}`` can
        be used to supply different alignments for rows and columns.

        **Default value:** ``"all"``.
    autosize : Union[Union[:class:`AutoSizeParams`, Dict[required=[]]], Union[:class:`AutosizeType`, Literal['pad', 'none', 'fit', 'fit-x', 'fit-y']]]
        How the visualization size should be determined. If a string, should be one of
        ``"pad"``, ``"fit"`` or ``"none"``. Object values can additionally specify
        parameters for content sizing and automatic resizing.

        **Default value** : ``pad``
    background : Union[Union[:class:`Color`, Union[:class:`ColorName`, Literal['black', 'silver', 'gray', 'white', 'maroon', 'red', 'purple', 'fuchsia', 'green', 'lime', 'olive', 'yellow', 'navy', 'blue', 'teal', 'aqua', 'orange', 'aliceblue', 'antiquewhite', 'aquamarine', 'azure', 'beige', 'bisque', 'blanchedalmond', 'blueviolet', 'brown', 'burlywood', 'cadetblue', 'chartreuse', 'chocolate', 'coral', 'cornflowerblue', 'cornsilk', 'crimson', 'cyan', 'darkblue', 'darkcyan', 'darkgoldenrod', 'darkgray', 'darkgreen', 'darkgrey', 'darkkhaki', 'darkmagenta', 'darkolivegreen', 'darkorange', 'darkorchid', 'darkred', 'darksalmon', 'darkseagreen', 'darkslateblue', 'darkslategray', 'darkslategrey', 'darkturquoise', 'darkviolet', 'deeppink', 'deepskyblue', 'dimgray', 'dimgrey', 'dodgerblue', 'firebrick', 'floralwhite', 'forestgreen', 'gainsboro', 'ghostwhite', 'gold', 'goldenrod', 'greenyellow', 'grey', 'honeydew', 'hotpink', 'indianred', 'indigo', 'ivory', 'khaki', 'lavender', 'lavenderblush', 'lawngreen', 'lemonchiffon', 'lightblue', 'lightcoral', 'lightcyan', 'lightgoldenrodyellow', 'lightgray', 'lightgreen', 'lightgrey', 'lightpink', 'lightsalmon', 'lightseagreen', 'lightskyblue', 'lightslategray', 'lightslategrey', 'lightsteelblue', 'lightyellow', 'limegreen', 'linen', 'magenta', 'mediumaquamarine', 'mediumblue', 'mediumorchid', 'mediumpurple', 'mediumseagreen', 'mediumslateblue', 'mediumspringgreen', 'mediumturquoise', 'mediumvioletred', 'midnightblue', 'mintcream', 'mistyrose', 'moccasin', 'navajowhite', 'oldlace', 'olivedrab', 'orangered', 'orchid', 'palegoldenrod', 'palegreen', 'paleturquoise', 'palevioletred', 'papayawhip', 'peachpuff', 'peru', 'pink', 'plum', 'powderblue', 'rosybrown', 'royalblue', 'saddlebrown', 'salmon', 'sandybrown', 'seagreen', 'seashell', 'sienna', 'skyblue', 'slateblue', 'slategray', 'slategrey', 'snow', 'springgreen', 'steelblue', 'tan', 'thistle', 'tomato', 'turquoise', 'violet', 'wheat', 'whitesmoke', 'yellowgreen', 'rebeccapurple']], Union[:class:`HexColor`, str], str], Union[:class:`ExprRef`, Dict[required=[expr]]]]
        CSS color property to use as the background of the entire view.

        **Default value:** ``"white"``
    bounds : Literal['full', 'flush']
        The bounds calculation method to use for determining the extent of a sub-plot. One
        of ``full`` (the default) or ``flush``.


        * If set to ``full``, the entire calculated bounds (including axes, title, and
          legend) will be used.
        * If set to ``flush``, only the specified width and height values for the sub-view
          will be used. The ``flush`` setting can be useful when attempting to place
          sub-plots without axes or legends into a uniform grid structure.

        **Default value:** ``"full"``
    center : Union[Union[:class:`RowColboolean`, Dict[required=[]]], bool]
        Boolean flag indicating if subviews should be centered relative to their respective
        rows or columns.

        An object value of the form ``{"row": boolean, "column": boolean}`` can be used to
        supply different centering values for rows and columns.

        **Default value:** ``false``
    columns : float
        The number of columns to include in the view composition layout.

        **Default value** : ``undefined`` -- An infinite number of columns (a single row)
        will be assumed. This is equivalent to ``hconcat`` (for ``concat`` ) and to using
        the ``column`` channel (for ``facet`` and ``repeat`` ).

        **Note** :

        1) This property is only for:


        * the general (wrappable) ``concat`` operator (not ``hconcat`` / ``vconcat`` )
        * the ``facet`` and ``repeat`` operator with one field/repetition definition
          (without row/column nesting)

        2) Setting the ``columns`` to ``1`` is equivalent to ``vconcat`` (for ``concat`` )
        and to using the ``row`` channel (for ``facet`` and ``repeat`` ).
    config : Union[:class:`Config`, Dict[required=[]]]
        Vega-Lite configuration object. This property can only be defined at the top-level
        of a specification.
    data : Union[None, Union[:class:`Data`, Union[:class:`DataSource`, Union[:class:`InlineData`, Dict[required=[values]]], Union[:class:`NamedData`, Dict[required=[name]]], Union[:class:`UrlData`, Dict[required=[url]]]], Union[:class:`Generator`, Union[:class:`GraticuleGenerator`, Dict[required=[graticule]]], Union[:class:`SequenceGenerator`, Dict[required=[sequence]]], Union[:class:`SphereGenerator`, Dict[required=[sphere]]]]]]
        An object describing the data source. Set to ``null`` to ignore the parent's data
        source. If no data is set, it is derived from the parent.
    datasets : Union[:class:`Datasets`, Dict[required=[]]]
        A global data store for named datasets. This is a mapping from names to inline
        datasets. This can be an array of objects or primitive values or a string. Arrays of
        primitive values are ingested as objects with a ``data`` property.
    description : str
        Description of this mark for commenting purpose.
    name : str
        Name of the visualization for later reference.
    padding : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], Union[:class:`Padding`, Dict[required=[]], float]]
        The default visualization padding, in pixels, from the edge of the visualization
        canvas to the data rectangle. If a number, specifies padding for all sides. If an
        object, the value should have the format ``{"left": 5, "top": 5, "right": 5,
        "bottom": 5}`` to specify padding for each side of the visualization.

        **Default value** : ``5``
    params : List[Union[:class:`TopLevelParameter`, Union[:class:`TopLevelSelectionParameter`, Dict[required=[name, select]]], Union[:class:`VariableParameter`, Dict[required=[name]]]]]
        Dynamic variables or selections that parameterize a visualization.
    resolve : Union[:class:`Resolve`, Dict[required=[]]]
        Scale, axis, and legend resolutions for view composition specifications.
    spacing : Union[Union[:class:`RowColnumber`, Dict[required=[]]], float]
        The spacing in pixels between sub-views of the composition operator. An object of
        the form ``{"row": number, "column": number}`` can be used to set different spacing
        values for rows and columns.

        **Default value** : Depends on ``"spacing"`` property of `the view composition
        configuration <https://vega.github.io/vega-lite/docs/config.html#view-config>`__ (
        ``20`` by default)
    title : Union[Union[:class:`Text`, List[str], str], Union[:class:`TitleParams`, Dict[required=[text]]]]
        Title for the plot.
    transform : List[Union[:class:`Transform`, Union[:class:`AggregateTransform`, Dict[required=[aggregate]]], Union[:class:`BinTransform`, Dict[required=[bin, field, as]]], Union[:class:`CalculateTransform`, Dict[required=[calculate, as]]], Union[:class:`DensityTransform`, Dict[required=[density]]], Union[:class:`ExtentTransform`, Dict[required=[extent, param]]], Union[:class:`FilterTransform`, Dict[required=[filter]]], Union[:class:`FlattenTransform`, Dict[required=[flatten]]], Union[:class:`FoldTransform`, Dict[required=[fold]]], Union[:class:`ImputeTransform`, Dict[required=[impute, key]]], Union[:class:`JoinAggregateTransform`, Dict[required=[joinaggregate]]], Union[:class:`LoessTransform`, Dict[required=[loess, on]]], Union[:class:`LookupTransform`, Dict[required=[lookup, from]]], Union[:class:`PivotTransform`, Dict[required=[pivot, value]]], Union[:class:`QuantileTransform`, Dict[required=[quantile]]], Union[:class:`RegressionTransform`, Dict[required=[regression, on]]], Union[:class:`SampleTransform`, Dict[required=[sample]]], Union[:class:`StackTransform`, Dict[required=[stack, groupby, as]]], Union[:class:`TimeUnitTransform`, Dict[required=[timeUnit, field, as]]], Union[:class:`WindowTransform`, Dict[required=[window]]]]]
        An array of data transformations such as filter and new field calculation.
    usermeta : Union[:class:`Dict`, Dict[required=[]]]
        Optional metadata that will be passed to Vega. This object is completely ignored by
        Vega and Vega-Lite and can be used for custom metadata.
    $schema : str
        URL to `JSON schema <http://json-schema.org/>`__ for a Vega-Lite specification.
        Unless you have a reason to change this, use
        ``https://vega.github.io/schema/vega-lite/v5.json``. Setting the ``$schema``
        property allows automatic validation and autocomplete in editors that support JSON
        schema.
    """

    _schema = {"$ref": "#/definitions/TopLevelConcatSpec"}

    def __init__(
        self,
        concat: Union[
            Union[
                List["NonNormalizedSpec"],
                List[Union["ConcatSpecGenericSpec", dict]],
                List[Union["FacetSpec", dict]],
                List[Union["FacetedUnitSpec", dict]],
                List[Union["HConcatSpecGenericSpec", dict]],
                List[Union["LayerSpec", dict]],
                List[
                    Union[
                        "RepeatSpec",
                        Union["LayerRepeatSpec", dict],
                        Union["NonLayerRepeatSpec", dict],
                    ]
                ],
                List[Union["VConcatSpecGenericSpec", dict]],
            ],
            UndefinedType,
        ] = Undefined,
        align: Union[
            Union[
                Union["LayoutAlign", Literal["all", "each", "none"]],
                Union["RowColLayoutAlign", dict],
            ],
            UndefinedType,
        ] = Undefined,
        autosize: Union[
            Union[
                Union["AutoSizeParams", dict],
                Union["AutosizeType", Literal["pad", "none", "fit", "fit-x", "fit-y"]],
            ],
            UndefinedType,
        ] = Undefined,
        background: Union[
            Union[
                Union[
                    "Color",
                    Union[
                        "ColorName",
                        Literal[
                            "black",
                            "silver",
                            "gray",
                            "white",
                            "maroon",
                            "red",
                            "purple",
                            "fuchsia",
                            "green",
                            "lime",
                            "olive",
                            "yellow",
                            "navy",
                            "blue",
                            "teal",
                            "aqua",
                            "orange",
                            "aliceblue",
                            "antiquewhite",
                            "aquamarine",
                            "azure",
                            "beige",
                            "bisque",
                            "blanchedalmond",
                            "blueviolet",
                            "brown",
                            "burlywood",
                            "cadetblue",
                            "chartreuse",
                            "chocolate",
                            "coral",
                            "cornflowerblue",
                            "cornsilk",
                            "crimson",
                            "cyan",
                            "darkblue",
                            "darkcyan",
                            "darkgoldenrod",
                            "darkgray",
                            "darkgreen",
                            "darkgrey",
                            "darkkhaki",
                            "darkmagenta",
                            "darkolivegreen",
                            "darkorange",
                            "darkorchid",
                            "darkred",
                            "darksalmon",
                            "darkseagreen",
                            "darkslateblue",
                            "darkslategray",
                            "darkslategrey",
                            "darkturquoise",
                            "darkviolet",
                            "deeppink",
                            "deepskyblue",
                            "dimgray",
                            "dimgrey",
                            "dodgerblue",
                            "firebrick",
                            "floralwhite",
                            "forestgreen",
                            "gainsboro",
                            "ghostwhite",
                            "gold",
                            "goldenrod",
                            "greenyellow",
                            "grey",
                            "honeydew",
                            "hotpink",
                            "indianred",
                            "indigo",
                            "ivory",
                            "khaki",
                            "lavender",
                            "lavenderblush",
                            "lawngreen",
                            "lemonchiffon",
                            "lightblue",
                            "lightcoral",
                            "lightcyan",
                            "lightgoldenrodyellow",
                            "lightgray",
                            "lightgreen",
                            "lightgrey",
                            "lightpink",
                            "lightsalmon",
                            "lightseagreen",
                            "lightskyblue",
                            "lightslategray",
                            "lightslategrey",
                            "lightsteelblue",
                            "lightyellow",
                            "limegreen",
                            "linen",
                            "magenta",
                            "mediumaquamarine",
                            "mediumblue",
                            "mediumorchid",
                            "mediumpurple",
                            "mediumseagreen",
                            "mediumslateblue",
                            "mediumspringgreen",
                            "mediumturquoise",
                            "mediumvioletred",
                            "midnightblue",
                            "mintcream",
                            "mistyrose",
                            "moccasin",
                            "navajowhite",
                            "oldlace",
                            "olivedrab",
                            "orangered",
                            "orchid",
                            "palegoldenrod",
                            "palegreen",
                            "paleturquoise",
                            "palevioletred",
                            "papayawhip",
                            "peachpuff",
                            "peru",
                            "pink",
                            "plum",
                            "powderblue",
                            "rosybrown",
                            "royalblue",
                            "saddlebrown",
                            "salmon",
                            "sandybrown",
                            "seagreen",
                            "seashell",
                            "sienna",
                            "skyblue",
                            "slateblue",
                            "slategray",
                            "slategrey",
                            "snow",
                            "springgreen",
                            "steelblue",
                            "tan",
                            "thistle",
                            "tomato",
                            "turquoise",
                            "violet",
                            "wheat",
                            "whitesmoke",
                            "yellowgreen",
                            "rebeccapurple",
                        ],
                    ],
                    Union["HexColor", str],
                    str,
                ],
                Union["ExprRef", "_ParameterProtocol", dict],
            ],
            UndefinedType,
        ] = Undefined,
        bounds: Union[Literal["full", "flush"], UndefinedType] = Undefined,
        center: Union[
            Union[Union["RowColboolean", dict], bool], UndefinedType
        ] = Undefined,
        columns: Union[float, UndefinedType] = Undefined,
        config: Union[Union["Config", dict], UndefinedType] = Undefined,
        data: Union[
            Union[
                None,
                Union[
                    "Data",
                    Union[
                        "DataSource",
                        Union["InlineData", dict],
                        Union["NamedData", dict],
                        Union["UrlData", dict],
                    ],
                    Union[
                        "Generator",
                        Union["GraticuleGenerator", dict],
                        Union["SequenceGenerator", dict],
                        Union["SphereGenerator", dict],
                    ],
                ],
            ],
            UndefinedType,
        ] = Undefined,
        datasets: Union[Union["Datasets", dict], UndefinedType] = Undefined,
        description: Union[str, UndefinedType] = Undefined,
        name: Union[str, UndefinedType] = Undefined,
        padding: Union[
            Union[
                Union["ExprRef", "_ParameterProtocol", dict],
                Union["Padding", dict, float],
            ],
            UndefinedType,
        ] = Undefined,
        params: Union[
            Union[
                List["TopLevelParameter"],
                List[Union["TopLevelSelectionParameter", dict]],
                List[Union["VariableParameter", dict]],
            ],
            UndefinedType,
        ] = Undefined,
        resolve: Union[Union["Resolve", dict], UndefinedType] = Undefined,
        spacing: Union[
            Union[Union["RowColnumber", dict], float], UndefinedType
        ] = Undefined,
        title: Union[
            Union[Union["Text", List[str], str], Union["TitleParams", dict]],
            UndefinedType,
        ] = Undefined,
        transform: Union[
            Union[
                List["Transform"],
                List[Union["AggregateTransform", dict]],
                List[Union["BinTransform", dict]],
                List[Union["CalculateTransform", dict]],
                List[Union["DensityTransform", dict]],
                List[Union["ExtentTransform", dict]],
                List[Union["FilterTransform", dict]],
                List[Union["FlattenTransform", dict]],
                List[Union["FoldTransform", dict]],
                List[Union["ImputeTransform", dict]],
                List[Union["JoinAggregateTransform", dict]],
                List[Union["LoessTransform", dict]],
                List[Union["LookupTransform", dict]],
                List[Union["PivotTransform", dict]],
                List[Union["QuantileTransform", dict]],
                List[Union["RegressionTransform", dict]],
                List[Union["SampleTransform", dict]],
                List[Union["StackTransform", dict]],
                List[Union["TimeUnitTransform", dict]],
                List[Union["WindowTransform", dict]],
            ],
            UndefinedType,
        ] = Undefined,
        usermeta: Union[Union["Dict", dict], UndefinedType] = Undefined,
        **kwds
    ):
        super(TopLevelConcatSpec, self).__init__(
            concat=concat,
            align=align,
            autosize=autosize,
            background=background,
            bounds=bounds,
            center=center,
            columns=columns,
            config=config,
            data=data,
            datasets=datasets,
            description=description,
            name=name,
            padding=padding,
            params=params,
            resolve=resolve,
            spacing=spacing,
            title=title,
            transform=transform,
            usermeta=usermeta,
            **kwds
        )


class TopLevelFacetSpec(TopLevelSpec):
    """TopLevelFacetSpec schema wrapper

    Union[:class:`TopLevelFacetSpec`, Dict[required=[data, facet, spec]]]

    Parameters
    ----------

    data : Union[None, Union[:class:`Data`, Union[:class:`DataSource`, Union[:class:`InlineData`, Dict[required=[values]]], Union[:class:`NamedData`, Dict[required=[name]]], Union[:class:`UrlData`, Dict[required=[url]]]], Union[:class:`Generator`, Union[:class:`GraticuleGenerator`, Dict[required=[graticule]]], Union[:class:`SequenceGenerator`, Dict[required=[sequence]]], Union[:class:`SphereGenerator`, Dict[required=[sphere]]]]]]
        An object describing the data source. Set to ``null`` to ignore the parent's data
        source. If no data is set, it is derived from the parent.
    facet : Union[Union[:class:`FacetFieldDef`, Dict[required=[]]], Union[:class:`FacetMapping`, Dict[required=[]]]]
        Definition for how to facet the data. One of: 1) `a field definition for faceting
        the plot by one field
        <https://vega.github.io/vega-lite/docs/facet.html#field-def>`__ 2) `An object that
        maps row and column channels to their field definitions
        <https://vega.github.io/vega-lite/docs/facet.html#mapping>`__
    spec : Union[Union[:class:`LayerSpec`, Dict[required=[layer]]], Union[:class:`UnitSpecWithFrame`, Dict[required=[mark]]]]
        A specification of the view that gets faceted.
    align : Union[Union[:class:`LayoutAlign`, Literal['all', 'each', 'none']], Union[:class:`RowColLayoutAlign`, Dict[required=[]]]]
        The alignment to apply to grid rows and columns. The supported string values are
        ``"all"``, ``"each"``, and ``"none"``.


        * For ``"none"``, a flow layout will be used, in which adjacent subviews are simply
          placed one after the other.
        * For ``"each"``, subviews will be aligned into a clean grid structure, but each row
          or column may be of variable size.
        * For ``"all"``, subviews will be aligned and each row or column will be sized
          identically based on the maximum observed size. String values for this property
          will be applied to both grid rows and columns.

        Alternatively, an object value of the form ``{"row": string, "column": string}`` can
        be used to supply different alignments for rows and columns.

        **Default value:** ``"all"``.
    autosize : Union[Union[:class:`AutoSizeParams`, Dict[required=[]]], Union[:class:`AutosizeType`, Literal['pad', 'none', 'fit', 'fit-x', 'fit-y']]]
        How the visualization size should be determined. If a string, should be one of
        ``"pad"``, ``"fit"`` or ``"none"``. Object values can additionally specify
        parameters for content sizing and automatic resizing.

        **Default value** : ``pad``
    background : Union[Union[:class:`Color`, Union[:class:`ColorName`, Literal['black', 'silver', 'gray', 'white', 'maroon', 'red', 'purple', 'fuchsia', 'green', 'lime', 'olive', 'yellow', 'navy', 'blue', 'teal', 'aqua', 'orange', 'aliceblue', 'antiquewhite', 'aquamarine', 'azure', 'beige', 'bisque', 'blanchedalmond', 'blueviolet', 'brown', 'burlywood', 'cadetblue', 'chartreuse', 'chocolate', 'coral', 'cornflowerblue', 'cornsilk', 'crimson', 'cyan', 'darkblue', 'darkcyan', 'darkgoldenrod', 'darkgray', 'darkgreen', 'darkgrey', 'darkkhaki', 'darkmagenta', 'darkolivegreen', 'darkorange', 'darkorchid', 'darkred', 'darksalmon', 'darkseagreen', 'darkslateblue', 'darkslategray', 'darkslategrey', 'darkturquoise', 'darkviolet', 'deeppink', 'deepskyblue', 'dimgray', 'dimgrey', 'dodgerblue', 'firebrick', 'floralwhite', 'forestgreen', 'gainsboro', 'ghostwhite', 'gold', 'goldenrod', 'greenyellow', 'grey', 'honeydew', 'hotpink', 'indianred', 'indigo', 'ivory', 'khaki', 'lavender', 'lavenderblush', 'lawngreen', 'lemonchiffon', 'lightblue', 'lightcoral', 'lightcyan', 'lightgoldenrodyellow', 'lightgray', 'lightgreen', 'lightgrey', 'lightpink', 'lightsalmon', 'lightseagreen', 'lightskyblue', 'lightslategray', 'lightslategrey', 'lightsteelblue', 'lightyellow', 'limegreen', 'linen', 'magenta', 'mediumaquamarine', 'mediumblue', 'mediumorchid', 'mediumpurple', 'mediumseagreen', 'mediumslateblue', 'mediumspringgreen', 'mediumturquoise', 'mediumvioletred', 'midnightblue', 'mintcream', 'mistyrose', 'moccasin', 'navajowhite', 'oldlace', 'olivedrab', 'orangered', 'orchid', 'palegoldenrod', 'palegreen', 'paleturquoise', 'palevioletred', 'papayawhip', 'peachpuff', 'peru', 'pink', 'plum', 'powderblue', 'rosybrown', 'royalblue', 'saddlebrown', 'salmon', 'sandybrown', 'seagreen', 'seashell', 'sienna', 'skyblue', 'slateblue', 'slategray', 'slategrey', 'snow', 'springgreen', 'steelblue', 'tan', 'thistle', 'tomato', 'turquoise', 'violet', 'wheat', 'whitesmoke', 'yellowgreen', 'rebeccapurple']], Union[:class:`HexColor`, str], str], Union[:class:`ExprRef`, Dict[required=[expr]]]]
        CSS color property to use as the background of the entire view.

        **Default value:** ``"white"``
    bounds : Literal['full', 'flush']
        The bounds calculation method to use for determining the extent of a sub-plot. One
        of ``full`` (the default) or ``flush``.


        * If set to ``full``, the entire calculated bounds (including axes, title, and
          legend) will be used.
        * If set to ``flush``, only the specified width and height values for the sub-view
          will be used. The ``flush`` setting can be useful when attempting to place
          sub-plots without axes or legends into a uniform grid structure.

        **Default value:** ``"full"``
    center : Union[Union[:class:`RowColboolean`, Dict[required=[]]], bool]
        Boolean flag indicating if subviews should be centered relative to their respective
        rows or columns.

        An object value of the form ``{"row": boolean, "column": boolean}`` can be used to
        supply different centering values for rows and columns.

        **Default value:** ``false``
    columns : float
        The number of columns to include in the view composition layout.

        **Default value** : ``undefined`` -- An infinite number of columns (a single row)
        will be assumed. This is equivalent to ``hconcat`` (for ``concat`` ) and to using
        the ``column`` channel (for ``facet`` and ``repeat`` ).

        **Note** :

        1) This property is only for:


        * the general (wrappable) ``concat`` operator (not ``hconcat`` / ``vconcat`` )
        * the ``facet`` and ``repeat`` operator with one field/repetition definition
          (without row/column nesting)

        2) Setting the ``columns`` to ``1`` is equivalent to ``vconcat`` (for ``concat`` )
        and to using the ``row`` channel (for ``facet`` and ``repeat`` ).
    config : Union[:class:`Config`, Dict[required=[]]]
        Vega-Lite configuration object. This property can only be defined at the top-level
        of a specification.
    datasets : Union[:class:`Datasets`, Dict[required=[]]]
        A global data store for named datasets. This is a mapping from names to inline
        datasets. This can be an array of objects or primitive values or a string. Arrays of
        primitive values are ingested as objects with a ``data`` property.
    description : str
        Description of this mark for commenting purpose.
    name : str
        Name of the visualization for later reference.
    padding : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], Union[:class:`Padding`, Dict[required=[]], float]]
        The default visualization padding, in pixels, from the edge of the visualization
        canvas to the data rectangle. If a number, specifies padding for all sides. If an
        object, the value should have the format ``{"left": 5, "top": 5, "right": 5,
        "bottom": 5}`` to specify padding for each side of the visualization.

        **Default value** : ``5``
    params : List[Union[:class:`TopLevelParameter`, Union[:class:`TopLevelSelectionParameter`, Dict[required=[name, select]]], Union[:class:`VariableParameter`, Dict[required=[name]]]]]
        Dynamic variables or selections that parameterize a visualization.
    resolve : Union[:class:`Resolve`, Dict[required=[]]]
        Scale, axis, and legend resolutions for view composition specifications.
    spacing : Union[Union[:class:`RowColnumber`, Dict[required=[]]], float]
        The spacing in pixels between sub-views of the composition operator. An object of
        the form ``{"row": number, "column": number}`` can be used to set different spacing
        values for rows and columns.

        **Default value** : Depends on ``"spacing"`` property of `the view composition
        configuration <https://vega.github.io/vega-lite/docs/config.html#view-config>`__ (
        ``20`` by default)
    title : Union[Union[:class:`Text`, List[str], str], Union[:class:`TitleParams`, Dict[required=[text]]]]
        Title for the plot.
    transform : List[Union[:class:`Transform`, Union[:class:`AggregateTransform`, Dict[required=[aggregate]]], Union[:class:`BinTransform`, Dict[required=[bin, field, as]]], Union[:class:`CalculateTransform`, Dict[required=[calculate, as]]], Union[:class:`DensityTransform`, Dict[required=[density]]], Union[:class:`ExtentTransform`, Dict[required=[extent, param]]], Union[:class:`FilterTransform`, Dict[required=[filter]]], Union[:class:`FlattenTransform`, Dict[required=[flatten]]], Union[:class:`FoldTransform`, Dict[required=[fold]]], Union[:class:`ImputeTransform`, Dict[required=[impute, key]]], Union[:class:`JoinAggregateTransform`, Dict[required=[joinaggregate]]], Union[:class:`LoessTransform`, Dict[required=[loess, on]]], Union[:class:`LookupTransform`, Dict[required=[lookup, from]]], Union[:class:`PivotTransform`, Dict[required=[pivot, value]]], Union[:class:`QuantileTransform`, Dict[required=[quantile]]], Union[:class:`RegressionTransform`, Dict[required=[regression, on]]], Union[:class:`SampleTransform`, Dict[required=[sample]]], Union[:class:`StackTransform`, Dict[required=[stack, groupby, as]]], Union[:class:`TimeUnitTransform`, Dict[required=[timeUnit, field, as]]], Union[:class:`WindowTransform`, Dict[required=[window]]]]]
        An array of data transformations such as filter and new field calculation.
    usermeta : Union[:class:`Dict`, Dict[required=[]]]
        Optional metadata that will be passed to Vega. This object is completely ignored by
        Vega and Vega-Lite and can be used for custom metadata.
    $schema : str
        URL to `JSON schema <http://json-schema.org/>`__ for a Vega-Lite specification.
        Unless you have a reason to change this, use
        ``https://vega.github.io/schema/vega-lite/v5.json``. Setting the ``$schema``
        property allows automatic validation and autocomplete in editors that support JSON
        schema.
    """

    _schema = {"$ref": "#/definitions/TopLevelFacetSpec"}

    def __init__(
        self,
        data: Union[
            Union[
                None,
                Union[
                    "Data",
                    Union[
                        "DataSource",
                        Union["InlineData", dict],
                        Union["NamedData", dict],
                        Union["UrlData", dict],
                    ],
                    Union[
                        "Generator",
                        Union["GraticuleGenerator", dict],
                        Union["SequenceGenerator", dict],
                        Union["SphereGenerator", dict],
                    ],
                ],
            ],
            UndefinedType,
        ] = Undefined,
        facet: Union[
            Union[Union["FacetFieldDef", dict], Union["FacetMapping", dict]],
            UndefinedType,
        ] = Undefined,
        spec: Union[
            Union[Union["LayerSpec", dict], Union["UnitSpecWithFrame", dict]],
            UndefinedType,
        ] = Undefined,
        align: Union[
            Union[
                Union["LayoutAlign", Literal["all", "each", "none"]],
                Union["RowColLayoutAlign", dict],
            ],
            UndefinedType,
        ] = Undefined,
        autosize: Union[
            Union[
                Union["AutoSizeParams", dict],
                Union["AutosizeType", Literal["pad", "none", "fit", "fit-x", "fit-y"]],
            ],
            UndefinedType,
        ] = Undefined,
        background: Union[
            Union[
                Union[
                    "Color",
                    Union[
                        "ColorName",
                        Literal[
                            "black",
                            "silver",
                            "gray",
                            "white",
                            "maroon",
                            "red",
                            "purple",
                            "fuchsia",
                            "green",
                            "lime",
                            "olive",
                            "yellow",
                            "navy",
                            "blue",
                            "teal",
                            "aqua",
                            "orange",
                            "aliceblue",
                            "antiquewhite",
                            "aquamarine",
                            "azure",
                            "beige",
                            "bisque",
                            "blanchedalmond",
                            "blueviolet",
                            "brown",
                            "burlywood",
                            "cadetblue",
                            "chartreuse",
                            "chocolate",
                            "coral",
                            "cornflowerblue",
                            "cornsilk",
                            "crimson",
                            "cyan",
                            "darkblue",
                            "darkcyan",
                            "darkgoldenrod",
                            "darkgray",
                            "darkgreen",
                            "darkgrey",
                            "darkkhaki",
                            "darkmagenta",
                            "darkolivegreen",
                            "darkorange",
                            "darkorchid",
                            "darkred",
                            "darksalmon",
                            "darkseagreen",
                            "darkslateblue",
                            "darkslategray",
                            "darkslategrey",
                            "darkturquoise",
                            "darkviolet",
                            "deeppink",
                            "deepskyblue",
                            "dimgray",
                            "dimgrey",
                            "dodgerblue",
                            "firebrick",
                            "floralwhite",
                            "forestgreen",
                            "gainsboro",
                            "ghostwhite",
                            "gold",
                            "goldenrod",
                            "greenyellow",
                            "grey",
                            "honeydew",
                            "hotpink",
                            "indianred",
                            "indigo",
                            "ivory",
                            "khaki",
                            "lavender",
                            "lavenderblush",
                            "lawngreen",
                            "lemonchiffon",
                            "lightblue",
                            "lightcoral",
                            "lightcyan",
                            "lightgoldenrodyellow",
                            "lightgray",
                            "lightgreen",
                            "lightgrey",
                            "lightpink",
                            "lightsalmon",
                            "lightseagreen",
                            "lightskyblue",
                            "lightslategray",
                            "lightslategrey",
                            "lightsteelblue",
                            "lightyellow",
                            "limegreen",
                            "linen",
                            "magenta",
                            "mediumaquamarine",
                            "mediumblue",
                            "mediumorchid",
                            "mediumpurple",
                            "mediumseagreen",
                            "mediumslateblue",
                            "mediumspringgreen",
                            "mediumturquoise",
                            "mediumvioletred",
                            "midnightblue",
                            "mintcream",
                            "mistyrose",
                            "moccasin",
                            "navajowhite",
                            "oldlace",
                            "olivedrab",
                            "orangered",
                            "orchid",
                            "palegoldenrod",
                            "palegreen",
                            "paleturquoise",
                            "palevioletred",
                            "papayawhip",
                            "peachpuff",
                            "peru",
                            "pink",
                            "plum",
                            "powderblue",
                            "rosybrown",
                            "royalblue",
                            "saddlebrown",
                            "salmon",
                            "sandybrown",
                            "seagreen",
                            "seashell",
                            "sienna",
                            "skyblue",
                            "slateblue",
                            "slategray",
                            "slategrey",
                            "snow",
                            "springgreen",
                            "steelblue",
                            "tan",
                            "thistle",
                            "tomato",
                            "turquoise",
                            "violet",
                            "wheat",
                            "whitesmoke",
                            "yellowgreen",
                            "rebeccapurple",
                        ],
                    ],
                    Union["HexColor", str],
                    str,
                ],
                Union["ExprRef", "_ParameterProtocol", dict],
            ],
            UndefinedType,
        ] = Undefined,
        bounds: Union[Literal["full", "flush"], UndefinedType] = Undefined,
        center: Union[
            Union[Union["RowColboolean", dict], bool], UndefinedType
        ] = Undefined,
        columns: Union[float, UndefinedType] = Undefined,
        config: Union[Union["Config", dict], UndefinedType] = Undefined,
        datasets: Union[Union["Datasets", dict], UndefinedType] = Undefined,
        description: Union[str, UndefinedType] = Undefined,
        name: Union[str, UndefinedType] = Undefined,
        padding: Union[
            Union[
                Union["ExprRef", "_ParameterProtocol", dict],
                Union["Padding", dict, float],
            ],
            UndefinedType,
        ] = Undefined,
        params: Union[
            Union[
                List["TopLevelParameter"],
                List[Union["TopLevelSelectionParameter", dict]],
                List[Union["VariableParameter", dict]],
            ],
            UndefinedType,
        ] = Undefined,
        resolve: Union[Union["Resolve", dict], UndefinedType] = Undefined,
        spacing: Union[
            Union[Union["RowColnumber", dict], float], UndefinedType
        ] = Undefined,
        title: Union[
            Union[Union["Text", List[str], str], Union["TitleParams", dict]],
            UndefinedType,
        ] = Undefined,
        transform: Union[
            Union[
                List["Transform"],
                List[Union["AggregateTransform", dict]],
                List[Union["BinTransform", dict]],
                List[Union["CalculateTransform", dict]],
                List[Union["DensityTransform", dict]],
                List[Union["ExtentTransform", dict]],
                List[Union["FilterTransform", dict]],
                List[Union["FlattenTransform", dict]],
                List[Union["FoldTransform", dict]],
                List[Union["ImputeTransform", dict]],
                List[Union["JoinAggregateTransform", dict]],
                List[Union["LoessTransform", dict]],
                List[Union["LookupTransform", dict]],
                List[Union["PivotTransform", dict]],
                List[Union["QuantileTransform", dict]],
                List[Union["RegressionTransform", dict]],
                List[Union["SampleTransform", dict]],
                List[Union["StackTransform", dict]],
                List[Union["TimeUnitTransform", dict]],
                List[Union["WindowTransform", dict]],
            ],
            UndefinedType,
        ] = Undefined,
        usermeta: Union[Union["Dict", dict], UndefinedType] = Undefined,
        **kwds
    ):
        super(TopLevelFacetSpec, self).__init__(
            data=data,
            facet=facet,
            spec=spec,
            align=align,
            autosize=autosize,
            background=background,
            bounds=bounds,
            center=center,
            columns=columns,
            config=config,
            datasets=datasets,
            description=description,
            name=name,
            padding=padding,
            params=params,
            resolve=resolve,
            spacing=spacing,
            title=title,
            transform=transform,
            usermeta=usermeta,
            **kwds
        )


class TopLevelHConcatSpec(TopLevelSpec):
    """TopLevelHConcatSpec schema wrapper

    Union[:class:`TopLevelHConcatSpec`, Dict[required=[hconcat]]]

    Parameters
    ----------

    hconcat : List[Union[:class:`NonNormalizedSpec`, Union[:class:`ConcatSpecGenericSpec`, Dict[required=[concat]]], Union[:class:`FacetSpec`, Dict[required=[facet, spec]]], Union[:class:`FacetedUnitSpec`, Dict[required=[mark]]], Union[:class:`HConcatSpecGenericSpec`, Dict[required=[hconcat]]], Union[:class:`LayerSpec`, Dict[required=[layer]]], Union[:class:`RepeatSpec`, Union[:class:`LayerRepeatSpec`, Dict[required=[repeat, spec]]], Union[:class:`NonLayerRepeatSpec`, Dict[required=[repeat, spec]]]], Union[:class:`VConcatSpecGenericSpec`, Dict[required=[vconcat]]]]]
        A list of views to be concatenated and put into a row.
    autosize : Union[Union[:class:`AutoSizeParams`, Dict[required=[]]], Union[:class:`AutosizeType`, Literal['pad', 'none', 'fit', 'fit-x', 'fit-y']]]
        How the visualization size should be determined. If a string, should be one of
        ``"pad"``, ``"fit"`` or ``"none"``. Object values can additionally specify
        parameters for content sizing and automatic resizing.

        **Default value** : ``pad``
    background : Union[Union[:class:`Color`, Union[:class:`ColorName`, Literal['black', 'silver', 'gray', 'white', 'maroon', 'red', 'purple', 'fuchsia', 'green', 'lime', 'olive', 'yellow', 'navy', 'blue', 'teal', 'aqua', 'orange', 'aliceblue', 'antiquewhite', 'aquamarine', 'azure', 'beige', 'bisque', 'blanchedalmond', 'blueviolet', 'brown', 'burlywood', 'cadetblue', 'chartreuse', 'chocolate', 'coral', 'cornflowerblue', 'cornsilk', 'crimson', 'cyan', 'darkblue', 'darkcyan', 'darkgoldenrod', 'darkgray', 'darkgreen', 'darkgrey', 'darkkhaki', 'darkmagenta', 'darkolivegreen', 'darkorange', 'darkorchid', 'darkred', 'darksalmon', 'darkseagreen', 'darkslateblue', 'darkslategray', 'darkslategrey', 'darkturquoise', 'darkviolet', 'deeppink', 'deepskyblue', 'dimgray', 'dimgrey', 'dodgerblue', 'firebrick', 'floralwhite', 'forestgreen', 'gainsboro', 'ghostwhite', 'gold', 'goldenrod', 'greenyellow', 'grey', 'honeydew', 'hotpink', 'indianred', 'indigo', 'ivory', 'khaki', 'lavender', 'lavenderblush', 'lawngreen', 'lemonchiffon', 'lightblue', 'lightcoral', 'lightcyan', 'lightgoldenrodyellow', 'lightgray', 'lightgreen', 'lightgrey', 'lightpink', 'lightsalmon', 'lightseagreen', 'lightskyblue', 'lightslategray', 'lightslategrey', 'lightsteelblue', 'lightyellow', 'limegreen', 'linen', 'magenta', 'mediumaquamarine', 'mediumblue', 'mediumorchid', 'mediumpurple', 'mediumseagreen', 'mediumslateblue', 'mediumspringgreen', 'mediumturquoise', 'mediumvioletred', 'midnightblue', 'mintcream', 'mistyrose', 'moccasin', 'navajowhite', 'oldlace', 'olivedrab', 'orangered', 'orchid', 'palegoldenrod', 'palegreen', 'paleturquoise', 'palevioletred', 'papayawhip', 'peachpuff', 'peru', 'pink', 'plum', 'powderblue', 'rosybrown', 'royalblue', 'saddlebrown', 'salmon', 'sandybrown', 'seagreen', 'seashell', 'sienna', 'skyblue', 'slateblue', 'slategray', 'slategrey', 'snow', 'springgreen', 'steelblue', 'tan', 'thistle', 'tomato', 'turquoise', 'violet', 'wheat', 'whitesmoke', 'yellowgreen', 'rebeccapurple']], Union[:class:`HexColor`, str], str], Union[:class:`ExprRef`, Dict[required=[expr]]]]
        CSS color property to use as the background of the entire view.

        **Default value:** ``"white"``
    bounds : Literal['full', 'flush']
        The bounds calculation method to use for determining the extent of a sub-plot. One
        of ``full`` (the default) or ``flush``.


        * If set to ``full``, the entire calculated bounds (including axes, title, and
          legend) will be used.
        * If set to ``flush``, only the specified width and height values for the sub-view
          will be used. The ``flush`` setting can be useful when attempting to place
          sub-plots without axes or legends into a uniform grid structure.

        **Default value:** ``"full"``
    center : bool
        Boolean flag indicating if subviews should be centered relative to their respective
        rows or columns.

        **Default value:** ``false``
    config : Union[:class:`Config`, Dict[required=[]]]
        Vega-Lite configuration object. This property can only be defined at the top-level
        of a specification.
    data : Union[None, Union[:class:`Data`, Union[:class:`DataSource`, Union[:class:`InlineData`, Dict[required=[values]]], Union[:class:`NamedData`, Dict[required=[name]]], Union[:class:`UrlData`, Dict[required=[url]]]], Union[:class:`Generator`, Union[:class:`GraticuleGenerator`, Dict[required=[graticule]]], Union[:class:`SequenceGenerator`, Dict[required=[sequence]]], Union[:class:`SphereGenerator`, Dict[required=[sphere]]]]]]
        An object describing the data source. Set to ``null`` to ignore the parent's data
        source. If no data is set, it is derived from the parent.
    datasets : Union[:class:`Datasets`, Dict[required=[]]]
        A global data store for named datasets. This is a mapping from names to inline
        datasets. This can be an array of objects or primitive values or a string. Arrays of
        primitive values are ingested as objects with a ``data`` property.
    description : str
        Description of this mark for commenting purpose.
    name : str
        Name of the visualization for later reference.
    padding : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], Union[:class:`Padding`, Dict[required=[]], float]]
        The default visualization padding, in pixels, from the edge of the visualization
        canvas to the data rectangle. If a number, specifies padding for all sides. If an
        object, the value should have the format ``{"left": 5, "top": 5, "right": 5,
        "bottom": 5}`` to specify padding for each side of the visualization.

        **Default value** : ``5``
    params : List[Union[:class:`TopLevelParameter`, Union[:class:`TopLevelSelectionParameter`, Dict[required=[name, select]]], Union[:class:`VariableParameter`, Dict[required=[name]]]]]
        Dynamic variables or selections that parameterize a visualization.
    resolve : Union[:class:`Resolve`, Dict[required=[]]]
        Scale, axis, and legend resolutions for view composition specifications.
    spacing : float
        The spacing in pixels between sub-views of the concat operator.

        **Default value** : ``10``
    title : Union[Union[:class:`Text`, List[str], str], Union[:class:`TitleParams`, Dict[required=[text]]]]
        Title for the plot.
    transform : List[Union[:class:`Transform`, Union[:class:`AggregateTransform`, Dict[required=[aggregate]]], Union[:class:`BinTransform`, Dict[required=[bin, field, as]]], Union[:class:`CalculateTransform`, Dict[required=[calculate, as]]], Union[:class:`DensityTransform`, Dict[required=[density]]], Union[:class:`ExtentTransform`, Dict[required=[extent, param]]], Union[:class:`FilterTransform`, Dict[required=[filter]]], Union[:class:`FlattenTransform`, Dict[required=[flatten]]], Union[:class:`FoldTransform`, Dict[required=[fold]]], Union[:class:`ImputeTransform`, Dict[required=[impute, key]]], Union[:class:`JoinAggregateTransform`, Dict[required=[joinaggregate]]], Union[:class:`LoessTransform`, Dict[required=[loess, on]]], Union[:class:`LookupTransform`, Dict[required=[lookup, from]]], Union[:class:`PivotTransform`, Dict[required=[pivot, value]]], Union[:class:`QuantileTransform`, Dict[required=[quantile]]], Union[:class:`RegressionTransform`, Dict[required=[regression, on]]], Union[:class:`SampleTransform`, Dict[required=[sample]]], Union[:class:`StackTransform`, Dict[required=[stack, groupby, as]]], Union[:class:`TimeUnitTransform`, Dict[required=[timeUnit, field, as]]], Union[:class:`WindowTransform`, Dict[required=[window]]]]]
        An array of data transformations such as filter and new field calculation.
    usermeta : Union[:class:`Dict`, Dict[required=[]]]
        Optional metadata that will be passed to Vega. This object is completely ignored by
        Vega and Vega-Lite and can be used for custom metadata.
    $schema : str
        URL to `JSON schema <http://json-schema.org/>`__ for a Vega-Lite specification.
        Unless you have a reason to change this, use
        ``https://vega.github.io/schema/vega-lite/v5.json``. Setting the ``$schema``
        property allows automatic validation and autocomplete in editors that support JSON
        schema.
    """

    _schema = {"$ref": "#/definitions/TopLevelHConcatSpec"}

    def __init__(
        self,
        hconcat: Union[
            Union[
                List["NonNormalizedSpec"],
                List[Union["ConcatSpecGenericSpec", dict]],
                List[Union["FacetSpec", dict]],
                List[Union["FacetedUnitSpec", dict]],
                List[Union["HConcatSpecGenericSpec", dict]],
                List[Union["LayerSpec", dict]],
                List[
                    Union[
                        "RepeatSpec",
                        Union["LayerRepeatSpec", dict],
                        Union["NonLayerRepeatSpec", dict],
                    ]
                ],
                List[Union["VConcatSpecGenericSpec", dict]],
            ],
            UndefinedType,
        ] = Undefined,
        autosize: Union[
            Union[
                Union["AutoSizeParams", dict],
                Union["AutosizeType", Literal["pad", "none", "fit", "fit-x", "fit-y"]],
            ],
            UndefinedType,
        ] = Undefined,
        background: Union[
            Union[
                Union[
                    "Color",
                    Union[
                        "ColorName",
                        Literal[
                            "black",
                            "silver",
                            "gray",
                            "white",
                            "maroon",
                            "red",
                            "purple",
                            "fuchsia",
                            "green",
                            "lime",
                            "olive",
                            "yellow",
                            "navy",
                            "blue",
                            "teal",
                            "aqua",
                            "orange",
                            "aliceblue",
                            "antiquewhite",
                            "aquamarine",
                            "azure",
                            "beige",
                            "bisque",
                            "blanchedalmond",
                            "blueviolet",
                            "brown",
                            "burlywood",
                            "cadetblue",
                            "chartreuse",
                            "chocolate",
                            "coral",
                            "cornflowerblue",
                            "cornsilk",
                            "crimson",
                            "cyan",
                            "darkblue",
                            "darkcyan",
                            "darkgoldenrod",
                            "darkgray",
                            "darkgreen",
                            "darkgrey",
                            "darkkhaki",
                            "darkmagenta",
                            "darkolivegreen",
                            "darkorange",
                            "darkorchid",
                            "darkred",
                            "darksalmon",
                            "darkseagreen",
                            "darkslateblue",
                            "darkslategray",
                            "darkslategrey",
                            "darkturquoise",
                            "darkviolet",
                            "deeppink",
                            "deepskyblue",
                            "dimgray",
                            "dimgrey",
                            "dodgerblue",
                            "firebrick",
                            "floralwhite",
                            "forestgreen",
                            "gainsboro",
                            "ghostwhite",
                            "gold",
                            "goldenrod",
                            "greenyellow",
                            "grey",
                            "honeydew",
                            "hotpink",
                            "indianred",
                            "indigo",
                            "ivory",
                            "khaki",
                            "lavender",
                            "lavenderblush",
                            "lawngreen",
                            "lemonchiffon",
                            "lightblue",
                            "lightcoral",
                            "lightcyan",
                            "lightgoldenrodyellow",
                            "lightgray",
                            "lightgreen",
                            "lightgrey",
                            "lightpink",
                            "lightsalmon",
                            "lightseagreen",
                            "lightskyblue",
                            "lightslategray",
                            "lightslategrey",
                            "lightsteelblue",
                            "lightyellow",
                            "limegreen",
                            "linen",
                            "magenta",
                            "mediumaquamarine",
                            "mediumblue",
                            "mediumorchid",
                            "mediumpurple",
                            "mediumseagreen",
                            "mediumslateblue",
                            "mediumspringgreen",
                            "mediumturquoise",
                            "mediumvioletred",
                            "midnightblue",
                            "mintcream",
                            "mistyrose",
                            "moccasin",
                            "navajowhite",
                            "oldlace",
                            "olivedrab",
                            "orangered",
                            "orchid",
                            "palegoldenrod",
                            "palegreen",
                            "paleturquoise",
                            "palevioletred",
                            "papayawhip",
                            "peachpuff",
                            "peru",
                            "pink",
                            "plum",
                            "powderblue",
                            "rosybrown",
                            "royalblue",
                            "saddlebrown",
                            "salmon",
                            "sandybrown",
                            "seagreen",
                            "seashell",
                            "sienna",
                            "skyblue",
                            "slateblue",
                            "slategray",
                            "slategrey",
                            "snow",
                            "springgreen",
                            "steelblue",
                            "tan",
                            "thistle",
                            "tomato",
                            "turquoise",
                            "violet",
                            "wheat",
                            "whitesmoke",
                            "yellowgreen",
                            "rebeccapurple",
                        ],
                    ],
                    Union["HexColor", str],
                    str,
                ],
                Union["ExprRef", "_ParameterProtocol", dict],
            ],
            UndefinedType,
        ] = Undefined,
        bounds: Union[Literal["full", "flush"], UndefinedType] = Undefined,
        center: Union[bool, UndefinedType] = Undefined,
        config: Union[Union["Config", dict], UndefinedType] = Undefined,
        data: Union[
            Union[
                None,
                Union[
                    "Data",
                    Union[
                        "DataSource",
                        Union["InlineData", dict],
                        Union["NamedData", dict],
                        Union["UrlData", dict],
                    ],
                    Union[
                        "Generator",
                        Union["GraticuleGenerator", dict],
                        Union["SequenceGenerator", dict],
                        Union["SphereGenerator", dict],
                    ],
                ],
            ],
            UndefinedType,
        ] = Undefined,
        datasets: Union[Union["Datasets", dict], UndefinedType] = Undefined,
        description: Union[str, UndefinedType] = Undefined,
        name: Union[str, UndefinedType] = Undefined,
        padding: Union[
            Union[
                Union["ExprRef", "_ParameterProtocol", dict],
                Union["Padding", dict, float],
            ],
            UndefinedType,
        ] = Undefined,
        params: Union[
            Union[
                List["TopLevelParameter"],
                List[Union["TopLevelSelectionParameter", dict]],
                List[Union["VariableParameter", dict]],
            ],
            UndefinedType,
        ] = Undefined,
        resolve: Union[Union["Resolve", dict], UndefinedType] = Undefined,
        spacing: Union[float, UndefinedType] = Undefined,
        title: Union[
            Union[Union["Text", List[str], str], Union["TitleParams", dict]],
            UndefinedType,
        ] = Undefined,
        transform: Union[
            Union[
                List["Transform"],
                List[Union["AggregateTransform", dict]],
                List[Union["BinTransform", dict]],
                List[Union["CalculateTransform", dict]],
                List[Union["DensityTransform", dict]],
                List[Union["ExtentTransform", dict]],
                List[Union["FilterTransform", dict]],
                List[Union["FlattenTransform", dict]],
                List[Union["FoldTransform", dict]],
                List[Union["ImputeTransform", dict]],
                List[Union["JoinAggregateTransform", dict]],
                List[Union["LoessTransform", dict]],
                List[Union["LookupTransform", dict]],
                List[Union["PivotTransform", dict]],
                List[Union["QuantileTransform", dict]],
                List[Union["RegressionTransform", dict]],
                List[Union["SampleTransform", dict]],
                List[Union["StackTransform", dict]],
                List[Union["TimeUnitTransform", dict]],
                List[Union["WindowTransform", dict]],
            ],
            UndefinedType,
        ] = Undefined,
        usermeta: Union[Union["Dict", dict], UndefinedType] = Undefined,
        **kwds
    ):
        super(TopLevelHConcatSpec, self).__init__(
            hconcat=hconcat,
            autosize=autosize,
            background=background,
            bounds=bounds,
            center=center,
            config=config,
            data=data,
            datasets=datasets,
            description=description,
            name=name,
            padding=padding,
            params=params,
            resolve=resolve,
            spacing=spacing,
            title=title,
            transform=transform,
            usermeta=usermeta,
            **kwds
        )


class TopLevelLayerSpec(TopLevelSpec):
    """TopLevelLayerSpec schema wrapper

    Union[:class:`TopLevelLayerSpec`, Dict[required=[layer]]]

    Parameters
    ----------

    layer : List[Union[Union[:class:`LayerSpec`, Dict[required=[layer]]], Union[:class:`UnitSpec`, Dict[required=[mark]]]]]
        Layer or single view specifications to be layered.

        **Note** : Specifications inside ``layer`` cannot use ``row`` and ``column``
        channels as layering facet specifications is not allowed. Instead, use the `facet
        operator <https://vega.github.io/vega-lite/docs/facet.html>`__ and place a layer
        inside a facet.
    autosize : Union[Union[:class:`AutoSizeParams`, Dict[required=[]]], Union[:class:`AutosizeType`, Literal['pad', 'none', 'fit', 'fit-x', 'fit-y']]]
        How the visualization size should be determined. If a string, should be one of
        ``"pad"``, ``"fit"`` or ``"none"``. Object values can additionally specify
        parameters for content sizing and automatic resizing.

        **Default value** : ``pad``
    background : Union[Union[:class:`Color`, Union[:class:`ColorName`, Literal['black', 'silver', 'gray', 'white', 'maroon', 'red', 'purple', 'fuchsia', 'green', 'lime', 'olive', 'yellow', 'navy', 'blue', 'teal', 'aqua', 'orange', 'aliceblue', 'antiquewhite', 'aquamarine', 'azure', 'beige', 'bisque', 'blanchedalmond', 'blueviolet', 'brown', 'burlywood', 'cadetblue', 'chartreuse', 'chocolate', 'coral', 'cornflowerblue', 'cornsilk', 'crimson', 'cyan', 'darkblue', 'darkcyan', 'darkgoldenrod', 'darkgray', 'darkgreen', 'darkgrey', 'darkkhaki', 'darkmagenta', 'darkolivegreen', 'darkorange', 'darkorchid', 'darkred', 'darksalmon', 'darkseagreen', 'darkslateblue', 'darkslategray', 'darkslategrey', 'darkturquoise', 'darkviolet', 'deeppink', 'deepskyblue', 'dimgray', 'dimgrey', 'dodgerblue', 'firebrick', 'floralwhite', 'forestgreen', 'gainsboro', 'ghostwhite', 'gold', 'goldenrod', 'greenyellow', 'grey', 'honeydew', 'hotpink', 'indianred', 'indigo', 'ivory', 'khaki', 'lavender', 'lavenderblush', 'lawngreen', 'lemonchiffon', 'lightblue', 'lightcoral', 'lightcyan', 'lightgoldenrodyellow', 'lightgray', 'lightgreen', 'lightgrey', 'lightpink', 'lightsalmon', 'lightseagreen', 'lightskyblue', 'lightslategray', 'lightslategrey', 'lightsteelblue', 'lightyellow', 'limegreen', 'linen', 'magenta', 'mediumaquamarine', 'mediumblue', 'mediumorchid', 'mediumpurple', 'mediumseagreen', 'mediumslateblue', 'mediumspringgreen', 'mediumturquoise', 'mediumvioletred', 'midnightblue', 'mintcream', 'mistyrose', 'moccasin', 'navajowhite', 'oldlace', 'olivedrab', 'orangered', 'orchid', 'palegoldenrod', 'palegreen', 'paleturquoise', 'palevioletred', 'papayawhip', 'peachpuff', 'peru', 'pink', 'plum', 'powderblue', 'rosybrown', 'royalblue', 'saddlebrown', 'salmon', 'sandybrown', 'seagreen', 'seashell', 'sienna', 'skyblue', 'slateblue', 'slategray', 'slategrey', 'snow', 'springgreen', 'steelblue', 'tan', 'thistle', 'tomato', 'turquoise', 'violet', 'wheat', 'whitesmoke', 'yellowgreen', 'rebeccapurple']], Union[:class:`HexColor`, str], str], Union[:class:`ExprRef`, Dict[required=[expr]]]]
        CSS color property to use as the background of the entire view.

        **Default value:** ``"white"``
    config : Union[:class:`Config`, Dict[required=[]]]
        Vega-Lite configuration object. This property can only be defined at the top-level
        of a specification.
    data : Union[None, Union[:class:`Data`, Union[:class:`DataSource`, Union[:class:`InlineData`, Dict[required=[values]]], Union[:class:`NamedData`, Dict[required=[name]]], Union[:class:`UrlData`, Dict[required=[url]]]], Union[:class:`Generator`, Union[:class:`GraticuleGenerator`, Dict[required=[graticule]]], Union[:class:`SequenceGenerator`, Dict[required=[sequence]]], Union[:class:`SphereGenerator`, Dict[required=[sphere]]]]]]
        An object describing the data source. Set to ``null`` to ignore the parent's data
        source. If no data is set, it is derived from the parent.
    datasets : Union[:class:`Datasets`, Dict[required=[]]]
        A global data store for named datasets. This is a mapping from names to inline
        datasets. This can be an array of objects or primitive values or a string. Arrays of
        primitive values are ingested as objects with a ``data`` property.
    description : str
        Description of this mark for commenting purpose.
    encoding : Union[:class:`SharedEncoding`, Dict[required=[]]]
        A shared key-value mapping between encoding channels and definition of fields in the
        underlying layers.
    height : Union[Union[:class:`Step`, Dict[required=[step]]], float, str]
        The height of a visualization.


        * For a plot with a continuous y-field, height should be a number.
        * For a plot with either a discrete y-field or no y-field, height can be either a
          number indicating a fixed height or an object in the form of ``{step: number}``
          defining the height per discrete step. (No y-field is equivalent to having one
          discrete step.)
        * To enable responsive sizing on height, it should be set to ``"container"``.

        **Default value:** Based on ``config.view.continuousHeight`` for a plot with a
        continuous y-field and ``config.view.discreteHeight`` otherwise.

        **Note:** For plots with `row and column channels
        <https://vega.github.io/vega-lite/docs/encoding.html#facet>`__, this represents the
        height of a single view and the ``"container"`` option cannot be used.

        **See also:** `height <https://vega.github.io/vega-lite/docs/size.html>`__
        documentation.
    name : str
        Name of the visualization for later reference.
    padding : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], Union[:class:`Padding`, Dict[required=[]], float]]
        The default visualization padding, in pixels, from the edge of the visualization
        canvas to the data rectangle. If a number, specifies padding for all sides. If an
        object, the value should have the format ``{"left": 5, "top": 5, "right": 5,
        "bottom": 5}`` to specify padding for each side of the visualization.

        **Default value** : ``5``
    params : List[Union[:class:`TopLevelParameter`, Union[:class:`TopLevelSelectionParameter`, Dict[required=[name, select]]], Union[:class:`VariableParameter`, Dict[required=[name]]]]]
        Dynamic variables or selections that parameterize a visualization.
    projection : Union[:class:`Projection`, Dict[required=[]]]
        An object defining properties of the geographic projection shared by underlying
        layers.
    resolve : Union[:class:`Resolve`, Dict[required=[]]]
        Scale, axis, and legend resolutions for view composition specifications.
    title : Union[Union[:class:`Text`, List[str], str], Union[:class:`TitleParams`, Dict[required=[text]]]]
        Title for the plot.
    transform : List[Union[:class:`Transform`, Union[:class:`AggregateTransform`, Dict[required=[aggregate]]], Union[:class:`BinTransform`, Dict[required=[bin, field, as]]], Union[:class:`CalculateTransform`, Dict[required=[calculate, as]]], Union[:class:`DensityTransform`, Dict[required=[density]]], Union[:class:`ExtentTransform`, Dict[required=[extent, param]]], Union[:class:`FilterTransform`, Dict[required=[filter]]], Union[:class:`FlattenTransform`, Dict[required=[flatten]]], Union[:class:`FoldTransform`, Dict[required=[fold]]], Union[:class:`ImputeTransform`, Dict[required=[impute, key]]], Union[:class:`JoinAggregateTransform`, Dict[required=[joinaggregate]]], Union[:class:`LoessTransform`, Dict[required=[loess, on]]], Union[:class:`LookupTransform`, Dict[required=[lookup, from]]], Union[:class:`PivotTransform`, Dict[required=[pivot, value]]], Union[:class:`QuantileTransform`, Dict[required=[quantile]]], Union[:class:`RegressionTransform`, Dict[required=[regression, on]]], Union[:class:`SampleTransform`, Dict[required=[sample]]], Union[:class:`StackTransform`, Dict[required=[stack, groupby, as]]], Union[:class:`TimeUnitTransform`, Dict[required=[timeUnit, field, as]]], Union[:class:`WindowTransform`, Dict[required=[window]]]]]
        An array of data transformations such as filter and new field calculation.
    usermeta : Union[:class:`Dict`, Dict[required=[]]]
        Optional metadata that will be passed to Vega. This object is completely ignored by
        Vega and Vega-Lite and can be used for custom metadata.
    view : Union[:class:`ViewBackground`, Dict[required=[]]]
        An object defining the view background's fill and stroke.

        **Default value:** none (transparent)
    width : Union[Union[:class:`Step`, Dict[required=[step]]], float, str]
        The width of a visualization.


        * For a plot with a continuous x-field, width should be a number.
        * For a plot with either a discrete x-field or no x-field, width can be either a
          number indicating a fixed width or an object in the form of ``{step: number}``
          defining the width per discrete step. (No x-field is equivalent to having one
          discrete step.)
        * To enable responsive sizing on width, it should be set to ``"container"``.

        **Default value:** Based on ``config.view.continuousWidth`` for a plot with a
        continuous x-field and ``config.view.discreteWidth`` otherwise.

        **Note:** For plots with `row and column channels
        <https://vega.github.io/vega-lite/docs/encoding.html#facet>`__, this represents the
        width of a single view and the ``"container"`` option cannot be used.

        **See also:** `width <https://vega.github.io/vega-lite/docs/size.html>`__
        documentation.
    $schema : str
        URL to `JSON schema <http://json-schema.org/>`__ for a Vega-Lite specification.
        Unless you have a reason to change this, use
        ``https://vega.github.io/schema/vega-lite/v5.json``. Setting the ``$schema``
        property allows automatic validation and autocomplete in editors that support JSON
        schema.
    """

    _schema = {"$ref": "#/definitions/TopLevelLayerSpec"}

    def __init__(
        self,
        layer: Union[
            Union[List[Union["LayerSpec", dict]], List[Union["UnitSpec", dict]]],
            UndefinedType,
        ] = Undefined,
        autosize: Union[
            Union[
                Union["AutoSizeParams", dict],
                Union["AutosizeType", Literal["pad", "none", "fit", "fit-x", "fit-y"]],
            ],
            UndefinedType,
        ] = Undefined,
        background: Union[
            Union[
                Union[
                    "Color",
                    Union[
                        "ColorName",
                        Literal[
                            "black",
                            "silver",
                            "gray",
                            "white",
                            "maroon",
                            "red",
                            "purple",
                            "fuchsia",
                            "green",
                            "lime",
                            "olive",
                            "yellow",
                            "navy",
                            "blue",
                            "teal",
                            "aqua",
                            "orange",
                            "aliceblue",
                            "antiquewhite",
                            "aquamarine",
                            "azure",
                            "beige",
                            "bisque",
                            "blanchedalmond",
                            "blueviolet",
                            "brown",
                            "burlywood",
                            "cadetblue",
                            "chartreuse",
                            "chocolate",
                            "coral",
                            "cornflowerblue",
                            "cornsilk",
                            "crimson",
                            "cyan",
                            "darkblue",
                            "darkcyan",
                            "darkgoldenrod",
                            "darkgray",
                            "darkgreen",
                            "darkgrey",
                            "darkkhaki",
                            "darkmagenta",
                            "darkolivegreen",
                            "darkorange",
                            "darkorchid",
                            "darkred",
                            "darksalmon",
                            "darkseagreen",
                            "darkslateblue",
                            "darkslategray",
                            "darkslategrey",
                            "darkturquoise",
                            "darkviolet",
                            "deeppink",
                            "deepskyblue",
                            "dimgray",
                            "dimgrey",
                            "dodgerblue",
                            "firebrick",
                            "floralwhite",
                            "forestgreen",
                            "gainsboro",
                            "ghostwhite",
                            "gold",
                            "goldenrod",
                            "greenyellow",
                            "grey",
                            "honeydew",
                            "hotpink",
                            "indianred",
                            "indigo",
                            "ivory",
                            "khaki",
                            "lavender",
                            "lavenderblush",
                            "lawngreen",
                            "lemonchiffon",
                            "lightblue",
                            "lightcoral",
                            "lightcyan",
                            "lightgoldenrodyellow",
                            "lightgray",
                            "lightgreen",
                            "lightgrey",
                            "lightpink",
                            "lightsalmon",
                            "lightseagreen",
                            "lightskyblue",
                            "lightslategray",
                            "lightslategrey",
                            "lightsteelblue",
                            "lightyellow",
                            "limegreen",
                            "linen",
                            "magenta",
                            "mediumaquamarine",
                            "mediumblue",
                            "mediumorchid",
                            "mediumpurple",
                            "mediumseagreen",
                            "mediumslateblue",
                            "mediumspringgreen",
                            "mediumturquoise",
                            "mediumvioletred",
                            "midnightblue",
                            "mintcream",
                            "mistyrose",
                            "moccasin",
                            "navajowhite",
                            "oldlace",
                            "olivedrab",
                            "orangered",
                            "orchid",
                            "palegoldenrod",
                            "palegreen",
                            "paleturquoise",
                            "palevioletred",
                            "papayawhip",
                            "peachpuff",
                            "peru",
                            "pink",
                            "plum",
                            "powderblue",
                            "rosybrown",
                            "royalblue",
                            "saddlebrown",
                            "salmon",
                            "sandybrown",
                            "seagreen",
                            "seashell",
                            "sienna",
                            "skyblue",
                            "slateblue",
                            "slategray",
                            "slategrey",
                            "snow",
                            "springgreen",
                            "steelblue",
                            "tan",
                            "thistle",
                            "tomato",
                            "turquoise",
                            "violet",
                            "wheat",
                            "whitesmoke",
                            "yellowgreen",
                            "rebeccapurple",
                        ],
                    ],
                    Union["HexColor", str],
                    str,
                ],
                Union["ExprRef", "_ParameterProtocol", dict],
            ],
            UndefinedType,
        ] = Undefined,
        config: Union[Union["Config", dict], UndefinedType] = Undefined,
        data: Union[
            Union[
                None,
                Union[
                    "Data",
                    Union[
                        "DataSource",
                        Union["InlineData", dict],
                        Union["NamedData", dict],
                        Union["UrlData", dict],
                    ],
                    Union[
                        "Generator",
                        Union["GraticuleGenerator", dict],
                        Union["SequenceGenerator", dict],
                        Union["SphereGenerator", dict],
                    ],
                ],
            ],
            UndefinedType,
        ] = Undefined,
        datasets: Union[Union["Datasets", dict], UndefinedType] = Undefined,
        description: Union[str, UndefinedType] = Undefined,
        encoding: Union[Union["SharedEncoding", dict], UndefinedType] = Undefined,
        height: Union[
            Union[Union["Step", dict], float, str], UndefinedType
        ] = Undefined,
        name: Union[str, UndefinedType] = Undefined,
        padding: Union[
            Union[
                Union["ExprRef", "_ParameterProtocol", dict],
                Union["Padding", dict, float],
            ],
            UndefinedType,
        ] = Undefined,
        params: Union[
            Union[
                List["TopLevelParameter"],
                List[Union["TopLevelSelectionParameter", dict]],
                List[Union["VariableParameter", dict]],
            ],
            UndefinedType,
        ] = Undefined,
        projection: Union[Union["Projection", dict], UndefinedType] = Undefined,
        resolve: Union[Union["Resolve", dict], UndefinedType] = Undefined,
        title: Union[
            Union[Union["Text", List[str], str], Union["TitleParams", dict]],
            UndefinedType,
        ] = Undefined,
        transform: Union[
            Union[
                List["Transform"],
                List[Union["AggregateTransform", dict]],
                List[Union["BinTransform", dict]],
                List[Union["CalculateTransform", dict]],
                List[Union["DensityTransform", dict]],
                List[Union["ExtentTransform", dict]],
                List[Union["FilterTransform", dict]],
                List[Union["FlattenTransform", dict]],
                List[Union["FoldTransform", dict]],
                List[Union["ImputeTransform", dict]],
                List[Union["JoinAggregateTransform", dict]],
                List[Union["LoessTransform", dict]],
                List[Union["LookupTransform", dict]],
                List[Union["PivotTransform", dict]],
                List[Union["QuantileTransform", dict]],
                List[Union["RegressionTransform", dict]],
                List[Union["SampleTransform", dict]],
                List[Union["StackTransform", dict]],
                List[Union["TimeUnitTransform", dict]],
                List[Union["WindowTransform", dict]],
            ],
            UndefinedType,
        ] = Undefined,
        usermeta: Union[Union["Dict", dict], UndefinedType] = Undefined,
        view: Union[Union["ViewBackground", dict], UndefinedType] = Undefined,
        width: Union[Union[Union["Step", dict], float, str], UndefinedType] = Undefined,
        **kwds
    ):
        super(TopLevelLayerSpec, self).__init__(
            layer=layer,
            autosize=autosize,
            background=background,
            config=config,
            data=data,
            datasets=datasets,
            description=description,
            encoding=encoding,
            height=height,
            name=name,
            padding=padding,
            params=params,
            projection=projection,
            resolve=resolve,
            title=title,
            transform=transform,
            usermeta=usermeta,
            view=view,
            width=width,
            **kwds
        )


class TopLevelRepeatSpec(TopLevelSpec):
    """TopLevelRepeatSpec schema wrapper

    Union[:class:`TopLevelRepeatSpec`, Dict[required=[repeat, spec]]]
    """

    _schema = {"$ref": "#/definitions/TopLevelRepeatSpec"}

    def __init__(self, *args, **kwds):
        super(TopLevelRepeatSpec, self).__init__(*args, **kwds)


class TopLevelUnitSpec(TopLevelSpec):
    """TopLevelUnitSpec schema wrapper

    Union[:class:`TopLevelUnitSpec`, Dict[required=[data, mark]]]

    Parameters
    ----------

    data : Union[None, Union[:class:`Data`, Union[:class:`DataSource`, Union[:class:`InlineData`, Dict[required=[values]]], Union[:class:`NamedData`, Dict[required=[name]]], Union[:class:`UrlData`, Dict[required=[url]]]], Union[:class:`Generator`, Union[:class:`GraticuleGenerator`, Dict[required=[graticule]]], Union[:class:`SequenceGenerator`, Dict[required=[sequence]]], Union[:class:`SphereGenerator`, Dict[required=[sphere]]]]]]
        An object describing the data source. Set to ``null`` to ignore the parent's data
        source. If no data is set, it is derived from the parent.
    mark : Union[:class:`AnyMark`, Union[:class:`CompositeMarkDef`, Union[:class:`BoxPlotDef`, Dict[required=[type]]], Union[:class:`ErrorBandDef`, Dict[required=[type]]], Union[:class:`ErrorBarDef`, Dict[required=[type]]]], Union[:class:`CompositeMark`, Union[:class:`BoxPlot`, str], Union[:class:`ErrorBand`, str], Union[:class:`ErrorBar`, str]], Union[:class:`MarkDef`, Dict[required=[type]]], Union[:class:`Mark`, Literal['arc', 'area', 'bar', 'image', 'line', 'point', 'rect', 'rule', 'text', 'tick', 'trail', 'circle', 'square', 'geoshape']]]
        A string describing the mark type (one of ``"bar"``, ``"circle"``, ``"square"``,
        ``"tick"``, ``"line"``, ``"area"``, ``"point"``, ``"rule"``, ``"geoshape"``, and
        ``"text"`` ) or a `mark definition object
        <https://vega.github.io/vega-lite/docs/mark.html#mark-def>`__.
    align : Union[Union[:class:`LayoutAlign`, Literal['all', 'each', 'none']], Union[:class:`RowColLayoutAlign`, Dict[required=[]]]]
        The alignment to apply to grid rows and columns. The supported string values are
        ``"all"``, ``"each"``, and ``"none"``.


        * For ``"none"``, a flow layout will be used, in which adjacent subviews are simply
          placed one after the other.
        * For ``"each"``, subviews will be aligned into a clean grid structure, but each row
          or column may be of variable size.
        * For ``"all"``, subviews will be aligned and each row or column will be sized
          identically based on the maximum observed size. String values for this property
          will be applied to both grid rows and columns.

        Alternatively, an object value of the form ``{"row": string, "column": string}`` can
        be used to supply different alignments for rows and columns.

        **Default value:** ``"all"``.
    autosize : Union[Union[:class:`AutoSizeParams`, Dict[required=[]]], Union[:class:`AutosizeType`, Literal['pad', 'none', 'fit', 'fit-x', 'fit-y']]]
        How the visualization size should be determined. If a string, should be one of
        ``"pad"``, ``"fit"`` or ``"none"``. Object values can additionally specify
        parameters for content sizing and automatic resizing.

        **Default value** : ``pad``
    background : Union[Union[:class:`Color`, Union[:class:`ColorName`, Literal['black', 'silver', 'gray', 'white', 'maroon', 'red', 'purple', 'fuchsia', 'green', 'lime', 'olive', 'yellow', 'navy', 'blue', 'teal', 'aqua', 'orange', 'aliceblue', 'antiquewhite', 'aquamarine', 'azure', 'beige', 'bisque', 'blanchedalmond', 'blueviolet', 'brown', 'burlywood', 'cadetblue', 'chartreuse', 'chocolate', 'coral', 'cornflowerblue', 'cornsilk', 'crimson', 'cyan', 'darkblue', 'darkcyan', 'darkgoldenrod', 'darkgray', 'darkgreen', 'darkgrey', 'darkkhaki', 'darkmagenta', 'darkolivegreen', 'darkorange', 'darkorchid', 'darkred', 'darksalmon', 'darkseagreen', 'darkslateblue', 'darkslategray', 'darkslategrey', 'darkturquoise', 'darkviolet', 'deeppink', 'deepskyblue', 'dimgray', 'dimgrey', 'dodgerblue', 'firebrick', 'floralwhite', 'forestgreen', 'gainsboro', 'ghostwhite', 'gold', 'goldenrod', 'greenyellow', 'grey', 'honeydew', 'hotpink', 'indianred', 'indigo', 'ivory', 'khaki', 'lavender', 'lavenderblush', 'lawngreen', 'lemonchiffon', 'lightblue', 'lightcoral', 'lightcyan', 'lightgoldenrodyellow', 'lightgray', 'lightgreen', 'lightgrey', 'lightpink', 'lightsalmon', 'lightseagreen', 'lightskyblue', 'lightslategray', 'lightslategrey', 'lightsteelblue', 'lightyellow', 'limegreen', 'linen', 'magenta', 'mediumaquamarine', 'mediumblue', 'mediumorchid', 'mediumpurple', 'mediumseagreen', 'mediumslateblue', 'mediumspringgreen', 'mediumturquoise', 'mediumvioletred', 'midnightblue', 'mintcream', 'mistyrose', 'moccasin', 'navajowhite', 'oldlace', 'olivedrab', 'orangered', 'orchid', 'palegoldenrod', 'palegreen', 'paleturquoise', 'palevioletred', 'papayawhip', 'peachpuff', 'peru', 'pink', 'plum', 'powderblue', 'rosybrown', 'royalblue', 'saddlebrown', 'salmon', 'sandybrown', 'seagreen', 'seashell', 'sienna', 'skyblue', 'slateblue', 'slategray', 'slategrey', 'snow', 'springgreen', 'steelblue', 'tan', 'thistle', 'tomato', 'turquoise', 'violet', 'wheat', 'whitesmoke', 'yellowgreen', 'rebeccapurple']], Union[:class:`HexColor`, str], str], Union[:class:`ExprRef`, Dict[required=[expr]]]]
        CSS color property to use as the background of the entire view.

        **Default value:** ``"white"``
    bounds : Literal['full', 'flush']
        The bounds calculation method to use for determining the extent of a sub-plot. One
        of ``full`` (the default) or ``flush``.


        * If set to ``full``, the entire calculated bounds (including axes, title, and
          legend) will be used.
        * If set to ``flush``, only the specified width and height values for the sub-view
          will be used. The ``flush`` setting can be useful when attempting to place
          sub-plots without axes or legends into a uniform grid structure.

        **Default value:** ``"full"``
    center : Union[Union[:class:`RowColboolean`, Dict[required=[]]], bool]
        Boolean flag indicating if subviews should be centered relative to their respective
        rows or columns.

        An object value of the form ``{"row": boolean, "column": boolean}`` can be used to
        supply different centering values for rows and columns.

        **Default value:** ``false``
    config : Union[:class:`Config`, Dict[required=[]]]
        Vega-Lite configuration object. This property can only be defined at the top-level
        of a specification.
    datasets : Union[:class:`Datasets`, Dict[required=[]]]
        A global data store for named datasets. This is a mapping from names to inline
        datasets. This can be an array of objects or primitive values or a string. Arrays of
        primitive values are ingested as objects with a ``data`` property.
    description : str
        Description of this mark for commenting purpose.
    encoding : Union[:class:`FacetedEncoding`, Dict[required=[]]]
        A key-value mapping between encoding channels and definition of fields.
    height : Union[Union[:class:`Step`, Dict[required=[step]]], float, str]
        The height of a visualization.


        * For a plot with a continuous y-field, height should be a number.
        * For a plot with either a discrete y-field or no y-field, height can be either a
          number indicating a fixed height or an object in the form of ``{step: number}``
          defining the height per discrete step. (No y-field is equivalent to having one
          discrete step.)
        * To enable responsive sizing on height, it should be set to ``"container"``.

        **Default value:** Based on ``config.view.continuousHeight`` for a plot with a
        continuous y-field and ``config.view.discreteHeight`` otherwise.

        **Note:** For plots with `row and column channels
        <https://vega.github.io/vega-lite/docs/encoding.html#facet>`__, this represents the
        height of a single view and the ``"container"`` option cannot be used.

        **See also:** `height <https://vega.github.io/vega-lite/docs/size.html>`__
        documentation.
    name : str
        Name of the visualization for later reference.
    padding : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], Union[:class:`Padding`, Dict[required=[]], float]]
        The default visualization padding, in pixels, from the edge of the visualization
        canvas to the data rectangle. If a number, specifies padding for all sides. If an
        object, the value should have the format ``{"left": 5, "top": 5, "right": 5,
        "bottom": 5}`` to specify padding for each side of the visualization.

        **Default value** : ``5``
    params : List[Union[:class:`TopLevelParameter`, Union[:class:`TopLevelSelectionParameter`, Dict[required=[name, select]]], Union[:class:`VariableParameter`, Dict[required=[name]]]]]
        An array of parameters that may either be simple variables, or more complex
        selections that map user input to data queries.
    projection : Union[:class:`Projection`, Dict[required=[]]]
        An object defining properties of geographic projection, which will be applied to
        ``shape`` path for ``"geoshape"`` marks and to ``latitude`` and ``"longitude"``
        channels for other marks.
    resolve : Union[:class:`Resolve`, Dict[required=[]]]
        Scale, axis, and legend resolutions for view composition specifications.
    spacing : Union[Union[:class:`RowColnumber`, Dict[required=[]]], float]
        The spacing in pixels between sub-views of the composition operator. An object of
        the form ``{"row": number, "column": number}`` can be used to set different spacing
        values for rows and columns.

        **Default value** : Depends on ``"spacing"`` property of `the view composition
        configuration <https://vega.github.io/vega-lite/docs/config.html#view-config>`__ (
        ``20`` by default)
    title : Union[Union[:class:`Text`, List[str], str], Union[:class:`TitleParams`, Dict[required=[text]]]]
        Title for the plot.
    transform : List[Union[:class:`Transform`, Union[:class:`AggregateTransform`, Dict[required=[aggregate]]], Union[:class:`BinTransform`, Dict[required=[bin, field, as]]], Union[:class:`CalculateTransform`, Dict[required=[calculate, as]]], Union[:class:`DensityTransform`, Dict[required=[density]]], Union[:class:`ExtentTransform`, Dict[required=[extent, param]]], Union[:class:`FilterTransform`, Dict[required=[filter]]], Union[:class:`FlattenTransform`, Dict[required=[flatten]]], Union[:class:`FoldTransform`, Dict[required=[fold]]], Union[:class:`ImputeTransform`, Dict[required=[impute, key]]], Union[:class:`JoinAggregateTransform`, Dict[required=[joinaggregate]]], Union[:class:`LoessTransform`, Dict[required=[loess, on]]], Union[:class:`LookupTransform`, Dict[required=[lookup, from]]], Union[:class:`PivotTransform`, Dict[required=[pivot, value]]], Union[:class:`QuantileTransform`, Dict[required=[quantile]]], Union[:class:`RegressionTransform`, Dict[required=[regression, on]]], Union[:class:`SampleTransform`, Dict[required=[sample]]], Union[:class:`StackTransform`, Dict[required=[stack, groupby, as]]], Union[:class:`TimeUnitTransform`, Dict[required=[timeUnit, field, as]]], Union[:class:`WindowTransform`, Dict[required=[window]]]]]
        An array of data transformations such as filter and new field calculation.
    usermeta : Union[:class:`Dict`, Dict[required=[]]]
        Optional metadata that will be passed to Vega. This object is completely ignored by
        Vega and Vega-Lite and can be used for custom metadata.
    view : Union[:class:`ViewBackground`, Dict[required=[]]]
        An object defining the view background's fill and stroke.

        **Default value:** none (transparent)
    width : Union[Union[:class:`Step`, Dict[required=[step]]], float, str]
        The width of a visualization.


        * For a plot with a continuous x-field, width should be a number.
        * For a plot with either a discrete x-field or no x-field, width can be either a
          number indicating a fixed width or an object in the form of ``{step: number}``
          defining the width per discrete step. (No x-field is equivalent to having one
          discrete step.)
        * To enable responsive sizing on width, it should be set to ``"container"``.

        **Default value:** Based on ``config.view.continuousWidth`` for a plot with a
        continuous x-field and ``config.view.discreteWidth`` otherwise.

        **Note:** For plots with `row and column channels
        <https://vega.github.io/vega-lite/docs/encoding.html#facet>`__, this represents the
        width of a single view and the ``"container"`` option cannot be used.

        **See also:** `width <https://vega.github.io/vega-lite/docs/size.html>`__
        documentation.
    $schema : str
        URL to `JSON schema <http://json-schema.org/>`__ for a Vega-Lite specification.
        Unless you have a reason to change this, use
        ``https://vega.github.io/schema/vega-lite/v5.json``. Setting the ``$schema``
        property allows automatic validation and autocomplete in editors that support JSON
        schema.
    """

    _schema = {"$ref": "#/definitions/TopLevelUnitSpec"}

    def __init__(
        self,
        data: Union[
            Union[
                None,
                Union[
                    "Data",
                    Union[
                        "DataSource",
                        Union["InlineData", dict],
                        Union["NamedData", dict],
                        Union["UrlData", dict],
                    ],
                    Union[
                        "Generator",
                        Union["GraticuleGenerator", dict],
                        Union["SequenceGenerator", dict],
                        Union["SphereGenerator", dict],
                    ],
                ],
            ],
            UndefinedType,
        ] = Undefined,
        mark: Union[
            Union[
                "AnyMark",
                Union[
                    "CompositeMark",
                    Union["BoxPlot", str],
                    Union["ErrorBand", str],
                    Union["ErrorBar", str],
                ],
                Union[
                    "CompositeMarkDef",
                    Union["BoxPlotDef", dict],
                    Union["ErrorBandDef", dict],
                    Union["ErrorBarDef", dict],
                ],
                Union[
                    "Mark",
                    Literal[
                        "arc",
                        "area",
                        "bar",
                        "image",
                        "line",
                        "point",
                        "rect",
                        "rule",
                        "text",
                        "tick",
                        "trail",
                        "circle",
                        "square",
                        "geoshape",
                    ],
                ],
                Union["MarkDef", dict],
            ],
            UndefinedType,
        ] = Undefined,
        align: Union[
            Union[
                Union["LayoutAlign", Literal["all", "each", "none"]],
                Union["RowColLayoutAlign", dict],
            ],
            UndefinedType,
        ] = Undefined,
        autosize: Union[
            Union[
                Union["AutoSizeParams", dict],
                Union["AutosizeType", Literal["pad", "none", "fit", "fit-x", "fit-y"]],
            ],
            UndefinedType,
        ] = Undefined,
        background: Union[
            Union[
                Union[
                    "Color",
                    Union[
                        "ColorName",
                        Literal[
                            "black",
                            "silver",
                            "gray",
                            "white",
                            "maroon",
                            "red",
                            "purple",
                            "fuchsia",
                            "green",
                            "lime",
                            "olive",
                            "yellow",
                            "navy",
                            "blue",
                            "teal",
                            "aqua",
                            "orange",
                            "aliceblue",
                            "antiquewhite",
                            "aquamarine",
                            "azure",
                            "beige",
                            "bisque",
                            "blanchedalmond",
                            "blueviolet",
                            "brown",
                            "burlywood",
                            "cadetblue",
                            "chartreuse",
                            "chocolate",
                            "coral",
                            "cornflowerblue",
                            "cornsilk",
                            "crimson",
                            "cyan",
                            "darkblue",
                            "darkcyan",
                            "darkgoldenrod",
                            "darkgray",
                            "darkgreen",
                            "darkgrey",
                            "darkkhaki",
                            "darkmagenta",
                            "darkolivegreen",
                            "darkorange",
                            "darkorchid",
                            "darkred",
                            "darksalmon",
                            "darkseagreen",
                            "darkslateblue",
                            "darkslategray",
                            "darkslategrey",
                            "darkturquoise",
                            "darkviolet",
                            "deeppink",
                            "deepskyblue",
                            "dimgray",
                            "dimgrey",
                            "dodgerblue",
                            "firebrick",
                            "floralwhite",
                            "forestgreen",
                            "gainsboro",
                            "ghostwhite",
                            "gold",
                            "goldenrod",
                            "greenyellow",
                            "grey",
                            "honeydew",
                            "hotpink",
                            "indianred",
                            "indigo",
                            "ivory",
                            "khaki",
                            "lavender",
                            "lavenderblush",
                            "lawngreen",
                            "lemonchiffon",
                            "lightblue",
                            "lightcoral",
                            "lightcyan",
                            "lightgoldenrodyellow",
                            "lightgray",
                            "lightgreen",
                            "lightgrey",
                            "lightpink",
                            "lightsalmon",
                            "lightseagreen",
                            "lightskyblue",
                            "lightslategray",
                            "lightslategrey",
                            "lightsteelblue",
                            "lightyellow",
                            "limegreen",
                            "linen",
                            "magenta",
                            "mediumaquamarine",
                            "mediumblue",
                            "mediumorchid",
                            "mediumpurple",
                            "mediumseagreen",
                            "mediumslateblue",
                            "mediumspringgreen",
                            "mediumturquoise",
                            "mediumvioletred",
                            "midnightblue",
                            "mintcream",
                            "mistyrose",
                            "moccasin",
                            "navajowhite",
                            "oldlace",
                            "olivedrab",
                            "orangered",
                            "orchid",
                            "palegoldenrod",
                            "palegreen",
                            "paleturquoise",
                            "palevioletred",
                            "papayawhip",
                            "peachpuff",
                            "peru",
                            "pink",
                            "plum",
                            "powderblue",
                            "rosybrown",
                            "royalblue",
                            "saddlebrown",
                            "salmon",
                            "sandybrown",
                            "seagreen",
                            "seashell",
                            "sienna",
                            "skyblue",
                            "slateblue",
                            "slategray",
                            "slategrey",
                            "snow",
                            "springgreen",
                            "steelblue",
                            "tan",
                            "thistle",
                            "tomato",
                            "turquoise",
                            "violet",
                            "wheat",
                            "whitesmoke",
                            "yellowgreen",
                            "rebeccapurple",
                        ],
                    ],
                    Union["HexColor", str],
                    str,
                ],
                Union["ExprRef", "_ParameterProtocol", dict],
            ],
            UndefinedType,
        ] = Undefined,
        bounds: Union[Literal["full", "flush"], UndefinedType] = Undefined,
        center: Union[
            Union[Union["RowColboolean", dict], bool], UndefinedType
        ] = Undefined,
        config: Union[Union["Config", dict], UndefinedType] = Undefined,
        datasets: Union[Union["Datasets", dict], UndefinedType] = Undefined,
        description: Union[str, UndefinedType] = Undefined,
        encoding: Union[Union["FacetedEncoding", dict], UndefinedType] = Undefined,
        height: Union[
            Union[Union["Step", dict], float, str], UndefinedType
        ] = Undefined,
        name: Union[str, UndefinedType] = Undefined,
        padding: Union[
            Union[
                Union["ExprRef", "_ParameterProtocol", dict],
                Union["Padding", dict, float],
            ],
            UndefinedType,
        ] = Undefined,
        params: Union[
            Union[
                List["TopLevelParameter"],
                List[Union["TopLevelSelectionParameter", dict]],
                List[Union["VariableParameter", dict]],
            ],
            UndefinedType,
        ] = Undefined,
        projection: Union[Union["Projection", dict], UndefinedType] = Undefined,
        resolve: Union[Union["Resolve", dict], UndefinedType] = Undefined,
        spacing: Union[
            Union[Union["RowColnumber", dict], float], UndefinedType
        ] = Undefined,
        title: Union[
            Union[Union["Text", List[str], str], Union["TitleParams", dict]],
            UndefinedType,
        ] = Undefined,
        transform: Union[
            Union[
                List["Transform"],
                List[Union["AggregateTransform", dict]],
                List[Union["BinTransform", dict]],
                List[Union["CalculateTransform", dict]],
                List[Union["DensityTransform", dict]],
                List[Union["ExtentTransform", dict]],
                List[Union["FilterTransform", dict]],
                List[Union["FlattenTransform", dict]],
                List[Union["FoldTransform", dict]],
                List[Union["ImputeTransform", dict]],
                List[Union["JoinAggregateTransform", dict]],
                List[Union["LoessTransform", dict]],
                List[Union["LookupTransform", dict]],
                List[Union["PivotTransform", dict]],
                List[Union["QuantileTransform", dict]],
                List[Union["RegressionTransform", dict]],
                List[Union["SampleTransform", dict]],
                List[Union["StackTransform", dict]],
                List[Union["TimeUnitTransform", dict]],
                List[Union["WindowTransform", dict]],
            ],
            UndefinedType,
        ] = Undefined,
        usermeta: Union[Union["Dict", dict], UndefinedType] = Undefined,
        view: Union[Union["ViewBackground", dict], UndefinedType] = Undefined,
        width: Union[Union[Union["Step", dict], float, str], UndefinedType] = Undefined,
        **kwds
    ):
        super(TopLevelUnitSpec, self).__init__(
            data=data,
            mark=mark,
            align=align,
            autosize=autosize,
            background=background,
            bounds=bounds,
            center=center,
            config=config,
            datasets=datasets,
            description=description,
            encoding=encoding,
            height=height,
            name=name,
            padding=padding,
            params=params,
            projection=projection,
            resolve=resolve,
            spacing=spacing,
            title=title,
            transform=transform,
            usermeta=usermeta,
            view=view,
            width=width,
            **kwds
        )


class TopLevelVConcatSpec(TopLevelSpec):
    """TopLevelVConcatSpec schema wrapper

    Union[:class:`TopLevelVConcatSpec`, Dict[required=[vconcat]]]

    Parameters
    ----------

    vconcat : List[Union[:class:`NonNormalizedSpec`, Union[:class:`ConcatSpecGenericSpec`, Dict[required=[concat]]], Union[:class:`FacetSpec`, Dict[required=[facet, spec]]], Union[:class:`FacetedUnitSpec`, Dict[required=[mark]]], Union[:class:`HConcatSpecGenericSpec`, Dict[required=[hconcat]]], Union[:class:`LayerSpec`, Dict[required=[layer]]], Union[:class:`RepeatSpec`, Union[:class:`LayerRepeatSpec`, Dict[required=[repeat, spec]]], Union[:class:`NonLayerRepeatSpec`, Dict[required=[repeat, spec]]]], Union[:class:`VConcatSpecGenericSpec`, Dict[required=[vconcat]]]]]
        A list of views to be concatenated and put into a column.
    autosize : Union[Union[:class:`AutoSizeParams`, Dict[required=[]]], Union[:class:`AutosizeType`, Literal['pad', 'none', 'fit', 'fit-x', 'fit-y']]]
        How the visualization size should be determined. If a string, should be one of
        ``"pad"``, ``"fit"`` or ``"none"``. Object values can additionally specify
        parameters for content sizing and automatic resizing.

        **Default value** : ``pad``
    background : Union[Union[:class:`Color`, Union[:class:`ColorName`, Literal['black', 'silver', 'gray', 'white', 'maroon', 'red', 'purple', 'fuchsia', 'green', 'lime', 'olive', 'yellow', 'navy', 'blue', 'teal', 'aqua', 'orange', 'aliceblue', 'antiquewhite', 'aquamarine', 'azure', 'beige', 'bisque', 'blanchedalmond', 'blueviolet', 'brown', 'burlywood', 'cadetblue', 'chartreuse', 'chocolate', 'coral', 'cornflowerblue', 'cornsilk', 'crimson', 'cyan', 'darkblue', 'darkcyan', 'darkgoldenrod', 'darkgray', 'darkgreen', 'darkgrey', 'darkkhaki', 'darkmagenta', 'darkolivegreen', 'darkorange', 'darkorchid', 'darkred', 'darksalmon', 'darkseagreen', 'darkslateblue', 'darkslategray', 'darkslategrey', 'darkturquoise', 'darkviolet', 'deeppink', 'deepskyblue', 'dimgray', 'dimgrey', 'dodgerblue', 'firebrick', 'floralwhite', 'forestgreen', 'gainsboro', 'ghostwhite', 'gold', 'goldenrod', 'greenyellow', 'grey', 'honeydew', 'hotpink', 'indianred', 'indigo', 'ivory', 'khaki', 'lavender', 'lavenderblush', 'lawngreen', 'lemonchiffon', 'lightblue', 'lightcoral', 'lightcyan', 'lightgoldenrodyellow', 'lightgray', 'lightgreen', 'lightgrey', 'lightpink', 'lightsalmon', 'lightseagreen', 'lightskyblue', 'lightslategray', 'lightslategrey', 'lightsteelblue', 'lightyellow', 'limegreen', 'linen', 'magenta', 'mediumaquamarine', 'mediumblue', 'mediumorchid', 'mediumpurple', 'mediumseagreen', 'mediumslateblue', 'mediumspringgreen', 'mediumturquoise', 'mediumvioletred', 'midnightblue', 'mintcream', 'mistyrose', 'moccasin', 'navajowhite', 'oldlace', 'olivedrab', 'orangered', 'orchid', 'palegoldenrod', 'palegreen', 'paleturquoise', 'palevioletred', 'papayawhip', 'peachpuff', 'peru', 'pink', 'plum', 'powderblue', 'rosybrown', 'royalblue', 'saddlebrown', 'salmon', 'sandybrown', 'seagreen', 'seashell', 'sienna', 'skyblue', 'slateblue', 'slategray', 'slategrey', 'snow', 'springgreen', 'steelblue', 'tan', 'thistle', 'tomato', 'turquoise', 'violet', 'wheat', 'whitesmoke', 'yellowgreen', 'rebeccapurple']], Union[:class:`HexColor`, str], str], Union[:class:`ExprRef`, Dict[required=[expr]]]]
        CSS color property to use as the background of the entire view.

        **Default value:** ``"white"``
    bounds : Literal['full', 'flush']
        The bounds calculation method to use for determining the extent of a sub-plot. One
        of ``full`` (the default) or ``flush``.


        * If set to ``full``, the entire calculated bounds (including axes, title, and
          legend) will be used.
        * If set to ``flush``, only the specified width and height values for the sub-view
          will be used. The ``flush`` setting can be useful when attempting to place
          sub-plots without axes or legends into a uniform grid structure.

        **Default value:** ``"full"``
    center : bool
        Boolean flag indicating if subviews should be centered relative to their respective
        rows or columns.

        **Default value:** ``false``
    config : Union[:class:`Config`, Dict[required=[]]]
        Vega-Lite configuration object. This property can only be defined at the top-level
        of a specification.
    data : Union[None, Union[:class:`Data`, Union[:class:`DataSource`, Union[:class:`InlineData`, Dict[required=[values]]], Union[:class:`NamedData`, Dict[required=[name]]], Union[:class:`UrlData`, Dict[required=[url]]]], Union[:class:`Generator`, Union[:class:`GraticuleGenerator`, Dict[required=[graticule]]], Union[:class:`SequenceGenerator`, Dict[required=[sequence]]], Union[:class:`SphereGenerator`, Dict[required=[sphere]]]]]]
        An object describing the data source. Set to ``null`` to ignore the parent's data
        source. If no data is set, it is derived from the parent.
    datasets : Union[:class:`Datasets`, Dict[required=[]]]
        A global data store for named datasets. This is a mapping from names to inline
        datasets. This can be an array of objects or primitive values or a string. Arrays of
        primitive values are ingested as objects with a ``data`` property.
    description : str
        Description of this mark for commenting purpose.
    name : str
        Name of the visualization for later reference.
    padding : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], Union[:class:`Padding`, Dict[required=[]], float]]
        The default visualization padding, in pixels, from the edge of the visualization
        canvas to the data rectangle. If a number, specifies padding for all sides. If an
        object, the value should have the format ``{"left": 5, "top": 5, "right": 5,
        "bottom": 5}`` to specify padding for each side of the visualization.

        **Default value** : ``5``
    params : List[Union[:class:`TopLevelParameter`, Union[:class:`TopLevelSelectionParameter`, Dict[required=[name, select]]], Union[:class:`VariableParameter`, Dict[required=[name]]]]]
        Dynamic variables or selections that parameterize a visualization.
    resolve : Union[:class:`Resolve`, Dict[required=[]]]
        Scale, axis, and legend resolutions for view composition specifications.
    spacing : float
        The spacing in pixels between sub-views of the concat operator.

        **Default value** : ``10``
    title : Union[Union[:class:`Text`, List[str], str], Union[:class:`TitleParams`, Dict[required=[text]]]]
        Title for the plot.
    transform : List[Union[:class:`Transform`, Union[:class:`AggregateTransform`, Dict[required=[aggregate]]], Union[:class:`BinTransform`, Dict[required=[bin, field, as]]], Union[:class:`CalculateTransform`, Dict[required=[calculate, as]]], Union[:class:`DensityTransform`, Dict[required=[density]]], Union[:class:`ExtentTransform`, Dict[required=[extent, param]]], Union[:class:`FilterTransform`, Dict[required=[filter]]], Union[:class:`FlattenTransform`, Dict[required=[flatten]]], Union[:class:`FoldTransform`, Dict[required=[fold]]], Union[:class:`ImputeTransform`, Dict[required=[impute, key]]], Union[:class:`JoinAggregateTransform`, Dict[required=[joinaggregate]]], Union[:class:`LoessTransform`, Dict[required=[loess, on]]], Union[:class:`LookupTransform`, Dict[required=[lookup, from]]], Union[:class:`PivotTransform`, Dict[required=[pivot, value]]], Union[:class:`QuantileTransform`, Dict[required=[quantile]]], Union[:class:`RegressionTransform`, Dict[required=[regression, on]]], Union[:class:`SampleTransform`, Dict[required=[sample]]], Union[:class:`StackTransform`, Dict[required=[stack, groupby, as]]], Union[:class:`TimeUnitTransform`, Dict[required=[timeUnit, field, as]]], Union[:class:`WindowTransform`, Dict[required=[window]]]]]
        An array of data transformations such as filter and new field calculation.
    usermeta : Union[:class:`Dict`, Dict[required=[]]]
        Optional metadata that will be passed to Vega. This object is completely ignored by
        Vega and Vega-Lite and can be used for custom metadata.
    $schema : str
        URL to `JSON schema <http://json-schema.org/>`__ for a Vega-Lite specification.
        Unless you have a reason to change this, use
        ``https://vega.github.io/schema/vega-lite/v5.json``. Setting the ``$schema``
        property allows automatic validation and autocomplete in editors that support JSON
        schema.
    """

    _schema = {"$ref": "#/definitions/TopLevelVConcatSpec"}

    def __init__(
        self,
        vconcat: Union[
            Union[
                List["NonNormalizedSpec"],
                List[Union["ConcatSpecGenericSpec", dict]],
                List[Union["FacetSpec", dict]],
                List[Union["FacetedUnitSpec", dict]],
                List[Union["HConcatSpecGenericSpec", dict]],
                List[Union["LayerSpec", dict]],
                List[
                    Union[
                        "RepeatSpec",
                        Union["LayerRepeatSpec", dict],
                        Union["NonLayerRepeatSpec", dict],
                    ]
                ],
                List[Union["VConcatSpecGenericSpec", dict]],
            ],
            UndefinedType,
        ] = Undefined,
        autosize: Union[
            Union[
                Union["AutoSizeParams", dict],
                Union["AutosizeType", Literal["pad", "none", "fit", "fit-x", "fit-y"]],
            ],
            UndefinedType,
        ] = Undefined,
        background: Union[
            Union[
                Union[
                    "Color",
                    Union[
                        "ColorName",
                        Literal[
                            "black",
                            "silver",
                            "gray",
                            "white",
                            "maroon",
                            "red",
                            "purple",
                            "fuchsia",
                            "green",
                            "lime",
                            "olive",
                            "yellow",
                            "navy",
                            "blue",
                            "teal",
                            "aqua",
                            "orange",
                            "aliceblue",
                            "antiquewhite",
                            "aquamarine",
                            "azure",
                            "beige",
                            "bisque",
                            "blanchedalmond",
                            "blueviolet",
                            "brown",
                            "burlywood",
                            "cadetblue",
                            "chartreuse",
                            "chocolate",
                            "coral",
                            "cornflowerblue",
                            "cornsilk",
                            "crimson",
                            "cyan",
                            "darkblue",
                            "darkcyan",
                            "darkgoldenrod",
                            "darkgray",
                            "darkgreen",
                            "darkgrey",
                            "darkkhaki",
                            "darkmagenta",
                            "darkolivegreen",
                            "darkorange",
                            "darkorchid",
                            "darkred",
                            "darksalmon",
                            "darkseagreen",
                            "darkslateblue",
                            "darkslategray",
                            "darkslategrey",
                            "darkturquoise",
                            "darkviolet",
                            "deeppink",
                            "deepskyblue",
                            "dimgray",
                            "dimgrey",
                            "dodgerblue",
                            "firebrick",
                            "floralwhite",
                            "forestgreen",
                            "gainsboro",
                            "ghostwhite",
                            "gold",
                            "goldenrod",
                            "greenyellow",
                            "grey",
                            "honeydew",
                            "hotpink",
                            "indianred",
                            "indigo",
                            "ivory",
                            "khaki",
                            "lavender",
                            "lavenderblush",
                            "lawngreen",
                            "lemonchiffon",
                            "lightblue",
                            "lightcoral",
                            "lightcyan",
                            "lightgoldenrodyellow",
                            "lightgray",
                            "lightgreen",
                            "lightgrey",
                            "lightpink",
                            "lightsalmon",
                            "lightseagreen",
                            "lightskyblue",
                            "lightslategray",
                            "lightslategrey",
                            "lightsteelblue",
                            "lightyellow",
                            "limegreen",
                            "linen",
                            "magenta",
                            "mediumaquamarine",
                            "mediumblue",
                            "mediumorchid",
                            "mediumpurple",
                            "mediumseagreen",
                            "mediumslateblue",
                            "mediumspringgreen",
                            "mediumturquoise",
                            "mediumvioletred",
                            "midnightblue",
                            "mintcream",
                            "mistyrose",
                            "moccasin",
                            "navajowhite",
                            "oldlace",
                            "olivedrab",
                            "orangered",
                            "orchid",
                            "palegoldenrod",
                            "palegreen",
                            "paleturquoise",
                            "palevioletred",
                            "papayawhip",
                            "peachpuff",
                            "peru",
                            "pink",
                            "plum",
                            "powderblue",
                            "rosybrown",
                            "royalblue",
                            "saddlebrown",
                            "salmon",
                            "sandybrown",
                            "seagreen",
                            "seashell",
                            "sienna",
                            "skyblue",
                            "slateblue",
                            "slategray",
                            "slategrey",
                            "snow",
                            "springgreen",
                            "steelblue",
                            "tan",
                            "thistle",
                            "tomato",
                            "turquoise",
                            "violet",
                            "wheat",
                            "whitesmoke",
                            "yellowgreen",
                            "rebeccapurple",
                        ],
                    ],
                    Union["HexColor", str],
                    str,
                ],
                Union["ExprRef", "_ParameterProtocol", dict],
            ],
            UndefinedType,
        ] = Undefined,
        bounds: Union[Literal["full", "flush"], UndefinedType] = Undefined,
        center: Union[bool, UndefinedType] = Undefined,
        config: Union[Union["Config", dict], UndefinedType] = Undefined,
        data: Union[
            Union[
                None,
                Union[
                    "Data",
                    Union[
                        "DataSource",
                        Union["InlineData", dict],
                        Union["NamedData", dict],
                        Union["UrlData", dict],
                    ],
                    Union[
                        "Generator",
                        Union["GraticuleGenerator", dict],
                        Union["SequenceGenerator", dict],
                        Union["SphereGenerator", dict],
                    ],
                ],
            ],
            UndefinedType,
        ] = Undefined,
        datasets: Union[Union["Datasets", dict], UndefinedType] = Undefined,
        description: Union[str, UndefinedType] = Undefined,
        name: Union[str, UndefinedType] = Undefined,
        padding: Union[
            Union[
                Union["ExprRef", "_ParameterProtocol", dict],
                Union["Padding", dict, float],
            ],
            UndefinedType,
        ] = Undefined,
        params: Union[
            Union[
                List["TopLevelParameter"],
                List[Union["TopLevelSelectionParameter", dict]],
                List[Union["VariableParameter", dict]],
            ],
            UndefinedType,
        ] = Undefined,
        resolve: Union[Union["Resolve", dict], UndefinedType] = Undefined,
        spacing: Union[float, UndefinedType] = Undefined,
        title: Union[
            Union[Union["Text", List[str], str], Union["TitleParams", dict]],
            UndefinedType,
        ] = Undefined,
        transform: Union[
            Union[
                List["Transform"],
                List[Union["AggregateTransform", dict]],
                List[Union["BinTransform", dict]],
                List[Union["CalculateTransform", dict]],
                List[Union["DensityTransform", dict]],
                List[Union["ExtentTransform", dict]],
                List[Union["FilterTransform", dict]],
                List[Union["FlattenTransform", dict]],
                List[Union["FoldTransform", dict]],
                List[Union["ImputeTransform", dict]],
                List[Union["JoinAggregateTransform", dict]],
                List[Union["LoessTransform", dict]],
                List[Union["LookupTransform", dict]],
                List[Union["PivotTransform", dict]],
                List[Union["QuantileTransform", dict]],
                List[Union["RegressionTransform", dict]],
                List[Union["SampleTransform", dict]],
                List[Union["StackTransform", dict]],
                List[Union["TimeUnitTransform", dict]],
                List[Union["WindowTransform", dict]],
            ],
            UndefinedType,
        ] = Undefined,
        usermeta: Union[Union["Dict", dict], UndefinedType] = Undefined,
        **kwds
    ):
        super(TopLevelVConcatSpec, self).__init__(
            vconcat=vconcat,
            autosize=autosize,
            background=background,
            bounds=bounds,
            center=center,
            config=config,
            data=data,
            datasets=datasets,
            description=description,
            name=name,
            padding=padding,
            params=params,
            resolve=resolve,
            spacing=spacing,
            title=title,
            transform=transform,
            usermeta=usermeta,
            **kwds
        )


class TopoDataFormat(DataFormat):
    """TopoDataFormat schema wrapper

    Union[:class:`TopoDataFormat`, Dict[required=[]]]

    Parameters
    ----------

    feature : str
        The name of the TopoJSON object set to convert to a GeoJSON feature collection. For
        example, in a map of the world, there may be an object set named ``"countries"``.
        Using the feature property, we can extract this set and generate a GeoJSON feature
        object for each country.
    mesh : str
        The name of the TopoJSON object set to convert to mesh. Similar to the ``feature``
        option, ``mesh`` extracts a named TopoJSON object set.  Unlike the ``feature``
        option, the corresponding geo data is returned as a single, unified mesh instance,
        not as individual GeoJSON features. Extracting a mesh is useful for more efficiently
        drawing borders or other geographic elements that you do not need to associate with
        specific regions such as individual countries, states or counties.
    parse : Union[None, Union[:class:`Parse`, Dict[required=[]]]]
        If set to ``null``, disable type inference based on the spec and only use type
        inference based on the data. Alternatively, a parsing directive object can be
        provided for explicit data types. Each property of the object corresponds to a field
        name, and the value to the desired data type (one of ``"number"``, ``"boolean"``,
        ``"date"``, or null (do not parse the field)). For example, ``"parse":
        {"modified_on": "date"}`` parses the ``modified_on`` field in each input record a
        Date value.

        For ``"date"``, we parse data based using JavaScript's `Date.parse()
        <https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/parse>`__.
        For Specific date formats can be provided (e.g., ``{foo: "date:'%m%d%Y'"}`` ), using
        the `d3-time-format syntax <https://github.com/d3/d3-time-format#locale_format>`__.
        UTC date format parsing is supported similarly (e.g., ``{foo: "utc:'%m%d%Y'"}`` ).
        See more about `UTC time
        <https://vega.github.io/vega-lite/docs/timeunit.html#utc>`__
    type : str
        Type of input data: ``"json"``, ``"csv"``, ``"tsv"``, ``"dsv"``.

        **Default value:**  The default format type is determined by the extension of the
        file URL. If no extension is detected, ``"json"`` will be used by default.
    """

    _schema = {"$ref": "#/definitions/TopoDataFormat"}

    def __init__(
        self,
        feature: Union[str, UndefinedType] = Undefined,
        mesh: Union[str, UndefinedType] = Undefined,
        parse: Union[Union[None, Union["Parse", dict]], UndefinedType] = Undefined,
        type: Union[str, UndefinedType] = Undefined,
        **kwds
    ):
        super(TopoDataFormat, self).__init__(
            feature=feature, mesh=mesh, parse=parse, type=type, **kwds
        )


class Transform(VegaLiteSchema):
    """Transform schema wrapper

    Union[:class:`Transform`, Union[:class:`AggregateTransform`, Dict[required=[aggregate]]],
    Union[:class:`BinTransform`, Dict[required=[bin, field, as]]],
    Union[:class:`CalculateTransform`, Dict[required=[calculate, as]]],
    Union[:class:`DensityTransform`, Dict[required=[density]]], Union[:class:`ExtentTransform`,
    Dict[required=[extent, param]]], Union[:class:`FilterTransform`, Dict[required=[filter]]],
    Union[:class:`FlattenTransform`, Dict[required=[flatten]]], Union[:class:`FoldTransform`,
    Dict[required=[fold]]], Union[:class:`ImputeTransform`, Dict[required=[impute, key]]],
    Union[:class:`JoinAggregateTransform`, Dict[required=[joinaggregate]]],
    Union[:class:`LoessTransform`, Dict[required=[loess, on]]], Union[:class:`LookupTransform`,
    Dict[required=[lookup, from]]], Union[:class:`PivotTransform`, Dict[required=[pivot,
    value]]], Union[:class:`QuantileTransform`, Dict[required=[quantile]]],
    Union[:class:`RegressionTransform`, Dict[required=[regression, on]]],
    Union[:class:`SampleTransform`, Dict[required=[sample]]], Union[:class:`StackTransform`,
    Dict[required=[stack, groupby, as]]], Union[:class:`TimeUnitTransform`,
    Dict[required=[timeUnit, field, as]]], Union[:class:`WindowTransform`,
    Dict[required=[window]]]]
    """

    _schema = {"$ref": "#/definitions/Transform"}

    def __init__(self, *args, **kwds):
        super(Transform, self).__init__(*args, **kwds)


class AggregateTransform(Transform):
    """AggregateTransform schema wrapper

    Union[:class:`AggregateTransform`, Dict[required=[aggregate]]]

    Parameters
    ----------

    aggregate : List[Union[:class:`AggregatedFieldDef`, Dict[required=[op, as]]]]
        Array of objects that define fields to aggregate.
    groupby : List[Union[:class:`FieldName`, str]]
        The data fields to group by. If not specified, a single group containing all data
        objects will be used.
    """

    _schema = {"$ref": "#/definitions/AggregateTransform"}

    def __init__(
        self,
        aggregate: Union[
            Union[List["AggregatedFieldDef"], List[dict]], UndefinedType
        ] = Undefined,
        groupby: Union[Union[List["FieldName"], List[str]], UndefinedType] = Undefined,
        **kwds
    ):
        super(AggregateTransform, self).__init__(
            aggregate=aggregate, groupby=groupby, **kwds
        )


class BinTransform(Transform):
    """BinTransform schema wrapper

    Union[:class:`BinTransform`, Dict[required=[bin, field, as]]]

    Parameters
    ----------

    bin : Union[Union[:class:`BinParams`, Dict[required=[]]], bool]
        An object indicating bin properties, or simply ``true`` for using default bin
        parameters.
    field : Union[:class:`FieldName`, str]
        The data field to bin.
    as : Union[List[Union[:class:`FieldName`, str]], Union[:class:`FieldName`, str]]
        The output fields at which to write the start and end bin values. This can be either
        a string or an array of strings with two elements denoting the name for the fields
        for bin start and bin end respectively. If a single string (e.g., ``"val"`` ) is
        provided, the end field will be ``"val_end"``.
    """

    _schema = {"$ref": "#/definitions/BinTransform"}

    def __init__(
        self,
        bin: Union[Union[Union["BinParams", dict], bool], UndefinedType] = Undefined,
        field: Union[Union["FieldName", str], UndefinedType] = Undefined,
        **kwds
    ):
        super(BinTransform, self).__init__(bin=bin, field=field, **kwds)


class CalculateTransform(Transform):
    """CalculateTransform schema wrapper

    Union[:class:`CalculateTransform`, Dict[required=[calculate, as]]]

    Parameters
    ----------

    calculate : str
        A `expression <https://vega.github.io/vega-lite/docs/types.html#expression>`__
        string. Use the variable ``datum`` to refer to the current data object.
    as : Union[:class:`FieldName`, str]
        The field for storing the computed formula value.
    """

    _schema = {"$ref": "#/definitions/CalculateTransform"}

    def __init__(self, calculate: Union[str, UndefinedType] = Undefined, **kwds):
        super(CalculateTransform, self).__init__(calculate=calculate, **kwds)


class DensityTransform(Transform):
    """DensityTransform schema wrapper

    Union[:class:`DensityTransform`, Dict[required=[density]]]

    Parameters
    ----------

    density : Union[:class:`FieldName`, str]
        The data field for which to perform density estimation.
    bandwidth : float
        The bandwidth (standard deviation) of the Gaussian kernel. If unspecified or set to
        zero, the bandwidth value is automatically estimated from the input data using
        Scott’s rule.
    counts : bool
        A boolean flag indicating if the output values should be probability estimates
        (false) or smoothed counts (true).

        **Default value:** ``false``
    cumulative : bool
        A boolean flag indicating whether to produce density estimates (false) or cumulative
        density estimates (true).

        **Default value:** ``false``
    extent : List[float]
        A [min, max] domain from which to sample the distribution. If unspecified, the
        extent will be determined by the observed minimum and maximum values of the density
        value field.
    groupby : List[Union[:class:`FieldName`, str]]
        The data fields to group by. If not specified, a single group containing all data
        objects will be used.
    maxsteps : float
        The maximum number of samples to take along the extent domain for plotting the
        density.

        **Default value:** ``200``
    minsteps : float
        The minimum number of samples to take along the extent domain for plotting the
        density.

        **Default value:** ``25``
    steps : float
        The exact number of samples to take along the extent domain for plotting the
        density. If specified, overrides both minsteps and maxsteps to set an exact number
        of uniform samples. Potentially useful in conjunction with a fixed extent to ensure
        consistent sample points for stacked densities.
    as : List[Union[:class:`FieldName`, str]]
        The output fields for the sample value and corresponding density estimate.

        **Default value:** ``["value", "density"]``
    """

    _schema = {"$ref": "#/definitions/DensityTransform"}

    def __init__(
        self,
        density: Union[Union["FieldName", str], UndefinedType] = Undefined,
        bandwidth: Union[float, UndefinedType] = Undefined,
        counts: Union[bool, UndefinedType] = Undefined,
        cumulative: Union[bool, UndefinedType] = Undefined,
        extent: Union[List[float], UndefinedType] = Undefined,
        groupby: Union[Union[List["FieldName"], List[str]], UndefinedType] = Undefined,
        maxsteps: Union[float, UndefinedType] = Undefined,
        minsteps: Union[float, UndefinedType] = Undefined,
        steps: Union[float, UndefinedType] = Undefined,
        **kwds
    ):
        super(DensityTransform, self).__init__(
            density=density,
            bandwidth=bandwidth,
            counts=counts,
            cumulative=cumulative,
            extent=extent,
            groupby=groupby,
            maxsteps=maxsteps,
            minsteps=minsteps,
            steps=steps,
            **kwds
        )


class ExtentTransform(Transform):
    """ExtentTransform schema wrapper

    Union[:class:`ExtentTransform`, Dict[required=[extent, param]]]

    Parameters
    ----------

    extent : Union[:class:`FieldName`, str]
        The field of which to get the extent.
    param : Union[:class:`ParameterName`, str]
        The output parameter produced by the extent transform.
    """

    _schema = {"$ref": "#/definitions/ExtentTransform"}

    def __init__(
        self,
        extent: Union[Union["FieldName", str], UndefinedType] = Undefined,
        param: Union[Union["ParameterName", str], UndefinedType] = Undefined,
        **kwds
    ):
        super(ExtentTransform, self).__init__(extent=extent, param=param, **kwds)


class FilterTransform(Transform):
    """FilterTransform schema wrapper

    Union[:class:`FilterTransform`, Dict[required=[filter]]]

    Parameters
    ----------

    filter : Union[:class:`PredicateComposition`, Union[:class:`LogicalAndPredicate`, Dict[required=[and]]], Union[:class:`LogicalNotPredicate`, Dict[required=[not]]], Union[:class:`LogicalOrPredicate`, Dict[required=[or]]], Union[:class:`Predicate`, Union[:class:`FieldEqualPredicate`, Dict[required=[equal, field]]], Union[:class:`FieldGTEPredicate`, Dict[required=[field, gte]]], Union[:class:`FieldGTPredicate`, Dict[required=[field, gt]]], Union[:class:`FieldLTEPredicate`, Dict[required=[field, lte]]], Union[:class:`FieldLTPredicate`, Dict[required=[field, lt]]], Union[:class:`FieldOneOfPredicate`, Dict[required=[field, oneOf]]], Union[:class:`FieldRangePredicate`, Dict[required=[field, range]]], Union[:class:`FieldValidPredicate`, Dict[required=[field, valid]]], Union[:class:`ParameterPredicate`, Dict[required=[param]]], str]]
        The ``filter`` property must be a predication definition, which can take one of the
        following forms:

        1) an `expression <https://vega.github.io/vega-lite/docs/types.html#expression>`__
        string, where ``datum`` can be used to refer to the current data object. For
        example, ``{filter: "datum.b2 > 60"}`` would make the output data includes only
        items that have values in the field ``b2`` over 60.

        2) one of the `field predicates
        <https://vega.github.io/vega-lite/docs/predicate.html#field-predicate>`__ : `equal
        <https://vega.github.io/vega-lite/docs/predicate.html#field-equal-predicate>`__, `lt
        <https://vega.github.io/vega-lite/docs/predicate.html#lt-predicate>`__, `lte
        <https://vega.github.io/vega-lite/docs/predicate.html#lte-predicate>`__, `gt
        <https://vega.github.io/vega-lite/docs/predicate.html#gt-predicate>`__, `gte
        <https://vega.github.io/vega-lite/docs/predicate.html#gte-predicate>`__, `range
        <https://vega.github.io/vega-lite/docs/predicate.html#range-predicate>`__, `oneOf
        <https://vega.github.io/vega-lite/docs/predicate.html#one-of-predicate>`__, or
        `valid <https://vega.github.io/vega-lite/docs/predicate.html#valid-predicate>`__,

        3) a `selection predicate
        <https://vega.github.io/vega-lite/docs/predicate.html#selection-predicate>`__, which
        define the names of a selection that the data point should belong to (or a logical
        composition of selections).

        4) a `logical composition
        <https://vega.github.io/vega-lite/docs/predicate.html#composition>`__ of (1), (2),
        or (3).
    """

    _schema = {"$ref": "#/definitions/FilterTransform"}

    def __init__(
        self,
        filter: Union[
            Union[
                "PredicateComposition",
                Union["LogicalAndPredicate", dict],
                Union["LogicalNotPredicate", dict],
                Union["LogicalOrPredicate", dict],
                Union[
                    "Predicate",
                    Union["FieldEqualPredicate", dict],
                    Union["FieldGTEPredicate", dict],
                    Union["FieldGTPredicate", dict],
                    Union["FieldLTEPredicate", dict],
                    Union["FieldLTPredicate", dict],
                    Union["FieldOneOfPredicate", dict],
                    Union["FieldRangePredicate", dict],
                    Union["FieldValidPredicate", dict],
                    Union["ParameterPredicate", dict],
                    str,
                ],
            ],
            UndefinedType,
        ] = Undefined,
        **kwds
    ):
        super(FilterTransform, self).__init__(filter=filter, **kwds)


class FlattenTransform(Transform):
    """FlattenTransform schema wrapper

    Union[:class:`FlattenTransform`, Dict[required=[flatten]]]

    Parameters
    ----------

    flatten : List[Union[:class:`FieldName`, str]]
        An array of one or more data fields containing arrays to flatten. If multiple fields
        are specified, their array values should have a parallel structure, ideally with the
        same length. If the lengths of parallel arrays do not match, the longest array will
        be used with ``null`` values added for missing entries.
    as : List[Union[:class:`FieldName`, str]]
        The output field names for extracted array values.

        **Default value:** The field name of the corresponding array field
    """

    _schema = {"$ref": "#/definitions/FlattenTransform"}

    def __init__(
        self,
        flatten: Union[Union[List["FieldName"], List[str]], UndefinedType] = Undefined,
        **kwds
    ):
        super(FlattenTransform, self).__init__(flatten=flatten, **kwds)


class FoldTransform(Transform):
    """FoldTransform schema wrapper

    Union[:class:`FoldTransform`, Dict[required=[fold]]]

    Parameters
    ----------

    fold : List[Union[:class:`FieldName`, str]]
        An array of data fields indicating the properties to fold.
    as : List[Union[:class:`FieldName`, str]]
        The output field names for the key and value properties produced by the fold
        transform. **Default value:** ``["key", "value"]``
    """

    _schema = {"$ref": "#/definitions/FoldTransform"}

    def __init__(
        self,
        fold: Union[Union[List["FieldName"], List[str]], UndefinedType] = Undefined,
        **kwds
    ):
        super(FoldTransform, self).__init__(fold=fold, **kwds)


class ImputeTransform(Transform):
    """ImputeTransform schema wrapper

    Union[:class:`ImputeTransform`, Dict[required=[impute, key]]]

    Parameters
    ----------

    impute : Union[:class:`FieldName`, str]
        The data field for which the missing values should be imputed.
    key : Union[:class:`FieldName`, str]
        A key field that uniquely identifies data objects within a group. Missing key values
        (those occurring in the data but not in the current group) will be imputed.
    frame : List[Union[None, float]]
        A frame specification as a two-element array used to control the window over which
        the specified method is applied. The array entries should either be a number
        indicating the offset from the current data object, or null to indicate unbounded
        rows preceding or following the current data object. For example, the value ``[-5,
        5]`` indicates that the window should include five objects preceding and five
        objects following the current object.

        **Default value:** :  ``[null, null]`` indicating that the window includes all
        objects.
    groupby : List[Union[:class:`FieldName`, str]]
        An optional array of fields by which to group the values. Imputation will then be
        performed on a per-group basis.
    keyvals : Union[List[Any], Union[:class:`ImputeSequence`, Dict[required=[stop]]]]
        Defines the key values that should be considered for imputation. An array of key
        values or an object defining a `number sequence
        <https://vega.github.io/vega-lite/docs/impute.html#sequence-def>`__.

        If provided, this will be used in addition to the key values observed within the
        input data. If not provided, the values will be derived from all unique values of
        the ``key`` field. For ``impute`` in ``encoding``, the key field is the x-field if
        the y-field is imputed, or vice versa.

        If there is no impute grouping, this property *must* be specified.
    method : Union[:class:`ImputeMethod`, Literal['value', 'median', 'max', 'min', 'mean']]
        The imputation method to use for the field value of imputed data objects. One of
        ``"value"``, ``"mean"``, ``"median"``, ``"max"`` or ``"min"``.

        **Default value:**  ``"value"``
    value : Any
        The field value to use when the imputation ``method`` is ``"value"``.
    """

    _schema = {"$ref": "#/definitions/ImputeTransform"}

    def __init__(
        self,
        impute: Union[Union["FieldName", str], UndefinedType] = Undefined,
        key: Union[Union["FieldName", str], UndefinedType] = Undefined,
        frame: Union[Union[List[None], List[float]], UndefinedType] = Undefined,
        groupby: Union[Union[List["FieldName"], List[str]], UndefinedType] = Undefined,
        keyvals: Union[
            Union[List[Any], Union["ImputeSequence", dict]], UndefinedType
        ] = Undefined,
        method: Union[
            Union["ImputeMethod", Literal["value", "median", "max", "min", "mean"]],
            UndefinedType,
        ] = Undefined,
        value: Union[Any, UndefinedType] = Undefined,
        **kwds
    ):
        super(ImputeTransform, self).__init__(
            impute=impute,
            key=key,
            frame=frame,
            groupby=groupby,
            keyvals=keyvals,
            method=method,
            value=value,
            **kwds
        )


class JoinAggregateTransform(Transform):
    """JoinAggregateTransform schema wrapper

    Union[:class:`JoinAggregateTransform`, Dict[required=[joinaggregate]]]

    Parameters
    ----------

    joinaggregate : List[Union[:class:`JoinAggregateFieldDef`, Dict[required=[op, as]]]]
        The definition of the fields in the join aggregate, and what calculations to use.
    groupby : List[Union[:class:`FieldName`, str]]
        The data fields for partitioning the data objects into separate groups. If
        unspecified, all data points will be in a single group.
    """

    _schema = {"$ref": "#/definitions/JoinAggregateTransform"}

    def __init__(
        self,
        joinaggregate: Union[
            Union[List["JoinAggregateFieldDef"], List[dict]], UndefinedType
        ] = Undefined,
        groupby: Union[Union[List["FieldName"], List[str]], UndefinedType] = Undefined,
        **kwds
    ):
        super(JoinAggregateTransform, self).__init__(
            joinaggregate=joinaggregate, groupby=groupby, **kwds
        )


class LoessTransform(Transform):
    """LoessTransform schema wrapper

    Union[:class:`LoessTransform`, Dict[required=[loess, on]]]

    Parameters
    ----------

    loess : Union[:class:`FieldName`, str]
        The data field of the dependent variable to smooth.
    on : Union[:class:`FieldName`, str]
        The data field of the independent variable to use a predictor.
    bandwidth : float
        A bandwidth parameter in the range ``[0, 1]`` that determines the amount of
        smoothing.

        **Default value:** ``0.3``
    groupby : List[Union[:class:`FieldName`, str]]
        The data fields to group by. If not specified, a single group containing all data
        objects will be used.
    as : List[Union[:class:`FieldName`, str]]
        The output field names for the smoothed points generated by the loess transform.

        **Default value:** The field names of the input x and y values.
    """

    _schema = {"$ref": "#/definitions/LoessTransform"}

    def __init__(
        self,
        loess: Union[Union["FieldName", str], UndefinedType] = Undefined,
        on: Union[Union["FieldName", str], UndefinedType] = Undefined,
        bandwidth: Union[float, UndefinedType] = Undefined,
        groupby: Union[Union[List["FieldName"], List[str]], UndefinedType] = Undefined,
        **kwds
    ):
        super(LoessTransform, self).__init__(
            loess=loess, on=on, bandwidth=bandwidth, groupby=groupby, **kwds
        )


class LookupTransform(Transform):
    """LookupTransform schema wrapper

    Union[:class:`LookupTransform`, Dict[required=[lookup, from]]]

    Parameters
    ----------

    lookup : str
        Key in primary data source.
    default : Any
        The default value to use if lookup fails.

        **Default value:** ``null``
    as : Union[List[Union[:class:`FieldName`, str]], Union[:class:`FieldName`, str]]
        The output fields on which to store the looked up data values.

        For data lookups, this property may be left blank if ``from.fields`` has been
        specified (those field names will be used); if ``from.fields`` has not been
        specified, ``as`` must be a string.

        For selection lookups, this property is optional: if unspecified, looked up values
        will be stored under a property named for the selection; and if specified, it must
        correspond to ``from.fields``.
    from : Union[Union[:class:`LookupData`, Dict[required=[data, key]]], Union[:class:`LookupSelection`, Dict[required=[key, param]]]]
        Data source or selection for secondary data reference.
    """

    _schema = {"$ref": "#/definitions/LookupTransform"}

    def __init__(
        self,
        lookup: Union[str, UndefinedType] = Undefined,
        default: Union[Any, UndefinedType] = Undefined,
        **kwds
    ):
        super(LookupTransform, self).__init__(lookup=lookup, default=default, **kwds)


class PivotTransform(Transform):
    """PivotTransform schema wrapper

    Union[:class:`PivotTransform`, Dict[required=[pivot, value]]]

    Parameters
    ----------

    pivot : Union[:class:`FieldName`, str]
        The data field to pivot on. The unique values of this field become new field names
        in the output stream.
    value : Union[:class:`FieldName`, str]
        The data field to populate pivoted fields. The aggregate values of this field become
        the values of the new pivoted fields.
    groupby : List[Union[:class:`FieldName`, str]]
        The optional data fields to group by. If not specified, a single group containing
        all data objects will be used.
    limit : float
        An optional parameter indicating the maximum number of pivoted fields to generate.
        The default ( ``0`` ) applies no limit. The pivoted ``pivot`` names are sorted in
        ascending order prior to enforcing the limit. **Default value:** ``0``
    op : Union[:class:`AggregateOp`, Literal['argmax', 'argmin', 'average', 'count', 'distinct', 'max', 'mean', 'median', 'min', 'missing', 'product', 'q1', 'q3', 'ci0', 'ci1', 'stderr', 'stdev', 'stdevp', 'sum', 'valid', 'values', 'variance', 'variancep']]
        The aggregation operation to apply to grouped ``value`` field values. **Default
        value:** ``sum``
    """

    _schema = {"$ref": "#/definitions/PivotTransform"}

    def __init__(
        self,
        pivot: Union[Union["FieldName", str], UndefinedType] = Undefined,
        value: Union[Union["FieldName", str], UndefinedType] = Undefined,
        groupby: Union[Union[List["FieldName"], List[str]], UndefinedType] = Undefined,
        limit: Union[float, UndefinedType] = Undefined,
        op: Union[
            Union[
                "AggregateOp",
                Literal[
                    "argmax",
                    "argmin",
                    "average",
                    "count",
                    "distinct",
                    "max",
                    "mean",
                    "median",
                    "min",
                    "missing",
                    "product",
                    "q1",
                    "q3",
                    "ci0",
                    "ci1",
                    "stderr",
                    "stdev",
                    "stdevp",
                    "sum",
                    "valid",
                    "values",
                    "variance",
                    "variancep",
                ],
            ],
            UndefinedType,
        ] = Undefined,
        **kwds
    ):
        super(PivotTransform, self).__init__(
            pivot=pivot, value=value, groupby=groupby, limit=limit, op=op, **kwds
        )


class QuantileTransform(Transform):
    """QuantileTransform schema wrapper

    Union[:class:`QuantileTransform`, Dict[required=[quantile]]]

    Parameters
    ----------

    quantile : Union[:class:`FieldName`, str]
        The data field for which to perform quantile estimation.
    groupby : List[Union[:class:`FieldName`, str]]
        The data fields to group by. If not specified, a single group containing all data
        objects will be used.
    probs : List[float]
        An array of probabilities in the range (0, 1) for which to compute quantile values.
        If not specified, the *step* parameter will be used.
    step : float
        A probability step size (default 0.01) for sampling quantile values. All values from
        one-half the step size up to 1 (exclusive) will be sampled. This parameter is only
        used if the *probs* parameter is not provided.
    as : List[Union[:class:`FieldName`, str]]
        The output field names for the probability and quantile values.

        **Default value:** ``["prob", "value"]``
    """

    _schema = {"$ref": "#/definitions/QuantileTransform"}

    def __init__(
        self,
        quantile: Union[Union["FieldName", str], UndefinedType] = Undefined,
        groupby: Union[Union[List["FieldName"], List[str]], UndefinedType] = Undefined,
        probs: Union[List[float], UndefinedType] = Undefined,
        step: Union[float, UndefinedType] = Undefined,
        **kwds
    ):
        super(QuantileTransform, self).__init__(
            quantile=quantile, groupby=groupby, probs=probs, step=step, **kwds
        )


class RegressionTransform(Transform):
    """RegressionTransform schema wrapper

    Union[:class:`RegressionTransform`, Dict[required=[regression, on]]]

    Parameters
    ----------

    on : Union[:class:`FieldName`, str]
        The data field of the independent variable to use a predictor.
    regression : Union[:class:`FieldName`, str]
        The data field of the dependent variable to predict.
    extent : List[float]
        A [min, max] domain over the independent (x) field for the starting and ending
        points of the generated trend line.
    groupby : List[Union[:class:`FieldName`, str]]
        The data fields to group by. If not specified, a single group containing all data
        objects will be used.
    method : Literal['linear', 'log', 'exp', 'pow', 'quad', 'poly']
        The functional form of the regression model. One of ``"linear"``, ``"log"``,
        ``"exp"``, ``"pow"``, ``"quad"``, or ``"poly"``.

        **Default value:** ``"linear"``
    order : float
        The polynomial order (number of coefficients) for the 'poly' method.

        **Default value:** ``3``
    params : bool
        A boolean flag indicating if the transform should return the regression model
        parameters (one object per group), rather than trend line points. The resulting
        objects include a ``coef`` array of fitted coefficient values (starting with the
        intercept term and then including terms of increasing order) and an ``rSquared``
        value (indicating the total variance explained by the model).

        **Default value:** ``false``
    as : List[Union[:class:`FieldName`, str]]
        The output field names for the smoothed points generated by the regression
        transform.

        **Default value:** The field names of the input x and y values.
    """

    _schema = {"$ref": "#/definitions/RegressionTransform"}

    def __init__(
        self,
        on: Union[Union["FieldName", str], UndefinedType] = Undefined,
        regression: Union[Union["FieldName", str], UndefinedType] = Undefined,
        extent: Union[List[float], UndefinedType] = Undefined,
        groupby: Union[Union[List["FieldName"], List[str]], UndefinedType] = Undefined,
        method: Union[
            Literal["linear", "log", "exp", "pow", "quad", "poly"], UndefinedType
        ] = Undefined,
        order: Union[float, UndefinedType] = Undefined,
        params: Union[bool, UndefinedType] = Undefined,
        **kwds
    ):
        super(RegressionTransform, self).__init__(
            on=on,
            regression=regression,
            extent=extent,
            groupby=groupby,
            method=method,
            order=order,
            params=params,
            **kwds
        )


class SampleTransform(Transform):
    """SampleTransform schema wrapper

    Union[:class:`SampleTransform`, Dict[required=[sample]]]

    Parameters
    ----------

    sample : float
        The maximum number of data objects to include in the sample.

        **Default value:** ``1000``
    """

    _schema = {"$ref": "#/definitions/SampleTransform"}

    def __init__(self, sample: Union[float, UndefinedType] = Undefined, **kwds):
        super(SampleTransform, self).__init__(sample=sample, **kwds)


class StackTransform(Transform):
    """StackTransform schema wrapper

    Union[:class:`StackTransform`, Dict[required=[stack, groupby, as]]]

    Parameters
    ----------

    groupby : List[Union[:class:`FieldName`, str]]
        The data fields to group by.
    stack : Union[:class:`FieldName`, str]
        The field which is stacked.
    offset : Literal['zero', 'center', 'normalize']
        Mode for stacking marks. One of ``"zero"`` (default), ``"center"``, or
        ``"normalize"``. The ``"zero"`` offset will stack starting at ``0``. The
        ``"center"`` offset will center the stacks. The ``"normalize"`` offset will compute
        percentage values for each stack point, with output values in the range ``[0,1]``.

        **Default value:** ``"zero"``
    sort : List[Union[:class:`SortField`, Dict[required=[field]]]]
        Field that determines the order of leaves in the stacked charts.
    as : Union[List[Union[:class:`FieldName`, str]], Union[:class:`FieldName`, str]]
        Output field names. This can be either a string or an array of strings with two
        elements denoting the name for the fields for stack start and stack end
        respectively. If a single string(e.g., ``"val"`` ) is provided, the end field will
        be ``"val_end"``.
    """

    _schema = {"$ref": "#/definitions/StackTransform"}

    def __init__(
        self,
        groupby: Union[Union[List["FieldName"], List[str]], UndefinedType] = Undefined,
        stack: Union[Union["FieldName", str], UndefinedType] = Undefined,
        offset: Union[
            Literal["zero", "center", "normalize"], UndefinedType
        ] = Undefined,
        sort: Union[Union[List["SortField"], List[dict]], UndefinedType] = Undefined,
        **kwds
    ):
        super(StackTransform, self).__init__(
            groupby=groupby, stack=stack, offset=offset, sort=sort, **kwds
        )


class TimeUnitTransform(Transform):
    """TimeUnitTransform schema wrapper

    Union[:class:`TimeUnitTransform`, Dict[required=[timeUnit, field, as]]]

    Parameters
    ----------

    field : Union[:class:`FieldName`, str]
        The data field to apply time unit.
    timeUnit : Union[Union[:class:`TimeUnitTransformParams`, Dict[required=[]]], Union[:class:`TimeUnit`, Union[:class:`MultiTimeUnit`, Union[:class:`LocalMultiTimeUnit`, Literal['yearquarter', 'yearquartermonth', 'yearmonth', 'yearmonthdate', 'yearmonthdatehours', 'yearmonthdatehoursminutes', 'yearmonthdatehoursminutesseconds', 'yearweek', 'yearweekday', 'yearweekdayhours', 'yearweekdayhoursminutes', 'yearweekdayhoursminutesseconds', 'yeardayofyear', 'quartermonth', 'monthdate', 'monthdatehours', 'monthdatehoursminutes', 'monthdatehoursminutesseconds', 'weekday', 'weeksdayhours', 'weekdayhoursminutes', 'weekdayhoursminutesseconds', 'dayhours', 'dayhoursminutes', 'dayhoursminutesseconds', 'hoursminutes', 'hoursminutesseconds', 'minutesseconds', 'secondsmilliseconds']], Union[:class:`UtcMultiTimeUnit`, Literal['utcyearquarter', 'utcyearquartermonth', 'utcyearmonth', 'utcyearmonthdate', 'utcyearmonthdatehours', 'utcyearmonthdatehoursminutes', 'utcyearmonthdatehoursminutesseconds', 'utcyearweek', 'utcyearweekday', 'utcyearweekdayhours', 'utcyearweekdayhoursminutes', 'utcyearweekdayhoursminutesseconds', 'utcyeardayofyear', 'utcquartermonth', 'utcmonthdate', 'utcmonthdatehours', 'utcmonthdatehoursminutes', 'utcmonthdatehoursminutesseconds', 'utcweekday', 'utcweeksdayhours', 'utcweekdayhoursminutes', 'utcweekdayhoursminutesseconds', 'utcdayhours', 'utcdayhoursminutes', 'utcdayhoursminutesseconds', 'utchoursminutes', 'utchoursminutesseconds', 'utcminutesseconds', 'utcsecondsmilliseconds']]], Union[:class:`SingleTimeUnit`, Union[:class:`LocalSingleTimeUnit`, Literal['year', 'quarter', 'month', 'week', 'day', 'dayofyear', 'date', 'hours', 'minutes', 'seconds', 'milliseconds']], Union[:class:`UtcSingleTimeUnit`, Literal['utcyear', 'utcquarter', 'utcmonth', 'utcweek', 'utcday', 'utcdayofyear', 'utcdate', 'utchours', 'utcminutes', 'utcseconds', 'utcmilliseconds']]]]]
        The timeUnit.
    as : Union[:class:`FieldName`, str]
        The output field to write the timeUnit value.
    """

    _schema = {"$ref": "#/definitions/TimeUnitTransform"}

    def __init__(
        self,
        field: Union[Union["FieldName", str], UndefinedType] = Undefined,
        timeUnit: Union[
            Union[
                Union[
                    "TimeUnit",
                    Union[
                        "MultiTimeUnit",
                        Union[
                            "LocalMultiTimeUnit",
                            Literal[
                                "yearquarter",
                                "yearquartermonth",
                                "yearmonth",
                                "yearmonthdate",
                                "yearmonthdatehours",
                                "yearmonthdatehoursminutes",
                                "yearmonthdatehoursminutesseconds",
                                "yearweek",
                                "yearweekday",
                                "yearweekdayhours",
                                "yearweekdayhoursminutes",
                                "yearweekdayhoursminutesseconds",
                                "yeardayofyear",
                                "quartermonth",
                                "monthdate",
                                "monthdatehours",
                                "monthdatehoursminutes",
                                "monthdatehoursminutesseconds",
                                "weekday",
                                "weeksdayhours",
                                "weekdayhoursminutes",
                                "weekdayhoursminutesseconds",
                                "dayhours",
                                "dayhoursminutes",
                                "dayhoursminutesseconds",
                                "hoursminutes",
                                "hoursminutesseconds",
                                "minutesseconds",
                                "secondsmilliseconds",
                            ],
                        ],
                        Union[
                            "UtcMultiTimeUnit",
                            Literal[
                                "utcyearquarter",
                                "utcyearquartermonth",
                                "utcyearmonth",
                                "utcyearmonthdate",
                                "utcyearmonthdatehours",
                                "utcyearmonthdatehoursminutes",
                                "utcyearmonthdatehoursminutesseconds",
                                "utcyearweek",
                                "utcyearweekday",
                                "utcyearweekdayhours",
                                "utcyearweekdayhoursminutes",
                                "utcyearweekdayhoursminutesseconds",
                                "utcyeardayofyear",
                                "utcquartermonth",
                                "utcmonthdate",
                                "utcmonthdatehours",
                                "utcmonthdatehoursminutes",
                                "utcmonthdatehoursminutesseconds",
                                "utcweekday",
                                "utcweeksdayhours",
                                "utcweekdayhoursminutes",
                                "utcweekdayhoursminutesseconds",
                                "utcdayhours",
                                "utcdayhoursminutes",
                                "utcdayhoursminutesseconds",
                                "utchoursminutes",
                                "utchoursminutesseconds",
                                "utcminutesseconds",
                                "utcsecondsmilliseconds",
                            ],
                        ],
                    ],
                    Union[
                        "SingleTimeUnit",
                        Union[
                            "LocalSingleTimeUnit",
                            Literal[
                                "year",
                                "quarter",
                                "month",
                                "week",
                                "day",
                                "dayofyear",
                                "date",
                                "hours",
                                "minutes",
                                "seconds",
                                "milliseconds",
                            ],
                        ],
                        Union[
                            "UtcSingleTimeUnit",
                            Literal[
                                "utcyear",
                                "utcquarter",
                                "utcmonth",
                                "utcweek",
                                "utcday",
                                "utcdayofyear",
                                "utcdate",
                                "utchours",
                                "utcminutes",
                                "utcseconds",
                                "utcmilliseconds",
                            ],
                        ],
                    ],
                ],
                Union["TimeUnitTransformParams", dict],
            ],
            UndefinedType,
        ] = Undefined,
        **kwds
    ):
        super(TimeUnitTransform, self).__init__(field=field, timeUnit=timeUnit, **kwds)


class Type(VegaLiteSchema):
    """Type schema wrapper

    Union[:class:`Type`, Literal['quantitative', 'ordinal', 'temporal', 'nominal', 'geojson']]
    Data type based on level of measurement
    """

    _schema = {"$ref": "#/definitions/Type"}

    def __init__(self, *args):
        super(Type, self).__init__(*args)


class TypeForShape(VegaLiteSchema):
    """TypeForShape schema wrapper

    Union[:class:`TypeForShape`, Literal['nominal', 'ordinal', 'geojson']]
    """

    _schema = {"$ref": "#/definitions/TypeForShape"}

    def __init__(self, *args):
        super(TypeForShape, self).__init__(*args)


class TypedFieldDef(VegaLiteSchema):
    """TypedFieldDef schema wrapper

    Union[:class:`TypedFieldDef`, Dict[required=[]]]
    Definition object for a data field, its type and transformation of an encoding channel.

    Parameters
    ----------

    aggregate : Union[:class:`Aggregate`, Union[:class:`ArgmaxDef`, Dict[required=[argmax]]], Union[:class:`ArgminDef`, Dict[required=[argmin]]], Union[:class:`NonArgAggregateOp`, Literal['average', 'count', 'distinct', 'max', 'mean', 'median', 'min', 'missing', 'product', 'q1', 'q3', 'ci0', 'ci1', 'stderr', 'stdev', 'stdevp', 'sum', 'valid', 'values', 'variance', 'variancep']]]
        Aggregation function for the field (e.g., ``"mean"``, ``"sum"``, ``"median"``,
        ``"min"``, ``"max"``, ``"count"`` ).

        **Default value:** ``undefined`` (None)

        **See also:** `aggregate <https://vega.github.io/vega-lite/docs/aggregate.html>`__
        documentation.
    bandPosition : float
        Relative position on a band of a stacked, binned, time unit, or band scale. For
        example, the marks will be positioned at the beginning of the band if set to ``0``,
        and at the middle of the band if set to ``0.5``.
    bin : Union[None, Union[:class:`BinParams`, Dict[required=[]]], bool, str]
        A flag for binning a ``quantitative`` field, `an object defining binning parameters
        <https://vega.github.io/vega-lite/docs/bin.html#bin-parameters>`__, or indicating
        that the data for ``x`` or ``y`` channel are binned before they are imported into
        Vega-Lite ( ``"binned"`` ).


        If ``true``, default `binning parameters
        <https://vega.github.io/vega-lite/docs/bin.html#bin-parameters>`__ will be applied.

        If ``"binned"``, this indicates that the data for the ``x`` (or ``y`` ) channel are
        already binned. You can map the bin-start field to ``x`` (or ``y`` ) and the bin-end
        field to ``x2`` (or ``y2`` ). The scale and axis will be formatted similar to
        binning in Vega-Lite.  To adjust the axis ticks based on the bin step, you can also
        set the axis's `tickMinStep
        <https://vega.github.io/vega-lite/docs/axis.html#ticks>`__ property.

        **Default value:** ``false``

        **See also:** `bin <https://vega.github.io/vega-lite/docs/bin.html>`__
        documentation.
    field : Union[:class:`Field`, Union[:class:`FieldName`, str], Union[:class:`RepeatRef`, Dict[required=[repeat]]]]
        **Required.** A string defining the name of the field from which to pull a data
        value or an object defining iterated values from the `repeat
        <https://vega.github.io/vega-lite/docs/repeat.html>`__ operator.

        **See also:** `field <https://vega.github.io/vega-lite/docs/field.html>`__
        documentation.

        **Notes:** 1)  Dots ( ``.`` ) and brackets ( ``[`` and ``]`` ) can be used to access
        nested objects (e.g., ``"field": "foo.bar"`` and ``"field": "foo['bar']"`` ). If
        field names contain dots or brackets but are not nested, you can use ``\\`` to
        escape dots and brackets (e.g., ``"a\\.b"`` and ``"a\\[0\\]"`` ). See more details
        about escaping in the `field documentation
        <https://vega.github.io/vega-lite/docs/field.html>`__. 2) ``field`` is not required
        if ``aggregate`` is ``count``.
    timeUnit : Union[Union[:class:`BinnedTimeUnit`, Literal['binnedutcyear', 'binnedutcyearquarter', 'binnedutcyearquartermonth', 'binnedutcyearmonth', 'binnedutcyearmonthdate', 'binnedutcyearmonthdatehours', 'binnedutcyearmonthdatehoursminutes', 'binnedutcyearmonthdatehoursminutesseconds', 'binnedutcyearweek', 'binnedutcyearweekday', 'binnedutcyearweekdayhours', 'binnedutcyearweekdayhoursminutes', 'binnedutcyearweekdayhoursminutesseconds', 'binnedutcyeardayofyear'], Literal['binnedyear', 'binnedyearquarter', 'binnedyearquartermonth', 'binnedyearmonth', 'binnedyearmonthdate', 'binnedyearmonthdatehours', 'binnedyearmonthdatehoursminutes', 'binnedyearmonthdatehoursminutesseconds', 'binnedyearweek', 'binnedyearweekday', 'binnedyearweekdayhours', 'binnedyearweekdayhoursminutes', 'binnedyearweekdayhoursminutesseconds', 'binnedyeardayofyear']], Union[:class:`TimeUnitParams`, Dict[required=[]]], Union[:class:`TimeUnit`, Union[:class:`MultiTimeUnit`, Union[:class:`LocalMultiTimeUnit`, Literal['yearquarter', 'yearquartermonth', 'yearmonth', 'yearmonthdate', 'yearmonthdatehours', 'yearmonthdatehoursminutes', 'yearmonthdatehoursminutesseconds', 'yearweek', 'yearweekday', 'yearweekdayhours', 'yearweekdayhoursminutes', 'yearweekdayhoursminutesseconds', 'yeardayofyear', 'quartermonth', 'monthdate', 'monthdatehours', 'monthdatehoursminutes', 'monthdatehoursminutesseconds', 'weekday', 'weeksdayhours', 'weekdayhoursminutes', 'weekdayhoursminutesseconds', 'dayhours', 'dayhoursminutes', 'dayhoursminutesseconds', 'hoursminutes', 'hoursminutesseconds', 'minutesseconds', 'secondsmilliseconds']], Union[:class:`UtcMultiTimeUnit`, Literal['utcyearquarter', 'utcyearquartermonth', 'utcyearmonth', 'utcyearmonthdate', 'utcyearmonthdatehours', 'utcyearmonthdatehoursminutes', 'utcyearmonthdatehoursminutesseconds', 'utcyearweek', 'utcyearweekday', 'utcyearweekdayhours', 'utcyearweekdayhoursminutes', 'utcyearweekdayhoursminutesseconds', 'utcyeardayofyear', 'utcquartermonth', 'utcmonthdate', 'utcmonthdatehours', 'utcmonthdatehoursminutes', 'utcmonthdatehoursminutesseconds', 'utcweekday', 'utcweeksdayhours', 'utcweekdayhoursminutes', 'utcweekdayhoursminutesseconds', 'utcdayhours', 'utcdayhoursminutes', 'utcdayhoursminutesseconds', 'utchoursminutes', 'utchoursminutesseconds', 'utcminutesseconds', 'utcsecondsmilliseconds']]], Union[:class:`SingleTimeUnit`, Union[:class:`LocalSingleTimeUnit`, Literal['year', 'quarter', 'month', 'week', 'day', 'dayofyear', 'date', 'hours', 'minutes', 'seconds', 'milliseconds']], Union[:class:`UtcSingleTimeUnit`, Literal['utcyear', 'utcquarter', 'utcmonth', 'utcweek', 'utcday', 'utcdayofyear', 'utcdate', 'utchours', 'utcminutes', 'utcseconds', 'utcmilliseconds']]]]]
        Time unit (e.g., ``year``, ``yearmonth``, ``month``, ``hours`` ) for a temporal
        field. or `a temporal field that gets casted as ordinal
        <https://vega.github.io/vega-lite/docs/type.html#cast>`__.

        **Default value:** ``undefined`` (None)

        **See also:** `timeUnit <https://vega.github.io/vega-lite/docs/timeunit.html>`__
        documentation.
    title : Union[None, Union[:class:`Text`, List[str], str]]
        A title for the field. If ``null``, the title will be removed.

        **Default value:**  derived from the field's name and transformation function (
        ``aggregate``, ``bin`` and ``timeUnit`` ). If the field has an aggregate function,
        the function is displayed as part of the title (e.g., ``"Sum of Profit"`` ). If the
        field is binned or has a time unit applied, the applied function is shown in
        parentheses (e.g., ``"Profit (binned)"``, ``"Transaction Date (year-month)"`` ).
        Otherwise, the title is simply the field name.

        **Notes** :

        1) You can customize the default field title format by providing the `fieldTitle
        <https://vega.github.io/vega-lite/docs/config.html#top-level-config>`__ property in
        the `config <https://vega.github.io/vega-lite/docs/config.html>`__ or `fieldTitle
        function via the compile function's options
        <https://vega.github.io/vega-lite/usage/compile.html#field-title>`__.

        2) If both field definition's ``title`` and axis, header, or legend ``title`` are
        defined, axis/header/legend title will be used.
    type : Union[:class:`StandardType`, Literal['quantitative', 'ordinal', 'temporal', 'nominal']]
        The type of measurement ( ``"quantitative"``, ``"temporal"``, ``"ordinal"``, or
        ``"nominal"`` ) for the encoded field or constant value ( ``datum`` ). It can also
        be a ``"geojson"`` type for encoding `'geoshape'
        <https://vega.github.io/vega-lite/docs/geoshape.html>`__.

        Vega-Lite automatically infers data types in many cases as discussed below. However,
        type is required for a field if: (1) the field is not nominal and the field encoding
        has no specified ``aggregate`` (except ``argmin`` and ``argmax`` ), ``bin``, scale
        type, custom ``sort`` order, nor ``timeUnit`` or (2) if you wish to use an ordinal
        scale for a field with ``bin`` or ``timeUnit``.

        **Default value:**

        1) For a data ``field``, ``"nominal"`` is the default data type unless the field
        encoding has ``aggregate``, ``channel``, ``bin``, scale type, ``sort``, or
        ``timeUnit`` that satisfies the following criteria:


        * ``"quantitative"`` is the default type if (1) the encoded field contains ``bin``
          or ``aggregate`` except ``"argmin"`` and ``"argmax"``, (2) the encoding channel is
          ``latitude`` or ``longitude`` channel or (3) if the specified scale type is `a
          quantitative scale <https://vega.github.io/vega-lite/docs/scale.html#type>`__.
        * ``"temporal"`` is the default type if (1) the encoded field contains ``timeUnit``
          or (2) the specified scale type is a time or utc scale
        * ``"ordinal"`` is the default type if (1) the encoded field contains a `custom sort
          order
          <https://vega.github.io/vega-lite/docs/sort.html#specifying-custom-sort-order>`__,
          (2) the specified scale type is an ordinal/point/band scale, or (3) the encoding
          channel is ``order``.

        2) For a constant value in data domain ( ``datum`` ):


        * ``"quantitative"`` if the datum is a number
        * ``"nominal"`` if the datum is a string
        * ``"temporal"`` if the datum is `a date time object
          <https://vega.github.io/vega-lite/docs/datetime.html>`__

        **Note:**


        * Data ``type`` describes the semantics of the data rather than the primitive data
          types (number, string, etc.). The same primitive data type can have different
          types of measurement. For example, numeric data can represent quantitative,
          ordinal, or nominal data.
        * Data values for a temporal field can be either a date-time string (e.g.,
          ``"2015-03-07 12:32:17"``, ``"17:01"``, ``"2015-03-16"``. ``"2015"`` ) or a
          timestamp number (e.g., ``1552199579097`` ).
        * When using with `bin <https://vega.github.io/vega-lite/docs/bin.html>`__, the
          ``type`` property can be either ``"quantitative"`` (for using a linear bin scale)
          or `"ordinal" (for using an ordinal bin scale)
          <https://vega.github.io/vega-lite/docs/type.html#cast-bin>`__.
        * When using with `timeUnit
          <https://vega.github.io/vega-lite/docs/timeunit.html>`__, the ``type`` property
          can be either ``"temporal"`` (default, for using a temporal scale) or `"ordinal"
          (for using an ordinal scale)
          <https://vega.github.io/vega-lite/docs/type.html#cast-bin>`__.
        * When using with `aggregate
          <https://vega.github.io/vega-lite/docs/aggregate.html>`__, the ``type`` property
          refers to the post-aggregation data type. For example, we can calculate count
          ``distinct`` of a categorical field ``"cat"`` using ``{"aggregate": "distinct",
          "field": "cat"}``. The ``"type"`` of the aggregate output is ``"quantitative"``.
        * Secondary channels (e.g., ``x2``, ``y2``, ``xError``, ``yError`` ) do not have
          ``type`` as they must have exactly the same type as their primary channels (e.g.,
          ``x``, ``y`` ).

        **See also:** `type <https://vega.github.io/vega-lite/docs/type.html>`__
        documentation.
    """

    _schema = {"$ref": "#/definitions/TypedFieldDef"}

    def __init__(
        self,
        aggregate: Union[
            Union[
                "Aggregate",
                Union["ArgmaxDef", dict],
                Union["ArgminDef", dict],
                Union[
                    "NonArgAggregateOp",
                    Literal[
                        "average",
                        "count",
                        "distinct",
                        "max",
                        "mean",
                        "median",
                        "min",
                        "missing",
                        "product",
                        "q1",
                        "q3",
                        "ci0",
                        "ci1",
                        "stderr",
                        "stdev",
                        "stdevp",
                        "sum",
                        "valid",
                        "values",
                        "variance",
                        "variancep",
                    ],
                ],
            ],
            UndefinedType,
        ] = Undefined,
        bandPosition: Union[float, UndefinedType] = Undefined,
        bin: Union[
            Union[None, Union["BinParams", dict], bool, str], UndefinedType
        ] = Undefined,
        field: Union[
            Union["Field", Union["FieldName", str], Union["RepeatRef", dict]],
            UndefinedType,
        ] = Undefined,
        timeUnit: Union[
            Union[
                Union[
                    "BinnedTimeUnit",
                    Literal[
                        "binnedutcyear",
                        "binnedutcyearquarter",
                        "binnedutcyearquartermonth",
                        "binnedutcyearmonth",
                        "binnedutcyearmonthdate",
                        "binnedutcyearmonthdatehours",
                        "binnedutcyearmonthdatehoursminutes",
                        "binnedutcyearmonthdatehoursminutesseconds",
                        "binnedutcyearweek",
                        "binnedutcyearweekday",
                        "binnedutcyearweekdayhours",
                        "binnedutcyearweekdayhoursminutes",
                        "binnedutcyearweekdayhoursminutesseconds",
                        "binnedutcyeardayofyear",
                    ],
                    Literal[
                        "binnedyear",
                        "binnedyearquarter",
                        "binnedyearquartermonth",
                        "binnedyearmonth",
                        "binnedyearmonthdate",
                        "binnedyearmonthdatehours",
                        "binnedyearmonthdatehoursminutes",
                        "binnedyearmonthdatehoursminutesseconds",
                        "binnedyearweek",
                        "binnedyearweekday",
                        "binnedyearweekdayhours",
                        "binnedyearweekdayhoursminutes",
                        "binnedyearweekdayhoursminutesseconds",
                        "binnedyeardayofyear",
                    ],
                ],
                Union[
                    "TimeUnit",
                    Union[
                        "MultiTimeUnit",
                        Union[
                            "LocalMultiTimeUnit",
                            Literal[
                                "yearquarter",
                                "yearquartermonth",
                                "yearmonth",
                                "yearmonthdate",
                                "yearmonthdatehours",
                                "yearmonthdatehoursminutes",
                                "yearmonthdatehoursminutesseconds",
                                "yearweek",
                                "yearweekday",
                                "yearweekdayhours",
                                "yearweekdayhoursminutes",
                                "yearweekdayhoursminutesseconds",
                                "yeardayofyear",
                                "quartermonth",
                                "monthdate",
                                "monthdatehours",
                                "monthdatehoursminutes",
                                "monthdatehoursminutesseconds",
                                "weekday",
                                "weeksdayhours",
                                "weekdayhoursminutes",
                                "weekdayhoursminutesseconds",
                                "dayhours",
                                "dayhoursminutes",
                                "dayhoursminutesseconds",
                                "hoursminutes",
                                "hoursminutesseconds",
                                "minutesseconds",
                                "secondsmilliseconds",
                            ],
                        ],
                        Union[
                            "UtcMultiTimeUnit",
                            Literal[
                                "utcyearquarter",
                                "utcyearquartermonth",
                                "utcyearmonth",
                                "utcyearmonthdate",
                                "utcyearmonthdatehours",
                                "utcyearmonthdatehoursminutes",
                                "utcyearmonthdatehoursminutesseconds",
                                "utcyearweek",
                                "utcyearweekday",
                                "utcyearweekdayhours",
                                "utcyearweekdayhoursminutes",
                                "utcyearweekdayhoursminutesseconds",
                                "utcyeardayofyear",
                                "utcquartermonth",
                                "utcmonthdate",
                                "utcmonthdatehours",
                                "utcmonthdatehoursminutes",
                                "utcmonthdatehoursminutesseconds",
                                "utcweekday",
                                "utcweeksdayhours",
                                "utcweekdayhoursminutes",
                                "utcweekdayhoursminutesseconds",
                                "utcdayhours",
                                "utcdayhoursminutes",
                                "utcdayhoursminutesseconds",
                                "utchoursminutes",
                                "utchoursminutesseconds",
                                "utcminutesseconds",
                                "utcsecondsmilliseconds",
                            ],
                        ],
                    ],
                    Union[
                        "SingleTimeUnit",
                        Union[
                            "LocalSingleTimeUnit",
                            Literal[
                                "year",
                                "quarter",
                                "month",
                                "week",
                                "day",
                                "dayofyear",
                                "date",
                                "hours",
                                "minutes",
                                "seconds",
                                "milliseconds",
                            ],
                        ],
                        Union[
                            "UtcSingleTimeUnit",
                            Literal[
                                "utcyear",
                                "utcquarter",
                                "utcmonth",
                                "utcweek",
                                "utcday",
                                "utcdayofyear",
                                "utcdate",
                                "utchours",
                                "utcminutes",
                                "utcseconds",
                                "utcmilliseconds",
                            ],
                        ],
                    ],
                ],
                Union["TimeUnitParams", dict],
            ],
            UndefinedType,
        ] = Undefined,
        title: Union[
            Union[None, Union["Text", List[str], str]], UndefinedType
        ] = Undefined,
        type: Union[
            Union[
                "StandardType",
                Literal["quantitative", "ordinal", "temporal", "nominal"],
            ],
            UndefinedType,
        ] = Undefined,
        **kwds
    ):
        super(TypedFieldDef, self).__init__(
            aggregate=aggregate,
            bandPosition=bandPosition,
            bin=bin,
            field=field,
            timeUnit=timeUnit,
            title=title,
            type=type,
            **kwds
        )


class URI(VegaLiteSchema):
    """URI schema wrapper

    Union[:class:`URI`, str]
    """

    _schema = {"$ref": "#/definitions/URI"}

    def __init__(self, *args):
        super(URI, self).__init__(*args)


class UnitSpec(VegaLiteSchema):
    """UnitSpec schema wrapper

    Union[:class:`UnitSpec`, Dict[required=[mark]]]
    Base interface for a unit (single-view) specification.

    Parameters
    ----------

    mark : Union[:class:`AnyMark`, Union[:class:`CompositeMarkDef`, Union[:class:`BoxPlotDef`, Dict[required=[type]]], Union[:class:`ErrorBandDef`, Dict[required=[type]]], Union[:class:`ErrorBarDef`, Dict[required=[type]]]], Union[:class:`CompositeMark`, Union[:class:`BoxPlot`, str], Union[:class:`ErrorBand`, str], Union[:class:`ErrorBar`, str]], Union[:class:`MarkDef`, Dict[required=[type]]], Union[:class:`Mark`, Literal['arc', 'area', 'bar', 'image', 'line', 'point', 'rect', 'rule', 'text', 'tick', 'trail', 'circle', 'square', 'geoshape']]]
        A string describing the mark type (one of ``"bar"``, ``"circle"``, ``"square"``,
        ``"tick"``, ``"line"``, ``"area"``, ``"point"``, ``"rule"``, ``"geoshape"``, and
        ``"text"`` ) or a `mark definition object
        <https://vega.github.io/vega-lite/docs/mark.html#mark-def>`__.
    data : Union[None, Union[:class:`Data`, Union[:class:`DataSource`, Union[:class:`InlineData`, Dict[required=[values]]], Union[:class:`NamedData`, Dict[required=[name]]], Union[:class:`UrlData`, Dict[required=[url]]]], Union[:class:`Generator`, Union[:class:`GraticuleGenerator`, Dict[required=[graticule]]], Union[:class:`SequenceGenerator`, Dict[required=[sequence]]], Union[:class:`SphereGenerator`, Dict[required=[sphere]]]]]]
        An object describing the data source. Set to ``null`` to ignore the parent's data
        source. If no data is set, it is derived from the parent.
    description : str
        Description of this mark for commenting purpose.
    encoding : Union[:class:`Encoding`, Dict[required=[]]]
        A key-value mapping between encoding channels and definition of fields.
    name : str
        Name of the visualization for later reference.
    params : List[Union[:class:`SelectionParameter`, Dict[required=[name, select]]]]
        An array of parameters that may either be simple variables, or more complex
        selections that map user input to data queries.
    projection : Union[:class:`Projection`, Dict[required=[]]]
        An object defining properties of geographic projection, which will be applied to
        ``shape`` path for ``"geoshape"`` marks and to ``latitude`` and ``"longitude"``
        channels for other marks.
    title : Union[Union[:class:`Text`, List[str], str], Union[:class:`TitleParams`, Dict[required=[text]]]]
        Title for the plot.
    transform : List[Union[:class:`Transform`, Union[:class:`AggregateTransform`, Dict[required=[aggregate]]], Union[:class:`BinTransform`, Dict[required=[bin, field, as]]], Union[:class:`CalculateTransform`, Dict[required=[calculate, as]]], Union[:class:`DensityTransform`, Dict[required=[density]]], Union[:class:`ExtentTransform`, Dict[required=[extent, param]]], Union[:class:`FilterTransform`, Dict[required=[filter]]], Union[:class:`FlattenTransform`, Dict[required=[flatten]]], Union[:class:`FoldTransform`, Dict[required=[fold]]], Union[:class:`ImputeTransform`, Dict[required=[impute, key]]], Union[:class:`JoinAggregateTransform`, Dict[required=[joinaggregate]]], Union[:class:`LoessTransform`, Dict[required=[loess, on]]], Union[:class:`LookupTransform`, Dict[required=[lookup, from]]], Union[:class:`PivotTransform`, Dict[required=[pivot, value]]], Union[:class:`QuantileTransform`, Dict[required=[quantile]]], Union[:class:`RegressionTransform`, Dict[required=[regression, on]]], Union[:class:`SampleTransform`, Dict[required=[sample]]], Union[:class:`StackTransform`, Dict[required=[stack, groupby, as]]], Union[:class:`TimeUnitTransform`, Dict[required=[timeUnit, field, as]]], Union[:class:`WindowTransform`, Dict[required=[window]]]]]
        An array of data transformations such as filter and new field calculation.
    """

    _schema = {"$ref": "#/definitions/UnitSpec"}

    def __init__(
        self,
        mark: Union[
            Union[
                "AnyMark",
                Union[
                    "CompositeMark",
                    Union["BoxPlot", str],
                    Union["ErrorBand", str],
                    Union["ErrorBar", str],
                ],
                Union[
                    "CompositeMarkDef",
                    Union["BoxPlotDef", dict],
                    Union["ErrorBandDef", dict],
                    Union["ErrorBarDef", dict],
                ],
                Union[
                    "Mark",
                    Literal[
                        "arc",
                        "area",
                        "bar",
                        "image",
                        "line",
                        "point",
                        "rect",
                        "rule",
                        "text",
                        "tick",
                        "trail",
                        "circle",
                        "square",
                        "geoshape",
                    ],
                ],
                Union["MarkDef", dict],
            ],
            UndefinedType,
        ] = Undefined,
        data: Union[
            Union[
                None,
                Union[
                    "Data",
                    Union[
                        "DataSource",
                        Union["InlineData", dict],
                        Union["NamedData", dict],
                        Union["UrlData", dict],
                    ],
                    Union[
                        "Generator",
                        Union["GraticuleGenerator", dict],
                        Union["SequenceGenerator", dict],
                        Union["SphereGenerator", dict],
                    ],
                ],
            ],
            UndefinedType,
        ] = Undefined,
        description: Union[str, UndefinedType] = Undefined,
        encoding: Union[Union["Encoding", dict], UndefinedType] = Undefined,
        name: Union[str, UndefinedType] = Undefined,
        params: Union[
            Union[List["SelectionParameter"], List[dict]], UndefinedType
        ] = Undefined,
        projection: Union[Union["Projection", dict], UndefinedType] = Undefined,
        title: Union[
            Union[Union["Text", List[str], str], Union["TitleParams", dict]],
            UndefinedType,
        ] = Undefined,
        transform: Union[
            Union[
                List["Transform"],
                List[Union["AggregateTransform", dict]],
                List[Union["BinTransform", dict]],
                List[Union["CalculateTransform", dict]],
                List[Union["DensityTransform", dict]],
                List[Union["ExtentTransform", dict]],
                List[Union["FilterTransform", dict]],
                List[Union["FlattenTransform", dict]],
                List[Union["FoldTransform", dict]],
                List[Union["ImputeTransform", dict]],
                List[Union["JoinAggregateTransform", dict]],
                List[Union["LoessTransform", dict]],
                List[Union["LookupTransform", dict]],
                List[Union["PivotTransform", dict]],
                List[Union["QuantileTransform", dict]],
                List[Union["RegressionTransform", dict]],
                List[Union["SampleTransform", dict]],
                List[Union["StackTransform", dict]],
                List[Union["TimeUnitTransform", dict]],
                List[Union["WindowTransform", dict]],
            ],
            UndefinedType,
        ] = Undefined,
        **kwds
    ):
        super(UnitSpec, self).__init__(
            mark=mark,
            data=data,
            description=description,
            encoding=encoding,
            name=name,
            params=params,
            projection=projection,
            title=title,
            transform=transform,
            **kwds
        )


class UnitSpecWithFrame(VegaLiteSchema):
    """UnitSpecWithFrame schema wrapper

    Union[:class:`UnitSpecWithFrame`, Dict[required=[mark]]]

    Parameters
    ----------

    mark : Union[:class:`AnyMark`, Union[:class:`CompositeMarkDef`, Union[:class:`BoxPlotDef`, Dict[required=[type]]], Union[:class:`ErrorBandDef`, Dict[required=[type]]], Union[:class:`ErrorBarDef`, Dict[required=[type]]]], Union[:class:`CompositeMark`, Union[:class:`BoxPlot`, str], Union[:class:`ErrorBand`, str], Union[:class:`ErrorBar`, str]], Union[:class:`MarkDef`, Dict[required=[type]]], Union[:class:`Mark`, Literal['arc', 'area', 'bar', 'image', 'line', 'point', 'rect', 'rule', 'text', 'tick', 'trail', 'circle', 'square', 'geoshape']]]
        A string describing the mark type (one of ``"bar"``, ``"circle"``, ``"square"``,
        ``"tick"``, ``"line"``, ``"area"``, ``"point"``, ``"rule"``, ``"geoshape"``, and
        ``"text"`` ) or a `mark definition object
        <https://vega.github.io/vega-lite/docs/mark.html#mark-def>`__.
    data : Union[None, Union[:class:`Data`, Union[:class:`DataSource`, Union[:class:`InlineData`, Dict[required=[values]]], Union[:class:`NamedData`, Dict[required=[name]]], Union[:class:`UrlData`, Dict[required=[url]]]], Union[:class:`Generator`, Union[:class:`GraticuleGenerator`, Dict[required=[graticule]]], Union[:class:`SequenceGenerator`, Dict[required=[sequence]]], Union[:class:`SphereGenerator`, Dict[required=[sphere]]]]]]
        An object describing the data source. Set to ``null`` to ignore the parent's data
        source. If no data is set, it is derived from the parent.
    description : str
        Description of this mark for commenting purpose.
    encoding : Union[:class:`Encoding`, Dict[required=[]]]
        A key-value mapping between encoding channels and definition of fields.
    height : Union[Union[:class:`Step`, Dict[required=[step]]], float, str]
        The height of a visualization.


        * For a plot with a continuous y-field, height should be a number.
        * For a plot with either a discrete y-field or no y-field, height can be either a
          number indicating a fixed height or an object in the form of ``{step: number}``
          defining the height per discrete step. (No y-field is equivalent to having one
          discrete step.)
        * To enable responsive sizing on height, it should be set to ``"container"``.

        **Default value:** Based on ``config.view.continuousHeight`` for a plot with a
        continuous y-field and ``config.view.discreteHeight`` otherwise.

        **Note:** For plots with `row and column channels
        <https://vega.github.io/vega-lite/docs/encoding.html#facet>`__, this represents the
        height of a single view and the ``"container"`` option cannot be used.

        **See also:** `height <https://vega.github.io/vega-lite/docs/size.html>`__
        documentation.
    name : str
        Name of the visualization for later reference.
    params : List[Union[:class:`SelectionParameter`, Dict[required=[name, select]]]]
        An array of parameters that may either be simple variables, or more complex
        selections that map user input to data queries.
    projection : Union[:class:`Projection`, Dict[required=[]]]
        An object defining properties of geographic projection, which will be applied to
        ``shape`` path for ``"geoshape"`` marks and to ``latitude`` and ``"longitude"``
        channels for other marks.
    title : Union[Union[:class:`Text`, List[str], str], Union[:class:`TitleParams`, Dict[required=[text]]]]
        Title for the plot.
    transform : List[Union[:class:`Transform`, Union[:class:`AggregateTransform`, Dict[required=[aggregate]]], Union[:class:`BinTransform`, Dict[required=[bin, field, as]]], Union[:class:`CalculateTransform`, Dict[required=[calculate, as]]], Union[:class:`DensityTransform`, Dict[required=[density]]], Union[:class:`ExtentTransform`, Dict[required=[extent, param]]], Union[:class:`FilterTransform`, Dict[required=[filter]]], Union[:class:`FlattenTransform`, Dict[required=[flatten]]], Union[:class:`FoldTransform`, Dict[required=[fold]]], Union[:class:`ImputeTransform`, Dict[required=[impute, key]]], Union[:class:`JoinAggregateTransform`, Dict[required=[joinaggregate]]], Union[:class:`LoessTransform`, Dict[required=[loess, on]]], Union[:class:`LookupTransform`, Dict[required=[lookup, from]]], Union[:class:`PivotTransform`, Dict[required=[pivot, value]]], Union[:class:`QuantileTransform`, Dict[required=[quantile]]], Union[:class:`RegressionTransform`, Dict[required=[regression, on]]], Union[:class:`SampleTransform`, Dict[required=[sample]]], Union[:class:`StackTransform`, Dict[required=[stack, groupby, as]]], Union[:class:`TimeUnitTransform`, Dict[required=[timeUnit, field, as]]], Union[:class:`WindowTransform`, Dict[required=[window]]]]]
        An array of data transformations such as filter and new field calculation.
    view : Union[:class:`ViewBackground`, Dict[required=[]]]
        An object defining the view background's fill and stroke.

        **Default value:** none (transparent)
    width : Union[Union[:class:`Step`, Dict[required=[step]]], float, str]
        The width of a visualization.


        * For a plot with a continuous x-field, width should be a number.
        * For a plot with either a discrete x-field or no x-field, width can be either a
          number indicating a fixed width or an object in the form of ``{step: number}``
          defining the width per discrete step. (No x-field is equivalent to having one
          discrete step.)
        * To enable responsive sizing on width, it should be set to ``"container"``.

        **Default value:** Based on ``config.view.continuousWidth`` for a plot with a
        continuous x-field and ``config.view.discreteWidth`` otherwise.

        **Note:** For plots with `row and column channels
        <https://vega.github.io/vega-lite/docs/encoding.html#facet>`__, this represents the
        width of a single view and the ``"container"`` option cannot be used.

        **See also:** `width <https://vega.github.io/vega-lite/docs/size.html>`__
        documentation.
    """

    _schema = {"$ref": "#/definitions/UnitSpecWithFrame"}

    def __init__(
        self,
        mark: Union[
            Union[
                "AnyMark",
                Union[
                    "CompositeMark",
                    Union["BoxPlot", str],
                    Union["ErrorBand", str],
                    Union["ErrorBar", str],
                ],
                Union[
                    "CompositeMarkDef",
                    Union["BoxPlotDef", dict],
                    Union["ErrorBandDef", dict],
                    Union["ErrorBarDef", dict],
                ],
                Union[
                    "Mark",
                    Literal[
                        "arc",
                        "area",
                        "bar",
                        "image",
                        "line",
                        "point",
                        "rect",
                        "rule",
                        "text",
                        "tick",
                        "trail",
                        "circle",
                        "square",
                        "geoshape",
                    ],
                ],
                Union["MarkDef", dict],
            ],
            UndefinedType,
        ] = Undefined,
        data: Union[
            Union[
                None,
                Union[
                    "Data",
                    Union[
                        "DataSource",
                        Union["InlineData", dict],
                        Union["NamedData", dict],
                        Union["UrlData", dict],
                    ],
                    Union[
                        "Generator",
                        Union["GraticuleGenerator", dict],
                        Union["SequenceGenerator", dict],
                        Union["SphereGenerator", dict],
                    ],
                ],
            ],
            UndefinedType,
        ] = Undefined,
        description: Union[str, UndefinedType] = Undefined,
        encoding: Union[Union["Encoding", dict], UndefinedType] = Undefined,
        height: Union[
            Union[Union["Step", dict], float, str], UndefinedType
        ] = Undefined,
        name: Union[str, UndefinedType] = Undefined,
        params: Union[
            Union[List["SelectionParameter"], List[dict]], UndefinedType
        ] = Undefined,
        projection: Union[Union["Projection", dict], UndefinedType] = Undefined,
        title: Union[
            Union[Union["Text", List[str], str], Union["TitleParams", dict]],
            UndefinedType,
        ] = Undefined,
        transform: Union[
            Union[
                List["Transform"],
                List[Union["AggregateTransform", dict]],
                List[Union["BinTransform", dict]],
                List[Union["CalculateTransform", dict]],
                List[Union["DensityTransform", dict]],
                List[Union["ExtentTransform", dict]],
                List[Union["FilterTransform", dict]],
                List[Union["FlattenTransform", dict]],
                List[Union["FoldTransform", dict]],
                List[Union["ImputeTransform", dict]],
                List[Union["JoinAggregateTransform", dict]],
                List[Union["LoessTransform", dict]],
                List[Union["LookupTransform", dict]],
                List[Union["PivotTransform", dict]],
                List[Union["QuantileTransform", dict]],
                List[Union["RegressionTransform", dict]],
                List[Union["SampleTransform", dict]],
                List[Union["StackTransform", dict]],
                List[Union["TimeUnitTransform", dict]],
                List[Union["WindowTransform", dict]],
            ],
            UndefinedType,
        ] = Undefined,
        view: Union[Union["ViewBackground", dict], UndefinedType] = Undefined,
        width: Union[Union[Union["Step", dict], float, str], UndefinedType] = Undefined,
        **kwds
    ):
        super(UnitSpecWithFrame, self).__init__(
            mark=mark,
            data=data,
            description=description,
            encoding=encoding,
            height=height,
            name=name,
            params=params,
            projection=projection,
            title=title,
            transform=transform,
            view=view,
            width=width,
            **kwds
        )


class UrlData(DataSource):
    """UrlData schema wrapper

    Union[:class:`UrlData`, Dict[required=[url]]]

    Parameters
    ----------

    url : str
        An URL from which to load the data set. Use the ``format.type`` property to ensure
        the loaded data is correctly parsed.
    format : Union[:class:`DataFormat`, Union[:class:`CsvDataFormat`, Dict[required=[]]], Union[:class:`DsvDataFormat`, Dict[required=[delimiter]]], Union[:class:`JsonDataFormat`, Dict[required=[]]], Union[:class:`TopoDataFormat`, Dict[required=[]]]]
        An object that specifies the format for parsing the data.
    name : str
        Provide a placeholder name and bind data at runtime.
    """

    _schema = {"$ref": "#/definitions/UrlData"}

    def __init__(
        self,
        url: Union[str, UndefinedType] = Undefined,
        format: Union[
            Union[
                "DataFormat",
                Union["CsvDataFormat", dict],
                Union["DsvDataFormat", dict],
                Union["JsonDataFormat", dict],
                Union["TopoDataFormat", dict],
            ],
            UndefinedType,
        ] = Undefined,
        name: Union[str, UndefinedType] = Undefined,
        **kwds
    ):
        super(UrlData, self).__init__(url=url, format=format, name=name, **kwds)


class UtcMultiTimeUnit(MultiTimeUnit):
    """UtcMultiTimeUnit schema wrapper

    Union[:class:`UtcMultiTimeUnit`, Literal['utcyearquarter', 'utcyearquartermonth',
    'utcyearmonth', 'utcyearmonthdate', 'utcyearmonthdatehours', 'utcyearmonthdatehoursminutes',
    'utcyearmonthdatehoursminutesseconds', 'utcyearweek', 'utcyearweekday',
    'utcyearweekdayhours', 'utcyearweekdayhoursminutes', 'utcyearweekdayhoursminutesseconds',
    'utcyeardayofyear', 'utcquartermonth', 'utcmonthdate', 'utcmonthdatehours',
    'utcmonthdatehoursminutes', 'utcmonthdatehoursminutesseconds', 'utcweekday',
    'utcweeksdayhours', 'utcweekdayhoursminutes', 'utcweekdayhoursminutesseconds',
    'utcdayhours', 'utcdayhoursminutes', 'utcdayhoursminutesseconds', 'utchoursminutes',
    'utchoursminutesseconds', 'utcminutesseconds', 'utcsecondsmilliseconds']]
    """

    _schema = {"$ref": "#/definitions/UtcMultiTimeUnit"}

    def __init__(self, *args):
        super(UtcMultiTimeUnit, self).__init__(*args)


class UtcSingleTimeUnit(SingleTimeUnit):
    """UtcSingleTimeUnit schema wrapper

    Union[:class:`UtcSingleTimeUnit`, Literal['utcyear', 'utcquarter', 'utcmonth', 'utcweek',
    'utcday', 'utcdayofyear', 'utcdate', 'utchours', 'utcminutes', 'utcseconds',
    'utcmilliseconds']]
    """

    _schema = {"$ref": "#/definitions/UtcSingleTimeUnit"}

    def __init__(self, *args):
        super(UtcSingleTimeUnit, self).__init__(*args)


class VConcatSpecGenericSpec(Spec, NonNormalizedSpec):
    """VConcatSpecGenericSpec schema wrapper

    Union[:class:`VConcatSpecGenericSpec`, Dict[required=[vconcat]]]
    Base interface for a vertical concatenation specification.

    Parameters
    ----------

    vconcat : List[Union[:class:`Spec`, Union[:class:`ConcatSpecGenericSpec`, Dict[required=[concat]]], Union[:class:`FacetSpec`, Dict[required=[facet, spec]]], Union[:class:`FacetedUnitSpec`, Dict[required=[mark]]], Union[:class:`HConcatSpecGenericSpec`, Dict[required=[hconcat]]], Union[:class:`LayerSpec`, Dict[required=[layer]]], Union[:class:`RepeatSpec`, Union[:class:`LayerRepeatSpec`, Dict[required=[repeat, spec]]], Union[:class:`NonLayerRepeatSpec`, Dict[required=[repeat, spec]]]], Union[:class:`VConcatSpecGenericSpec`, Dict[required=[vconcat]]]]]
        A list of views to be concatenated and put into a column.
    bounds : Literal['full', 'flush']
        The bounds calculation method to use for determining the extent of a sub-plot. One
        of ``full`` (the default) or ``flush``.


        * If set to ``full``, the entire calculated bounds (including axes, title, and
          legend) will be used.
        * If set to ``flush``, only the specified width and height values for the sub-view
          will be used. The ``flush`` setting can be useful when attempting to place
          sub-plots without axes or legends into a uniform grid structure.

        **Default value:** ``"full"``
    center : bool
        Boolean flag indicating if subviews should be centered relative to their respective
        rows or columns.

        **Default value:** ``false``
    data : Union[None, Union[:class:`Data`, Union[:class:`DataSource`, Union[:class:`InlineData`, Dict[required=[values]]], Union[:class:`NamedData`, Dict[required=[name]]], Union[:class:`UrlData`, Dict[required=[url]]]], Union[:class:`Generator`, Union[:class:`GraticuleGenerator`, Dict[required=[graticule]]], Union[:class:`SequenceGenerator`, Dict[required=[sequence]]], Union[:class:`SphereGenerator`, Dict[required=[sphere]]]]]]
        An object describing the data source. Set to ``null`` to ignore the parent's data
        source. If no data is set, it is derived from the parent.
    description : str
        Description of this mark for commenting purpose.
    name : str
        Name of the visualization for later reference.
    resolve : Union[:class:`Resolve`, Dict[required=[]]]
        Scale, axis, and legend resolutions for view composition specifications.
    spacing : float
        The spacing in pixels between sub-views of the concat operator.

        **Default value** : ``10``
    title : Union[Union[:class:`Text`, List[str], str], Union[:class:`TitleParams`, Dict[required=[text]]]]
        Title for the plot.
    transform : List[Union[:class:`Transform`, Union[:class:`AggregateTransform`, Dict[required=[aggregate]]], Union[:class:`BinTransform`, Dict[required=[bin, field, as]]], Union[:class:`CalculateTransform`, Dict[required=[calculate, as]]], Union[:class:`DensityTransform`, Dict[required=[density]]], Union[:class:`ExtentTransform`, Dict[required=[extent, param]]], Union[:class:`FilterTransform`, Dict[required=[filter]]], Union[:class:`FlattenTransform`, Dict[required=[flatten]]], Union[:class:`FoldTransform`, Dict[required=[fold]]], Union[:class:`ImputeTransform`, Dict[required=[impute, key]]], Union[:class:`JoinAggregateTransform`, Dict[required=[joinaggregate]]], Union[:class:`LoessTransform`, Dict[required=[loess, on]]], Union[:class:`LookupTransform`, Dict[required=[lookup, from]]], Union[:class:`PivotTransform`, Dict[required=[pivot, value]]], Union[:class:`QuantileTransform`, Dict[required=[quantile]]], Union[:class:`RegressionTransform`, Dict[required=[regression, on]]], Union[:class:`SampleTransform`, Dict[required=[sample]]], Union[:class:`StackTransform`, Dict[required=[stack, groupby, as]]], Union[:class:`TimeUnitTransform`, Dict[required=[timeUnit, field, as]]], Union[:class:`WindowTransform`, Dict[required=[window]]]]]
        An array of data transformations such as filter and new field calculation.
    """

    _schema = {"$ref": "#/definitions/VConcatSpec<GenericSpec>"}

    def __init__(
        self,
        vconcat: Union[
            Union[
                List["Spec"],
                List[Union["ConcatSpecGenericSpec", dict]],
                List[Union["FacetSpec", dict]],
                List[Union["FacetedUnitSpec", dict]],
                List[Union["HConcatSpecGenericSpec", dict]],
                List[Union["LayerSpec", dict]],
                List[
                    Union[
                        "RepeatSpec",
                        Union["LayerRepeatSpec", dict],
                        Union["NonLayerRepeatSpec", dict],
                    ]
                ],
                List[Union["VConcatSpecGenericSpec", dict]],
            ],
            UndefinedType,
        ] = Undefined,
        bounds: Union[Literal["full", "flush"], UndefinedType] = Undefined,
        center: Union[bool, UndefinedType] = Undefined,
        data: Union[
            Union[
                None,
                Union[
                    "Data",
                    Union[
                        "DataSource",
                        Union["InlineData", dict],
                        Union["NamedData", dict],
                        Union["UrlData", dict],
                    ],
                    Union[
                        "Generator",
                        Union["GraticuleGenerator", dict],
                        Union["SequenceGenerator", dict],
                        Union["SphereGenerator", dict],
                    ],
                ],
            ],
            UndefinedType,
        ] = Undefined,
        description: Union[str, UndefinedType] = Undefined,
        name: Union[str, UndefinedType] = Undefined,
        resolve: Union[Union["Resolve", dict], UndefinedType] = Undefined,
        spacing: Union[float, UndefinedType] = Undefined,
        title: Union[
            Union[Union["Text", List[str], str], Union["TitleParams", dict]],
            UndefinedType,
        ] = Undefined,
        transform: Union[
            Union[
                List["Transform"],
                List[Union["AggregateTransform", dict]],
                List[Union["BinTransform", dict]],
                List[Union["CalculateTransform", dict]],
                List[Union["DensityTransform", dict]],
                List[Union["ExtentTransform", dict]],
                List[Union["FilterTransform", dict]],
                List[Union["FlattenTransform", dict]],
                List[Union["FoldTransform", dict]],
                List[Union["ImputeTransform", dict]],
                List[Union["JoinAggregateTransform", dict]],
                List[Union["LoessTransform", dict]],
                List[Union["LookupTransform", dict]],
                List[Union["PivotTransform", dict]],
                List[Union["QuantileTransform", dict]],
                List[Union["RegressionTransform", dict]],
                List[Union["SampleTransform", dict]],
                List[Union["StackTransform", dict]],
                List[Union["TimeUnitTransform", dict]],
                List[Union["WindowTransform", dict]],
            ],
            UndefinedType,
        ] = Undefined,
        **kwds
    ):
        super(VConcatSpecGenericSpec, self).__init__(
            vconcat=vconcat,
            bounds=bounds,
            center=center,
            data=data,
            description=description,
            name=name,
            resolve=resolve,
            spacing=spacing,
            title=title,
            transform=transform,
            **kwds
        )


class ValueDefWithConditionMarkPropFieldOrDatumDefGradientstringnull(
    ColorDef, MarkPropDefGradientstringnull
):
    """ValueDefWithConditionMarkPropFieldOrDatumDefGradientstringnull schema wrapper

    Union[:class:`ValueDefWithConditionMarkPropFieldOrDatumDefGradientstringnull`,
    Dict[required=[]]]

    Parameters
    ----------

    condition : Union[List[Union[:class:`ConditionalValueDefGradientstringnullExprRef`, Union[:class:`ConditionalParameterValueDefGradientstringnullExprRef`, Dict[required=[param, value]]], Union[:class:`ConditionalPredicateValueDefGradientstringnullExprRef`, Dict[required=[test, value]]]]], Union[:class:`ConditionalMarkPropFieldOrDatumDef`, Union[:class:`ConditionalParameterMarkPropFieldOrDatumDef`, Dict[required=[param]]], Union[:class:`ConditionalPredicateMarkPropFieldOrDatumDef`, Dict[required=[test]]]], Union[:class:`ConditionalValueDefGradientstringnullExprRef`, Union[:class:`ConditionalParameterValueDefGradientstringnullExprRef`, Dict[required=[param, value]]], Union[:class:`ConditionalPredicateValueDefGradientstringnullExprRef`, Dict[required=[test, value]]]]]
        A field definition or one or more value definition(s) with a parameter predicate.
    value : Union[None, Union[:class:`ExprRef`, Dict[required=[expr]]], Union[:class:`Gradient`, Union[:class:`LinearGradient`, Dict[required=[gradient, stops]]], Union[:class:`RadialGradient`, Dict[required=[gradient, stops]]]], str]
        A constant value in visual domain (e.g., ``"red"`` / ``"#0099ff"`` / `gradient
        definition <https://vega.github.io/vega-lite/docs/types.html#gradient>`__ for color,
        values between ``0`` to ``1`` for opacity).
    """

    _schema = {
        "$ref": "#/definitions/ValueDefWithCondition<MarkPropFieldOrDatumDef,(Gradient|string|null)>"
    }

    def __init__(
        self,
        condition: Union[
            Union[
                Union[
                    "ConditionalMarkPropFieldOrDatumDef",
                    Union["ConditionalParameterMarkPropFieldOrDatumDef", dict],
                    Union["ConditionalPredicateMarkPropFieldOrDatumDef", dict],
                ],
                Union[
                    "ConditionalValueDefGradientstringnullExprRef",
                    Union[
                        "ConditionalParameterValueDefGradientstringnullExprRef", dict
                    ],
                    Union[
                        "ConditionalPredicateValueDefGradientstringnullExprRef", dict
                    ],
                ],
                Union[
                    List["ConditionalValueDefGradientstringnullExprRef"],
                    List[
                        Union[
                            "ConditionalParameterValueDefGradientstringnullExprRef",
                            dict,
                        ]
                    ],
                    List[
                        Union[
                            "ConditionalPredicateValueDefGradientstringnullExprRef",
                            dict,
                        ]
                    ],
                ],
            ],
            UndefinedType,
        ] = Undefined,
        value: Union[
            Union[
                None,
                Union["ExprRef", "_ParameterProtocol", dict],
                Union[
                    "Gradient",
                    Union["LinearGradient", dict],
                    Union["RadialGradient", dict],
                ],
                str,
            ],
            UndefinedType,
        ] = Undefined,
        **kwds
    ):
        super(
            ValueDefWithConditionMarkPropFieldOrDatumDefGradientstringnull, self
        ).__init__(condition=condition, value=value, **kwds)


class ValueDefWithConditionMarkPropFieldOrDatumDefTypeForShapestringnull(
    MarkPropDefstringnullTypeForShape, ShapeDef
):
    """ValueDefWithConditionMarkPropFieldOrDatumDefTypeForShapestringnull schema wrapper

    Union[:class:`ValueDefWithConditionMarkPropFieldOrDatumDefTypeForShapestringnull`,
    Dict[required=[]]]

    Parameters
    ----------

    condition : Union[List[Union[:class:`ConditionalValueDefstringnullExprRef`, Union[:class:`ConditionalParameterValueDefstringnullExprRef`, Dict[required=[param, value]]], Union[:class:`ConditionalPredicateValueDefstringnullExprRef`, Dict[required=[test, value]]]]], Union[:class:`ConditionalMarkPropFieldOrDatumDefTypeForShape`, Union[:class:`ConditionalParameterMarkPropFieldOrDatumDefTypeForShape`, Dict[required=[param]]], Union[:class:`ConditionalPredicateMarkPropFieldOrDatumDefTypeForShape`, Dict[required=[test]]]], Union[:class:`ConditionalValueDefstringnullExprRef`, Union[:class:`ConditionalParameterValueDefstringnullExprRef`, Dict[required=[param, value]]], Union[:class:`ConditionalPredicateValueDefstringnullExprRef`, Dict[required=[test, value]]]]]
        A field definition or one or more value definition(s) with a parameter predicate.
    value : Union[None, Union[:class:`ExprRef`, Dict[required=[expr]]], str]
        A constant value in visual domain (e.g., ``"red"`` / ``"#0099ff"`` / `gradient
        definition <https://vega.github.io/vega-lite/docs/types.html#gradient>`__ for color,
        values between ``0`` to ``1`` for opacity).
    """

    _schema = {
        "$ref": "#/definitions/ValueDefWithCondition<MarkPropFieldOrDatumDef<TypeForShape>,(string|null)>"
    }

    def __init__(
        self,
        condition: Union[
            Union[
                Union[
                    "ConditionalMarkPropFieldOrDatumDefTypeForShape",
                    Union[
                        "ConditionalParameterMarkPropFieldOrDatumDefTypeForShape", dict
                    ],
                    Union[
                        "ConditionalPredicateMarkPropFieldOrDatumDefTypeForShape", dict
                    ],
                ],
                Union[
                    "ConditionalValueDefstringnullExprRef",
                    Union["ConditionalParameterValueDefstringnullExprRef", dict],
                    Union["ConditionalPredicateValueDefstringnullExprRef", dict],
                ],
                Union[
                    List["ConditionalValueDefstringnullExprRef"],
                    List[Union["ConditionalParameterValueDefstringnullExprRef", dict]],
                    List[Union["ConditionalPredicateValueDefstringnullExprRef", dict]],
                ],
            ],
            UndefinedType,
        ] = Undefined,
        value: Union[
            Union[None, Union["ExprRef", "_ParameterProtocol", dict], str],
            UndefinedType,
        ] = Undefined,
        **kwds
    ):
        super(
            ValueDefWithConditionMarkPropFieldOrDatumDefTypeForShapestringnull, self
        ).__init__(condition=condition, value=value, **kwds)


class ValueDefWithConditionMarkPropFieldOrDatumDefnumber(
    MarkPropDefnumber, NumericMarkPropDef
):
    """ValueDefWithConditionMarkPropFieldOrDatumDefnumber schema wrapper

    Union[:class:`ValueDefWithConditionMarkPropFieldOrDatumDefnumber`, Dict[required=[]]]

    Parameters
    ----------

    condition : Union[List[Union[:class:`ConditionalValueDefnumberExprRef`, Union[:class:`ConditionalParameterValueDefnumberExprRef`, Dict[required=[param, value]]], Union[:class:`ConditionalPredicateValueDefnumberExprRef`, Dict[required=[test, value]]]]], Union[:class:`ConditionalMarkPropFieldOrDatumDef`, Union[:class:`ConditionalParameterMarkPropFieldOrDatumDef`, Dict[required=[param]]], Union[:class:`ConditionalPredicateMarkPropFieldOrDatumDef`, Dict[required=[test]]]], Union[:class:`ConditionalValueDefnumberExprRef`, Union[:class:`ConditionalParameterValueDefnumberExprRef`, Dict[required=[param, value]]], Union[:class:`ConditionalPredicateValueDefnumberExprRef`, Dict[required=[test, value]]]]]
        A field definition or one or more value definition(s) with a parameter predicate.
    value : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], float]
        A constant value in visual domain (e.g., ``"red"`` / ``"#0099ff"`` / `gradient
        definition <https://vega.github.io/vega-lite/docs/types.html#gradient>`__ for color,
        values between ``0`` to ``1`` for opacity).
    """

    _schema = {
        "$ref": "#/definitions/ValueDefWithCondition<MarkPropFieldOrDatumDef,number>"
    }

    def __init__(
        self,
        condition: Union[
            Union[
                Union[
                    "ConditionalMarkPropFieldOrDatumDef",
                    Union["ConditionalParameterMarkPropFieldOrDatumDef", dict],
                    Union["ConditionalPredicateMarkPropFieldOrDatumDef", dict],
                ],
                Union[
                    "ConditionalValueDefnumberExprRef",
                    Union["ConditionalParameterValueDefnumberExprRef", dict],
                    Union["ConditionalPredicateValueDefnumberExprRef", dict],
                ],
                Union[
                    List["ConditionalValueDefnumberExprRef"],
                    List[Union["ConditionalParameterValueDefnumberExprRef", dict]],
                    List[Union["ConditionalPredicateValueDefnumberExprRef", dict]],
                ],
            ],
            UndefinedType,
        ] = Undefined,
        value: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], float], UndefinedType
        ] = Undefined,
        **kwds
    ):
        super(ValueDefWithConditionMarkPropFieldOrDatumDefnumber, self).__init__(
            condition=condition, value=value, **kwds
        )


class ValueDefWithConditionMarkPropFieldOrDatumDefnumberArray(
    MarkPropDefnumberArray, NumericArrayMarkPropDef
):
    """ValueDefWithConditionMarkPropFieldOrDatumDefnumberArray schema wrapper

    Union[:class:`ValueDefWithConditionMarkPropFieldOrDatumDefnumberArray`, Dict[required=[]]]

    Parameters
    ----------

    condition : Union[List[Union[:class:`ConditionalValueDefnumberArrayExprRef`, Union[:class:`ConditionalParameterValueDefnumberArrayExprRef`, Dict[required=[param, value]]], Union[:class:`ConditionalPredicateValueDefnumberArrayExprRef`, Dict[required=[test, value]]]]], Union[:class:`ConditionalMarkPropFieldOrDatumDef`, Union[:class:`ConditionalParameterMarkPropFieldOrDatumDef`, Dict[required=[param]]], Union[:class:`ConditionalPredicateMarkPropFieldOrDatumDef`, Dict[required=[test]]]], Union[:class:`ConditionalValueDefnumberArrayExprRef`, Union[:class:`ConditionalParameterValueDefnumberArrayExprRef`, Dict[required=[param, value]]], Union[:class:`ConditionalPredicateValueDefnumberArrayExprRef`, Dict[required=[test, value]]]]]
        A field definition or one or more value definition(s) with a parameter predicate.
    value : Union[List[float], Union[:class:`ExprRef`, Dict[required=[expr]]]]
        A constant value in visual domain (e.g., ``"red"`` / ``"#0099ff"`` / `gradient
        definition <https://vega.github.io/vega-lite/docs/types.html#gradient>`__ for color,
        values between ``0`` to ``1`` for opacity).
    """

    _schema = {
        "$ref": "#/definitions/ValueDefWithCondition<MarkPropFieldOrDatumDef,number[]>"
    }

    def __init__(
        self,
        condition: Union[
            Union[
                Union[
                    "ConditionalMarkPropFieldOrDatumDef",
                    Union["ConditionalParameterMarkPropFieldOrDatumDef", dict],
                    Union["ConditionalPredicateMarkPropFieldOrDatumDef", dict],
                ],
                Union[
                    "ConditionalValueDefnumberArrayExprRef",
                    Union["ConditionalParameterValueDefnumberArrayExprRef", dict],
                    Union["ConditionalPredicateValueDefnumberArrayExprRef", dict],
                ],
                Union[
                    List["ConditionalValueDefnumberArrayExprRef"],
                    List[Union["ConditionalParameterValueDefnumberArrayExprRef", dict]],
                    List[Union["ConditionalPredicateValueDefnumberArrayExprRef", dict]],
                ],
            ],
            UndefinedType,
        ] = Undefined,
        value: Union[
            Union[List[float], Union["ExprRef", "_ParameterProtocol", dict]],
            UndefinedType,
        ] = Undefined,
        **kwds
    ):
        super(ValueDefWithConditionMarkPropFieldOrDatumDefnumberArray, self).__init__(
            condition=condition, value=value, **kwds
        )


class ValueDefWithConditionMarkPropFieldOrDatumDefstringnull(VegaLiteSchema):
    """ValueDefWithConditionMarkPropFieldOrDatumDefstringnull schema wrapper

    Union[:class:`ValueDefWithConditionMarkPropFieldOrDatumDefstringnull`, Dict[required=[]]]

    Parameters
    ----------

    condition : Union[List[Union[:class:`ConditionalValueDefstringnullExprRef`, Union[:class:`ConditionalParameterValueDefstringnullExprRef`, Dict[required=[param, value]]], Union[:class:`ConditionalPredicateValueDefstringnullExprRef`, Dict[required=[test, value]]]]], Union[:class:`ConditionalMarkPropFieldOrDatumDef`, Union[:class:`ConditionalParameterMarkPropFieldOrDatumDef`, Dict[required=[param]]], Union[:class:`ConditionalPredicateMarkPropFieldOrDatumDef`, Dict[required=[test]]]], Union[:class:`ConditionalValueDefstringnullExprRef`, Union[:class:`ConditionalParameterValueDefstringnullExprRef`, Dict[required=[param, value]]], Union[:class:`ConditionalPredicateValueDefstringnullExprRef`, Dict[required=[test, value]]]]]
        A field definition or one or more value definition(s) with a parameter predicate.
    value : Union[None, Union[:class:`ExprRef`, Dict[required=[expr]]], str]
        A constant value in visual domain (e.g., ``"red"`` / ``"#0099ff"`` / `gradient
        definition <https://vega.github.io/vega-lite/docs/types.html#gradient>`__ for color,
        values between ``0`` to ``1`` for opacity).
    """

    _schema = {
        "$ref": "#/definitions/ValueDefWithCondition<MarkPropFieldOrDatumDef,(string|null)>"
    }

    def __init__(
        self,
        condition: Union[
            Union[
                Union[
                    "ConditionalMarkPropFieldOrDatumDef",
                    Union["ConditionalParameterMarkPropFieldOrDatumDef", dict],
                    Union["ConditionalPredicateMarkPropFieldOrDatumDef", dict],
                ],
                Union[
                    "ConditionalValueDefstringnullExprRef",
                    Union["ConditionalParameterValueDefstringnullExprRef", dict],
                    Union["ConditionalPredicateValueDefstringnullExprRef", dict],
                ],
                Union[
                    List["ConditionalValueDefstringnullExprRef"],
                    List[Union["ConditionalParameterValueDefstringnullExprRef", dict]],
                    List[Union["ConditionalPredicateValueDefstringnullExprRef", dict]],
                ],
            ],
            UndefinedType,
        ] = Undefined,
        value: Union[
            Union[None, Union["ExprRef", "_ParameterProtocol", dict], str],
            UndefinedType,
        ] = Undefined,
        **kwds
    ):
        super(ValueDefWithConditionMarkPropFieldOrDatumDefstringnull, self).__init__(
            condition=condition, value=value, **kwds
        )


class ValueDefWithConditionStringFieldDefText(TextDef):
    """ValueDefWithConditionStringFieldDefText schema wrapper

    Union[:class:`ValueDefWithConditionStringFieldDefText`, Dict[required=[]]]

    Parameters
    ----------

    condition : Union[List[Union[:class:`ConditionalValueDefTextExprRef`, Union[:class:`ConditionalParameterValueDefTextExprRef`, Dict[required=[param, value]]], Union[:class:`ConditionalPredicateValueDefTextExprRef`, Dict[required=[test, value]]]]], Union[:class:`ConditionalStringFieldDef`, Union[:class:`ConditionalParameterStringFieldDef`, Dict[required=[param]]], Union[:class:`ConditionalPredicateStringFieldDef`, Dict[required=[test]]]], Union[:class:`ConditionalValueDefTextExprRef`, Union[:class:`ConditionalParameterValueDefTextExprRef`, Dict[required=[param, value]]], Union[:class:`ConditionalPredicateValueDefTextExprRef`, Dict[required=[test, value]]]]]
        A field definition or one or more value definition(s) with a parameter predicate.
    value : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], Union[:class:`Text`, List[str], str]]
        A constant value in visual domain (e.g., ``"red"`` / ``"#0099ff"`` / `gradient
        definition <https://vega.github.io/vega-lite/docs/types.html#gradient>`__ for color,
        values between ``0`` to ``1`` for opacity).
    """

    _schema = {"$ref": "#/definitions/ValueDefWithCondition<StringFieldDef,Text>"}

    def __init__(
        self,
        condition: Union[
            Union[
                Union[
                    "ConditionalStringFieldDef",
                    Union["ConditionalParameterStringFieldDef", dict],
                    Union["ConditionalPredicateStringFieldDef", dict],
                ],
                Union[
                    "ConditionalValueDefTextExprRef",
                    Union["ConditionalParameterValueDefTextExprRef", dict],
                    Union["ConditionalPredicateValueDefTextExprRef", dict],
                ],
                Union[
                    List["ConditionalValueDefTextExprRef"],
                    List[Union["ConditionalParameterValueDefTextExprRef", dict]],
                    List[Union["ConditionalPredicateValueDefTextExprRef", dict]],
                ],
            ],
            UndefinedType,
        ] = Undefined,
        value: Union[
            Union[
                Union["ExprRef", "_ParameterProtocol", dict],
                Union["Text", List[str], str],
            ],
            UndefinedType,
        ] = Undefined,
        **kwds
    ):
        super(ValueDefWithConditionStringFieldDefText, self).__init__(
            condition=condition, value=value, **kwds
        )


class ValueDefnumber(OffsetDef):
    """ValueDefnumber schema wrapper

    Union[:class:`ValueDefnumber`, Dict[required=[value]]]
    Definition object for a constant value (primitive value or gradient definition) of an
    encoding channel.

    Parameters
    ----------

    value : float
        A constant value in visual domain (e.g., ``"red"`` / ``"#0099ff"`` / `gradient
        definition <https://vega.github.io/vega-lite/docs/types.html#gradient>`__ for color,
        values between ``0`` to ``1`` for opacity).
    """

    _schema = {"$ref": "#/definitions/ValueDef<number>"}

    def __init__(self, value: Union[float, UndefinedType] = Undefined, **kwds):
        super(ValueDefnumber, self).__init__(value=value, **kwds)


class ValueDefnumberwidthheightExprRef(VegaLiteSchema):
    """ValueDefnumberwidthheightExprRef schema wrapper

    Union[:class:`ValueDefnumberwidthheightExprRef`, Dict[required=[value]]]
    Definition object for a constant value (primitive value or gradient definition) of an
    encoding channel.

    Parameters
    ----------

    value : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], float, str]
        A constant value in visual domain (e.g., ``"red"`` / ``"#0099ff"`` / `gradient
        definition <https://vega.github.io/vega-lite/docs/types.html#gradient>`__ for color,
        values between ``0`` to ``1`` for opacity).
    """

    _schema = {"$ref": '#/definitions/ValueDef<(number|"width"|"height"|ExprRef)>'}

    def __init__(
        self,
        value: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], float, str],
            UndefinedType,
        ] = Undefined,
        **kwds
    ):
        super(ValueDefnumberwidthheightExprRef, self).__init__(value=value, **kwds)


class VariableParameter(TopLevelParameter):
    """VariableParameter schema wrapper

    Union[:class:`VariableParameter`, Dict[required=[name]]]

    Parameters
    ----------

    name : Union[:class:`ParameterName`, str]
        A unique name for the variable parameter. Parameter names should be valid JavaScript
        identifiers: they should contain only alphanumeric characters (or "$", or "_") and
        may not start with a digit. Reserved keywords that may not be used as parameter
        names are "datum", "event", "item", and "parent".
    bind : Union[:class:`Binding`, Union[:class:`BindCheckbox`, Dict[required=[input]]], Union[:class:`BindDirect`, Dict[required=[element]]], Union[:class:`BindInput`, Dict[required=[]]], Union[:class:`BindRadioSelect`, Dict[required=[input, options]]], Union[:class:`BindRange`, Dict[required=[input]]]]
        Binds the parameter to an external input element such as a slider, selection list or
        radio button group.
    expr : Union[:class:`Expr`, str]
        An expression for the value of the parameter. This expression may include other
        parameters, in which case the parameter will automatically update in response to
        upstream parameter changes.
    value : Any
        The `initial value <http://vega.github.io/vega-lite/docs/value.html>`__ of the
        parameter.

        **Default value:** ``undefined``
    """

    _schema = {"$ref": "#/definitions/VariableParameter"}

    def __init__(
        self,
        name: Union[Union["ParameterName", str], UndefinedType] = Undefined,
        bind: Union[
            Union[
                "Binding",
                Union["BindCheckbox", dict],
                Union["BindDirect", dict],
                Union["BindInput", dict],
                Union["BindRadioSelect", dict],
                Union["BindRange", dict],
            ],
            UndefinedType,
        ] = Undefined,
        expr: Union[Union["Expr", str], UndefinedType] = Undefined,
        value: Union[Any, UndefinedType] = Undefined,
        **kwds
    ):
        super(VariableParameter, self).__init__(
            name=name, bind=bind, expr=expr, value=value, **kwds
        )


class Vector10string(VegaLiteSchema):
    """Vector10string schema wrapper

    Union[:class:`Vector10string`, List[str]]
    """

    _schema = {"$ref": "#/definitions/Vector10<string>"}

    def __init__(self, *args):
        super(Vector10string, self).__init__(*args)


class Vector12string(VegaLiteSchema):
    """Vector12string schema wrapper

    Union[:class:`Vector12string`, List[str]]
    """

    _schema = {"$ref": "#/definitions/Vector12<string>"}

    def __init__(self, *args):
        super(Vector12string, self).__init__(*args)


class Vector2DateTime(SelectionInitInterval):
    """Vector2DateTime schema wrapper

    Union[:class:`Vector2DateTime`, List[Union[:class:`DateTime`, Dict[required=[]]]]]
    """

    _schema = {"$ref": "#/definitions/Vector2<DateTime>"}

    def __init__(self, *args):
        super(Vector2DateTime, self).__init__(*args)


class Vector2Vector2number(VegaLiteSchema):
    """Vector2Vector2number schema wrapper

    Union[:class:`Vector2Vector2number`, List[Union[:class:`Vector2number`, List[float]]]]
    """

    _schema = {"$ref": "#/definitions/Vector2<Vector2<number>>"}

    def __init__(self, *args):
        super(Vector2Vector2number, self).__init__(*args)


class Vector2boolean(SelectionInitInterval):
    """Vector2boolean schema wrapper

    Union[:class:`Vector2boolean`, List[bool]]
    """

    _schema = {"$ref": "#/definitions/Vector2<boolean>"}

    def __init__(self, *args):
        super(Vector2boolean, self).__init__(*args)


class Vector2number(SelectionInitInterval):
    """Vector2number schema wrapper

    Union[:class:`Vector2number`, List[float]]
    """

    _schema = {"$ref": "#/definitions/Vector2<number>"}

    def __init__(self, *args):
        super(Vector2number, self).__init__(*args)


class Vector2string(SelectionInitInterval):
    """Vector2string schema wrapper

    Union[:class:`Vector2string`, List[str]]
    """

    _schema = {"$ref": "#/definitions/Vector2<string>"}

    def __init__(self, *args):
        super(Vector2string, self).__init__(*args)


class Vector3number(VegaLiteSchema):
    """Vector3number schema wrapper

    Union[:class:`Vector3number`, List[float]]
    """

    _schema = {"$ref": "#/definitions/Vector3<number>"}

    def __init__(self, *args):
        super(Vector3number, self).__init__(*args)


class Vector7string(VegaLiteSchema):
    """Vector7string schema wrapper

    Union[:class:`Vector7string`, List[str]]
    """

    _schema = {"$ref": "#/definitions/Vector7<string>"}

    def __init__(self, *args):
        super(Vector7string, self).__init__(*args)


class ViewBackground(VegaLiteSchema):
    """ViewBackground schema wrapper

    Union[:class:`ViewBackground`, Dict[required=[]]]

    Parameters
    ----------

    cornerRadius : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], float]
        The radius in pixels of rounded rectangles or arcs' corners.

        **Default value:** ``0``
    cursor : Union[:class:`Cursor`, Literal['auto', 'default', 'none', 'context-menu', 'help', 'pointer', 'progress', 'wait', 'cell', 'crosshair', 'text', 'vertical-text', 'alias', 'copy', 'move', 'no-drop', 'not-allowed', 'e-resize', 'n-resize', 'ne-resize', 'nw-resize', 's-resize', 'se-resize', 'sw-resize', 'w-resize', 'ew-resize', 'ns-resize', 'nesw-resize', 'nwse-resize', 'col-resize', 'row-resize', 'all-scroll', 'zoom-in', 'zoom-out', 'grab', 'grabbing']]
        The mouse cursor used over the view. Any valid `CSS cursor type
        <https://developer.mozilla.org/en-US/docs/Web/CSS/cursor#Values>`__ can be used.
    fill : Union[None, Union[:class:`Color`, Union[:class:`ColorName`, Literal['black', 'silver', 'gray', 'white', 'maroon', 'red', 'purple', 'fuchsia', 'green', 'lime', 'olive', 'yellow', 'navy', 'blue', 'teal', 'aqua', 'orange', 'aliceblue', 'antiquewhite', 'aquamarine', 'azure', 'beige', 'bisque', 'blanchedalmond', 'blueviolet', 'brown', 'burlywood', 'cadetblue', 'chartreuse', 'chocolate', 'coral', 'cornflowerblue', 'cornsilk', 'crimson', 'cyan', 'darkblue', 'darkcyan', 'darkgoldenrod', 'darkgray', 'darkgreen', 'darkgrey', 'darkkhaki', 'darkmagenta', 'darkolivegreen', 'darkorange', 'darkorchid', 'darkred', 'darksalmon', 'darkseagreen', 'darkslateblue', 'darkslategray', 'darkslategrey', 'darkturquoise', 'darkviolet', 'deeppink', 'deepskyblue', 'dimgray', 'dimgrey', 'dodgerblue', 'firebrick', 'floralwhite', 'forestgreen', 'gainsboro', 'ghostwhite', 'gold', 'goldenrod', 'greenyellow', 'grey', 'honeydew', 'hotpink', 'indianred', 'indigo', 'ivory', 'khaki', 'lavender', 'lavenderblush', 'lawngreen', 'lemonchiffon', 'lightblue', 'lightcoral', 'lightcyan', 'lightgoldenrodyellow', 'lightgray', 'lightgreen', 'lightgrey', 'lightpink', 'lightsalmon', 'lightseagreen', 'lightskyblue', 'lightslategray', 'lightslategrey', 'lightsteelblue', 'lightyellow', 'limegreen', 'linen', 'magenta', 'mediumaquamarine', 'mediumblue', 'mediumorchid', 'mediumpurple', 'mediumseagreen', 'mediumslateblue', 'mediumspringgreen', 'mediumturquoise', 'mediumvioletred', 'midnightblue', 'mintcream', 'mistyrose', 'moccasin', 'navajowhite', 'oldlace', 'olivedrab', 'orangered', 'orchid', 'palegoldenrod', 'palegreen', 'paleturquoise', 'palevioletred', 'papayawhip', 'peachpuff', 'peru', 'pink', 'plum', 'powderblue', 'rosybrown', 'royalblue', 'saddlebrown', 'salmon', 'sandybrown', 'seagreen', 'seashell', 'sienna', 'skyblue', 'slateblue', 'slategray', 'slategrey', 'snow', 'springgreen', 'steelblue', 'tan', 'thistle', 'tomato', 'turquoise', 'violet', 'wheat', 'whitesmoke', 'yellowgreen', 'rebeccapurple']], Union[:class:`HexColor`, str], str], Union[:class:`ExprRef`, Dict[required=[expr]]]]
        The fill color.

        **Default value:** ``undefined``
    fillOpacity : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], float]
        The fill opacity (value between [0,1]).

        **Default value:** ``1``
    opacity : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], float]
        The overall opacity (value between [0,1]).

        **Default value:** ``0.7`` for non-aggregate plots with ``point``, ``tick``,
        ``circle``, or ``square`` marks or layered ``bar`` charts and ``1`` otherwise.
    stroke : Union[None, Union[:class:`Color`, Union[:class:`ColorName`, Literal['black', 'silver', 'gray', 'white', 'maroon', 'red', 'purple', 'fuchsia', 'green', 'lime', 'olive', 'yellow', 'navy', 'blue', 'teal', 'aqua', 'orange', 'aliceblue', 'antiquewhite', 'aquamarine', 'azure', 'beige', 'bisque', 'blanchedalmond', 'blueviolet', 'brown', 'burlywood', 'cadetblue', 'chartreuse', 'chocolate', 'coral', 'cornflowerblue', 'cornsilk', 'crimson', 'cyan', 'darkblue', 'darkcyan', 'darkgoldenrod', 'darkgray', 'darkgreen', 'darkgrey', 'darkkhaki', 'darkmagenta', 'darkolivegreen', 'darkorange', 'darkorchid', 'darkred', 'darksalmon', 'darkseagreen', 'darkslateblue', 'darkslategray', 'darkslategrey', 'darkturquoise', 'darkviolet', 'deeppink', 'deepskyblue', 'dimgray', 'dimgrey', 'dodgerblue', 'firebrick', 'floralwhite', 'forestgreen', 'gainsboro', 'ghostwhite', 'gold', 'goldenrod', 'greenyellow', 'grey', 'honeydew', 'hotpink', 'indianred', 'indigo', 'ivory', 'khaki', 'lavender', 'lavenderblush', 'lawngreen', 'lemonchiffon', 'lightblue', 'lightcoral', 'lightcyan', 'lightgoldenrodyellow', 'lightgray', 'lightgreen', 'lightgrey', 'lightpink', 'lightsalmon', 'lightseagreen', 'lightskyblue', 'lightslategray', 'lightslategrey', 'lightsteelblue', 'lightyellow', 'limegreen', 'linen', 'magenta', 'mediumaquamarine', 'mediumblue', 'mediumorchid', 'mediumpurple', 'mediumseagreen', 'mediumslateblue', 'mediumspringgreen', 'mediumturquoise', 'mediumvioletred', 'midnightblue', 'mintcream', 'mistyrose', 'moccasin', 'navajowhite', 'oldlace', 'olivedrab', 'orangered', 'orchid', 'palegoldenrod', 'palegreen', 'paleturquoise', 'palevioletred', 'papayawhip', 'peachpuff', 'peru', 'pink', 'plum', 'powderblue', 'rosybrown', 'royalblue', 'saddlebrown', 'salmon', 'sandybrown', 'seagreen', 'seashell', 'sienna', 'skyblue', 'slateblue', 'slategray', 'slategrey', 'snow', 'springgreen', 'steelblue', 'tan', 'thistle', 'tomato', 'turquoise', 'violet', 'wheat', 'whitesmoke', 'yellowgreen', 'rebeccapurple']], Union[:class:`HexColor`, str], str], Union[:class:`ExprRef`, Dict[required=[expr]]]]
        The stroke color.

        **Default value:** ``"#ddd"``
    strokeCap : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], Union[:class:`StrokeCap`, Literal['butt', 'round', 'square']]]
        The stroke cap for line ending style. One of ``"butt"``, ``"round"``, or
        ``"square"``.

        **Default value:** ``"butt"``
    strokeDash : Union[List[float], Union[:class:`ExprRef`, Dict[required=[expr]]]]
        An array of alternating stroke, space lengths for creating dashed or dotted lines.
    strokeDashOffset : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], float]
        The offset (in pixels) into which to begin drawing with the stroke dash array.
    strokeJoin : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], Union[:class:`StrokeJoin`, Literal['miter', 'round', 'bevel']]]
        The stroke line join method. One of ``"miter"``, ``"round"`` or ``"bevel"``.

        **Default value:** ``"miter"``
    strokeMiterLimit : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], float]
        The miter limit at which to bevel a line join.
    strokeOpacity : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], float]
        The stroke opacity (value between [0,1]).

        **Default value:** ``1``
    strokeWidth : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], float]
        The stroke width, in pixels.
    style : Union[List[str], str]
        A string or array of strings indicating the name of custom styles to apply to the
        view background. A style is a named collection of mark property defaults defined
        within the `style configuration
        <https://vega.github.io/vega-lite/docs/mark.html#style-config>`__. If style is an
        array, later styles will override earlier styles.

        **Default value:** ``"cell"`` **Note:** Any specified view background properties
        will augment the default style.
    """

    _schema = {"$ref": "#/definitions/ViewBackground"}

    def __init__(
        self,
        cornerRadius: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], float], UndefinedType
        ] = Undefined,
        cursor: Union[
            Union[
                "Cursor",
                Literal[
                    "auto",
                    "default",
                    "none",
                    "context-menu",
                    "help",
                    "pointer",
                    "progress",
                    "wait",
                    "cell",
                    "crosshair",
                    "text",
                    "vertical-text",
                    "alias",
                    "copy",
                    "move",
                    "no-drop",
                    "not-allowed",
                    "e-resize",
                    "n-resize",
                    "ne-resize",
                    "nw-resize",
                    "s-resize",
                    "se-resize",
                    "sw-resize",
                    "w-resize",
                    "ew-resize",
                    "ns-resize",
                    "nesw-resize",
                    "nwse-resize",
                    "col-resize",
                    "row-resize",
                    "all-scroll",
                    "zoom-in",
                    "zoom-out",
                    "grab",
                    "grabbing",
                ],
            ],
            UndefinedType,
        ] = Undefined,
        fill: Union[
            Union[
                None,
                Union[
                    "Color",
                    Union[
                        "ColorName",
                        Literal[
                            "black",
                            "silver",
                            "gray",
                            "white",
                            "maroon",
                            "red",
                            "purple",
                            "fuchsia",
                            "green",
                            "lime",
                            "olive",
                            "yellow",
                            "navy",
                            "blue",
                            "teal",
                            "aqua",
                            "orange",
                            "aliceblue",
                            "antiquewhite",
                            "aquamarine",
                            "azure",
                            "beige",
                            "bisque",
                            "blanchedalmond",
                            "blueviolet",
                            "brown",
                            "burlywood",
                            "cadetblue",
                            "chartreuse",
                            "chocolate",
                            "coral",
                            "cornflowerblue",
                            "cornsilk",
                            "crimson",
                            "cyan",
                            "darkblue",
                            "darkcyan",
                            "darkgoldenrod",
                            "darkgray",
                            "darkgreen",
                            "darkgrey",
                            "darkkhaki",
                            "darkmagenta",
                            "darkolivegreen",
                            "darkorange",
                            "darkorchid",
                            "darkred",
                            "darksalmon",
                            "darkseagreen",
                            "darkslateblue",
                            "darkslategray",
                            "darkslategrey",
                            "darkturquoise",
                            "darkviolet",
                            "deeppink",
                            "deepskyblue",
                            "dimgray",
                            "dimgrey",
                            "dodgerblue",
                            "firebrick",
                            "floralwhite",
                            "forestgreen",
                            "gainsboro",
                            "ghostwhite",
                            "gold",
                            "goldenrod",
                            "greenyellow",
                            "grey",
                            "honeydew",
                            "hotpink",
                            "indianred",
                            "indigo",
                            "ivory",
                            "khaki",
                            "lavender",
                            "lavenderblush",
                            "lawngreen",
                            "lemonchiffon",
                            "lightblue",
                            "lightcoral",
                            "lightcyan",
                            "lightgoldenrodyellow",
                            "lightgray",
                            "lightgreen",
                            "lightgrey",
                            "lightpink",
                            "lightsalmon",
                            "lightseagreen",
                            "lightskyblue",
                            "lightslategray",
                            "lightslategrey",
                            "lightsteelblue",
                            "lightyellow",
                            "limegreen",
                            "linen",
                            "magenta",
                            "mediumaquamarine",
                            "mediumblue",
                            "mediumorchid",
                            "mediumpurple",
                            "mediumseagreen",
                            "mediumslateblue",
                            "mediumspringgreen",
                            "mediumturquoise",
                            "mediumvioletred",
                            "midnightblue",
                            "mintcream",
                            "mistyrose",
                            "moccasin",
                            "navajowhite",
                            "oldlace",
                            "olivedrab",
                            "orangered",
                            "orchid",
                            "palegoldenrod",
                            "palegreen",
                            "paleturquoise",
                            "palevioletred",
                            "papayawhip",
                            "peachpuff",
                            "peru",
                            "pink",
                            "plum",
                            "powderblue",
                            "rosybrown",
                            "royalblue",
                            "saddlebrown",
                            "salmon",
                            "sandybrown",
                            "seagreen",
                            "seashell",
                            "sienna",
                            "skyblue",
                            "slateblue",
                            "slategray",
                            "slategrey",
                            "snow",
                            "springgreen",
                            "steelblue",
                            "tan",
                            "thistle",
                            "tomato",
                            "turquoise",
                            "violet",
                            "wheat",
                            "whitesmoke",
                            "yellowgreen",
                            "rebeccapurple",
                        ],
                    ],
                    Union["HexColor", str],
                    str,
                ],
                Union["ExprRef", "_ParameterProtocol", dict],
            ],
            UndefinedType,
        ] = Undefined,
        fillOpacity: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], float], UndefinedType
        ] = Undefined,
        opacity: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], float], UndefinedType
        ] = Undefined,
        stroke: Union[
            Union[
                None,
                Union[
                    "Color",
                    Union[
                        "ColorName",
                        Literal[
                            "black",
                            "silver",
                            "gray",
                            "white",
                            "maroon",
                            "red",
                            "purple",
                            "fuchsia",
                            "green",
                            "lime",
                            "olive",
                            "yellow",
                            "navy",
                            "blue",
                            "teal",
                            "aqua",
                            "orange",
                            "aliceblue",
                            "antiquewhite",
                            "aquamarine",
                            "azure",
                            "beige",
                            "bisque",
                            "blanchedalmond",
                            "blueviolet",
                            "brown",
                            "burlywood",
                            "cadetblue",
                            "chartreuse",
                            "chocolate",
                            "coral",
                            "cornflowerblue",
                            "cornsilk",
                            "crimson",
                            "cyan",
                            "darkblue",
                            "darkcyan",
                            "darkgoldenrod",
                            "darkgray",
                            "darkgreen",
                            "darkgrey",
                            "darkkhaki",
                            "darkmagenta",
                            "darkolivegreen",
                            "darkorange",
                            "darkorchid",
                            "darkred",
                            "darksalmon",
                            "darkseagreen",
                            "darkslateblue",
                            "darkslategray",
                            "darkslategrey",
                            "darkturquoise",
                            "darkviolet",
                            "deeppink",
                            "deepskyblue",
                            "dimgray",
                            "dimgrey",
                            "dodgerblue",
                            "firebrick",
                            "floralwhite",
                            "forestgreen",
                            "gainsboro",
                            "ghostwhite",
                            "gold",
                            "goldenrod",
                            "greenyellow",
                            "grey",
                            "honeydew",
                            "hotpink",
                            "indianred",
                            "indigo",
                            "ivory",
                            "khaki",
                            "lavender",
                            "lavenderblush",
                            "lawngreen",
                            "lemonchiffon",
                            "lightblue",
                            "lightcoral",
                            "lightcyan",
                            "lightgoldenrodyellow",
                            "lightgray",
                            "lightgreen",
                            "lightgrey",
                            "lightpink",
                            "lightsalmon",
                            "lightseagreen",
                            "lightskyblue",
                            "lightslategray",
                            "lightslategrey",
                            "lightsteelblue",
                            "lightyellow",
                            "limegreen",
                            "linen",
                            "magenta",
                            "mediumaquamarine",
                            "mediumblue",
                            "mediumorchid",
                            "mediumpurple",
                            "mediumseagreen",
                            "mediumslateblue",
                            "mediumspringgreen",
                            "mediumturquoise",
                            "mediumvioletred",
                            "midnightblue",
                            "mintcream",
                            "mistyrose",
                            "moccasin",
                            "navajowhite",
                            "oldlace",
                            "olivedrab",
                            "orangered",
                            "orchid",
                            "palegoldenrod",
                            "palegreen",
                            "paleturquoise",
                            "palevioletred",
                            "papayawhip",
                            "peachpuff",
                            "peru",
                            "pink",
                            "plum",
                            "powderblue",
                            "rosybrown",
                            "royalblue",
                            "saddlebrown",
                            "salmon",
                            "sandybrown",
                            "seagreen",
                            "seashell",
                            "sienna",
                            "skyblue",
                            "slateblue",
                            "slategray",
                            "slategrey",
                            "snow",
                            "springgreen",
                            "steelblue",
                            "tan",
                            "thistle",
                            "tomato",
                            "turquoise",
                            "violet",
                            "wheat",
                            "whitesmoke",
                            "yellowgreen",
                            "rebeccapurple",
                        ],
                    ],
                    Union["HexColor", str],
                    str,
                ],
                Union["ExprRef", "_ParameterProtocol", dict],
            ],
            UndefinedType,
        ] = Undefined,
        strokeCap: Union[
            Union[
                Union["ExprRef", "_ParameterProtocol", dict],
                Union["StrokeCap", Literal["butt", "round", "square"]],
            ],
            UndefinedType,
        ] = Undefined,
        strokeDash: Union[
            Union[List[float], Union["ExprRef", "_ParameterProtocol", dict]],
            UndefinedType,
        ] = Undefined,
        strokeDashOffset: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], float], UndefinedType
        ] = Undefined,
        strokeJoin: Union[
            Union[
                Union["ExprRef", "_ParameterProtocol", dict],
                Union["StrokeJoin", Literal["miter", "round", "bevel"]],
            ],
            UndefinedType,
        ] = Undefined,
        strokeMiterLimit: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], float], UndefinedType
        ] = Undefined,
        strokeOpacity: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], float], UndefinedType
        ] = Undefined,
        strokeWidth: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], float], UndefinedType
        ] = Undefined,
        style: Union[Union[List[str], str], UndefinedType] = Undefined,
        **kwds
    ):
        super(ViewBackground, self).__init__(
            cornerRadius=cornerRadius,
            cursor=cursor,
            fill=fill,
            fillOpacity=fillOpacity,
            opacity=opacity,
            stroke=stroke,
            strokeCap=strokeCap,
            strokeDash=strokeDash,
            strokeDashOffset=strokeDashOffset,
            strokeJoin=strokeJoin,
            strokeMiterLimit=strokeMiterLimit,
            strokeOpacity=strokeOpacity,
            strokeWidth=strokeWidth,
            style=style,
            **kwds
        )


class ViewConfig(VegaLiteSchema):
    """ViewConfig schema wrapper

    Union[:class:`ViewConfig`, Dict[required=[]]]

    Parameters
    ----------

    clip : bool
        Whether the view should be clipped.
    continuousHeight : float
        The default height when the plot has a continuous y-field for x or latitude, or has
        arc marks.

        **Default value:** ``200``
    continuousWidth : float
        The default width when the plot has a continuous field for x or longitude, or has
        arc marks.

        **Default value:** ``200``
    cornerRadius : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], float]
        The radius in pixels of rounded rectangles or arcs' corners.

        **Default value:** ``0``
    cursor : Union[:class:`Cursor`, Literal['auto', 'default', 'none', 'context-menu', 'help', 'pointer', 'progress', 'wait', 'cell', 'crosshair', 'text', 'vertical-text', 'alias', 'copy', 'move', 'no-drop', 'not-allowed', 'e-resize', 'n-resize', 'ne-resize', 'nw-resize', 's-resize', 'se-resize', 'sw-resize', 'w-resize', 'ew-resize', 'ns-resize', 'nesw-resize', 'nwse-resize', 'col-resize', 'row-resize', 'all-scroll', 'zoom-in', 'zoom-out', 'grab', 'grabbing']]
        The mouse cursor used over the view. Any valid `CSS cursor type
        <https://developer.mozilla.org/en-US/docs/Web/CSS/cursor#Values>`__ can be used.
    discreteHeight : Union[Dict[required=[step]], float]
        The default height when the plot has non arc marks and either a discrete y-field or
        no y-field. The height can be either a number indicating a fixed height or an object
        in the form of ``{step: number}`` defining the height per discrete step.

        **Default value:** a step size based on ``config.view.step``.
    discreteWidth : Union[Dict[required=[step]], float]
        The default width when the plot has non-arc marks and either a discrete x-field or
        no x-field. The width can be either a number indicating a fixed width or an object
        in the form of ``{step: number}`` defining the width per discrete step.

        **Default value:** a step size based on ``config.view.step``.
    fill : Union[None, Union[:class:`Color`, Union[:class:`ColorName`, Literal['black', 'silver', 'gray', 'white', 'maroon', 'red', 'purple', 'fuchsia', 'green', 'lime', 'olive', 'yellow', 'navy', 'blue', 'teal', 'aqua', 'orange', 'aliceblue', 'antiquewhite', 'aquamarine', 'azure', 'beige', 'bisque', 'blanchedalmond', 'blueviolet', 'brown', 'burlywood', 'cadetblue', 'chartreuse', 'chocolate', 'coral', 'cornflowerblue', 'cornsilk', 'crimson', 'cyan', 'darkblue', 'darkcyan', 'darkgoldenrod', 'darkgray', 'darkgreen', 'darkgrey', 'darkkhaki', 'darkmagenta', 'darkolivegreen', 'darkorange', 'darkorchid', 'darkred', 'darksalmon', 'darkseagreen', 'darkslateblue', 'darkslategray', 'darkslategrey', 'darkturquoise', 'darkviolet', 'deeppink', 'deepskyblue', 'dimgray', 'dimgrey', 'dodgerblue', 'firebrick', 'floralwhite', 'forestgreen', 'gainsboro', 'ghostwhite', 'gold', 'goldenrod', 'greenyellow', 'grey', 'honeydew', 'hotpink', 'indianred', 'indigo', 'ivory', 'khaki', 'lavender', 'lavenderblush', 'lawngreen', 'lemonchiffon', 'lightblue', 'lightcoral', 'lightcyan', 'lightgoldenrodyellow', 'lightgray', 'lightgreen', 'lightgrey', 'lightpink', 'lightsalmon', 'lightseagreen', 'lightskyblue', 'lightslategray', 'lightslategrey', 'lightsteelblue', 'lightyellow', 'limegreen', 'linen', 'magenta', 'mediumaquamarine', 'mediumblue', 'mediumorchid', 'mediumpurple', 'mediumseagreen', 'mediumslateblue', 'mediumspringgreen', 'mediumturquoise', 'mediumvioletred', 'midnightblue', 'mintcream', 'mistyrose', 'moccasin', 'navajowhite', 'oldlace', 'olivedrab', 'orangered', 'orchid', 'palegoldenrod', 'palegreen', 'paleturquoise', 'palevioletred', 'papayawhip', 'peachpuff', 'peru', 'pink', 'plum', 'powderblue', 'rosybrown', 'royalblue', 'saddlebrown', 'salmon', 'sandybrown', 'seagreen', 'seashell', 'sienna', 'skyblue', 'slateblue', 'slategray', 'slategrey', 'snow', 'springgreen', 'steelblue', 'tan', 'thistle', 'tomato', 'turquoise', 'violet', 'wheat', 'whitesmoke', 'yellowgreen', 'rebeccapurple']], Union[:class:`HexColor`, str], str], Union[:class:`ExprRef`, Dict[required=[expr]]]]
        The fill color.

        **Default value:** ``undefined``
    fillOpacity : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], float]
        The fill opacity (value between [0,1]).

        **Default value:** ``1``
    opacity : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], float]
        The overall opacity (value between [0,1]).

        **Default value:** ``0.7`` for non-aggregate plots with ``point``, ``tick``,
        ``circle``, or ``square`` marks or layered ``bar`` charts and ``1`` otherwise.
    step : float
        Default step size for x-/y- discrete fields.
    stroke : Union[None, Union[:class:`Color`, Union[:class:`ColorName`, Literal['black', 'silver', 'gray', 'white', 'maroon', 'red', 'purple', 'fuchsia', 'green', 'lime', 'olive', 'yellow', 'navy', 'blue', 'teal', 'aqua', 'orange', 'aliceblue', 'antiquewhite', 'aquamarine', 'azure', 'beige', 'bisque', 'blanchedalmond', 'blueviolet', 'brown', 'burlywood', 'cadetblue', 'chartreuse', 'chocolate', 'coral', 'cornflowerblue', 'cornsilk', 'crimson', 'cyan', 'darkblue', 'darkcyan', 'darkgoldenrod', 'darkgray', 'darkgreen', 'darkgrey', 'darkkhaki', 'darkmagenta', 'darkolivegreen', 'darkorange', 'darkorchid', 'darkred', 'darksalmon', 'darkseagreen', 'darkslateblue', 'darkslategray', 'darkslategrey', 'darkturquoise', 'darkviolet', 'deeppink', 'deepskyblue', 'dimgray', 'dimgrey', 'dodgerblue', 'firebrick', 'floralwhite', 'forestgreen', 'gainsboro', 'ghostwhite', 'gold', 'goldenrod', 'greenyellow', 'grey', 'honeydew', 'hotpink', 'indianred', 'indigo', 'ivory', 'khaki', 'lavender', 'lavenderblush', 'lawngreen', 'lemonchiffon', 'lightblue', 'lightcoral', 'lightcyan', 'lightgoldenrodyellow', 'lightgray', 'lightgreen', 'lightgrey', 'lightpink', 'lightsalmon', 'lightseagreen', 'lightskyblue', 'lightslategray', 'lightslategrey', 'lightsteelblue', 'lightyellow', 'limegreen', 'linen', 'magenta', 'mediumaquamarine', 'mediumblue', 'mediumorchid', 'mediumpurple', 'mediumseagreen', 'mediumslateblue', 'mediumspringgreen', 'mediumturquoise', 'mediumvioletred', 'midnightblue', 'mintcream', 'mistyrose', 'moccasin', 'navajowhite', 'oldlace', 'olivedrab', 'orangered', 'orchid', 'palegoldenrod', 'palegreen', 'paleturquoise', 'palevioletred', 'papayawhip', 'peachpuff', 'peru', 'pink', 'plum', 'powderblue', 'rosybrown', 'royalblue', 'saddlebrown', 'salmon', 'sandybrown', 'seagreen', 'seashell', 'sienna', 'skyblue', 'slateblue', 'slategray', 'slategrey', 'snow', 'springgreen', 'steelblue', 'tan', 'thistle', 'tomato', 'turquoise', 'violet', 'wheat', 'whitesmoke', 'yellowgreen', 'rebeccapurple']], Union[:class:`HexColor`, str], str], Union[:class:`ExprRef`, Dict[required=[expr]]]]
        The stroke color.

        **Default value:** ``"#ddd"``
    strokeCap : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], Union[:class:`StrokeCap`, Literal['butt', 'round', 'square']]]
        The stroke cap for line ending style. One of ``"butt"``, ``"round"``, or
        ``"square"``.

        **Default value:** ``"butt"``
    strokeDash : Union[List[float], Union[:class:`ExprRef`, Dict[required=[expr]]]]
        An array of alternating stroke, space lengths for creating dashed or dotted lines.
    strokeDashOffset : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], float]
        The offset (in pixels) into which to begin drawing with the stroke dash array.
    strokeJoin : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], Union[:class:`StrokeJoin`, Literal['miter', 'round', 'bevel']]]
        The stroke line join method. One of ``"miter"``, ``"round"`` or ``"bevel"``.

        **Default value:** ``"miter"``
    strokeMiterLimit : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], float]
        The miter limit at which to bevel a line join.
    strokeOpacity : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], float]
        The stroke opacity (value between [0,1]).

        **Default value:** ``1``
    strokeWidth : Union[Union[:class:`ExprRef`, Dict[required=[expr]]], float]
        The stroke width, in pixels.
    """

    _schema = {"$ref": "#/definitions/ViewConfig"}

    def __init__(
        self,
        clip: Union[bool, UndefinedType] = Undefined,
        continuousHeight: Union[float, UndefinedType] = Undefined,
        continuousWidth: Union[float, UndefinedType] = Undefined,
        cornerRadius: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], float], UndefinedType
        ] = Undefined,
        cursor: Union[
            Union[
                "Cursor",
                Literal[
                    "auto",
                    "default",
                    "none",
                    "context-menu",
                    "help",
                    "pointer",
                    "progress",
                    "wait",
                    "cell",
                    "crosshair",
                    "text",
                    "vertical-text",
                    "alias",
                    "copy",
                    "move",
                    "no-drop",
                    "not-allowed",
                    "e-resize",
                    "n-resize",
                    "ne-resize",
                    "nw-resize",
                    "s-resize",
                    "se-resize",
                    "sw-resize",
                    "w-resize",
                    "ew-resize",
                    "ns-resize",
                    "nesw-resize",
                    "nwse-resize",
                    "col-resize",
                    "row-resize",
                    "all-scroll",
                    "zoom-in",
                    "zoom-out",
                    "grab",
                    "grabbing",
                ],
            ],
            UndefinedType,
        ] = Undefined,
        discreteHeight: Union[Union[dict, float], UndefinedType] = Undefined,
        discreteWidth: Union[Union[dict, float], UndefinedType] = Undefined,
        fill: Union[
            Union[
                None,
                Union[
                    "Color",
                    Union[
                        "ColorName",
                        Literal[
                            "black",
                            "silver",
                            "gray",
                            "white",
                            "maroon",
                            "red",
                            "purple",
                            "fuchsia",
                            "green",
                            "lime",
                            "olive",
                            "yellow",
                            "navy",
                            "blue",
                            "teal",
                            "aqua",
                            "orange",
                            "aliceblue",
                            "antiquewhite",
                            "aquamarine",
                            "azure",
                            "beige",
                            "bisque",
                            "blanchedalmond",
                            "blueviolet",
                            "brown",
                            "burlywood",
                            "cadetblue",
                            "chartreuse",
                            "chocolate",
                            "coral",
                            "cornflowerblue",
                            "cornsilk",
                            "crimson",
                            "cyan",
                            "darkblue",
                            "darkcyan",
                            "darkgoldenrod",
                            "darkgray",
                            "darkgreen",
                            "darkgrey",
                            "darkkhaki",
                            "darkmagenta",
                            "darkolivegreen",
                            "darkorange",
                            "darkorchid",
                            "darkred",
                            "darksalmon",
                            "darkseagreen",
                            "darkslateblue",
                            "darkslategray",
                            "darkslategrey",
                            "darkturquoise",
                            "darkviolet",
                            "deeppink",
                            "deepskyblue",
                            "dimgray",
                            "dimgrey",
                            "dodgerblue",
                            "firebrick",
                            "floralwhite",
                            "forestgreen",
                            "gainsboro",
                            "ghostwhite",
                            "gold",
                            "goldenrod",
                            "greenyellow",
                            "grey",
                            "honeydew",
                            "hotpink",
                            "indianred",
                            "indigo",
                            "ivory",
                            "khaki",
                            "lavender",
                            "lavenderblush",
                            "lawngreen",
                            "lemonchiffon",
                            "lightblue",
                            "lightcoral",
                            "lightcyan",
                            "lightgoldenrodyellow",
                            "lightgray",
                            "lightgreen",
                            "lightgrey",
                            "lightpink",
                            "lightsalmon",
                            "lightseagreen",
                            "lightskyblue",
                            "lightslategray",
                            "lightslategrey",
                            "lightsteelblue",
                            "lightyellow",
                            "limegreen",
                            "linen",
                            "magenta",
                            "mediumaquamarine",
                            "mediumblue",
                            "mediumorchid",
                            "mediumpurple",
                            "mediumseagreen",
                            "mediumslateblue",
                            "mediumspringgreen",
                            "mediumturquoise",
                            "mediumvioletred",
                            "midnightblue",
                            "mintcream",
                            "mistyrose",
                            "moccasin",
                            "navajowhite",
                            "oldlace",
                            "olivedrab",
                            "orangered",
                            "orchid",
                            "palegoldenrod",
                            "palegreen",
                            "paleturquoise",
                            "palevioletred",
                            "papayawhip",
                            "peachpuff",
                            "peru",
                            "pink",
                            "plum",
                            "powderblue",
                            "rosybrown",
                            "royalblue",
                            "saddlebrown",
                            "salmon",
                            "sandybrown",
                            "seagreen",
                            "seashell",
                            "sienna",
                            "skyblue",
                            "slateblue",
                            "slategray",
                            "slategrey",
                            "snow",
                            "springgreen",
                            "steelblue",
                            "tan",
                            "thistle",
                            "tomato",
                            "turquoise",
                            "violet",
                            "wheat",
                            "whitesmoke",
                            "yellowgreen",
                            "rebeccapurple",
                        ],
                    ],
                    Union["HexColor", str],
                    str,
                ],
                Union["ExprRef", "_ParameterProtocol", dict],
            ],
            UndefinedType,
        ] = Undefined,
        fillOpacity: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], float], UndefinedType
        ] = Undefined,
        opacity: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], float], UndefinedType
        ] = Undefined,
        step: Union[float, UndefinedType] = Undefined,
        stroke: Union[
            Union[
                None,
                Union[
                    "Color",
                    Union[
                        "ColorName",
                        Literal[
                            "black",
                            "silver",
                            "gray",
                            "white",
                            "maroon",
                            "red",
                            "purple",
                            "fuchsia",
                            "green",
                            "lime",
                            "olive",
                            "yellow",
                            "navy",
                            "blue",
                            "teal",
                            "aqua",
                            "orange",
                            "aliceblue",
                            "antiquewhite",
                            "aquamarine",
                            "azure",
                            "beige",
                            "bisque",
                            "blanchedalmond",
                            "blueviolet",
                            "brown",
                            "burlywood",
                            "cadetblue",
                            "chartreuse",
                            "chocolate",
                            "coral",
                            "cornflowerblue",
                            "cornsilk",
                            "crimson",
                            "cyan",
                            "darkblue",
                            "darkcyan",
                            "darkgoldenrod",
                            "darkgray",
                            "darkgreen",
                            "darkgrey",
                            "darkkhaki",
                            "darkmagenta",
                            "darkolivegreen",
                            "darkorange",
                            "darkorchid",
                            "darkred",
                            "darksalmon",
                            "darkseagreen",
                            "darkslateblue",
                            "darkslategray",
                            "darkslategrey",
                            "darkturquoise",
                            "darkviolet",
                            "deeppink",
                            "deepskyblue",
                            "dimgray",
                            "dimgrey",
                            "dodgerblue",
                            "firebrick",
                            "floralwhite",
                            "forestgreen",
                            "gainsboro",
                            "ghostwhite",
                            "gold",
                            "goldenrod",
                            "greenyellow",
                            "grey",
                            "honeydew",
                            "hotpink",
                            "indianred",
                            "indigo",
                            "ivory",
                            "khaki",
                            "lavender",
                            "lavenderblush",
                            "lawngreen",
                            "lemonchiffon",
                            "lightblue",
                            "lightcoral",
                            "lightcyan",
                            "lightgoldenrodyellow",
                            "lightgray",
                            "lightgreen",
                            "lightgrey",
                            "lightpink",
                            "lightsalmon",
                            "lightseagreen",
                            "lightskyblue",
                            "lightslategray",
                            "lightslategrey",
                            "lightsteelblue",
                            "lightyellow",
                            "limegreen",
                            "linen",
                            "magenta",
                            "mediumaquamarine",
                            "mediumblue",
                            "mediumorchid",
                            "mediumpurple",
                            "mediumseagreen",
                            "mediumslateblue",
                            "mediumspringgreen",
                            "mediumturquoise",
                            "mediumvioletred",
                            "midnightblue",
                            "mintcream",
                            "mistyrose",
                            "moccasin",
                            "navajowhite",
                            "oldlace",
                            "olivedrab",
                            "orangered",
                            "orchid",
                            "palegoldenrod",
                            "palegreen",
                            "paleturquoise",
                            "palevioletred",
                            "papayawhip",
                            "peachpuff",
                            "peru",
                            "pink",
                            "plum",
                            "powderblue",
                            "rosybrown",
                            "royalblue",
                            "saddlebrown",
                            "salmon",
                            "sandybrown",
                            "seagreen",
                            "seashell",
                            "sienna",
                            "skyblue",
                            "slateblue",
                            "slategray",
                            "slategrey",
                            "snow",
                            "springgreen",
                            "steelblue",
                            "tan",
                            "thistle",
                            "tomato",
                            "turquoise",
                            "violet",
                            "wheat",
                            "whitesmoke",
                            "yellowgreen",
                            "rebeccapurple",
                        ],
                    ],
                    Union["HexColor", str],
                    str,
                ],
                Union["ExprRef", "_ParameterProtocol", dict],
            ],
            UndefinedType,
        ] = Undefined,
        strokeCap: Union[
            Union[
                Union["ExprRef", "_ParameterProtocol", dict],
                Union["StrokeCap", Literal["butt", "round", "square"]],
            ],
            UndefinedType,
        ] = Undefined,
        strokeDash: Union[
            Union[List[float], Union["ExprRef", "_ParameterProtocol", dict]],
            UndefinedType,
        ] = Undefined,
        strokeDashOffset: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], float], UndefinedType
        ] = Undefined,
        strokeJoin: Union[
            Union[
                Union["ExprRef", "_ParameterProtocol", dict],
                Union["StrokeJoin", Literal["miter", "round", "bevel"]],
            ],
            UndefinedType,
        ] = Undefined,
        strokeMiterLimit: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], float], UndefinedType
        ] = Undefined,
        strokeOpacity: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], float], UndefinedType
        ] = Undefined,
        strokeWidth: Union[
            Union[Union["ExprRef", "_ParameterProtocol", dict], float], UndefinedType
        ] = Undefined,
        **kwds
    ):
        super(ViewConfig, self).__init__(
            clip=clip,
            continuousHeight=continuousHeight,
            continuousWidth=continuousWidth,
            cornerRadius=cornerRadius,
            cursor=cursor,
            discreteHeight=discreteHeight,
            discreteWidth=discreteWidth,
            fill=fill,
            fillOpacity=fillOpacity,
            opacity=opacity,
            step=step,
            stroke=stroke,
            strokeCap=strokeCap,
            strokeDash=strokeDash,
            strokeDashOffset=strokeDashOffset,
            strokeJoin=strokeJoin,
            strokeMiterLimit=strokeMiterLimit,
            strokeOpacity=strokeOpacity,
            strokeWidth=strokeWidth,
            **kwds
        )


class WindowEventType(VegaLiteSchema):
    """WindowEventType schema wrapper

    Union[:class:`WindowEventType`, Union[:class:`EventType`, Literal['click', 'dblclick',
    'dragenter', 'dragleave', 'dragover', 'keydown', 'keypress', 'keyup', 'mousedown',
    'mousemove', 'mouseout', 'mouseover', 'mouseup', 'mousewheel', 'timer', 'touchend',
    'touchmove', 'touchstart', 'wheel']], str]
    """

    _schema = {"$ref": "#/definitions/WindowEventType"}

    def __init__(self, *args, **kwds):
        super(WindowEventType, self).__init__(*args, **kwds)


class EventType(WindowEventType):
    """EventType schema wrapper

    Union[:class:`EventType`, Literal['click', 'dblclick', 'dragenter', 'dragleave', 'dragover',
    'keydown', 'keypress', 'keyup', 'mousedown', 'mousemove', 'mouseout', 'mouseover',
    'mouseup', 'mousewheel', 'timer', 'touchend', 'touchmove', 'touchstart', 'wheel']]
    """

    _schema = {"$ref": "#/definitions/EventType"}

    def __init__(self, *args):
        super(EventType, self).__init__(*args)


class WindowFieldDef(VegaLiteSchema):
    """WindowFieldDef schema wrapper

    Union[:class:`WindowFieldDef`, Dict[required=[op, as]]]

    Parameters
    ----------

    op : Union[Union[:class:`AggregateOp`, Literal['argmax', 'argmin', 'average', 'count', 'distinct', 'max', 'mean', 'median', 'min', 'missing', 'product', 'q1', 'q3', 'ci0', 'ci1', 'stderr', 'stdev', 'stdevp', 'sum', 'valid', 'values', 'variance', 'variancep']], Union[:class:`WindowOnlyOp`, Literal['row_number', 'rank', 'dense_rank', 'percent_rank', 'cume_dist', 'ntile', 'lag', 'lead', 'first_value', 'last_value', 'nth_value']]]
        The window or aggregation operation to apply within a window (e.g., ``"rank"``,
        ``"lead"``, ``"sum"``, ``"average"`` or ``"count"`` ). See the list of all supported
        operations `here <https://vega.github.io/vega-lite/docs/window.html#ops>`__.
    field : Union[:class:`FieldName`, str]
        The data field for which to compute the aggregate or window function. This can be
        omitted for window functions that do not operate over a field such as ``"count"``,
        ``"rank"``, ``"dense_rank"``.
    param : float
        Parameter values for the window functions. Parameter values can be omitted for
        operations that do not accept a parameter.

        See the list of all supported operations and their parameters `here
        <https://vega.github.io/vega-lite/docs/transforms/window.html>`__.
    as : Union[:class:`FieldName`, str]
        The output name for the window operation.
    """

    _schema = {"$ref": "#/definitions/WindowFieldDef"}

    def __init__(
        self,
        op: Union[
            Union[
                Union[
                    "AggregateOp",
                    Literal[
                        "argmax",
                        "argmin",
                        "average",
                        "count",
                        "distinct",
                        "max",
                        "mean",
                        "median",
                        "min",
                        "missing",
                        "product",
                        "q1",
                        "q3",
                        "ci0",
                        "ci1",
                        "stderr",
                        "stdev",
                        "stdevp",
                        "sum",
                        "valid",
                        "values",
                        "variance",
                        "variancep",
                    ],
                ],
                Union[
                    "WindowOnlyOp",
                    Literal[
                        "row_number",
                        "rank",
                        "dense_rank",
                        "percent_rank",
                        "cume_dist",
                        "ntile",
                        "lag",
                        "lead",
                        "first_value",
                        "last_value",
                        "nth_value",
                    ],
                ],
            ],
            UndefinedType,
        ] = Undefined,
        field: Union[Union["FieldName", str], UndefinedType] = Undefined,
        param: Union[float, UndefinedType] = Undefined,
        **kwds
    ):
        super(WindowFieldDef, self).__init__(op=op, field=field, param=param, **kwds)


class WindowOnlyOp(VegaLiteSchema):
    """WindowOnlyOp schema wrapper

    Union[:class:`WindowOnlyOp`, Literal['row_number', 'rank', 'dense_rank', 'percent_rank',
    'cume_dist', 'ntile', 'lag', 'lead', 'first_value', 'last_value', 'nth_value']]
    """

    _schema = {"$ref": "#/definitions/WindowOnlyOp"}

    def __init__(self, *args):
        super(WindowOnlyOp, self).__init__(*args)


class WindowTransform(Transform):
    """WindowTransform schema wrapper

    Union[:class:`WindowTransform`, Dict[required=[window]]]

    Parameters
    ----------

    window : List[Union[:class:`WindowFieldDef`, Dict[required=[op, as]]]]
        The definition of the fields in the window, and what calculations to use.
    frame : List[Union[None, float]]
        A frame specification as a two-element array indicating how the sliding window
        should proceed. The array entries should either be a number indicating the offset
        from the current data object, or null to indicate unbounded rows preceding or
        following the current data object. The default value is ``[null, 0]``, indicating
        that the sliding window includes the current object and all preceding objects. The
        value ``[-5, 5]`` indicates that the window should include five objects preceding
        and five objects following the current object. Finally, ``[null, null]`` indicates
        that the window frame should always include all data objects. If you this frame and
        want to assign the same value to add objects, you can use the simpler `join
        aggregate transform <https://vega.github.io/vega-lite/docs/joinaggregate.html>`__.
        The only operators affected are the aggregation operations and the ``first_value``,
        ``last_value``, and ``nth_value`` window operations. The other window operations are
        not affected by this.

        **Default value:** :  ``[null, 0]`` (includes the current object and all preceding
        objects)
    groupby : List[Union[:class:`FieldName`, str]]
        The data fields for partitioning the data objects into separate windows. If
        unspecified, all data points will be in a single window.
    ignorePeers : bool
        Indicates if the sliding window frame should ignore peer values (data that are
        considered identical by the sort criteria). The default is false, causing the window
        frame to expand to include all peer values. If set to true, the window frame will be
        defined by offset values only. This setting only affects those operations that
        depend on the window frame, namely aggregation operations and the first_value,
        last_value, and nth_value window operations.

        **Default value:** ``false``
    sort : List[Union[:class:`SortField`, Dict[required=[field]]]]
        A sort field definition for sorting data objects within a window. If two data
        objects are considered equal by the comparator, they are considered "peer" values of
        equal rank. If sort is not specified, the order is undefined: data objects are
        processed in the order they are observed and none are considered peers (the
        ignorePeers parameter is ignored and treated as if set to ``true`` ).
    """

    _schema = {"$ref": "#/definitions/WindowTransform"}

    def __init__(
        self,
        window: Union[
            Union[List["WindowFieldDef"], List[dict]], UndefinedType
        ] = Undefined,
        frame: Union[Union[List[None], List[float]], UndefinedType] = Undefined,
        groupby: Union[Union[List["FieldName"], List[str]], UndefinedType] = Undefined,
        ignorePeers: Union[bool, UndefinedType] = Undefined,
        sort: Union[Union[List["SortField"], List[dict]], UndefinedType] = Undefined,
        **kwds
    ):
        super(WindowTransform, self).__init__(
            window=window,
            frame=frame,
            groupby=groupby,
            ignorePeers=ignorePeers,
            sort=sort,
            **kwds
        )
